<Objs Version="1.1.0.1" xmlns="http://schemas.microsoft.com/powershell/2004/04">
  <Obj RefId="0">
    <TN RefId="0">
      <T>System.Management.Automation.FunctionInfo</T>
      <T>System.Management.Automation.CommandInfo</T>
      <T>System.Object</T>
    </TN>
    <ToString>A:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="1">
        <TN RefId="1">
          <T>System.Management.Automation.ScopedItemOptions</T>
          <T>System.Enum</T>
          <T>System.ValueType</T>
          <T>System.Object</T>
        </TN>
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2">
        <TN RefId="2">
          <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Management.Automation.PSTypeName, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
          <T>System.Object</T>
        </TN>
        <LST />
      </Obj>
      <S N="Name">A:</S>
      <Obj N="CommandType" RefId="3">
        <TN RefId="3">
          <T>System.Management.Automation.CommandTypes</T>
          <T>System.Enum</T>
          <T>System.ValueType</T>
          <T>System.Object</T>
        </TN>
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4">
        <TN RefId="4">
          <T>System.Management.Automation.SessionStateEntryVisibility</T>
          <T>System.Enum</T>
          <T>System.ValueType</T>
          <T>System.Object</T>
        </TN>
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5">
        <TN RefId="5">
          <T>System.Management.Automation.RemotingCapability</T>
          <T>System.Enum</T>
          <T>System.ValueType</T>
          <T>System.Object</T>
        </TN>
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="6">
        <TN RefId="6">
          <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.ParameterMetadata, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
          <T>System.Object</T>
        </TN>
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="7">
        <TN RefId="7">
          <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Management.Automation.CommandParameterSetInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
          <T>System.Object</T>
        </TN>
        <LST>
          <Obj RefId="8">
            <TN RefId="8">
              <T>System.Management.Automation.CommandParameterSetInfo</T>
              <T>System.Object</T>
            </TN>
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="9">
                <TN RefId="9">
                  <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Management.Automation.CommandParameterInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
                  <T>System.Object</T>
                </TN>
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::A:</S>
      <Obj N="PSDrive" RefId="10">
        <TN RefId="10">
          <T>System.Management.Automation.PSDriveInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>Function</ToString>
        <Props>
          <S N="CurrentLocation"></S>
          <S N="Name">Function</S>
          <Obj N="Provider" RefId="11">
            <TN RefId="11">
              <T>System.Management.Automation.ProviderInfo</T>
              <T>System.Object</T>
            </TN>
            <ToString>Microsoft.PowerShell.Core\Function</ToString>
            <Props>
              <S N="ImplementingType">Microsoft.PowerShell.Commands.FunctionProvider</S>
              <S N="HelpFile">System.Management.Automation.dll-Help.xml</S>
              <S N="Name">Function</S>
              <S N="PSSnapIn">Microsoft.PowerShell.Core</S>
              <S N="ModuleName">Microsoft.PowerShell.Core</S>
              <Nil N="Module" />
              <S N="Description"></S>
              <S N="Capabilities">ShouldProcess</S>
              <S N="Home"></S>
              <Obj N="Drives" RefId="12">
                <TN RefId="12">
                  <T>System.Collections.ObjectModel.Collection`1[[System.Management.Automation.PSDriveInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
                  <T>System.Object</T>
                </TN>
                <LST>
                  <Ref RefId="10" />
                </LST>
              </Obj>
              <B N="VolumeSeparatedByColon">true</B>
              <C N="ItemSeparator">92</C>
              <C N="AltItemSeparator">47</C>
            </Props>
          </Obj>
          <S N="Root"></S>
          <S N="Description">Drive that contains a view of the functions stored in a session state</S>
          <Nil N="MaximumSize" />
          <Obj N="Credential" RefId="13">
            <TN RefId="13">
              <T>System.Management.Automation.PSCredential</T>
              <T>System.Object</T>
            </TN>
            <ToString>System.Management.Automation.PSCredential</ToString>
            <Props>
              <Nil N="UserName" />
              <Nil N="Password" />
            </Props>
          </Obj>
          <Nil N="DisplayRoot" />
          <B N="VolumeSeparatedByColon">true</B>
        </Props>
        <MS>
          <Obj N="Used" RefId="14">
            <TN RefId="14">
              <T>System.Management.Automation.PSCustomObject</T>
              <T>System.Object</T>
            </TN>
          </Obj>
          <Ref N="Free" RefId="14" />
        </MS>
      </Obj>
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="15">
    <TNRef RefId="0" />
    <ToString>Add-ConditionalFormatting</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [Alias("Range")]_x000D__x000A_        $Address ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "NamedRule", Position = 1)]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType]$RuleType ,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [Alias("ForegroundColour","FontColor")]_x000D__x000A_        $ForegroundColor,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "DataBar")]_x000D__x000A_        [Alias("DataBarColour")]_x000D__x000A_        $DataBarColor,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "ThreeIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType]$ThreeIconsSet,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "FourIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType]$FourIconsSet,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "FiveIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType]$FiveIconsSet,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [Parameter(ParameterSetName = "ThreeIconSet")]_x000D__x000A_        [Parameter(ParameterSetName = "FourIconSet")]_x000D__x000A_        [Parameter(ParameterSetName = "FiveIconSet")]_x000D__x000A_        [switch]$Reverse,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule",Position = 2)]_x000D__x000A_        $ConditionValue,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule",Position = 3)]_x000D__x000A_        $ConditionValue2,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::None ,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Bold,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Italic,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Underline,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$StrikeThru,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$StopIfTrue,_x000D__x000A_        [int]$Priority,_x000D__x000A_        [switch]$PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    #Allow conditional formatting to work like Set-ExcelRange (with single ADDRESS parameter), split it to get worksheet and range of cells._x000D__x000A_    if ($Address -is [OfficeOpenXml.Table.ExcelTable]) {_x000D__x000A_            $Worksheet = $Address.Address.Worksheet_x000D__x000A_            $Address   = $Address.Address.Address_x000D__x000A_    }_x000D__x000A_    elseif  ($Address.Address -and $Address.Worksheet -and -not $Worksheet) { #Address is a rangebase or similar_x000D__x000A_        $Worksheet = $Address.Worksheet[0]_x000D__x000A_        $Address   = $Address.Address_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [String] -and $Worksheet -and $Worksheet.Names[$Address] ) { #Address is the name of a named range._x000D__x000A_        $Address = $Worksheet.Names[$Address].Address_x000D__x000A_    }_x000D__x000A_    if (($Address -is [OfficeOpenXml.ExcelRow]    -and -not $Worksheet) -or_x000D__x000A_        ($Address -is [OfficeOpenXml.ExcelColumn] -and -not $Worksheet) ){  #EPPLUs Can't get the worksheet object from a row or column object, so bail if that was tried_x000D__x000A_        Write-Warning -Message "Add-ConditionalFormatting does not support Row or Column objects as an address; use a worksheet and/or specify 'R:R' or 'C:C' instead. "; return_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [OfficeOpenXml.ExcelRow]) {  #But if we have a column or row object and a worksheet (I don't know *why*) turn them into a string for the range_x000D__x000A_            $Address = "$($Address.Row):$($Address.Row)"_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [OfficeOpenXml.ExcelColumn]) {_x000D__x000A_        $Address = (New-Object 'OfficeOpenXml.ExcelAddress' @(1, $address.ColumnMin, 1, $address.ColumnMax).Address) -replace '1',''_x000D__x000A_        if ($Address -notmatch ':') {$Address = "$Address`:$Address"}_x000D__x000A_    }_x000D__x000A_    if ( $Address -is [string] -and $Address -match "!") {$Address = $Address -replace '^.*!',''}_x000D__x000A_    #By this point we should have a worksheet object whose ConditionalFormatting collection we will add to. If not, bail._x000D__x000A_    if (-not $worksheet -or $Worksheet -isnot [OfficeOpenXml.ExcelWorksheet]) {write-warning "You need to provide a worksheet object." ; return}_x000D__x000A_    #region create a rule of the right type_x000D__x000A_    if     ($RuleType -match 'IconSet$') {Write-warning -Message "You cannot configure a Icon-Set rule in this way; please use -$RuleType &lt;SetName&gt;." ; return}_x000D__x000A_    if ($PSBoundParameters.ContainsKey("DataBarColor"  )      ) {if ($DataBarColor -is [string]) {$DataBarColor = [System.Drawing.Color]::$DataBarColor }_x000D__x000A_                                                                     $rule =  $Worksheet.ConditionalFormatting.AddDatabar(     $Address , $DataBarColor )_x000D__x000A_    }_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("ThreeIconsSet" )      ) {$rule =  $Worksheet.ConditionalFormatting.AddThreeIconSet($Address , $ThreeIconsSet)}_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("FourIconsSet"  )      ) {$rule =  $Worksheet.ConditionalFormatting.AddFourIconSet( $Address , $FourIconsSet )}_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("FiveIconsSet"  )      ) {$rule =  $Worksheet.ConditionalFormatting.AddFiveIconSet( $Address , $FiveIconsSet )}_x000D__x000A_    else                                                            {$rule = ($Worksheet.ConditionalFormatting)."Add$RuleType"($Address )                }_x000D__x000A_    if     ($Reverse)  {_x000D__x000A_            if     ($rule.type -match 'IconSet$'   )                {$rule.reverse = $true}_x000D__x000A_            elseif ($rule.type -match 'ColorScale$')                {$temp =$rule.LowValue.Color ; $rule.LowValue.Color = $rule.HighValue.Color; $rule.HighValue.Color = $temp}_x000D__x000A_            else   {Write-Warning -Message "-Reverse was ignored because $RuleType does not support it."}_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A_    #region set the rule conditions_x000D__x000A_    #for lessThan/GreaterThan/Equal/Between conditions make sure that strings are wrapped in quotes. Formulas should be passed with = which will be stripped._x000D__x000A_    if     ($RuleType -match "Than|Equal|Between" ) {_x000D__x000A_        if  ($PSBoundParameters.ContainsKey("ConditionValue" )) {_x000D__x000A_                $number = $Null_x000D__x000A_                #if the condition type is not a value type, but parses as a number, make it the number_x000D__x000A_                if ($ConditionValue -isnot [System.ValueType] -and [Double]::TryParse($ConditionValue, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number) ) {_x000D__x000A_                         $ConditionValue  = $number_x000D__x000A_                } #else if it is not a value type, or a formula, or wrapped in quotes, wrap it in quotes._x000D__x000A_                elseif (($ConditionValue -isnot [System.ValueType])-and ($ConditionValue  -notmatch '^=') -and ($ConditionValue  -notmatch '^".*"$') ) {_x000D__x000A_                         $ConditionValue  = '"' + $ConditionValue +'"'_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_        if  ($PSBoundParameters.ContainsKey("ConditionValue2")) {_x000D__x000A_                $number = $Null_x000D__x000A_                if ($ConditionValue -isnot [System.ValueType] -and [Double]::TryParse($ConditionValue2, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number) ) {_x000D__x000A_                         $ConditionValue2 = $number_x000D__x000A_                }_x000D__x000A_                elseif (($ConditionValue -isnot [System.ValueType]) -and ($ConditionValue2 -notmatch '^=') -and ($ConditionValue2 -notmatch '^".*"$') ) {_x000D__x000A_                         $ConditionValue2  = '"' + $ConditionValue2 + '"'_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    #But we don't usually want quotes round containstext | beginswith type rules. Can't be Certain they need to be removed, so warn the user their condition might be wrong_x000D__x000A_    if     ($RuleType -match "Text|With" -and $ConditionValue -match '^".*"$'  ) {_x000D__x000A_            Write-Warning -Message "The condition will look for the quotes at the start and end."_x000D__x000A_    }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Top|Botom"                          ) {$rule.Rank      = $ConditionValue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "StdDev"                             ) {$rule.StdDev    = $ConditionValue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Than|Equal|Expression"              ) {$rule.Formula   = ($ConditionValue  -replace '^=','') }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Text|With"                          ) {$rule.Text      = ($ConditionValue  -replace '^=','') }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $PSBoundParameters.ContainsKey("ConditionValue2") -and_x000D__x000A_            $RuleType -match "Between"                            ) {_x000D__x000A_                                                                     $rule.Formula   = ($ConditionValue  -replace '^=','');_x000D__x000A_                                                                     $rule.Formula2  = ($ConditionValue2 -replace '^=','')_x000D__x000A_    }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("StopIfTrue")          ) {$rule.StopIfTrue = $StopIfTrue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Priority")            ) {$rule.Priority   = $Priority }_x000D__x000A_    #endregion_x000D__x000A_    #region set the rule format_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("NumberFormat"     )   ) {$rule.Style.NumberFormat.Format        = (Expand-NumberFormat  $NumberFormat)             }_x000D__x000A_    if     ($Underline                                            ) {$rule.Style.Font.Underline             = [OfficeOpenXml.Style.ExcelUnderLineType]::Single }_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("Underline"        )   ) {$rule.Style.Font.Underline             = [OfficeOpenXml.Style.ExcelUnderLineType]::None   }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Bold"             )   ) {$rule.Style.Font.Bold                  = [boolean]$Bold       }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Italic"           )   ) {$rule.Style.Font.Italic                = [boolean]$Italic     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("StrikeThru"       )   ) {$rule.Style.Font.Strike                = [boolean]$StrikeThru }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ForeGroundColor"  )   ) {if ($ForeGroundColor -is [string])      {$ForeGroundColor = [System.Drawing.Color]::$ForeGroundColor }_x000D__x000A_                                                                     $rule.Style.Font.Color.color           = $ForeGroundColor     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("BackgroundColor"  )   ) {if ($BackgroundColor -is [string])      {$BackgroundColor = [System.Drawing.Color]::$BackgroundColor }_x000D__x000A_                                                                     $rule.Style.Fill.BackgroundColor.color = $BackgroundColor     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("BackgroundPattern")   ) {$rule.Style.Fill.PatternType           = $BackgroundPattern   }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("PatternColor"     )   ) {if ($PatternColor -is [string])         {$PatternColor = [System.Drawing.Color]::$PatternColor }_x000D__x000A_                                                                     $rule.Style.Fill.PatternColor.color    = $PatternColor        }_x000D__x000A_    #endregion_x000D__x000A_    #Allow further tweaking by returning the rule, if passthru specified_x000D__x000A_    if     ($Passthru)  {$rule}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [Alias("Range")]_x000D__x000A_        $Address ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "NamedRule", Position = 1)]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType]$RuleType ,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [Alias("ForegroundColour","FontColor")]_x000D__x000A_        $ForegroundColor,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "DataBar")]_x000D__x000A_        [Alias("DataBarColour")]_x000D__x000A_        $DataBarColor,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "ThreeIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType]$ThreeIconsSet,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "FourIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType]$FourIconsSet,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "FiveIconSet")]_x000D__x000A_        [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType]$FiveIconsSet,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [Parameter(ParameterSetName = "ThreeIconSet")]_x000D__x000A_        [Parameter(ParameterSetName = "FourIconSet")]_x000D__x000A_        [Parameter(ParameterSetName = "FiveIconSet")]_x000D__x000A_        [switch]$Reverse,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule",Position = 2)]_x000D__x000A_        $ConditionValue,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule",Position = 3)]_x000D__x000A_        $ConditionValue2,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::None ,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Bold,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Italic,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$Underline,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$StrikeThru,_x000D__x000A_        [Parameter(ParameterSetName = "NamedRule")]_x000D__x000A_        [switch]$StopIfTrue,_x000D__x000A_        [int]$Priority,_x000D__x000A_        [switch]$PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    #Allow conditional formatting to work like Set-ExcelRange (with single ADDRESS parameter), split it to get worksheet and range of cells._x000D__x000A_    if ($Address -is [OfficeOpenXml.Table.ExcelTable]) {_x000D__x000A_            $Worksheet = $Address.Address.Worksheet_x000D__x000A_            $Address   = $Address.Address.Address_x000D__x000A_    }_x000D__x000A_    elseif  ($Address.Address -and $Address.Worksheet -and -not $Worksheet) { #Address is a rangebase or similar_x000D__x000A_        $Worksheet = $Address.Worksheet[0]_x000D__x000A_        $Address   = $Address.Address_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [String] -and $Worksheet -and $Worksheet.Names[$Address] ) { #Address is the name of a named range._x000D__x000A_        $Address = $Worksheet.Names[$Address].Address_x000D__x000A_    }_x000D__x000A_    if (($Address -is [OfficeOpenXml.ExcelRow]    -and -not $Worksheet) -or_x000D__x000A_        ($Address -is [OfficeOpenXml.ExcelColumn] -and -not $Worksheet) ){  #EPPLUs Can't get the worksheet object from a row or column object, so bail if that was tried_x000D__x000A_        Write-Warning -Message "Add-ConditionalFormatting does not support Row or Column objects as an address; use a worksheet and/or specify 'R:R' or 'C:C' instead. "; return_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [OfficeOpenXml.ExcelRow]) {  #But if we have a column or row object and a worksheet (I don't know *why*) turn them into a string for the range_x000D__x000A_            $Address = "$($Address.Row):$($Address.Row)"_x000D__x000A_    }_x000D__x000A_    elseif ($Address -is [OfficeOpenXml.ExcelColumn]) {_x000D__x000A_        $Address = (New-Object 'OfficeOpenXml.ExcelAddress' @(1, $address.ColumnMin, 1, $address.ColumnMax).Address) -replace '1',''_x000D__x000A_        if ($Address -notmatch ':') {$Address = "$Address`:$Address"}_x000D__x000A_    }_x000D__x000A_    if ( $Address -is [string] -and $Address -match "!") {$Address = $Address -replace '^.*!',''}_x000D__x000A_    #By this point we should have a worksheet object whose ConditionalFormatting collection we will add to. If not, bail._x000D__x000A_    if (-not $worksheet -or $Worksheet -isnot [OfficeOpenXml.ExcelWorksheet]) {write-warning "You need to provide a worksheet object." ; return}_x000D__x000A_    #region create a rule of the right type_x000D__x000A_    if     ($RuleType -match 'IconSet$') {Write-warning -Message "You cannot configure a Icon-Set rule in this way; please use -$RuleType &lt;SetName&gt;." ; return}_x000D__x000A_    if ($PSBoundParameters.ContainsKey("DataBarColor"  )      ) {if ($DataBarColor -is [string]) {$DataBarColor = [System.Drawing.Color]::$DataBarColor }_x000D__x000A_                                                                     $rule =  $Worksheet.ConditionalFormatting.AddDatabar(     $Address , $DataBarColor )_x000D__x000A_    }_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("ThreeIconsSet" )      ) {$rule =  $Worksheet.ConditionalFormatting.AddThreeIconSet($Address , $ThreeIconsSet)}_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("FourIconsSet"  )      ) {$rule =  $Worksheet.ConditionalFormatting.AddFourIconSet( $Address , $FourIconsSet )}_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("FiveIconsSet"  )      ) {$rule =  $Worksheet.ConditionalFormatting.AddFiveIconSet( $Address , $FiveIconsSet )}_x000D__x000A_    else                                                            {$rule = ($Worksheet.ConditionalFormatting)."Add$RuleType"($Address )                }_x000D__x000A_    if     ($Reverse)  {_x000D__x000A_            if     ($rule.type -match 'IconSet$'   )                {$rule.reverse = $true}_x000D__x000A_            elseif ($rule.type -match 'ColorScale$')                {$temp =$rule.LowValue.Color ; $rule.LowValue.Color = $rule.HighValue.Color; $rule.HighValue.Color = $temp}_x000D__x000A_            else   {Write-Warning -Message "-Reverse was ignored because $RuleType does not support it."}_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A_    #region set the rule conditions_x000D__x000A_    #for lessThan/GreaterThan/Equal/Between conditions make sure that strings are wrapped in quotes. Formulas should be passed with = which will be stripped._x000D__x000A_    if     ($RuleType -match "Than|Equal|Between" ) {_x000D__x000A_        if  ($PSBoundParameters.ContainsKey("ConditionValue" )) {_x000D__x000A_                $number = $Null_x000D__x000A_                #if the condition type is not a value type, but parses as a number, make it the number_x000D__x000A_                if ($ConditionValue -isnot [System.ValueType] -and [Double]::TryParse($ConditionValue, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number) ) {_x000D__x000A_                         $ConditionValue  = $number_x000D__x000A_                } #else if it is not a value type, or a formula, or wrapped in quotes, wrap it in quotes._x000D__x000A_                elseif (($ConditionValue -isnot [System.ValueType])-and ($ConditionValue  -notmatch '^=') -and ($ConditionValue  -notmatch '^".*"$') ) {_x000D__x000A_                         $ConditionValue  = '"' + $ConditionValue +'"'_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_        if  ($PSBoundParameters.ContainsKey("ConditionValue2")) {_x000D__x000A_                $number = $Null_x000D__x000A_                if ($ConditionValue -isnot [System.ValueType] -and [Double]::TryParse($ConditionValue2, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number) ) {_x000D__x000A_                         $ConditionValue2 = $number_x000D__x000A_                }_x000D__x000A_                elseif (($ConditionValue -isnot [System.ValueType]) -and ($ConditionValue2 -notmatch '^=') -and ($ConditionValue2 -notmatch '^".*"$') ) {_x000D__x000A_                         $ConditionValue2  = '"' + $ConditionValue2 + '"'_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    #But we don't usually want quotes round containstext | beginswith type rules. Can't be Certain they need to be removed, so warn the user their condition might be wrong_x000D__x000A_    if     ($RuleType -match "Text|With" -and $ConditionValue -match '^".*"$'  ) {_x000D__x000A_            Write-Warning -Message "The condition will look for the quotes at the start and end."_x000D__x000A_    }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Top|Botom"                          ) {$rule.Rank      = $ConditionValue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "StdDev"                             ) {$rule.StdDev    = $ConditionValue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Than|Equal|Expression"              ) {$rule.Formula   = ($ConditionValue  -replace '^=','') }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $RuleType -match "Text|With"                          ) {$rule.Text      = ($ConditionValue  -replace '^=','') }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ConditionValue" ) -and_x000D__x000A_            $PSBoundParameters.ContainsKey("ConditionValue2") -and_x000D__x000A_            $RuleType -match "Between"                            ) {_x000D__x000A_                                                                     $rule.Formula   = ($ConditionValue  -replace '^=','');_x000D__x000A_                                                                     $rule.Formula2  = ($ConditionValue2 -replace '^=','')_x000D__x000A_    }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("StopIfTrue")          ) {$rule.StopIfTrue = $StopIfTrue }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Priority")            ) {$rule.Priority   = $Priority }_x000D__x000A_    #endregion_x000D__x000A_    #region set the rule format_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("NumberFormat"     )   ) {$rule.Style.NumberFormat.Format        = (Expand-NumberFormat  $NumberFormat)             }_x000D__x000A_    if     ($Underline                                            ) {$rule.Style.Font.Underline             = [OfficeOpenXml.Style.ExcelUnderLineType]::Single }_x000D__x000A_    elseif ($PSBoundParameters.ContainsKey("Underline"        )   ) {$rule.Style.Font.Underline             = [OfficeOpenXml.Style.ExcelUnderLineType]::None   }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Bold"             )   ) {$rule.Style.Font.Bold                  = [boolean]$Bold       }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("Italic"           )   ) {$rule.Style.Font.Italic                = [boolean]$Italic     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("StrikeThru"       )   ) {$rule.Style.Font.Strike                = [boolean]$StrikeThru }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("ForeGroundColor"  )   ) {if ($ForeGroundColor -is [string])      {$ForeGroundColor = [System.Drawing.Color]::$ForeGroundColor }_x000D__x000A_                                                                     $rule.Style.Font.Color.color           = $ForeGroundColor     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("BackgroundColor"  )   ) {if ($BackgroundColor -is [string])      {$BackgroundColor = [System.Drawing.Color]::$BackgroundColor }_x000D__x000A_                                                                     $rule.Style.Fill.BackgroundColor.color = $BackgroundColor     }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("BackgroundPattern")   ) {$rule.Style.Fill.PatternType           = $BackgroundPattern   }_x000D__x000A_    if     ($PSBoundParameters.ContainsKey("PatternColor"     )   ) {if ($PatternColor -is [string])         {$PatternColor = [System.Drawing.Color]::$PatternColor }_x000D__x000A_                                                                     $rule.Style.Fill.PatternColor.color    = $PatternColor        }_x000D__x000A_    #endregion_x000D__x000A_    #Allow further tweaking by returning the rule, if passthru specified_x000D__x000A_    if     ($Passthru)  {$rule}_x000D__x000A_</S>
      <Obj N="Options" RefId="16">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ConditionalFormatting</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="17">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Add-ConditionalFormatting</S>
      <Obj N="CommandType" RefId="18">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="19">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Obj N="Module" RefId="20">
        <TN RefId="15">
          <T>System.Management.Automation.PSModuleInfo</T>
          <T>System.Object</T>
        </TN>
        <ToString>ImportExcel</ToString>
        <Props>
          <B N="LogPipelineExecutionDetails">false</B>
          <S N="Name">ImportExcel</S>
          <S N="Path">C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\ImportExcel.psm1</S>
          <Nil N="ImplementingAssembly" />
          <S N="Definition">#region import everything we need_x000D__x000A_$culture = $host.CurrentCulture.Name -replace '-\w*$', ''_x000D__x000A_Import-LocalizedData  -UICulture $culture -BindingVariable Strings -FileName Strings -ErrorAction Ignore_x000D__x000A_if (-not $Strings) {_x000D__x000A_    Import-LocalizedData  -UICulture "en" -BindingVariable Strings -FileName Strings -ErrorAction Ignore_x000D__x000A_}_x000D__x000A_try { [void] [System.Reflection.Assembly]::LoadWithPartialName("System.Drawing") }_x000D__x000A_catch { Write-Warning -Message $Strings.SystemDrawingAvailable }_x000D__x000A__x000D__x000A_foreach ($directory in @('Private', 'Public', 'Charting', 'InferData', 'Pivot')) {_x000D__x000A_    Get-ChildItem -Path "$PSScriptRoot\$directory\*.ps1" | ForEach-Object { . $_.FullName }_x000D__x000A_}_x000D__x000A__x000D__x000A_if ($PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_    . $PSScriptRoot\Plot.ps1_x000D__x000A__x000D__x000A_    function New-Plot {_x000D__x000A_        [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '', Justification = 'New-Plot does not change system state')]_x000D__x000A_        param()_x000D__x000A__x000D__x000A_        [PSPlot]::new()_x000D__x000A_    }_x000D__x000A__x000D__x000A_}_x000D__x000A_else {_x000D__x000A_    Write-Warning $Strings.PS5NeededForPlot_x000D__x000A_    Write-Warning $Strings.ModuleReadyExceptPlot_x000D__x000A_}_x000D__x000A__x000D__x000A_#endregion_x000D__x000A__x000D__x000A_if (($IsLinux -or $IsMacOS) -or $env:NoAutoSize) {_x000D__x000A_    $ExcelPackage = [OfficeOpenXml.ExcelPackage]::new()_x000D__x000A_    $Cells = ($ExcelPackage | Add-Worksheet).Cells['A1']_x000D__x000A_    $Cells.Value = 'Test'_x000D__x000A_    try {_x000D__x000A_        $Cells.AutoFitColumns()_x000D__x000A_        if ($env:NoAutoSize) { Remove-Item Env:\NoAutoSize }_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        $env:NoAutoSize = $true_x000D__x000A_        if ($IsLinux) {_x000D__x000A_            $msg = @"_x000D__x000A_ImportExcel Module Cannot Autosize. Please run the following command to install dependencies:_x000D__x000A_apt-get -y update &amp;&amp; apt-get install -y --no-install-recommends libgdiplus libc6-dev_x000D__x000A_"@_x000D__x000A_            Write-Warning -Message $msg_x000D__x000A_        }_x000D__x000A_        if ($IsMacOS) {_x000D__x000A_            $msg = @"_x000D__x000A_ImportExcel Module Cannot Autosize. Please run the following command to install dependencies:_x000D__x000A_brew install mono-libgdiplus_x000D__x000A_"@_x000D__x000A_            Write-Warning -Message $msg_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $ExcelPackage | Close-ExcelPackage -NoSave_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_</S>
          <S N="Description">PowerShell module to import/export Excel spreadsheets, without Excel._x000D__x000A_Check out the How To Videos https://www.youtube.com/watch?v=U3Ne_yX4tYo&amp;list=PL5uoqS92stXioZw-u-ze_NtvSo0k0K0kq</S>
          <G N="Guid">60dd4136-feff-401a-ba27-a84458c57ede</G>
          <Nil N="HelpInfoUri" />
          <S N="ModuleBase">C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1</S>
          <Obj N="PrivateData" RefId="21">
            <TN RefId="16">
              <T>System.Collections.Hashtable</T>
              <T>System.Object</T>
            </TN>
            <DCT>
              <En>
                <S N="Key">PSData</S>
                <Obj N="Value" RefId="22">
                  <TNRef RefId="16" />
                  <DCT>
                    <En>
                      <S N="Key">Tags</S>
                      <Obj N="Value" RefId="23">
                        <TN RefId="17">
                          <T>System.Object[]</T>
                          <T>System.Array</T>
                          <T>System.Object</T>
                        </TN>
                        <LST>
                          <S>Excel</S>
                          <S>EPPlus</S>
                          <S>Export</S>
                          <S>Import</S>
                        </LST>
                      </Obj>
                    </En>
                    <En>
                      <S N="Key">Category</S>
                      <S N="Value">Scripting Excel</S>
                    </En>
                    <En>
                      <S N="Key">ProjectUri</S>
                      <S N="Value">https://github.com/dfinke/ImportExcel</S>
                    </En>
                    <En>
                      <S N="Key">IsPrerelease</S>
                      <S N="Value">False</S>
                    </En>
                    <En>
                      <S N="Key">LicenseUri</S>
                      <S N="Value">https://github.com/dfinke/ImportExcel/blob/master/LICENSE.txt</S>
                    </En>
                  </DCT>
                </Obj>
              </En>
            </DCT>
          </Obj>
          <Obj N="ExperimentalFeatures" RefId="24">
            <TN RefId="18">
              <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Management.Automation.ExperimentalFeature, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <LST />
          </Obj>
          <Obj N="Tags" RefId="25">
            <TN RefId="19">
              <T>System.Collections.Generic.List`1[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
              <T>System.Object</T>
            </TN>
            <LST>
              <S>Excel</S>
              <S>EPPlus</S>
              <S>Export</S>
              <S>Import</S>
              <S>Excel</S>
              <S>EPPlus</S>
              <S>Export</S>
              <S>Import</S>
            </LST>
          </Obj>
          <URI N="ProjectUri">https://github.com/dfinke/ImportExcel</URI>
          <Nil N="IconUri" />
          <URI N="LicenseUri">https://github.com/dfinke/ImportExcel/blob/master/LICENSE.txt</URI>
          <Nil N="ReleaseNotes" />
          <URI N="RepositorySourceLocation">https://www.powershellgallery.com/api/v2</URI>
          <Version N="Version">7.1.1</Version>
          <S N="ModuleType">Script</S>
          <S N="Author">Douglas Finke</S>
          <S N="AccessMode">ReadWrite</S>
          <Nil N="ClrVersion" />
          <S N="CompanyName">Doug Finke</S>
          <S N="Copyright">c 2020 All rights reserved.</S>
          <Nil N="DotNetFrameworkVersion" />
          <Obj N="ExportedFunctions" RefId="26">
            <TN RefId="20">
              <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.FunctionInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <DCT>
              <En>
                <S N="Key">Add-ConditionalFormatting</S>
                <S N="Value">Add-ConditionalFormatting</S>
              </En>
              <En>
                <S N="Key">Add-ExcelChart</S>
                <S N="Value">Add-ExcelChart</S>
              </En>
              <En>
                <S N="Key">Add-ExcelDataValidationRule</S>
                <S N="Value">Add-ExcelDataValidationRule</S>
              </En>
              <En>
                <S N="Key">Add-ExcelName</S>
                <S N="Value">Add-ExcelName</S>
              </En>
              <En>
                <S N="Key">Add-ExcelTable</S>
                <S N="Value">Add-ExcelTable</S>
              </En>
              <En>
                <S N="Key">Add-PivotTable</S>
                <S N="Value">Add-PivotTable</S>
              </En>
              <En>
                <S N="Key">Add-Worksheet</S>
                <S N="Value">Add-Worksheet</S>
              </En>
              <En>
                <S N="Key">BarChart</S>
                <S N="Value">BarChart</S>
              </En>
              <En>
                <S N="Key">Close-ExcelPackage</S>
                <S N="Value">Close-ExcelPackage</S>
              </En>
              <En>
                <S N="Key">ColumnChart</S>
                <S N="Value">ColumnChart</S>
              </En>
              <En>
                <S N="Key">Compare-Worksheet</S>
                <S N="Value">Compare-Worksheet</S>
              </En>
              <En>
                <S N="Key">Convert-ExcelRangeToImage</S>
                <S N="Value">Convert-ExcelRangeToImage</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelData</S>
                <S N="Value">ConvertFrom-ExcelData</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelSheet</S>
                <S N="Value">ConvertFrom-ExcelSheet</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelToSQLInsert</S>
                <S N="Value">ConvertFrom-ExcelToSQLInsert</S>
              </En>
              <En>
                <S N="Key">ConvertTo-ExcelXlsx</S>
                <S N="Value">ConvertTo-ExcelXlsx</S>
              </En>
              <En>
                <S N="Key">Copy-ExcelWorksheet</S>
                <S N="Value">Copy-ExcelWorksheet</S>
              </En>
              <En>
                <S N="Key">DoChart</S>
                <S N="Value">DoChart</S>
              </En>
              <En>
                <S N="Key">Expand-NumberFormat</S>
                <S N="Value">Expand-NumberFormat</S>
              </En>
              <En>
                <S N="Key">Export-Excel</S>
                <S N="Value">Export-Excel</S>
              </En>
              <En>
                <S N="Key">Get-ExcelColumnName</S>
                <S N="Value">Get-ExcelColumnName</S>
              </En>
              <En>
                <S N="Key">Get-ExcelSheetInfo</S>
                <S N="Value">Get-ExcelSheetInfo</S>
              </En>
              <En>
                <S N="Key">Get-ExcelWorkbookInfo</S>
                <S N="Value">Get-ExcelWorkbookInfo</S>
              </En>
              <En>
                <S N="Key">Get-HtmlTable</S>
                <S N="Value">Get-HtmlTable</S>
              </En>
              <En>
                <S N="Key">Get-Range</S>
                <S N="Value">Get-Range</S>
              </En>
              <En>
                <S N="Key">Get-XYRange</S>
                <S N="Value">Get-XYRange</S>
              </En>
              <En>
                <S N="Key">Import-Excel</S>
                <S N="Value">Import-Excel</S>
              </En>
              <En>
                <S N="Key">Import-Html</S>
                <S N="Value">Import-Html</S>
              </En>
              <En>
                <S N="Key">Import-UPS</S>
                <S N="Value">Import-UPS</S>
              </En>
              <En>
                <S N="Key">Import-USPS</S>
                <S N="Value">Import-USPS</S>
              </En>
              <En>
                <S N="Key">Invoke-Sum</S>
                <S N="Value">Invoke-Sum</S>
              </En>
              <En>
                <S N="Key">Join-Worksheet</S>
                <S N="Value">Join-Worksheet</S>
              </En>
              <En>
                <S N="Key">LineChart</S>
                <S N="Value">LineChart</S>
              </En>
              <En>
                <S N="Key">Merge-MultipleSheets</S>
                <S N="Value">Merge-MultipleSheets</S>
              </En>
              <En>
                <S N="Key">Merge-Worksheet</S>
                <S N="Value">Merge-Worksheet</S>
              </En>
              <En>
                <S N="Key">New-ConditionalFormattingIconSet</S>
                <S N="Value">New-ConditionalFormattingIconSet</S>
              </En>
              <En>
                <S N="Key">New-ConditionalText</S>
                <S N="Value">New-ConditionalText</S>
              </En>
              <En>
                <S N="Key">New-ExcelChartDefinition</S>
                <S N="Value">New-ExcelChartDefinition</S>
              </En>
              <En>
                <S N="Key">New-ExcelStyle</S>
                <S N="Value">New-ExcelStyle</S>
              </En>
              <En>
                <S N="Key">New-PivotTableDefinition</S>
                <S N="Value">New-PivotTableDefinition</S>
              </En>
              <En>
                <S N="Key">New-Plot</S>
                <S N="Value">New-Plot</S>
              </En>
              <En>
                <S N="Key">New-PSItem</S>
                <S N="Value">New-PSItem</S>
              </En>
              <En>
                <S N="Key">Open-ExcelPackage</S>
                <S N="Value">Open-ExcelPackage</S>
              </En>
              <En>
                <S N="Key">PieChart</S>
                <S N="Value">PieChart</S>
              </En>
              <En>
                <S N="Key">Pivot</S>
                <S N="Value">Pivot</S>
              </En>
              <En>
                <S N="Key">Remove-Worksheet</S>
                <S N="Value">Remove-Worksheet</S>
              </En>
              <En>
                <S N="Key">Select-Worksheet</S>
                <S N="Value">Select-Worksheet</S>
              </En>
              <En>
                <S N="Key">Send-SQLDataToExcel</S>
                <S N="Value">Send-SQLDataToExcel</S>
              </En>
              <En>
                <S N="Key">Set-CellStyle</S>
                <S N="Value">Set-CellStyle</S>
              </En>
              <En>
                <S N="Key">Set-ExcelColumn</S>
                <S N="Value">Set-ExcelColumn</S>
              </En>
              <En>
                <S N="Key">Set-ExcelRange</S>
                <S N="Value">Set-ExcelRange</S>
              </En>
              <En>
                <S N="Key">Set-ExcelRow</S>
                <S N="Value">Set-ExcelRow</S>
              </En>
              <En>
                <S N="Key">Set-WorksheetProtection</S>
                <S N="Value">Set-WorksheetProtection</S>
              </En>
              <En>
                <S N="Key">Test-Boolean</S>
                <S N="Value">Test-Boolean</S>
              </En>
              <En>
                <S N="Key">Test-Date</S>
                <S N="Value">Test-Date</S>
              </En>
              <En>
                <S N="Key">Test-Integer</S>
                <S N="Value">Test-Integer</S>
              </En>
              <En>
                <S N="Key">Test-Number</S>
                <S N="Value">Test-Number</S>
              </En>
              <En>
                <S N="Key">Test-String</S>
                <S N="Value">Test-String</S>
              </En>
              <En>
                <S N="Key">Update-FirstObjectProperties</S>
                <S N="Value">Update-FirstObjectProperties</S>
              </En>
            </DCT>
          </Obj>
          <S N="Prefix"></S>
          <Obj N="ExportedCmdlets" RefId="27">
            <TN RefId="21">
              <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.CmdletInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <DCT />
          </Obj>
          <Obj N="ExportedCommands" RefId="28">
            <TN RefId="22">
              <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.CommandInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <DCT>
              <En>
                <S N="Key">Add-ConditionalFormatting</S>
                <S N="Value">Add-ConditionalFormatting</S>
              </En>
              <En>
                <S N="Key">Add-ExcelChart</S>
                <S N="Value">Add-ExcelChart</S>
              </En>
              <En>
                <S N="Key">Add-ExcelDataValidationRule</S>
                <S N="Value">Add-ExcelDataValidationRule</S>
              </En>
              <En>
                <S N="Key">Add-ExcelName</S>
                <S N="Value">Add-ExcelName</S>
              </En>
              <En>
                <S N="Key">Add-ExcelTable</S>
                <S N="Value">Add-ExcelTable</S>
              </En>
              <En>
                <S N="Key">Add-PivotTable</S>
                <S N="Value">Add-PivotTable</S>
              </En>
              <En>
                <S N="Key">Add-Worksheet</S>
                <S N="Value">Add-Worksheet</S>
              </En>
              <En>
                <S N="Key">BarChart</S>
                <S N="Value">BarChart</S>
              </En>
              <En>
                <S N="Key">Close-ExcelPackage</S>
                <S N="Value">Close-ExcelPackage</S>
              </En>
              <En>
                <S N="Key">ColumnChart</S>
                <S N="Value">ColumnChart</S>
              </En>
              <En>
                <S N="Key">Compare-Worksheet</S>
                <S N="Value">Compare-Worksheet</S>
              </En>
              <En>
                <S N="Key">Convert-ExcelRangeToImage</S>
                <S N="Value">Convert-ExcelRangeToImage</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelData</S>
                <S N="Value">ConvertFrom-ExcelData</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelSheet</S>
                <S N="Value">ConvertFrom-ExcelSheet</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ExcelToSQLInsert</S>
                <S N="Value">ConvertFrom-ExcelToSQLInsert</S>
              </En>
              <En>
                <S N="Key">ConvertTo-ExcelXlsx</S>
                <S N="Value">ConvertTo-ExcelXlsx</S>
              </En>
              <En>
                <S N="Key">Copy-ExcelWorksheet</S>
                <S N="Value">Copy-ExcelWorksheet</S>
              </En>
              <En>
                <S N="Key">DoChart</S>
                <S N="Value">DoChart</S>
              </En>
              <En>
                <S N="Key">Expand-NumberFormat</S>
                <S N="Value">Expand-NumberFormat</S>
              </En>
              <En>
                <S N="Key">Export-Excel</S>
                <S N="Value">Export-Excel</S>
              </En>
              <En>
                <S N="Key">Get-ExcelColumnName</S>
                <S N="Value">Get-ExcelColumnName</S>
              </En>
              <En>
                <S N="Key">Get-ExcelSheetInfo</S>
                <S N="Value">Get-ExcelSheetInfo</S>
              </En>
              <En>
                <S N="Key">Get-ExcelWorkbookInfo</S>
                <S N="Value">Get-ExcelWorkbookInfo</S>
              </En>
              <En>
                <S N="Key">Get-HtmlTable</S>
                <S N="Value">Get-HtmlTable</S>
              </En>
              <En>
                <S N="Key">Get-Range</S>
                <S N="Value">Get-Range</S>
              </En>
              <En>
                <S N="Key">Get-XYRange</S>
                <S N="Value">Get-XYRange</S>
              </En>
              <En>
                <S N="Key">Import-Excel</S>
                <S N="Value">Import-Excel</S>
              </En>
              <En>
                <S N="Key">Import-Html</S>
                <S N="Value">Import-Html</S>
              </En>
              <En>
                <S N="Key">Import-UPS</S>
                <S N="Value">Import-UPS</S>
              </En>
              <En>
                <S N="Key">Import-USPS</S>
                <S N="Value">Import-USPS</S>
              </En>
              <En>
                <S N="Key">Invoke-Sum</S>
                <S N="Value">Invoke-Sum</S>
              </En>
              <En>
                <S N="Key">Join-Worksheet</S>
                <S N="Value">Join-Worksheet</S>
              </En>
              <En>
                <S N="Key">LineChart</S>
                <S N="Value">LineChart</S>
              </En>
              <En>
                <S N="Key">Merge-MultipleSheets</S>
                <S N="Value">Merge-MultipleSheets</S>
              </En>
              <En>
                <S N="Key">Merge-Worksheet</S>
                <S N="Value">Merge-Worksheet</S>
              </En>
              <En>
                <S N="Key">New-ConditionalFormattingIconSet</S>
                <S N="Value">New-ConditionalFormattingIconSet</S>
              </En>
              <En>
                <S N="Key">New-ConditionalText</S>
                <S N="Value">New-ConditionalText</S>
              </En>
              <En>
                <S N="Key">New-ExcelChartDefinition</S>
                <S N="Value">New-ExcelChartDefinition</S>
              </En>
              <En>
                <S N="Key">New-ExcelStyle</S>
                <S N="Value">New-ExcelStyle</S>
              </En>
              <En>
                <S N="Key">New-PivotTableDefinition</S>
                <S N="Value">New-PivotTableDefinition</S>
              </En>
              <En>
                <S N="Key">New-Plot</S>
                <S N="Value">New-Plot</S>
              </En>
              <En>
                <S N="Key">New-PSItem</S>
                <S N="Value">New-PSItem</S>
              </En>
              <En>
                <S N="Key">Open-ExcelPackage</S>
                <S N="Value">Open-ExcelPackage</S>
              </En>
              <En>
                <S N="Key">PieChart</S>
                <S N="Value">PieChart</S>
              </En>
              <En>
                <S N="Key">Pivot</S>
                <S N="Value">Pivot</S>
              </En>
              <En>
                <S N="Key">Remove-Worksheet</S>
                <S N="Value">Remove-Worksheet</S>
              </En>
              <En>
                <S N="Key">Select-Worksheet</S>
                <S N="Value">Select-Worksheet</S>
              </En>
              <En>
                <S N="Key">Send-SQLDataToExcel</S>
                <S N="Value">Send-SQLDataToExcel</S>
              </En>
              <En>
                <S N="Key">Set-CellStyle</S>
                <S N="Value">Set-CellStyle</S>
              </En>
              <En>
                <S N="Key">Set-ExcelColumn</S>
                <S N="Value">Set-ExcelColumn</S>
              </En>
              <En>
                <S N="Key">Set-ExcelRange</S>
                <S N="Value">Set-ExcelRange</S>
              </En>
              <En>
                <S N="Key">Set-ExcelRow</S>
                <S N="Value">Set-ExcelRow</S>
              </En>
              <En>
                <S N="Key">Set-WorksheetProtection</S>
                <S N="Value">Set-WorksheetProtection</S>
              </En>
              <En>
                <S N="Key">Test-Boolean</S>
                <S N="Value">Test-Boolean</S>
              </En>
              <En>
                <S N="Key">Test-Date</S>
                <S N="Value">Test-Date</S>
              </En>
              <En>
                <S N="Key">Test-Integer</S>
                <S N="Value">Test-Integer</S>
              </En>
              <En>
                <S N="Key">Test-Number</S>
                <S N="Value">Test-Number</S>
              </En>
              <En>
                <S N="Key">Test-String</S>
                <S N="Value">Test-String</S>
              </En>
              <En>
                <S N="Key">Update-FirstObjectProperties</S>
                <S N="Value">Update-FirstObjectProperties</S>
              </En>
              <En>
                <S N="Key">Convert-XlRangeToImage</S>
                <S N="Value">Convert-XlRangeToImage</S>
              </En>
              <En>
                <S N="Key">Export-ExcelSheet</S>
                <S N="Value">Export-ExcelSheet</S>
              </En>
              <En>
                <S N="Key">New-ExcelChart</S>
                <S N="Value">New-ExcelChart</S>
              </En>
              <En>
                <S N="Key">Set-Column</S>
                <S N="Value">Set-Column</S>
              </En>
              <En>
                <S N="Key">Set-Format</S>
                <S N="Value">Set-Format</S>
              </En>
              <En>
                <S N="Key">Set-Row</S>
                <S N="Value">Set-Row</S>
              </En>
              <En>
                <S N="Key">Use-ExcelData</S>
                <S N="Value">Use-ExcelData</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="FileList" RefId="29">
            <TNRef RefId="19" />
            <LST>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\EPPlus.dll</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Export-charts.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\GetExcelTable.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\ImportExcel.psd1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\ImportExcel.psm1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\LICENSE.txt</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\README.md</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Plot.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Private</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Public</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\en\ImportExcel-help.xml</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\en\Strings.psd1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Charting\Charting.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\InferData\InferData.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Pivot\Pivot.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\spikes\ConvertFrom-ExcelColumnName.ps1</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Examples</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\images</S>
              <S>C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\ImportExcel\7.1.1\Testimonials</S>
            </LST>
          </Obj>
          <Obj N="CompatiblePSEditions" RefId="30">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="ModuleList" RefId="31">
            <TN RefId="23">
              <T>System.Collections.ObjectModel.Collection`1[[System.Object, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
              <T>System.Object</T>
            </TN>
            <LST />
          </Obj>
          <Obj N="NestedModules" RefId="32">
            <TN RefId="24">
              <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.Management.Automation.PSModuleInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <LST />
          </Obj>
          <Nil N="PowerShellHostName" />
          <Nil N="PowerShellHostVersion" />
          <Nil N="PowerShellVersion" />
          <S N="ProcessorArchitecture">None</S>
          <Obj N="Scripts" RefId="33">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="RequiredAssemblies" RefId="34">
            <TN RefId="25">
              <T>System.Collections.ObjectModel.Collection`1[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
              <T>System.Object</T>
            </TN>
            <LST>
              <S>.\EPPlus.dll</S>
            </LST>
          </Obj>
          <Obj N="RequiredModules" RefId="35">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <S N="RootModule">ImportExcel.psm1</S>
          <Obj N="ExportedVariables" RefId="36">
            <TN RefId="26">
              <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.PSVariable, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <DCT />
          </Obj>
          <Obj N="ExportedAliases" RefId="37">
            <TN RefId="27">
              <T>System.Collections.Generic.Dictionary`2[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e],[System.Management.Automation.AliasInfo, System.Management.Automation, Version=7.1.1.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35]]</T>
              <T>System.Object</T>
            </TN>
            <DCT>
              <En>
                <S N="Key">Convert-XlRangeToImage</S>
                <S N="Value">Convert-XlRangeToImage</S>
              </En>
              <En>
                <S N="Key">Export-ExcelSheet</S>
                <S N="Value">Export-ExcelSheet</S>
              </En>
              <En>
                <S N="Key">New-ExcelChart</S>
                <S N="Value">New-ExcelChart</S>
              </En>
              <En>
                <S N="Key">Set-Column</S>
                <S N="Value">Set-Column</S>
              </En>
              <En>
                <S N="Key">Set-Format</S>
                <S N="Value">Set-Format</S>
              </En>
              <En>
                <S N="Key">Set-Row</S>
                <S N="Value">Set-Row</S>
              </En>
              <En>
                <S N="Key">Use-ExcelData</S>
                <S N="Value">Use-ExcelData</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="ExportedDscResources" RefId="38">
            <TN RefId="28">
              <T>System.Collections.ObjectModel.ReadOnlyCollection`1[[System.String, System.Private.CoreLib, Version=5.0.0.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e]]</T>
              <T>System.Object</T>
            </TN>
            <LST />
          </Obj>
          <S N="SessionState">System.Management.Automation.SessionState</S>
          <Nil N="OnRemove" />
          <Obj N="ExportedFormatFiles" RefId="39">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <Obj N="ExportedTypeFiles" RefId="40">
            <TNRef RefId="28" />
            <LST />
          </Obj>
        </Props>
      </Obj>
      <Obj N="RemotingCapability" RefId="41">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="42">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Address</S>
            <Obj N="Value" RefId="43">
              <TN RefId="29">
                <T>System.Management.Automation.ParameterMetadata</T>
                <T>System.Object</T>
              </TN>
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Address</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="44">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Range</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="45">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="46">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RuleType</S>
            <Obj N="Value" RefId="47">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RuleType</S>
                <S N="ParameterType">OfficeOpenXml.ConditionalFormatting.eExcelConditionalFormattingRuleType</S>
                <Obj N="Aliases" RefId="48">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ForegroundColor</S>
            <Obj N="Value" RefId="49">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ForegroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="50">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ForegroundColour</S>
                    <S>FontColor</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataBarColor</S>
            <Obj N="Value" RefId="51">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataBarColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="52">
                  <TNRef RefId="25" />
                  <LST>
                    <S>DataBarColour</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ThreeIconsSet</S>
            <Obj N="Value" RefId="53">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ThreeIconsSet</S>
                <S N="ParameterType">OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType</S>
                <Obj N="Aliases" RefId="54">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FourIconsSet</S>
            <Obj N="Value" RefId="55">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FourIconsSet</S>
                <S N="ParameterType">OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType</S>
                <Obj N="Aliases" RefId="56">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FiveIconsSet</S>
            <Obj N="Value" RefId="57">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FiveIconsSet</S>
                <S N="ParameterType">OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType</S>
                <Obj N="Aliases" RefId="58">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Reverse</S>
            <Obj N="Value" RefId="59">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Reverse</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="60">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionValue</S>
            <Obj N="Value" RefId="61">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="62">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionValue2</S>
            <Obj N="Value" RefId="63">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionValue2</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="64">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="65">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="66">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundPattern</S>
            <Obj N="Value" RefId="67">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="68">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternColor</S>
            <Obj N="Value" RefId="69">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="70">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="71">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="72">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Bold</S>
            <Obj N="Value" RefId="73">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Bold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="74">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Italic</S>
            <Obj N="Value" RefId="75">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Italic</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="76">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Underline</S>
            <Obj N="Value" RefId="77">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Underline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="78">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StrikeThru</S>
            <Obj N="Value" RefId="79">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StrikeThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="80">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StopIfTrue</S>
            <Obj N="Value" RefId="81">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StopIfTrue</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="82">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Priority</S>
            <Obj N="Value" RefId="83">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Priority</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="84">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="85">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="86">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="87">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="88">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="89">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="90">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="91">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="92">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="93">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="94">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="95">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="96">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="97">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="98">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="99">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="100">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="101">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="102">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="103">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="104">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="105">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="106">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="107">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="108">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="109">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="110">
            <TNRef RefId="8" />
            <ToString>[-Address] &lt;Object&gt; [-RuleType] &lt;eExcelConditionalFormattingRuleType&gt; [[-ConditionValue] &lt;Object&gt;] [[-ConditionValue2] &lt;Object&gt;] [-Worksheet &lt;ExcelWorksheet&gt;] [-ForegroundColor &lt;Object&gt;] [-Reverse] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-StrikeThru] [-StopIfTrue] [-Priority &lt;int&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">NamedRule</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="111">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="112">
            <TNRef RefId="8" />
            <ToString>[-Address] &lt;Object&gt; -DataBarColor &lt;Object&gt; [-Worksheet &lt;ExcelWorksheet&gt;] [-Priority &lt;int&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">DataBar</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="113">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="114">
            <TNRef RefId="8" />
            <ToString>[-Address] &lt;Object&gt; -ThreeIconsSet &lt;eExcelconditionalFormatting3IconsSetType&gt; [-Worksheet &lt;ExcelWorksheet&gt;] [-Reverse] [-Priority &lt;int&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ThreeIconSet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="115">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="116">
            <TNRef RefId="8" />
            <ToString>[-Address] &lt;Object&gt; -FourIconsSet &lt;eExcelconditionalFormatting4IconsSetType&gt; [-Worksheet &lt;ExcelWorksheet&gt;] [-Reverse] [-Priority &lt;int&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">FourIconSet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="117">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="118">
            <TNRef RefId="8" />
            <ToString>[-Address] &lt;Object&gt; -FiveIconsSet &lt;eExcelconditionalFormatting5IconsSetType&gt; [-Worksheet &lt;ExcelWorksheet&gt;] [-Reverse] [-Priority &lt;int&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">FiveIconSet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="119">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ConditionalFormatting</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="120">
    <TNRef RefId="0" />
    <ToString>Add-ExcelChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Worksheet')]_x000D__x000A_    [OutputType([OfficeOpenXml.Drawing.Chart.ExcelChart])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName = 'Worksheet', Mandatory = $true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet,_x000D__x000A_        [Parameter(ParameterSetName = 'PivotTable', Mandatory = $true)]_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.ExcelPivotTable]$PivotTable ,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = "ColumnStacked",_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eTrendLine[]]$ChartTrendLine,_x000D__x000A_        $XRange,_x000D__x000A_        $YRange,_x000D__x000A_        [int]$Width = 500,_x000D__x000A_        [int]$Height = 350,_x000D__x000A_        [int]$Row = 0,_x000D__x000A_        [int]$RowOffSetPixels = 10,_x000D__x000A_        [int]$Column = 6,_x000D__x000A_        [int]$ColumnOffSetPixels = 5,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eLegendPosition]$LegendPosition,_x000D__x000A_        $LegendSize,_x000D__x000A_        [Switch]$LegendBold,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [String[]]$SeriesHeader,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize ,_x000D__x000A_        [String]$XAxisTitleText,_x000D__x000A_        [Switch]$XAxisTitleBold,_x000D__x000A_        $XAxisTitleSize ,_x000D__x000A_        [string]$XAxisNumberformat,_x000D__x000A_        $XMajorUnit,_x000D__x000A_        $XMinorUnit,_x000D__x000A_        $XMaxValue,_x000D__x000A_        $XMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$XAxisPosition        ,_x000D__x000A_        [String]$YAxisTitleText,_x000D__x000A_        [Switch]$YAxisTitleBold,_x000D__x000A_        $YAxisTitleSize,_x000D__x000A_        [string]$YAxisNumberformat,_x000D__x000A_        $YMajorUnit,_x000D__x000A_        $YMinorUnit,_x000D__x000A_        $YMaxValue,_x000D__x000A_        $YMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$YAxisPosition,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        if ($PivotTable) {_x000D__x000A_            $Worksheet = $PivotTable.Worksheet_x000D__x000A_            $chart = $Worksheet.Drawings.AddChart(("Chart" + $PivotTable.Name ), $ChartType, $PivotTable)_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $ChartName = 'Chart' + (Split-Path -Leaf ([System.IO.path]::GetTempFileName())) -replace 'tmp|\.', ''_x000D__x000A_            $chart = $Worksheet.Drawings.AddChart($ChartName, $ChartType)_x000D__x000A_            $chartDefCount = @($YRange).Count_x000D__x000A_            if ($chartDefCount -eq 1) {_x000D__x000A_                $Series = $chart.Series.Add($YRange, $XRange)_x000D__x000A_                if ($ChartTrendLine) {_x000D__x000A_                    if ($ChartType -notmatch "stacked|3D$|pie|Doughnut|Cone|Cylinder|Pyramid") {_x000D__x000A_                        foreach ($trendLine in $ChartTrendLine) {_x000D__x000A_                            $null = $Series.TrendLines.Add($trendLine)_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        Write-Warning "Chart trend line is not supported for chart type: $ChartType"_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                if ($SeriesHeader) { $Series.Header = $SeriesHeader }_x000D__x000A_                else { $Series.Header = 'Series 1' }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                for ($idx = 0; $idx -lt $chartDefCount; $idx += 1) {_x000D__x000A_                    if ($Yrange.count -eq $xrange.count) {_x000D__x000A_                        $Series = $chart.Series.Add($YRange[$idx], $XRange[$idx])_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $Series = $chart.Series.Add($YRange[$idx], $XRange)_x000D__x000A_                    }_x000D__x000A_                    if ($SeriesHeader.Count -gt 0) {_x000D__x000A_                        if ($SeriesHeader[$idx] -match '^=') { $Series.HeaderAddress = $SeriesHeader[$idx] -replace '^=', '' }_x000D__x000A_                        else { $Series.Header = $SeriesHeader[$idx] }_x000D__x000A_                    }_x000D__x000A_                    else { $Series.Header = "Series $($idx)" }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($Title) {_x000D__x000A_            $chart.Title.Text = $Title_x000D__x000A_            if ($TitleBold) { $chart.Title.Font.Bold = $true }_x000D__x000A_            if ($TitleSize) { $chart.Title.Font.Size = $TitleSize }_x000D__x000A_        }_x000D__x000A_        if ($NoLegend) { $chart.Legend.Remove() }_x000D__x000A_        else {_x000D__x000A_            if ($PSBoundParameters.ContainsKey('LegendPosition')) { $chart.Legend.Position = $LegendPosition }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('LegendBold')) { $chart.Legend.Font.Bold = [boolean]$LegendBold }_x000D__x000A_            if ($LegendSize) { $chart.Legend.Font.Size = $LegendSize }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($XAxisTitleText) {_x000D__x000A_            $chart.XAxis.Title.Text = $XAxisTitleText_x000D__x000A_            if ($PSBoundParameters.ContainsKey('XAxisTitleBold')) {_x000D__x000A_                $chart.XAxis.Title.Font.Bold = [boolean]$XAxisTitleBold_x000D__x000A_            }_x000D__x000A_            if ($XAxisTitleSize) { $chart.XAxis.Title.Font.Size = $XAxisTitleSize }_x000D__x000A_        }_x000D__x000A_        if ($XAxisPosition) { Write-Warning "X-axis position is not being set propertly at the moment, parameter ignored" }_x000D__x000A_        #$chart.ChartXml.chartSpace.chart.plotArea.catAx.axPos.val = $XAxisPosition.ToString().substring(0,1)}_x000D__x000A_        if ($XMajorUnit) { $chart.XAxis.MajorUnit = $XMajorUnit }_x000D__x000A_        if ($XMinorUnit) { $chart.XAxis.MinorUnit = $XMinorUnit }_x000D__x000A_        if ($null -ne $XMinValue) { $chart.XAxis.MinValue = $XMinValue }_x000D__x000A_        if ($null -ne $XMaxValue) { $chart.XAxis.MaxValue = $XMaxValue }_x000D__x000A_        if ($XAxisNumberformat) { $chart.XAxis.Format = (Expand-NumberFormat $XAxisNumberformat) }_x000D__x000A__x000D__x000A_        if ($YAxisTitleText) {_x000D__x000A_            $chart.YAxis.Title.Text = $YAxisTitleText_x000D__x000A_            if ($PSBoundParameters.ContainsKey('YAxisTitleBold')) {_x000D__x000A_                $chart.YAxis.Title.Font.Bold = [boolean]$YAxisTitleBold_x000D__x000A_            }_x000D__x000A_            if ($YAxisTitleSize) { $chart.YAxis.Title.Font.Size = $YAxisTitleSize }_x000D__x000A_        }_x000D__x000A_        if ($YAxisPosition) { Write-Warning "Y-axis position is not being set propertly at the moment, parameter ignored" }_x000D__x000A_        #$chart.ChartXml.chartSpace.chart.plotArea.valAx.axPos.val= $YAxisPosition.ToString().substring(0,1)}_x000D__x000A_        if ($YMajorUnit) { $chart.YAxis.MajorUnit = $YMajorUnit }_x000D__x000A_        if ($YMinorUnit) { $chart.YAxis.MinorUnit = $YMinorUnit }_x000D__x000A_        if ($null -ne $YMinValue) { $chart.YAxis.MinValue = $YMinValue }_x000D__x000A_        if ($null -ne $YMaxValue) { $chart.YAxis.MaxValue = $YMaxValue }_x000D__x000A_        if ($YAxisNumberformat) { $chart.YAxis.Format = (Expand-NumberFormat $YAxisNumberformat) }_x000D__x000A_        if ($null -ne $chart.Datalabel) {_x000D__x000A_            $chart.Datalabel.ShowCategory = [boolean]$ShowCategory_x000D__x000A_            $chart.Datalabel.ShowPercent = [boolean]$ShowPercent_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $chart.SetPosition($Row, $RowOffsetPixels, $Column, $ColumnOffsetPixels)_x000D__x000A_        $chart.SetSize($Width, $Height)_x000D__x000A__x000D__x000A_        if ($PassThru) { return $chart }_x000D__x000A_    }_x000D__x000A_    catch { Write-Warning -Message "Failed adding Chart to worksheet '$($Worksheet).name': $_" }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Worksheet</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Worksheet')]_x000D__x000A_    [OutputType([OfficeOpenXml.Drawing.Chart.ExcelChart])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName = 'Worksheet', Mandatory = $true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet,_x000D__x000A_        [Parameter(ParameterSetName = 'PivotTable', Mandatory = $true)]_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.ExcelPivotTable]$PivotTable ,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = "ColumnStacked",_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eTrendLine[]]$ChartTrendLine,_x000D__x000A_        $XRange,_x000D__x000A_        $YRange,_x000D__x000A_        [int]$Width = 500,_x000D__x000A_        [int]$Height = 350,_x000D__x000A_        [int]$Row = 0,_x000D__x000A_        [int]$RowOffSetPixels = 10,_x000D__x000A_        [int]$Column = 6,_x000D__x000A_        [int]$ColumnOffSetPixels = 5,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eLegendPosition]$LegendPosition,_x000D__x000A_        $LegendSize,_x000D__x000A_        [Switch]$LegendBold,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [String[]]$SeriesHeader,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize ,_x000D__x000A_        [String]$XAxisTitleText,_x000D__x000A_        [Switch]$XAxisTitleBold,_x000D__x000A_        $XAxisTitleSize ,_x000D__x000A_        [string]$XAxisNumberformat,_x000D__x000A_        $XMajorUnit,_x000D__x000A_        $XMinorUnit,_x000D__x000A_        $XMaxValue,_x000D__x000A_        $XMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$XAxisPosition        ,_x000D__x000A_        [String]$YAxisTitleText,_x000D__x000A_        [Switch]$YAxisTitleBold,_x000D__x000A_        $YAxisTitleSize,_x000D__x000A_        [string]$YAxisNumberformat,_x000D__x000A_        $YMajorUnit,_x000D__x000A_        $YMinorUnit,_x000D__x000A_        $YMaxValue,_x000D__x000A_        $YMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$YAxisPosition,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        if ($PivotTable) {_x000D__x000A_            $Worksheet = $PivotTable.Worksheet_x000D__x000A_            $chart = $Worksheet.Drawings.AddChart(("Chart" + $PivotTable.Name ), $ChartType, $PivotTable)_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $ChartName = 'Chart' + (Split-Path -Leaf ([System.IO.path]::GetTempFileName())) -replace 'tmp|\.', ''_x000D__x000A_            $chart = $Worksheet.Drawings.AddChart($ChartName, $ChartType)_x000D__x000A_            $chartDefCount = @($YRange).Count_x000D__x000A_            if ($chartDefCount -eq 1) {_x000D__x000A_                $Series = $chart.Series.Add($YRange, $XRange)_x000D__x000A_                if ($ChartTrendLine) {_x000D__x000A_                    if ($ChartType -notmatch "stacked|3D$|pie|Doughnut|Cone|Cylinder|Pyramid") {_x000D__x000A_                        foreach ($trendLine in $ChartTrendLine) {_x000D__x000A_                            $null = $Series.TrendLines.Add($trendLine)_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        Write-Warning "Chart trend line is not supported for chart type: $ChartType"_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                if ($SeriesHeader) { $Series.Header = $SeriesHeader }_x000D__x000A_                else { $Series.Header = 'Series 1' }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                for ($idx = 0; $idx -lt $chartDefCount; $idx += 1) {_x000D__x000A_                    if ($Yrange.count -eq $xrange.count) {_x000D__x000A_                        $Series = $chart.Series.Add($YRange[$idx], $XRange[$idx])_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $Series = $chart.Series.Add($YRange[$idx], $XRange)_x000D__x000A_                    }_x000D__x000A_                    if ($SeriesHeader.Count -gt 0) {_x000D__x000A_                        if ($SeriesHeader[$idx] -match '^=') { $Series.HeaderAddress = $SeriesHeader[$idx] -replace '^=', '' }_x000D__x000A_                        else { $Series.Header = $SeriesHeader[$idx] }_x000D__x000A_                    }_x000D__x000A_                    else { $Series.Header = "Series $($idx)" }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($Title) {_x000D__x000A_            $chart.Title.Text = $Title_x000D__x000A_            if ($TitleBold) { $chart.Title.Font.Bold = $true }_x000D__x000A_            if ($TitleSize) { $chart.Title.Font.Size = $TitleSize }_x000D__x000A_        }_x000D__x000A_        if ($NoLegend) { $chart.Legend.Remove() }_x000D__x000A_        else {_x000D__x000A_            if ($PSBoundParameters.ContainsKey('LegendPosition')) { $chart.Legend.Position = $LegendPosition }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('LegendBold')) { $chart.Legend.Font.Bold = [boolean]$LegendBold }_x000D__x000A_            if ($LegendSize) { $chart.Legend.Font.Size = $LegendSize }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($XAxisTitleText) {_x000D__x000A_            $chart.XAxis.Title.Text = $XAxisTitleText_x000D__x000A_            if ($PSBoundParameters.ContainsKey('XAxisTitleBold')) {_x000D__x000A_                $chart.XAxis.Title.Font.Bold = [boolean]$XAxisTitleBold_x000D__x000A_            }_x000D__x000A_            if ($XAxisTitleSize) { $chart.XAxis.Title.Font.Size = $XAxisTitleSize }_x000D__x000A_        }_x000D__x000A_        if ($XAxisPosition) { Write-Warning "X-axis position is not being set propertly at the moment, parameter ignored" }_x000D__x000A_        #$chart.ChartXml.chartSpace.chart.plotArea.catAx.axPos.val = $XAxisPosition.ToString().substring(0,1)}_x000D__x000A_        if ($XMajorUnit) { $chart.XAxis.MajorUnit = $XMajorUnit }_x000D__x000A_        if ($XMinorUnit) { $chart.XAxis.MinorUnit = $XMinorUnit }_x000D__x000A_        if ($null -ne $XMinValue) { $chart.XAxis.MinValue = $XMinValue }_x000D__x000A_        if ($null -ne $XMaxValue) { $chart.XAxis.MaxValue = $XMaxValue }_x000D__x000A_        if ($XAxisNumberformat) { $chart.XAxis.Format = (Expand-NumberFormat $XAxisNumberformat) }_x000D__x000A__x000D__x000A_        if ($YAxisTitleText) {_x000D__x000A_            $chart.YAxis.Title.Text = $YAxisTitleText_x000D__x000A_            if ($PSBoundParameters.ContainsKey('YAxisTitleBold')) {_x000D__x000A_                $chart.YAxis.Title.Font.Bold = [boolean]$YAxisTitleBold_x000D__x000A_            }_x000D__x000A_            if ($YAxisTitleSize) { $chart.YAxis.Title.Font.Size = $YAxisTitleSize }_x000D__x000A_        }_x000D__x000A_        if ($YAxisPosition) { Write-Warning "Y-axis position is not being set propertly at the moment, parameter ignored" }_x000D__x000A_        #$chart.ChartXml.chartSpace.chart.plotArea.valAx.axPos.val= $YAxisPosition.ToString().substring(0,1)}_x000D__x000A_        if ($YMajorUnit) { $chart.YAxis.MajorUnit = $YMajorUnit }_x000D__x000A_        if ($YMinorUnit) { $chart.YAxis.MinorUnit = $YMinorUnit }_x000D__x000A_        if ($null -ne $YMinValue) { $chart.YAxis.MinValue = $YMinValue }_x000D__x000A_        if ($null -ne $YMaxValue) { $chart.YAxis.MaxValue = $YMaxValue }_x000D__x000A_        if ($YAxisNumberformat) { $chart.YAxis.Format = (Expand-NumberFormat $YAxisNumberformat) }_x000D__x000A_        if ($null -ne $chart.Datalabel) {_x000D__x000A_            $chart.Datalabel.ShowCategory = [boolean]$ShowCategory_x000D__x000A_            $chart.Datalabel.ShowPercent = [boolean]$ShowPercent_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $chart.SetPosition($Row, $RowOffsetPixels, $Column, $ColumnOffsetPixels)_x000D__x000A_        $chart.SetSize($Width, $Height)_x000D__x000A__x000D__x000A_        if ($PassThru) { return $chart }_x000D__x000A_    }_x000D__x000A_    catch { Write-Warning -Message "Failed adding Chart to worksheet '$($Worksheet).name': $_" }_x000D__x000A_</S>
      <Obj N="Options" RefId="121">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ExcelChart</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="122">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.Drawing.Chart.ExcelChart</S>
        </LST>
      </Obj>
      <S N="Name">Add-ExcelChart</S>
      <Obj N="CommandType" RefId="123">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="124">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="125">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="126">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="127">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="128">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTable</S>
            <Obj N="Value" RefId="129">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTable</S>
                <S N="ParameterType">OfficeOpenXml.Table.PivotTable.ExcelPivotTable</S>
                <Obj N="Aliases" RefId="130">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Title</S>
            <Obj N="Value" RefId="131">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Title</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="132">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="133">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="134">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartTrendLine</S>
            <Obj N="Value" RefId="135">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartTrendLine</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eTrendLine[]</S>
                <Obj N="Aliases" RefId="136">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XRange</S>
            <Obj N="Value" RefId="137">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="138">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YRange</S>
            <Obj N="Value" RefId="139">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="140">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="141">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="142">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Height</S>
            <Obj N="Value" RefId="143">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Height</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="144">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Row</S>
            <Obj N="Value" RefId="145">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Row</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="146">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RowOffSetPixels</S>
            <Obj N="Value" RefId="147">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RowOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="148">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Column</S>
            <Obj N="Value" RefId="149">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Column</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="150">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ColumnOffSetPixels</S>
            <Obj N="Value" RefId="151">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ColumnOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="152">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendPosition</S>
            <Obj N="Value" RefId="153">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eLegendPosition</S>
                <Obj N="Aliases" RefId="154">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendSize</S>
            <Obj N="Value" RefId="155">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="156">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendBold</S>
            <Obj N="Value" RefId="157">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="158">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="159">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="160">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="161">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="162">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="163">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="164">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SeriesHeader</S>
            <Obj N="Value" RefId="165">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SeriesHeader</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="166">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBold</S>
            <Obj N="Value" RefId="167">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="168">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleSize</S>
            <Obj N="Value" RefId="169">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="170">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleText</S>
            <Obj N="Value" RefId="171">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleText</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="172">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleBold</S>
            <Obj N="Value" RefId="173">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="174">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleSize</S>
            <Obj N="Value" RefId="175">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="176">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisNumberformat</S>
            <Obj N="Value" RefId="177">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisNumberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="178">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMajorUnit</S>
            <Obj N="Value" RefId="179">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMajorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="180">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMinorUnit</S>
            <Obj N="Value" RefId="181">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMinorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="182">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMaxValue</S>
            <Obj N="Value" RefId="183">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMaxValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="184">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMinValue</S>
            <Obj N="Value" RefId="185">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMinValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="186">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisPosition</S>
            <Obj N="Value" RefId="187">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eAxisPosition</S>
                <Obj N="Aliases" RefId="188">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleText</S>
            <Obj N="Value" RefId="189">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleText</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="190">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleBold</S>
            <Obj N="Value" RefId="191">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="192">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleSize</S>
            <Obj N="Value" RefId="193">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="194">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisNumberformat</S>
            <Obj N="Value" RefId="195">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisNumberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="196">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMajorUnit</S>
            <Obj N="Value" RefId="197">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMajorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="198">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMinorUnit</S>
            <Obj N="Value" RefId="199">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMinorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="200">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMaxValue</S>
            <Obj N="Value" RefId="201">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMaxValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="202">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMinValue</S>
            <Obj N="Value" RefId="203">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMinValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="204">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisPosition</S>
            <Obj N="Value" RefId="205">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eAxisPosition</S>
                <Obj N="Aliases" RefId="206">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="207">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="208">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="209">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="210">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="211">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="212">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="213">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="214">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="215">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="216">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="217">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="218">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="219">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="220">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="221">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="222">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="223">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="224">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="225">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="226">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="227">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="228">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="229">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="230">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="231">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="232">
            <TNRef RefId="8" />
            <ToString>-Worksheet &lt;ExcelWorksheet&gt; [-Title &lt;string&gt;] [-ChartType &lt;eChartType&gt;] [-ChartTrendLine &lt;eTrendLine[]&gt;] [-XRange &lt;Object&gt;] [-YRange &lt;Object&gt;] [-Width &lt;int&gt;] [-Height &lt;int&gt;] [-Row &lt;int&gt;] [-RowOffSetPixels &lt;int&gt;] [-Column &lt;int&gt;] [-ColumnOffSetPixels &lt;int&gt;] [-LegendPosition &lt;eLegendPosition&gt;] [-LegendSize &lt;Object&gt;] [-LegendBold] [-NoLegend] [-ShowCategory] [-ShowPercent] [-SeriesHeader &lt;string[]&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-XAxisTitleText &lt;string&gt;] [-XAxisTitleBold] [-XAxisTitleSize &lt;Object&gt;] [-XAxisNumberformat &lt;string&gt;] [-XMajorUnit &lt;Object&gt;] [-XMinorUnit &lt;Object&gt;] [-XMaxValue &lt;Object&gt;] [-XMinValue &lt;Object&gt;] [-XAxisPosition &lt;eAxisPosition&gt;] [-YAxisTitleText &lt;string&gt;] [-YAxisTitleBold] [-YAxisTitleSize &lt;Object&gt;] [-YAxisNumberformat &lt;string&gt;] [-YMajorUnit &lt;Object&gt;] [-YMinorUnit &lt;Object&gt;] [-YMaxValue &lt;Object&gt;] [-YMinValue &lt;Object&gt;] [-YAxisPosition &lt;eAxisPosition&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Worksheet</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="233">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="234">
            <TNRef RefId="8" />
            <ToString>-PivotTable &lt;ExcelPivotTable&gt; [-Title &lt;string&gt;] [-ChartType &lt;eChartType&gt;] [-ChartTrendLine &lt;eTrendLine[]&gt;] [-XRange &lt;Object&gt;] [-YRange &lt;Object&gt;] [-Width &lt;int&gt;] [-Height &lt;int&gt;] [-Row &lt;int&gt;] [-RowOffSetPixels &lt;int&gt;] [-Column &lt;int&gt;] [-ColumnOffSetPixels &lt;int&gt;] [-LegendPosition &lt;eLegendPosition&gt;] [-LegendSize &lt;Object&gt;] [-LegendBold] [-NoLegend] [-ShowCategory] [-ShowPercent] [-SeriesHeader &lt;string[]&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-XAxisTitleText &lt;string&gt;] [-XAxisTitleBold] [-XAxisTitleSize &lt;Object&gt;] [-XAxisNumberformat &lt;string&gt;] [-XMajorUnit &lt;Object&gt;] [-XMinorUnit &lt;Object&gt;] [-XMaxValue &lt;Object&gt;] [-XMinValue &lt;Object&gt;] [-XAxisPosition &lt;eAxisPosition&gt;] [-YAxisTitleText &lt;string&gt;] [-YAxisTitleBold] [-YAxisTitleSize &lt;Object&gt;] [-YAxisNumberformat &lt;string&gt;] [-YMajorUnit &lt;Object&gt;] [-YMinorUnit &lt;Object&gt;] [-YMaxValue &lt;Object&gt;] [-YMinValue &lt;Object&gt;] [-YAxisPosition &lt;eAxisPosition&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PivotTable</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="235">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ExcelChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="236">
    <TNRef RefId="0" />
    <ToString>Add-ExcelDataValidationRule</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline = $true,Position=0)]_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [ValidateSet('Any','Custom','DateTime','Decimal','Integer','List','TextLength','Time')]_x000D__x000A_        $ValidationType,_x000D__x000A_        [OfficeOpenXml.DataValidation.ExcelDataValidationOperator]$Operator = [OfficeOpenXml.DataValidation.ExcelDataValidationOperator]::equal ,_x000D__x000A_        $Value,_x000D__x000A_        $Value2,_x000D__x000A_        $Formula,_x000D__x000A_        $Formula2,_x000D__x000A_        $ValueSet,_x000D__x000A_        [switch]$ShowErrorMessage,_x000D__x000A_        [OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle]$ErrorStyle,_x000D__x000A_        [String]$ErrorTitle,_x000D__x000A_        [String]$ErrorBody,_x000D__x000A_        [switch]$ShowPromptMessage,_x000D__x000A_        [String]$PromptBody,_x000D__x000A_        [String]$PromptTitle,_x000D__x000A_        [String]$NoBlank_x000D__x000A_    )_x000D__x000A_    if  ($Range -is [Array])  {_x000D__x000A_        $null = $PSBoundParameters.Remove("Range")_x000D__x000A_        $Range | Add-ExcelDataValidationRule @PSBoundParameters_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        #We should accept, a worksheet and a name of a range or a cell address; a table; the address of a table; a named range; a row, a column or .Cells[ ]_x000D__x000A_        if      (-not $Worksheet -and $Range.worksheet) {$Worksheet = $Range.worksheet}_x000D__x000A_        if      ($Range.Address)   {$Range = $Range.Address}_x000D__x000A__x000D__x000A_        if      ($Range -isnot [string] -or -not $Worksheet) {Write-Warning -Message "You need to provide a worksheet and range of cells." ;return}_x000D__x000A_       #else we assume Range is a range._x000D__x000A__x000D__x000A_        $validation = $Worksheet.DataValidations."Add$ValidationType`Validation"($Range)_x000D__x000A_        if     ($validation.AllowsOperator) {$validation.Operator = $Operator}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('value')) {_x000D__x000A_                            $validation.Formula.Value          = $Value_x000D__x000A_        }_x000D__x000A_        elseif ($Formula)     {$validation.Formula.ExcelFormula   = $Formula}_x000D__x000A_        elseif ($ValueSet)    {Foreach ($v in $ValueSet) {$validation.Formula.Values.Add($V)}}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('Value2')) {_x000D__x000A_            $validation.Formula2.Value         = $Value2_x000D__x000A_        }_x000D__x000A_        elseif ($Formula2)    {$validation.Formula2.ExcelFormula  = $Formula}_x000D__x000A_        $validation.ShowErrorMessage = [bool]$ShowErrorMessage_x000D__x000A_        $validation.ShowInputMessage = [bool]$ShowPromptMessage_x000D__x000A_        $validation.AllowBlank      = -not $NoBlank_x000D__x000A__x000D__x000A_        if ($PromptTitle) {$validation.PromptTitle = $PromptTitle}_x000D__x000A_        if ($ErrorTitle)  {$validation.ErrorTitle  = $ErrorTitle}_x000D__x000A_        if ($PromptBody)  {$validation.Prompt      = $PromptBody}_x000D__x000A_        if ($ErrorBody)   {$validation.Error       = $ErrorBody}_x000D__x000A_        if ($ErrorStyle)  {$validation.ErrorStyle  = $ErrorStyle}_x000D__x000A_    }_x000D__x000A_ </SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline = $true,Position=0)]_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [ValidateSet('Any','Custom','DateTime','Decimal','Integer','List','TextLength','Time')]_x000D__x000A_        $ValidationType,_x000D__x000A_        [OfficeOpenXml.DataValidation.ExcelDataValidationOperator]$Operator = [OfficeOpenXml.DataValidation.ExcelDataValidationOperator]::equal ,_x000D__x000A_        $Value,_x000D__x000A_        $Value2,_x000D__x000A_        $Formula,_x000D__x000A_        $Formula2,_x000D__x000A_        $ValueSet,_x000D__x000A_        [switch]$ShowErrorMessage,_x000D__x000A_        [OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle]$ErrorStyle,_x000D__x000A_        [String]$ErrorTitle,_x000D__x000A_        [String]$ErrorBody,_x000D__x000A_        [switch]$ShowPromptMessage,_x000D__x000A_        [String]$PromptBody,_x000D__x000A_        [String]$PromptTitle,_x000D__x000A_        [String]$NoBlank_x000D__x000A_    )_x000D__x000A_    if  ($Range -is [Array])  {_x000D__x000A_        $null = $PSBoundParameters.Remove("Range")_x000D__x000A_        $Range | Add-ExcelDataValidationRule @PSBoundParameters_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        #We should accept, a worksheet and a name of a range or a cell address; a table; the address of a table; a named range; a row, a column or .Cells[ ]_x000D__x000A_        if      (-not $Worksheet -and $Range.worksheet) {$Worksheet = $Range.worksheet}_x000D__x000A_        if      ($Range.Address)   {$Range = $Range.Address}_x000D__x000A__x000D__x000A_        if      ($Range -isnot [string] -or -not $Worksheet) {Write-Warning -Message "You need to provide a worksheet and range of cells." ;return}_x000D__x000A_       #else we assume Range is a range._x000D__x000A__x000D__x000A_        $validation = $Worksheet.DataValidations."Add$ValidationType`Validation"($Range)_x000D__x000A_        if     ($validation.AllowsOperator) {$validation.Operator = $Operator}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('value')) {_x000D__x000A_                            $validation.Formula.Value          = $Value_x000D__x000A_        }_x000D__x000A_        elseif ($Formula)     {$validation.Formula.ExcelFormula   = $Formula}_x000D__x000A_        elseif ($ValueSet)    {Foreach ($v in $ValueSet) {$validation.Formula.Values.Add($V)}}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('Value2')) {_x000D__x000A_            $validation.Formula2.Value         = $Value2_x000D__x000A_        }_x000D__x000A_        elseif ($Formula2)    {$validation.Formula2.ExcelFormula  = $Formula}_x000D__x000A_        $validation.ShowErrorMessage = [bool]$ShowErrorMessage_x000D__x000A_        $validation.ShowInputMessage = [bool]$ShowPromptMessage_x000D__x000A_        $validation.AllowBlank      = -not $NoBlank_x000D__x000A__x000D__x000A_        if ($PromptTitle) {$validation.PromptTitle = $PromptTitle}_x000D__x000A_        if ($ErrorTitle)  {$validation.ErrorTitle  = $ErrorTitle}_x000D__x000A_        if ($PromptBody)  {$validation.Prompt      = $PromptBody}_x000D__x000A_        if ($ErrorBody)   {$validation.Error       = $ErrorBody}_x000D__x000A_        if ($ErrorStyle)  {$validation.ErrorStyle  = $ErrorStyle}_x000D__x000A_    }_x000D__x000A_ </S>
      <Obj N="Options" RefId="237">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ExcelDataValidationRule</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="238">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Add-ExcelDataValidationRule</S>
      <Obj N="CommandType" RefId="239">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="240">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="241">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="242">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="243">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="244">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Address</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="245">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="246">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ValidationType</S>
            <Obj N="Value" RefId="247">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ValidationType</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="248">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Operator</S>
            <Obj N="Value" RefId="249">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Operator</S>
                <S N="ParameterType">OfficeOpenXml.DataValidation.ExcelDataValidationOperator</S>
                <Obj N="Aliases" RefId="250">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="251">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="252">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value2</S>
            <Obj N="Value" RefId="253">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value2</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="254">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Formula</S>
            <Obj N="Value" RefId="255">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Formula</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="256">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Formula2</S>
            <Obj N="Value" RefId="257">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Formula2</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="258">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ValueSet</S>
            <Obj N="Value" RefId="259">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ValueSet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="260">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowErrorMessage</S>
            <Obj N="Value" RefId="261">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowErrorMessage</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="262">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorStyle</S>
            <Obj N="Value" RefId="263">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorStyle</S>
                <S N="ParameterType">OfficeOpenXml.DataValidation.ExcelDataValidationWarningStyle</S>
                <Obj N="Aliases" RefId="264">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorTitle</S>
            <Obj N="Value" RefId="265">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorTitle</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="266">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorBody</S>
            <Obj N="Value" RefId="267">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorBody</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="268">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPromptMessage</S>
            <Obj N="Value" RefId="269">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPromptMessage</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="270">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PromptBody</S>
            <Obj N="Value" RefId="271">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PromptBody</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="272">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PromptTitle</S>
            <Obj N="Value" RefId="273">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PromptTitle</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="274">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoBlank</S>
            <Obj N="Value" RefId="275">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoBlank</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="276">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="277">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="278">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="279">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="280">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="281">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="282">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="283">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="284">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="285">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="286">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="287">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="288">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="289">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="290">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="291">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="292">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="293">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="294">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="295">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="296">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="297">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="298">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="299">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="300">
            <TNRef RefId="8" />
            <ToString>[[-Range] &lt;Object&gt;] [-Worksheet &lt;ExcelWorksheet&gt;] [-ValidationType &lt;Object&gt;] [-Operator &lt;ExcelDataValidationOperator&gt;] [-Value &lt;Object&gt;] [-Value2 &lt;Object&gt;] [-Formula &lt;Object&gt;] [-Formula2 &lt;Object&gt;] [-ValueSet &lt;Object&gt;] [-ShowErrorMessage] [-ErrorStyle &lt;ExcelDataValidationWarningStyle&gt;] [-ErrorTitle &lt;string&gt;] [-ErrorBody &lt;string&gt;] [-ShowPromptMessage] [-PromptBody &lt;string&gt;] [-PromptTitle &lt;string&gt;] [-NoBlank &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="301">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ExcelDataValidationRule</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="302">
    <TNRef RefId="0" />
    <ToString>Add-ExcelName</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        #The range of cells to assign as a name._x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelRange]$Range,_x000D__x000A_        #The name to assign to the range. If the name exists it will be updated to the new range. If no name is specified, the first cell in the range will be used as the name._x000D__x000A_        [String]$RangeName_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        $ws = $Range.Worksheet_x000D__x000A_        if (-not $RangeName) {_x000D__x000A_            $RangeName = $ws.Cells[$Range.Start.Address].Value_x000D__x000A_            $Range  = ($Range.Worksheet.cells[($Range.start.row +1), $Range.start.Column ,  $Range.end.row, $Range.end.column])_x000D__x000A_        }_x000D__x000A_        if ($RangeName -match '\W') {_x000D__x000A_            Write-Warning -Message "Range name '$RangeName' contains illegal characters, they will be replaced with '_'."_x000D__x000A_            $RangeName = $RangeName -replace '\W','_'_x000D__x000A_        }_x000D__x000A_        if ($ws.names[$RangeName]) {_x000D__x000A_            Write-verbose -Message "Updating Named range '$RangeName' to $($Range.FullAddressAbsolute)."_x000D__x000A_            $ws.Names[$RangeName].Address = $Range.FullAddressAbsolute_x000D__x000A_        }_x000D__x000A_        else  {_x000D__x000A_            Write-verbose -Message "Creating Named range '$RangeName' as $($Range.FullAddressAbsolute)."_x000D__x000A_            $null = $ws.Names.Add($RangeName, $Range)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    catch {Write-Warning -Message "Failed adding named range '$RangeName' to worksheet '$($ws.Name)': $_"  }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        #The range of cells to assign as a name._x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelRange]$Range,_x000D__x000A_        #The name to assign to the range. If the name exists it will be updated to the new range. If no name is specified, the first cell in the range will be used as the name._x000D__x000A_        [String]$RangeName_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        $ws = $Range.Worksheet_x000D__x000A_        if (-not $RangeName) {_x000D__x000A_            $RangeName = $ws.Cells[$Range.Start.Address].Value_x000D__x000A_            $Range  = ($Range.Worksheet.cells[($Range.start.row +1), $Range.start.Column ,  $Range.end.row, $Range.end.column])_x000D__x000A_        }_x000D__x000A_        if ($RangeName -match '\W') {_x000D__x000A_            Write-Warning -Message "Range name '$RangeName' contains illegal characters, they will be replaced with '_'."_x000D__x000A_            $RangeName = $RangeName -replace '\W','_'_x000D__x000A_        }_x000D__x000A_        if ($ws.names[$RangeName]) {_x000D__x000A_            Write-verbose -Message "Updating Named range '$RangeName' to $($Range.FullAddressAbsolute)."_x000D__x000A_            $ws.Names[$RangeName].Address = $Range.FullAddressAbsolute_x000D__x000A_        }_x000D__x000A_        else  {_x000D__x000A_            Write-verbose -Message "Creating Named range '$RangeName' as $($Range.FullAddressAbsolute)."_x000D__x000A_            $null = $ws.Names.Add($RangeName, $Range)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    catch {Write-Warning -Message "Failed adding named range '$RangeName' to worksheet '$($ws.Name)': $_"  }_x000D__x000A_</S>
      <Obj N="Options" RefId="303">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ExcelName</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="304">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Add-ExcelName</S>
      <Obj N="CommandType" RefId="305">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="306">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="307">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="308">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="309">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">OfficeOpenXml.ExcelRange</S>
                <Obj N="Aliases" RefId="310">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RangeName</S>
            <Obj N="Value" RefId="311">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RangeName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="312">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="313">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="314">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="315">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="316">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="317">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="318">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="319">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="320">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="321">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="322">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="323">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="324">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="325">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="326">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="327">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="328">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="329">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="330">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="331">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="332">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="333">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="334">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="335">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="336">
            <TNRef RefId="8" />
            <ToString>[-Range] &lt;ExcelRange&gt; [[-RangeName] &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="337">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ExcelName</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="338">
    <TNRef RefId="0" />
    <ToString>Add-ExcelTable</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([OfficeOpenXml.Table.ExcelTable])]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelRange]$Range,_x000D__x000A_        [String]$TableName = "",_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle = 'Medium6',_x000D__x000A_        [Switch]$ShowHeader ,_x000D__x000A_        [Switch]$ShowFilter,_x000D__x000A_        [Switch]$ShowTotal,_x000D__x000A_        [hashtable]$TotalSettings,_x000D__x000A_        [Switch]$ShowFirstColumn,_x000D__x000A_        [Switch]$ShowLastColumn,_x000D__x000A_        [Switch]$ShowRowStripes,_x000D__x000A_        [Switch]$ShowColumnStripes,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        if ($TableName -eq "" -or $null -eq $TableName) {_x000D__x000A_            $tbl = $Range.Worksheet.Tables.Add($Range, "")_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ([OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressUtil]::IsValidAddress($TableName)) {_x000D__x000A_                Write-Warning -Message "$TableName reads as an Excel address, and so is not allowed as a table name."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            if ($TableName -notMatch '^[A-Z]') {_x000D__x000A_                Write-Warning -Message "$TableName is not allowed as a table name because it does not begin with a letter."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            if ($TableName -match "\W") {_x000D__x000A_                Write-Warning -Message "At least one character in $TableName is illegal in a table name and will be replaced with '_' . "_x000D__x000A_                $TableName = $TableName -replace '\W', '_'_x000D__x000A_            }_x000D__x000A_            $ws = $Range.Worksheet_x000D__x000A_            #if the table exists in this worksheet, update it._x000D__x000A_            if ($ws.Tables[$TableName]) {_x000D__x000A_                $tbl =$ws.Tables[$TableName]_x000D__x000A_                $tbl.TableXml.table.ref = $Range.Address_x000D__x000A_                Write-Verbose -Message "Re-defined table '$TableName', now at $($Range.Address)."_x000D__x000A_            }_x000D__x000A_            elseif ($ws.Workbook.Worksheets.Tables.Name -contains $TableName) {_x000D__x000A_                Write-Warning -Message "The Table name '$TableName' is already used on a different worksheet."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $tbl = $ws.Tables.Add($Range, $TableName)_x000D__x000A_                Write-Verbose -Message "Defined table '$($tbl.Name)' at $($Range.Address)"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        #it seems that show total changes some of the others, so the sequence matters._x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowHeader'))        {$tbl.ShowHeader        = [bool]$ShowHeader}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('TotalSettings'))     {_x000D__x000A_            $tbl.ShowTotal = $true_x000D__x000A_            foreach ($k in $TotalSettings.keys) {_x000D__x000A_                if (-not $tbl.Columns[$k]) {Write-Warning -Message "Table does not have a Column '$k'."}_x000D__x000A_                elseif ($TotalSettings[$k] -notin @("Average", "Count", "CountNums", "Max", "Min", "None", "StdDev", "Sum", "Var") ) {_x000D__x000A_                    Write-Warning -Message "'$($TotalSettings[$k])' is not a valid total function."_x000D__x000A_                }_x000D__x000A_                else {$tbl.Columns[$k].TotalsRowFunction = $TotalSettings[$k]}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($PSBoundParameters.ContainsKey('ShowTotal'))         {$tbl.ShowTotal         = [bool]$ShowTotal}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowFilter'))        {$tbl.ShowFilter        = [bool]$ShowFilter}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowFirstColumn'))   {$tbl.ShowFirstColumn   = [bool]$ShowFirstColumn}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowLastColumn'))    {$tbl.ShowLastColumn    = [bool]$ShowLastColumn}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowRowStripes'))    {$tbl.ShowRowStripes    = [bool]$ShowRowStripes}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowColumnStripes')) {$tbl.ShowColumnStripes = [bool]$ShowColumnStripes}_x000D__x000A_        $tbl.TableStyle = $TableStyle_x000D__x000A__x000D__x000A_        if ($PassThru) {return $tbl}_x000D__x000A_    }_x000D__x000A_    catch {Write-Warning -Message "Failed adding table '$TableName' to worksheet '$WorksheetName': $_"}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([OfficeOpenXml.Table.ExcelTable])]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelRange]$Range,_x000D__x000A_        [String]$TableName = "",_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle = 'Medium6',_x000D__x000A_        [Switch]$ShowHeader ,_x000D__x000A_        [Switch]$ShowFilter,_x000D__x000A_        [Switch]$ShowTotal,_x000D__x000A_        [hashtable]$TotalSettings,_x000D__x000A_        [Switch]$ShowFirstColumn,_x000D__x000A_        [Switch]$ShowLastColumn,_x000D__x000A_        [Switch]$ShowRowStripes,_x000D__x000A_        [Switch]$ShowColumnStripes,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        if ($TableName -eq "" -or $null -eq $TableName) {_x000D__x000A_            $tbl = $Range.Worksheet.Tables.Add($Range, "")_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ([OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressUtil]::IsValidAddress($TableName)) {_x000D__x000A_                Write-Warning -Message "$TableName reads as an Excel address, and so is not allowed as a table name."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            if ($TableName -notMatch '^[A-Z]') {_x000D__x000A_                Write-Warning -Message "$TableName is not allowed as a table name because it does not begin with a letter."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            if ($TableName -match "\W") {_x000D__x000A_                Write-Warning -Message "At least one character in $TableName is illegal in a table name and will be replaced with '_' . "_x000D__x000A_                $TableName = $TableName -replace '\W', '_'_x000D__x000A_            }_x000D__x000A_            $ws = $Range.Worksheet_x000D__x000A_            #if the table exists in this worksheet, update it._x000D__x000A_            if ($ws.Tables[$TableName]) {_x000D__x000A_                $tbl =$ws.Tables[$TableName]_x000D__x000A_                $tbl.TableXml.table.ref = $Range.Address_x000D__x000A_                Write-Verbose -Message "Re-defined table '$TableName', now at $($Range.Address)."_x000D__x000A_            }_x000D__x000A_            elseif ($ws.Workbook.Worksheets.Tables.Name -contains $TableName) {_x000D__x000A_                Write-Warning -Message "The Table name '$TableName' is already used on a different worksheet."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $tbl = $ws.Tables.Add($Range, $TableName)_x000D__x000A_                Write-Verbose -Message "Defined table '$($tbl.Name)' at $($Range.Address)"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        #it seems that show total changes some of the others, so the sequence matters._x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowHeader'))        {$tbl.ShowHeader        = [bool]$ShowHeader}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('TotalSettings'))     {_x000D__x000A_            $tbl.ShowTotal = $true_x000D__x000A_            foreach ($k in $TotalSettings.keys) {_x000D__x000A_                if (-not $tbl.Columns[$k]) {Write-Warning -Message "Table does not have a Column '$k'."}_x000D__x000A_                elseif ($TotalSettings[$k] -notin @("Average", "Count", "CountNums", "Max", "Min", "None", "StdDev", "Sum", "Var") ) {_x000D__x000A_                    Write-Warning -Message "'$($TotalSettings[$k])' is not a valid total function."_x000D__x000A_                }_x000D__x000A_                else {$tbl.Columns[$k].TotalsRowFunction = $TotalSettings[$k]}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($PSBoundParameters.ContainsKey('ShowTotal'))         {$tbl.ShowTotal         = [bool]$ShowTotal}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowFilter'))        {$tbl.ShowFilter        = [bool]$ShowFilter}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowFirstColumn'))   {$tbl.ShowFirstColumn   = [bool]$ShowFirstColumn}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowLastColumn'))    {$tbl.ShowLastColumn    = [bool]$ShowLastColumn}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowRowStripes'))    {$tbl.ShowRowStripes    = [bool]$ShowRowStripes}_x000D__x000A_        if     ($PSBoundParameters.ContainsKey('ShowColumnStripes')) {$tbl.ShowColumnStripes = [bool]$ShowColumnStripes}_x000D__x000A_        $tbl.TableStyle = $TableStyle_x000D__x000A__x000D__x000A_        if ($PassThru) {return $tbl}_x000D__x000A_    }_x000D__x000A_    catch {Write-Warning -Message "Failed adding table '$TableName' to worksheet '$WorksheetName': $_"}_x000D__x000A_</S>
      <Obj N="Options" RefId="339">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ExcelTable</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="340">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.Table.ExcelTable</S>
        </LST>
      </Obj>
      <S N="Name">Add-ExcelTable</S>
      <Obj N="CommandType" RefId="341">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="342">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="343">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="344">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="345">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">OfficeOpenXml.ExcelRange</S>
                <Obj N="Aliases" RefId="346">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableName</S>
            <Obj N="Value" RefId="347">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="348">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableStyle</S>
            <Obj N="Value" RefId="349">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="350">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowHeader</S>
            <Obj N="Value" RefId="351">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="352">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowFilter</S>
            <Obj N="Value" RefId="353">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowFilter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="354">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowTotal</S>
            <Obj N="Value" RefId="355">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowTotal</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="356">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TotalSettings</S>
            <Obj N="Value" RefId="357">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TotalSettings</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="358">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowFirstColumn</S>
            <Obj N="Value" RefId="359">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="360">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowLastColumn</S>
            <Obj N="Value" RefId="361">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowLastColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="362">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowRowStripes</S>
            <Obj N="Value" RefId="363">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowRowStripes</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="364">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowColumnStripes</S>
            <Obj N="Value" RefId="365">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowColumnStripes</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="366">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="367">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="368">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="369">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="370">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="371">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="372">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="373">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="374">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="375">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="376">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="377">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="378">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="379">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="380">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="381">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="382">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="383">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="384">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="385">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="386">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="387">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="388">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="389">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="390">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="391">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="392">
            <TNRef RefId="8" />
            <ToString>[-Range] &lt;ExcelRange&gt; [[-TableName] &lt;string&gt;] [[-TableStyle] &lt;TableStyles&gt;] [[-TotalSettings] &lt;hashtable&gt;] [-ShowHeader] [-ShowFilter] [-ShowTotal] [-ShowFirstColumn] [-ShowLastColumn] [-ShowRowStripes] [-ShowColumnStripes] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="393">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ExcelTable</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="394">
    <TNRef RefId="0" />
    <ToString>Add-PivotTable</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(defaultParameterSetName = 'ChartbyParams')]_x000D__x000A_    [OutputType([OfficeOpenXml.Table.PivotTable.ExcelPivotTable])]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]$PivotTableName,_x000D__x000A_        [OfficeOpenXml.ExcelAddressBase]_x000D__x000A_        $Address,_x000D__x000A_        $ExcelPackage,_x000D__x000A_        $SourceWorksheet,_x000D__x000A_        $SourceRange,_x000D__x000A_        $PivotRows,_x000D__x000A_        $PivotData,_x000D__x000A_        $PivotColumns,_x000D__x000A_        $PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [ValidateSet("Both", "Columns", "Rows", "None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [String]$GroupDateRow,_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.eDateGroupBy[]]$GroupDatePart,_x000D__x000A_        [String]$GroupNumericRow,_x000D__x000A_        [double]$GroupNumericMin = 0 ,_x000D__x000A_        [double]$GroupNumericMax = [Double]::MaxValue  ,_x000D__x000A_        [double]$GroupNumericInterval = 100  ,_x000D__x000A_        [string]$PivotNumberFormat,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$PivotTableStyle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyDef', Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        $PivotChartDefinition,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [String]$ChartTitle = "",_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartHeight = 400 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartWidth = 600,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRow = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumn = 4,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRowOffSetPixels = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumnOffSetPixels = 0,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = 'Pie',_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    if ($PivotTableName.length -gt 250) {_x000D__x000A_        Write-warning -Message "PivotTable name will be truncated"_x000D__x000A_        $PivotTableName = $PivotTableName.Substring(0, 250)_x000D__x000A_    }_x000D__x000A_    if ($Address) {_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$wsPivot = $address.Worksheet_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        try {_x000D__x000A_            if (-not $ExcelPackage) {Write-Warning -message "This combination of Parameters needs to include the ExcelPackage." ; return }_x000D__x000A_            [OfficeOpenXml.ExcelWorksheet]$wsPivot = Add-Worksheet -ExcelPackage $ExcelPackage -WorksheetName $pivotTableName -Activate:$Activate_x000D__x000A_            if ($wsPivot.Name -ne $PivotTableName) {Write-Warning -Message "The Worksheet name for the PivotTable does not match the table name '$PivotTableName'; probably because excess or illegal characters were removed." }_x000D__x000A_            if ($PivotFilter) {$Address = $wsPivot.Cells["A3"]} else { $Address = $wsPivot.Cells["A1"]}_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not create the sheet for the PivotTable. $_" }_x000D__x000A_    }_x000D__x000A_    #if the pivot doesn't exist, create it._x000D__x000A_    if (-not $wsPivot) {throw "There was a problem getting the worksheet for the PivotTable"}_x000D__x000A_    if (-not $wsPivot.PivotTables[$pivotTableName] ) {_x000D__x000A_        try {_x000D__x000A_            #Accept a string or a worksheet object as $SourceWorksheet - we don't need a worksheet if we have a Rangebase ._x000D__x000A_            if ( $SourceWorksheet -is [string]) {_x000D__x000A_                $SourceWorksheet = $ExcelPackage.Workbook.Worksheets.where( {$_.name -Like $SourceWorksheet})[0]_x000D__x000A_            }_x000D__x000A_            elseif ( $SourceWorksheet -is [int]   ) {_x000D__x000A_                $SourceWorksheet = $ExcelPackage.Workbook.Worksheets[$SourceWorksheet]_x000D__x000A_            }_x000D__x000A_            if (     $SourceRange -is [OfficeOpenXml.Table.ExcelTable]) {$SourceRange = $SourceRange.Address }_x000D__x000A_            if (     $sourceRange -is [OfficeOpenXml.ExcelRange] -or_x000D__x000A_                $SourceRange -is [OfficeOpenXml.ExcelAddress]) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceRange, $pivotTableName)_x000D__x000A_            }_x000D__x000A_            elseif (-not $SourceRange) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceWorksheet.cells[$SourceWorksheet.Dimension.Address], $pivotTableName)_x000D__x000A_            }_x000D__x000A_            elseif ($SourceWorksheet -isnot [OfficeOpenXml.ExcelWorksheet]  ) {_x000D__x000A_                Write-Warning -Message "Could not find source Worksheet for pivot-table '$pivotTableName'." ; return_x000D__x000A_            }_x000D__x000A_            elseif (     $SourceRange -is [String] -or $SourceRange -is [OfficeOpenXml.ExcelAddress]) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceWorksheet.Cells[$SourceRange], $pivotTableName)_x000D__x000A_            }_x000D__x000A_            else {Write-warning "Could not create a PivotTable with the Source Range provided."; return}_x000D__x000A_            foreach ($row in $PivotRows) {_x000D__x000A_                try {$null = $pivotTable.RowFields.Add($pivotTable.Fields[$row]) }_x000D__x000A_                catch {Write-Warning -message "Could not add '$row' to Rows in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            foreach ($Column in $PivotColumns) {_x000D__x000A_                try {$null = $pivotTable.ColumnFields.Add($pivotTable.Fields[$Column])}_x000D__x000A_                catch {Write-Warning -message "Could not add '$Column' to Columns in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            if ($PivotData -is [HashTable] -or $PivotData -is [System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                $PivotData.Keys | ForEach-Object {_x000D__x000A_                    try {_x000D__x000A_                        $df = $pivotTable.DataFields.Add($pivotTable.Fields[$_])_x000D__x000A_                        $df.Function = $PivotData.$__x000D__x000A_                        if ($PivotNumberFormat) {$df.Format = (Expand-NumberFormat -NumberFormat $PivotNumberFormat)}_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -message "Problem adding data fields to PivotTable $pivotTableName." }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                foreach ($field in $PivotData) {_x000D__x000A_                    try {_x000D__x000A_                        $df = $pivotTable.DataFields.Add($pivotTable.Fields[$field])_x000D__x000A_                        $df.Function = 'Count'_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -message "Problem adding data field '$field' to PivotTable $pivotTableName." }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            foreach ( $pFilter in $PivotFilter) {_x000D__x000A_                try { $null = $pivotTable.PageFields.Add($pivotTable.Fields[$pFilter])}_x000D__x000A_                catch {Write-Warning -message "Could not add '$pFilter' to Filter/Page fields in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            if ($NoTotalsInPivot) {$PivotTotals = "None" }_x000D__x000A_            if ($PivotTotals -eq "None" -or $PivotTotals -eq "Columns") { $pivotTable.RowGrandTotals = $false }_x000D__x000A_            elseif ($PivotTotals -eq "Both" -or $PivotTotals -eq "Rows") { $pivotTable.RowGrandTotals = $true  }_x000D__x000A_            if ($PivotTotals -eq "None" -or $PivotTotals -eq "Rows") { $pivotTable.ColumGrandTotals = $false }   # Epplus spelling mistake, not mine!_x000D__x000A_            elseif ($PivotTotals -eq "Both" -or $PivotTotals -eq "Columns") { $pivotTable.ColumGrandTotals = $true  }_x000D__x000A_            if ($PivotDataToColumn ) { $pivotTable.DataOnRows = $false }_x000D__x000A_            if ($PivotTableStyle) { $pivotTable.TableStyle = $PivotTableStyle}_x000D__x000A_            if ($GroupNumericRow) {_x000D__x000A_                $r = $pivotTable.RowFields.Where( {$_.name -eq $GroupNumericRow })_x000D__x000A_                if (-not $r ) {Write-Warning -Message "Could not find a Row field named '$GroupNumericRow'; no numeric grouping will be done."}_x000D__x000A_                else {$r.AddNumericGrouping($GroupNumericMin, $GroupNumericMax, $GroupNumericInterval)}_x000D__x000A_            }_x000D__x000A_            if ($GroupDateRow -and $PSBoundParameters.ContainsKey("GroupDatePart")) {_x000D__x000A_                $r = $pivotTable.RowFields.Where( {$_.name -eq $GroupDateRow })_x000D__x000A_                if (-not $r ) {Write-Warning -Message "Could not find a Row field named '$GroupDateRow'; no date grouping will be done."}_x000D__x000A_                else {$r.AddDateGrouping($GroupDatePart)}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {Write-Warning -Message "Failed adding PivotTable '$pivotTableName': $_"}_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Write-Warning -Message "PivotTable defined in $($pivotTableName) already exists, only the data range will be changed."_x000D__x000A_        $pivotTable = $wsPivot.PivotTables[$pivotTableName]_x000D__x000A_        if (-not $SourceRange) { $SourceRange = $SourceWorksheet.Dimension.Address}_x000D__x000A_        $pivotTable.CacheDefinition.SourceRange =  $SourceWorksheet.cells[$SourceRange]_x000D__x000A_        #change for epPlus 4.5 -  Previously needed to hack the xml_x000D__x000A_      # $pivotTable.CacheDefinition.CacheDefinitionXml.pivotCacheDefinition.cacheSource.worksheetSource.ref = $SourceRange_x000D__x000A__x000D__x000A_     }_x000D__x000A__x000D__x000A_    #Create the chart if it doesn't exist, leave alone if it does._x000D__x000A_    if ($IncludePivotChart -and -not $wsPivot.Drawings["Chart$pivotTableName"] ) {_x000D__x000A_        try {Add-ExcelChart -PivotTable $pivotTable -ChartType $ChartType -Width $ChartWidth -Height $ChartHeight -Row $ChartRow -Column $ChartColumn -RowOffSetPixels $ChartRowOffSetPixels -ColumnOffSetPixels $ChartColumnOffSetPixels -Title $ChartTitle -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent  }_x000D__x000A_        catch {Write-Warning -Message "Failed adding chart for pivotable '$pivotTableName': $_"}_x000D__x000A_    }_x000D__x000A_    elseif ($PivotChartDefinition -and -not $wsPivot.Drawings["Chart$pivotTableName"]) {_x000D__x000A_        if ($PivotChartDefinition -is [System.Management.Automation.PSCustomObject]) {_x000D__x000A_            $params = @{PivotTable = $pivotTable }_x000D__x000A_            $PivotChartDefinition.PSObject.Properties | ForEach-Object {if ( $null -ne $_.value) {$params[$_.name] = $_.value}}_x000D__x000A_            Add-ExcelChart @params_x000D__x000A_        }_x000D__x000A_        elseif ($PivotChartDefinition -is [hashtable] -or $PivotChartDefinition -is [System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_            Add-ExcelChart -PivotTable $pivotTable  @PivotChartDefinition_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if ($PassThru) {return $pivotTable}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">ChartbyParams</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(defaultParameterSetName = 'ChartbyParams')]_x000D__x000A_    [OutputType([OfficeOpenXml.Table.PivotTable.ExcelPivotTable])]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]$PivotTableName,_x000D__x000A_        [OfficeOpenXml.ExcelAddressBase]_x000D__x000A_        $Address,_x000D__x000A_        $ExcelPackage,_x000D__x000A_        $SourceWorksheet,_x000D__x000A_        $SourceRange,_x000D__x000A_        $PivotRows,_x000D__x000A_        $PivotData,_x000D__x000A_        $PivotColumns,_x000D__x000A_        $PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [ValidateSet("Both", "Columns", "Rows", "None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [String]$GroupDateRow,_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.eDateGroupBy[]]$GroupDatePart,_x000D__x000A_        [String]$GroupNumericRow,_x000D__x000A_        [double]$GroupNumericMin = 0 ,_x000D__x000A_        [double]$GroupNumericMax = [Double]::MaxValue  ,_x000D__x000A_        [double]$GroupNumericInterval = 100  ,_x000D__x000A_        [string]$PivotNumberFormat,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$PivotTableStyle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyDef', Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        $PivotChartDefinition,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [String]$ChartTitle = "",_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartHeight = 400 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartWidth = 600,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRow = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumn = 4,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRowOffSetPixels = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumnOffSetPixels = 0,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = 'Pie',_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    if ($PivotTableName.length -gt 250) {_x000D__x000A_        Write-warning -Message "PivotTable name will be truncated"_x000D__x000A_        $PivotTableName = $PivotTableName.Substring(0, 250)_x000D__x000A_    }_x000D__x000A_    if ($Address) {_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$wsPivot = $address.Worksheet_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        try {_x000D__x000A_            if (-not $ExcelPackage) {Write-Warning -message "This combination of Parameters needs to include the ExcelPackage." ; return }_x000D__x000A_            [OfficeOpenXml.ExcelWorksheet]$wsPivot = Add-Worksheet -ExcelPackage $ExcelPackage -WorksheetName $pivotTableName -Activate:$Activate_x000D__x000A_            if ($wsPivot.Name -ne $PivotTableName) {Write-Warning -Message "The Worksheet name for the PivotTable does not match the table name '$PivotTableName'; probably because excess or illegal characters were removed." }_x000D__x000A_            if ($PivotFilter) {$Address = $wsPivot.Cells["A3"]} else { $Address = $wsPivot.Cells["A1"]}_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not create the sheet for the PivotTable. $_" }_x000D__x000A_    }_x000D__x000A_    #if the pivot doesn't exist, create it._x000D__x000A_    if (-not $wsPivot) {throw "There was a problem getting the worksheet for the PivotTable"}_x000D__x000A_    if (-not $wsPivot.PivotTables[$pivotTableName] ) {_x000D__x000A_        try {_x000D__x000A_            #Accept a string or a worksheet object as $SourceWorksheet - we don't need a worksheet if we have a Rangebase ._x000D__x000A_            if ( $SourceWorksheet -is [string]) {_x000D__x000A_                $SourceWorksheet = $ExcelPackage.Workbook.Worksheets.where( {$_.name -Like $SourceWorksheet})[0]_x000D__x000A_            }_x000D__x000A_            elseif ( $SourceWorksheet -is [int]   ) {_x000D__x000A_                $SourceWorksheet = $ExcelPackage.Workbook.Worksheets[$SourceWorksheet]_x000D__x000A_            }_x000D__x000A_            if (     $SourceRange -is [OfficeOpenXml.Table.ExcelTable]) {$SourceRange = $SourceRange.Address }_x000D__x000A_            if (     $sourceRange -is [OfficeOpenXml.ExcelRange] -or_x000D__x000A_                $SourceRange -is [OfficeOpenXml.ExcelAddress]) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceRange, $pivotTableName)_x000D__x000A_            }_x000D__x000A_            elseif (-not $SourceRange) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceWorksheet.cells[$SourceWorksheet.Dimension.Address], $pivotTableName)_x000D__x000A_            }_x000D__x000A_            elseif ($SourceWorksheet -isnot [OfficeOpenXml.ExcelWorksheet]  ) {_x000D__x000A_                Write-Warning -Message "Could not find source Worksheet for pivot-table '$pivotTableName'." ; return_x000D__x000A_            }_x000D__x000A_            elseif (     $SourceRange -is [String] -or $SourceRange -is [OfficeOpenXml.ExcelAddress]) {_x000D__x000A_                $pivotTable = $wsPivot.PivotTables.Add($Address, $SourceWorksheet.Cells[$SourceRange], $pivotTableName)_x000D__x000A_            }_x000D__x000A_            else {Write-warning "Could not create a PivotTable with the Source Range provided."; return}_x000D__x000A_            foreach ($row in $PivotRows) {_x000D__x000A_                try {$null = $pivotTable.RowFields.Add($pivotTable.Fields[$row]) }_x000D__x000A_                catch {Write-Warning -message "Could not add '$row' to Rows in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            foreach ($Column in $PivotColumns) {_x000D__x000A_                try {$null = $pivotTable.ColumnFields.Add($pivotTable.Fields[$Column])}_x000D__x000A_                catch {Write-Warning -message "Could not add '$Column' to Columns in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            if ($PivotData -is [HashTable] -or $PivotData -is [System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                $PivotData.Keys | ForEach-Object {_x000D__x000A_                    try {_x000D__x000A_                        $df = $pivotTable.DataFields.Add($pivotTable.Fields[$_])_x000D__x000A_                        $df.Function = $PivotData.$__x000D__x000A_                        if ($PivotNumberFormat) {$df.Format = (Expand-NumberFormat -NumberFormat $PivotNumberFormat)}_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -message "Problem adding data fields to PivotTable $pivotTableName." }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                foreach ($field in $PivotData) {_x000D__x000A_                    try {_x000D__x000A_                        $df = $pivotTable.DataFields.Add($pivotTable.Fields[$field])_x000D__x000A_                        $df.Function = 'Count'_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -message "Problem adding data field '$field' to PivotTable $pivotTableName." }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            foreach ( $pFilter in $PivotFilter) {_x000D__x000A_                try { $null = $pivotTable.PageFields.Add($pivotTable.Fields[$pFilter])}_x000D__x000A_                catch {Write-Warning -message "Could not add '$pFilter' to Filter/Page fields in PivotTable $pivotTableName." }_x000D__x000A_            }_x000D__x000A_            if ($NoTotalsInPivot) {$PivotTotals = "None" }_x000D__x000A_            if ($PivotTotals -eq "None" -or $PivotTotals -eq "Columns") { $pivotTable.RowGrandTotals = $false }_x000D__x000A_            elseif ($PivotTotals -eq "Both" -or $PivotTotals -eq "Rows") { $pivotTable.RowGrandTotals = $true  }_x000D__x000A_            if ($PivotTotals -eq "None" -or $PivotTotals -eq "Rows") { $pivotTable.ColumGrandTotals = $false }   # Epplus spelling mistake, not mine!_x000D__x000A_            elseif ($PivotTotals -eq "Both" -or $PivotTotals -eq "Columns") { $pivotTable.ColumGrandTotals = $true  }_x000D__x000A_            if ($PivotDataToColumn ) { $pivotTable.DataOnRows = $false }_x000D__x000A_            if ($PivotTableStyle) { $pivotTable.TableStyle = $PivotTableStyle}_x000D__x000A_            if ($GroupNumericRow) {_x000D__x000A_                $r = $pivotTable.RowFields.Where( {$_.name -eq $GroupNumericRow })_x000D__x000A_                if (-not $r ) {Write-Warning -Message "Could not find a Row field named '$GroupNumericRow'; no numeric grouping will be done."}_x000D__x000A_                else {$r.AddNumericGrouping($GroupNumericMin, $GroupNumericMax, $GroupNumericInterval)}_x000D__x000A_            }_x000D__x000A_            if ($GroupDateRow -and $PSBoundParameters.ContainsKey("GroupDatePart")) {_x000D__x000A_                $r = $pivotTable.RowFields.Where( {$_.name -eq $GroupDateRow })_x000D__x000A_                if (-not $r ) {Write-Warning -Message "Could not find a Row field named '$GroupDateRow'; no date grouping will be done."}_x000D__x000A_                else {$r.AddDateGrouping($GroupDatePart)}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {Write-Warning -Message "Failed adding PivotTable '$pivotTableName': $_"}_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Write-Warning -Message "PivotTable defined in $($pivotTableName) already exists, only the data range will be changed."_x000D__x000A_        $pivotTable = $wsPivot.PivotTables[$pivotTableName]_x000D__x000A_        if (-not $SourceRange) { $SourceRange = $SourceWorksheet.Dimension.Address}_x000D__x000A_        $pivotTable.CacheDefinition.SourceRange =  $SourceWorksheet.cells[$SourceRange]_x000D__x000A_        #change for epPlus 4.5 -  Previously needed to hack the xml_x000D__x000A_      # $pivotTable.CacheDefinition.CacheDefinitionXml.pivotCacheDefinition.cacheSource.worksheetSource.ref = $SourceRange_x000D__x000A__x000D__x000A_     }_x000D__x000A__x000D__x000A_    #Create the chart if it doesn't exist, leave alone if it does._x000D__x000A_    if ($IncludePivotChart -and -not $wsPivot.Drawings["Chart$pivotTableName"] ) {_x000D__x000A_        try {Add-ExcelChart -PivotTable $pivotTable -ChartType $ChartType -Width $ChartWidth -Height $ChartHeight -Row $ChartRow -Column $ChartColumn -RowOffSetPixels $ChartRowOffSetPixels -ColumnOffSetPixels $ChartColumnOffSetPixels -Title $ChartTitle -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent  }_x000D__x000A_        catch {Write-Warning -Message "Failed adding chart for pivotable '$pivotTableName': $_"}_x000D__x000A_    }_x000D__x000A_    elseif ($PivotChartDefinition -and -not $wsPivot.Drawings["Chart$pivotTableName"]) {_x000D__x000A_        if ($PivotChartDefinition -is [System.Management.Automation.PSCustomObject]) {_x000D__x000A_            $params = @{PivotTable = $pivotTable }_x000D__x000A_            $PivotChartDefinition.PSObject.Properties | ForEach-Object {if ( $null -ne $_.value) {$params[$_.name] = $_.value}}_x000D__x000A_            Add-ExcelChart @params_x000D__x000A_        }_x000D__x000A_        elseif ($PivotChartDefinition -is [hashtable] -or $PivotChartDefinition -is [System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_            Add-ExcelChart -PivotTable $pivotTable  @PivotChartDefinition_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if ($PassThru) {return $pivotTable}_x000D__x000A_</S>
      <Obj N="Options" RefId="395">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">PivotTable</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="396">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.Table.PivotTable.ExcelPivotTable</S>
        </LST>
      </Obj>
      <S N="Name">Add-PivotTable</S>
      <Obj N="CommandType" RefId="397">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="398">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="399">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="400">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">PivotTableName</S>
            <Obj N="Value" RefId="401">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="402">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Address</S>
            <Obj N="Value" RefId="403">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Address</S>
                <S N="ParameterType">OfficeOpenXml.ExcelAddressBase</S>
                <Obj N="Aliases" RefId="404">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="405">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="406">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SourceWorksheet</S>
            <Obj N="Value" RefId="407">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceWorksheet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="408">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SourceRange</S>
            <Obj N="Value" RefId="409">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="410">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotRows</S>
            <Obj N="Value" RefId="411">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotRows</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="412">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotData</S>
            <Obj N="Value" RefId="413">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="414">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotColumns</S>
            <Obj N="Value" RefId="415">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotColumns</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="416">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotFilter</S>
            <Obj N="Value" RefId="417">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotFilter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="418">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotDataToColumn</S>
            <Obj N="Value" RefId="419">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotDataToColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="420">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTotals</S>
            <Obj N="Value" RefId="421">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTotals</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="422">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoTotalsInPivot</S>
            <Obj N="Value" RefId="423">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoTotalsInPivot</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="424">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupDateRow</S>
            <Obj N="Value" RefId="425">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupDateRow</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="426">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupDatePart</S>
            <Obj N="Value" RefId="427">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupDatePart</S>
                <S N="ParameterType">OfficeOpenXml.Table.PivotTable.eDateGroupBy[]</S>
                <Obj N="Aliases" RefId="428">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericRow</S>
            <Obj N="Value" RefId="429">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericRow</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="430">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericMin</S>
            <Obj N="Value" RefId="431">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericMin</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="432">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericMax</S>
            <Obj N="Value" RefId="433">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericMax</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="434">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericInterval</S>
            <Obj N="Value" RefId="435">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericInterval</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="436">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotNumberFormat</S>
            <Obj N="Value" RefId="437">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotNumberFormat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="438">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableStyle</S>
            <Obj N="Value" RefId="439">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="440">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotChartDefinition</S>
            <Obj N="Value" RefId="441">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotChartDefinition</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="442">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotChart</S>
            <Obj N="Value" RefId="443">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="444">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartTitle</S>
            <Obj N="Value" RefId="445">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartTitle</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="446">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartHeight</S>
            <Obj N="Value" RefId="447">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartHeight</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="448">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartWidth</S>
            <Obj N="Value" RefId="449">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartWidth</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="450">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartRow</S>
            <Obj N="Value" RefId="451">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="452">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartColumn</S>
            <Obj N="Value" RefId="453">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="454">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartRowOffSetPixels</S>
            <Obj N="Value" RefId="455">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartRowOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="456">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartColumnOffSetPixels</S>
            <Obj N="Value" RefId="457">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartColumnOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="458">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="459">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="460">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="461">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="462">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="463">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="464">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="465">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="466">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Activate</S>
            <Obj N="Value" RefId="467">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Activate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="468">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="469">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="470">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="471">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="472">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="473">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="474">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="475">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="476">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="477">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="478">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="479">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="480">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="481">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="482">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="483">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="484">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="485">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="486">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="487">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="488">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="489">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="490">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="491">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="492">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="493">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="494">
            <TNRef RefId="8" />
            <ToString>-PivotTableName &lt;string&gt; [-Address &lt;ExcelAddressBase&gt;] [-ExcelPackage &lt;Object&gt;] [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;Object&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;string&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;string&gt;] [-GroupNumericMin &lt;double&gt;] [-GroupNumericMax &lt;double&gt;] [-GroupNumericInterval &lt;double&gt;] [-PivotNumberFormat &lt;string&gt;] [-PivotTableStyle &lt;TableStyles&gt;] [-IncludePivotChart] [-ChartTitle &lt;string&gt;] [-ChartHeight &lt;int&gt;] [-ChartWidth &lt;int&gt;] [-ChartRow &lt;int&gt;] [-ChartColumn &lt;int&gt;] [-ChartRowOffSetPixels &lt;int&gt;] [-ChartColumnOffSetPixels &lt;int&gt;] [-ChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-Activate] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ChartbyParams</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="495">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="496">
            <TNRef RefId="8" />
            <ToString>-PivotTableName &lt;string&gt; -PivotChartDefinition &lt;Object&gt; [-Address &lt;ExcelAddressBase&gt;] [-ExcelPackage &lt;Object&gt;] [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;Object&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;string&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;string&gt;] [-GroupNumericMin &lt;double&gt;] [-GroupNumericMax &lt;double&gt;] [-GroupNumericInterval &lt;double&gt;] [-PivotNumberFormat &lt;string&gt;] [-PivotTableStyle &lt;TableStyles&gt;] [-Activate] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ChartbyDef</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="497">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-PivotTable</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="498">
    <TNRef RefId="0" />
    <ToString>Add-ShouldOperator</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_    Register a Should Operator with Pester_x000D__x000A_.DESCRIPTION_x000D__x000A_    This function allows you to create custom Should assertions._x000D__x000A_.PARAMETER Name_x000D__x000A_    The name of the assertion. This will become a Named Parameter of Should._x000D__x000A_.PARAMETER Test_x000D__x000A_    The test function. The function must return a PSObject with a [Bool]succeeded and a [string]failureMessage property._x000D__x000A_.PARAMETER Alias_x000D__x000A_    A list of aliases for the Named Parameter._x000D__x000A_.PARAMETER SupportsArrayInput_x000D__x000A_    Does the test function support the passing an array of values to test._x000D__x000A_.PARAMETER InternalName_x000D__x000A_    If -Name is different from the actual function name, record the actual function name here._x000D__x000A_    Used by Get-ShouldOperator to pull function help._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    function BeAwesome($ActualValue, [switch] $Negate)_x000D__x000A_    {_x000D__x000A__x000D__x000A_        [bool] $succeeded = $ActualValue -eq 'Awesome'_x000D__x000A_        if ($Negate) { $succeeded = -not $succeeded }_x000D__x000A__x000D__x000A_        if (-not $succeeded)_x000D__x000A_        {_x000D__x000A_            if ($Negate)_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is Awesome"_x000D__x000A_            }_x000D__x000A_            else_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is not Awesome"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return New-Object psobject -Property @{_x000D__x000A_            Succeeded      = $succeeded_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-ShouldOperator -Name  BeAwesome `_x000D__x000A_                        -Test  $function:BeAwesome `_x000D__x000A_                        -Alias 'BA'_x000D__x000A__x000D__x000A_    PS C:\&gt; "bad" | should -BeAwesome_x000D__x000A_    {bad} is not Awesome_x000D__x000A_    ```_x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/Add-ShouldOperator_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock] $Test,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [AllowEmptyCollection()]_x000D__x000A_        [string[]] $Alias = @(),_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [string] $InternalName,_x000D__x000A__x000D__x000A_        [switch] $SupportsArrayInput_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $entry = &amp; $SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_        Test               = $Test_x000D__x000A_        SupportsArrayInput = [bool]$SupportsArrayInput_x000D__x000A_        Name               = $Name_x000D__x000A_        Alias              = $Alias_x000D__x000A_        InternalName       = If ($InternalName) {_x000D__x000A_            $InternalName_x000D__x000A_        }_x000D__x000A_        Else {_x000D__x000A_            $Name_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if (Test-AssertionOperatorIsDuplicate -Operator $entry) {_x000D__x000A_        # This is an exact duplicate of an existing assertion operator._x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $namesToCheck = @(_x000D__x000A_        $Name_x000D__x000A_        $Alias_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-AssertionOperatorNameIsUnique -Name $namesToCheck_x000D__x000A__x000D__x000A_    $script:AssertionOperators[$Name] = $entry_x000D__x000A__x000D__x000A_    foreach ($string in $Alias | &amp; $SafeCommands['Where-Object'] { -not ([string]::IsNullOrWhiteSpace($_))}) {_x000D__x000A_        Assert-ValidAssertionAlias -Alias $string_x000D__x000A_        $script:AssertionAliases[$string] = $Name_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-AssertionDynamicParameterSet -AssertionEntry $entry_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_    Register a Should Operator with Pester_x000D__x000A_.DESCRIPTION_x000D__x000A_    This function allows you to create custom Should assertions._x000D__x000A_.PARAMETER Name_x000D__x000A_    The name of the assertion. This will become a Named Parameter of Should._x000D__x000A_.PARAMETER Test_x000D__x000A_    The test function. The function must return a PSObject with a [Bool]succeeded and a [string]failureMessage property._x000D__x000A_.PARAMETER Alias_x000D__x000A_    A list of aliases for the Named Parameter._x000D__x000A_.PARAMETER SupportsArrayInput_x000D__x000A_    Does the test function support the passing an array of values to test._x000D__x000A_.PARAMETER InternalName_x000D__x000A_    If -Name is different from the actual function name, record the actual function name here._x000D__x000A_    Used by Get-ShouldOperator to pull function help._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    function BeAwesome($ActualValue, [switch] $Negate)_x000D__x000A_    {_x000D__x000A__x000D__x000A_        [bool] $succeeded = $ActualValue -eq 'Awesome'_x000D__x000A_        if ($Negate) { $succeeded = -not $succeeded }_x000D__x000A__x000D__x000A_        if (-not $succeeded)_x000D__x000A_        {_x000D__x000A_            if ($Negate)_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is Awesome"_x000D__x000A_            }_x000D__x000A_            else_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is not Awesome"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return New-Object psobject -Property @{_x000D__x000A_            Succeeded      = $succeeded_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-ShouldOperator -Name  BeAwesome `_x000D__x000A_                        -Test  $function:BeAwesome `_x000D__x000A_                        -Alias 'BA'_x000D__x000A__x000D__x000A_    PS C:\&gt; "bad" | should -BeAwesome_x000D__x000A_    {bad} is not Awesome_x000D__x000A_    ```_x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/Add-ShouldOperator_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock] $Test,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [AllowEmptyCollection()]_x000D__x000A_        [string[]] $Alias = @(),_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [string] $InternalName,_x000D__x000A__x000D__x000A_        [switch] $SupportsArrayInput_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $entry = &amp; $SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_        Test               = $Test_x000D__x000A_        SupportsArrayInput = [bool]$SupportsArrayInput_x000D__x000A_        Name               = $Name_x000D__x000A_        Alias              = $Alias_x000D__x000A_        InternalName       = If ($InternalName) {_x000D__x000A_            $InternalName_x000D__x000A_        }_x000D__x000A_        Else {_x000D__x000A_            $Name_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if (Test-AssertionOperatorIsDuplicate -Operator $entry) {_x000D__x000A_        # This is an exact duplicate of an existing assertion operator._x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $namesToCheck = @(_x000D__x000A_        $Name_x000D__x000A_        $Alias_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-AssertionOperatorNameIsUnique -Name $namesToCheck_x000D__x000A__x000D__x000A_    $script:AssertionOperators[$Name] = $entry_x000D__x000A__x000D__x000A_    foreach ($string in $Alias | &amp; $SafeCommands['Where-Object'] { -not ([string]::IsNullOrWhiteSpace($_))}) {_x000D__x000A_        Assert-ValidAssertionAlias -Alias $string_x000D__x000A_        $script:AssertionAliases[$string] = $Name_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-AssertionDynamicParameterSet -AssertionEntry $entry_x000D__x000A_</S>
      <Obj N="Options" RefId="499">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">ShouldOperator</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="500">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Add-ShouldOperator</S>
      <Obj N="CommandType" RefId="501">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="502">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Obj N="Module" RefId="503">
        <TNRef RefId="15" />
        <ToString>Pester</ToString>
        <Props>
          <B N="LogPipelineExecutionDetails">false</B>
          <S N="Name">Pester</S>
          <S N="Path">C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\Pester\5.1.1\Pester.psm1</S>
          <Nil N="ImplementingAssembly" />
          <S N="Definition"># file src\functions\Pester.SafeCommands.ps1_x000D__x000A_# Tried using $ExecutionState.InvokeCommand.GetCmdlet() here, but it does not trigger module auto-loading the way_x000D__x000A_# Get-Command does.  Since this is at import time, before any mocks have been defined, that's probably acceptable._x000D__x000A_# If someone monkeys with Get-Command before they import Pester, they may break something._x000D__x000A__x000D__x000A_# The -All parameter is required when calling Get-Command to ensure that PowerShell can find the command it is_x000D__x000A_# looking for. Otherwise, if you have modules loaded that define proxy cmdlets or that have cmdlets with the same_x000D__x000A_# name as the safe cmdlets, Get-Command will return null._x000D__x000A_$safeCommandLookupParameters = @{_x000D__x000A_    CommandType = 'Cmdlet'_x000D__x000A_    ErrorAction = 'Stop'_x000D__x000A_    All         = $true_x000D__x000A_}_x000D__x000A__x000D__x000A_# Suppress from ScriptAnalyzer rule when possible in root of script (future PSSA release?)_x000D__x000A_# [Diagnostics.CodeAnalysis.SuppressMessageAttribute('Pester.BuildAnalyzerRules\Measure-SafeCommands', 'Get-Command', Justification = 'Used to generate SafeCommands list used for AnalyzerRule.')]_x000D__x000A_$Get_Command = Get-Command Get-Command -CommandType Cmdlet -ErrorAction 'Stop'_x000D__x000A_$script:SafeCommands = @{_x000D__x000A_    'Get-Command'          = $Get_Command_x000D__x000A_    'Add-Member'           = &amp; $Get_Command -Name Add-Member           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Add-Type'             = &amp; $Get_Command -Name Add-Type             -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Compare-Object'       = &amp; $Get_Command -Name Compare-Object       -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Export-ModuleMember'  = &amp; $Get_Command -Name Export-ModuleMember  -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'ForEach-Object'       = &amp; $Get_Command -Name ForEach-Object       -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Format-Table'         = &amp; $Get_Command -Name Format-Table         -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-Alias'            = &amp; $Get_Command -Name Get-Alias            -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-ChildItem'        = &amp; $Get_Command -Name Get-ChildItem        -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-Content'          = &amp; $Get_Command -Name Get-Content          -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-Date'             = &amp; $Get_Command -Name Get-Date             -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-Item'             = &amp; $Get_Command -Name Get-Item             -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-ItemProperty'     = &amp; $Get_Command -Name Get-ItemProperty     -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-Location'         = &amp; $Get_Command -Name Get-Location         -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-Member'           = &amp; $Get_Command -Name Get-Member           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-Module'           = &amp; $Get_Command -Name Get-Module           -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Get-PSDrive'          = &amp; $Get_Command -Name Get-PSDrive          -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Get-PSCallStack'      = &amp; $Get_Command -Name Get-PSCallStack      -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-Unique'           = &amp; $Get_Command -Name Get-Unique           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Get-Variable'         = &amp; $Get_Command -Name Get-Variable         -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Group-Object'         = &amp; $Get_Command -Name Group-Object         -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Import-LocalizedData' = &amp; $Get_Command -Name Import-LocalizedData -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Import-Module'        = &amp; $Get_Command -Name Import-Module        -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Join-Path'            = &amp; $Get_Command -Name Join-Path            -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Measure-Object'       = &amp; $Get_Command -Name Measure-Object       -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'New-Item'             = &amp; $Get_Command -Name New-Item             -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'New-ItemProperty'     = &amp; $Get_Command -Name New-ItemProperty     -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'New-Module'           = &amp; $Get_Command -Name New-Module           -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'New-Object'           = &amp; $Get_Command -Name New-Object           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'New-PSDrive'          = &amp; $Get_Command -Name New-PSDrive          -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'New-Variable'         = &amp; $Get_Command -Name New-Variable         -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Out-Host'             = &amp; $Get_Command -Name Out-Host             -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Out-File'             = &amp; $Get_Command -Name Out-File             -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Out-Null'             = &amp; $Get_Command -Name Out-Null             -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Out-String'           = &amp; $Get_Command -Name Out-String           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Pop-Location'         = &amp; $Get_Command -Name Pop-Location         -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Push-Location'        = &amp; $Get_Command -Name Push-Location        -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Remove-Item'          = &amp; $Get_Command -Name Remove-Item          -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Remove-PSBreakpoint'  = &amp; $Get_Command -Name Remove-PSBreakpoint  -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Remove-PSDrive'       = &amp; $Get_Command -Name Remove-PSDrive       -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Remove-Variable'      = &amp; $Get_Command -Name Remove-Variable      -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Resolve-Path'         = &amp; $Get_Command -Name Resolve-Path         -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Select-Object'        = &amp; $Get_Command -Name Select-Object        -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Set-Alias'            = &amp; $Get_Command -Name Set-Alias            -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Set-Content'          = &amp; $Get_Command -Name Set-Content          -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Set-Location'         = &amp; $Get_Command -Name Set-Location         -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Set-PSBreakpoint'     = &amp; $Get_Command -Name Set-PSBreakpoint     -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Set-StrictMode'       = &amp; $Get_Command -Name Set-StrictMode       -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Set-Variable'         = &amp; $Get_Command -Name Set-Variable         -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Sort-Object'          = &amp; $Get_Command -Name Sort-Object          -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Split-Path'           = &amp; $Get_Command -Name Split-Path           -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Start-Sleep'          = &amp; $Get_Command -Name Start-Sleep          -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Test-Path'            = &amp; $Get_Command -Name Test-Path            -Module Microsoft.PowerShell.Management @safeCommandLookupParameters_x000D__x000A_    'Where-Object'         = &amp; $Get_Command -Name Where-Object         -Module Microsoft.PowerShell.Core       @safeCommandLookupParameters_x000D__x000A_    'Write-Error'          = &amp; $Get_Command -Name Write-Error          -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Write-Host'           = &amp; $Get_Command -Name Write-Host           -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Write-Progress'       = &amp; $Get_Command -Name Write-Progress       -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Write-Verbose'        = &amp; $Get_Command -Name Write-Verbose        -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_    'Write-Warning'        = &amp; $Get_Command -Name Write-Warning        -Module Microsoft.PowerShell.Utility    @safeCommandLookupParameters_x000D__x000A_}_x000D__x000A__x000D__x000A_# Not all platforms have Get-WmiObject (Nano or PSCore 6.0.0-beta.x on Linux)_x000D__x000A_# Get-CimInstance is preferred, but we can use Get-WmiObject if it exists_x000D__x000A_# Moreover, it shouldn't really be fatal if neither of those cmdlets_x000D__x000A_# exist_x000D__x000A_if (($cim = &amp; $Get_Command -Name Get-CimInstance -Module CimCmdlets -CommandType Cmdlet -ErrorAction Ignore)) {_x000D__x000A_    $script:SafeCommands['Get-CimInstance'] = $cim_x000D__x000A_}_x000D__x000A_elseif (($wmi = &amp; $Get_Command -Name Get-WmiObject -Module Microsoft.PowerShell.Management -CommandType Cmdlet -ErrorAction Ignore)) {_x000D__x000A_    $script:SafeCommands['Get-WmiObject'] = $wmi_x000D__x000A_}_x000D__x000A_elseif (($unames = &amp; $Get_Command -Name uname -CommandType Application -ErrorAction Ignore)) {_x000D__x000A_    $script:SafeCommands['uname'] = if ($null -ne $unames -and 0 -lt @($unames).Count) { $unames[0] }_x000D__x000A_    if  (($ids = &amp; $Get_Command -Name id -CommandType Application -ErrorAction Ignore)) {_x000D__x000A_        $script:SafeCommands['id'] = if ($null -ne $ids -and 0 -lt @($ids).Count) { $ids[0] }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_else {_x000D__x000A_    Write-Warning "OS Information retrieval is not possible, reports will contain only partial system data"_x000D__x000A_}_x000D__x000A__x000D__x000A_# little sanity check to make sure we don't blow up a system with a typo up there_x000D__x000A_# (not that I've EVER done that by, for example, mapping New-Item to Remove-Item...)_x000D__x000A__x000D__x000A_foreach ($keyValuePair in $script:SafeCommands.GetEnumerator()) {_x000D__x000A_    if ($keyValuePair.Key -ne $keyValuePair.Value.Name) {_x000D__x000A_        throw "SafeCommands entry for $($keyValuePair.Key) does not hold a reference to the proper command."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# file src\Pester.Types.ps1_x000D__x000A_if ($PSVersionTable.PSVersion.Major -ge 6) {_x000D__x000A_    &amp; $SafeCommands['Add-Type'] -Path "$PSScriptRoot/bin/netstandard2.0/Pester.dll"_x000D__x000A_}_x000D__x000A_else {_x000D__x000A_    &amp; $SafeCommands['Add-Type'] -Path "$PSScriptRoot/bin/net452/Pester.dll"_x000D__x000A_}_x000D__x000A_# file src\Pester.State.ps1_x000D__x000A_$script:AssertionOperators = [Collections.Generic.Dictionary[string,object]]([StringComparer]::InvariantCultureIgnoreCase)_x000D__x000A_$script:AssertionAliases = [Collections.Generic.Dictionary[string,object]]([StringComparer]::InvariantCultureIgnoreCase)_x000D__x000A_$script:AssertionDynamicParams = [Pester.Factory]::CreateRuntimeDefinedParameterDictionary()_x000D__x000A_$script:DisableScopeHints = $true_x000D__x000A_# file src\Pester.Utility.ps1_x000D__x000A_function or {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        $DefaultValue,_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($InputObject) {_x000D__x000A_        $InputObject_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $DefaultValue_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# looks for a property on object that might be null_x000D__x000A_function tryGetProperty {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Position = 0)]_x000D__x000A_        $InputObject,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1)]_x000D__x000A_        $PropertyName_x000D__x000A_    )_x000D__x000A_    if ($null -eq $InputObject) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $InputObject.$PropertyName_x000D__x000A__x000D__x000A_    # this would be useful if we looked for property that might not exist_x000D__x000A_    # but that is not the case so-far. Originally I implemented this incorrectly_x000D__x000A_    # so I will keep this here for reference in case I was wrong the second time as well_x000D__x000A_    # $property = $InputObject.PSObject.Properties.Item($PropertyName)_x000D__x000A_    # if ($null -ne $property) {_x000D__x000A_    #     $property.Value_x000D__x000A_    # }_x000D__x000A_}_x000D__x000A__x000D__x000A_function trySetProperty {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Position = 0)]_x000D__x000A_        $InputObject,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1)]_x000D__x000A_        $PropertyName,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 2)]_x000D__x000A_        $Value_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -eq $InputObject) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $InputObject.$PropertyName = $Value_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_# combines collections that are not null or empty, but does not remove null values_x000D__x000A_# from collections so e.g. combineNonNull @(@(1,$null), @(1,2,3), $null, $null, 10)_x000D__x000A_# returns 1, $null, 1, 2, 3, 10_x000D__x000A_function combineNonNull ($Array) {_x000D__x000A_    foreach ($i in $Array) {_x000D__x000A__x000D__x000A_        $arr = @($i)_x000D__x000A_        if ($null -ne $i -and $arr.Length -gt 0) {_x000D__x000A_            foreach ($a in $arr) {_x000D__x000A_                $a_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_filter selectNonNull {_x000D__x000A_    param($Collection)_x000D__x000A_    @(foreach ($i in $Collection) {_x000D__x000A_        if ($i) { $i }_x000D__x000A_    })_x000D__x000A_}_x000D__x000A__x000D__x000A_function any ($InputObject) {_x000D__x000A_    # inlining version_x000D__x000A_    $(&lt;# any #&gt; if (-not ($s = $InputObject)) { return $false } else { @($s).Length -gt 0 })_x000D__x000A_    # if (-not $InputObject) {_x000D__x000A_    #     return $false_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # @($InputObject).Length -gt 0_x000D__x000A_}_x000D__x000A__x000D__x000A_function none ($InputObject) {_x000D__x000A_    -not (any $InputObject)_x000D__x000A_}_x000D__x000A__x000D__x000A_function defined {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $Name_x000D__x000A_    )_x000D__x000A_    # gets a variable via the provider and returns it's value, the name is slightly misleading_x000D__x000A_    # because it indicates that the variable is not defined when it is null, but that is fine_x000D__x000A_    # the call to the provider is slightly more expensive (at least it seems) so this should be_x000D__x000A_    # used only when we want a value that we will further inspect, and we don't want to add the overhead of_x000D__x000A_    # first checking that the variable exists and then getting it's value like here:_x000D__x000A_    # defined v &amp; hasValue v &amp; $v.Name -eq "abc"_x000D__x000A_    $ExecutionContext.SessionState.PSVariable.GetValue($Name)_x000D__x000A_}_x000D__x000A__x000D__x000A_function notDefined {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $Name_x000D__x000A_    )_x000D__x000A_    # gets a variable via the provider and returns it's value, the name is slightly misleading_x000D__x000A_    # because it indicates that the variable is not defined when it is null, but that is fine_x000D__x000A_    # the call to the provider is slightly more expensive (at least it seems) so this should be_x000D__x000A_    # used only when we want a value that we will further inspect_x000D__x000A_    $null -eq ($ExecutionContext.SessionState.PSVariable.GetValue($Name))_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function sum ($InputObject, $PropertyName, $Zero) {_x000D__x000A_    if (none $InputObject.Length) {_x000D__x000A_        return $Zero_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $acc = $Zero_x000D__x000A_    foreach ($i in $InputObject) {_x000D__x000A_        $acc += $i.$PropertyName_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $acc_x000D__x000A_}_x000D__x000A__x000D__x000A_function tryGetValue {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Hashtable,_x000D__x000A_        $Key_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($Hashtable.ContainsKey($Key)) {_x000D__x000A_        # do not enumerate so we get the same thing back_x000D__x000A_        # even if it is a collection_x000D__x000A_        $PSCmdlet.WriteObject($Hashtable.$Key, $false)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function tryAddValue {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Hashtable,_x000D__x000A_        $Key,_x000D__x000A_        $Value_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (-not $Hashtable.ContainsKey($Key)) {_x000D__x000A_        $null = $Hashtable.Add($Key, $Value)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function getOrUpdateValue {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Hashtable,_x000D__x000A_        $Key,_x000D__x000A_        $DefaultValue_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($Hashtable.ContainsKey($Key)) {_x000D__x000A_        # do not enumerate so we get the same thing back_x000D__x000A_        # even if it is a collection_x000D__x000A_        $PSCmdlet.WriteObject($Hashtable.$Key, $false)_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $Hashtable.Add($Key, $DefaultValue)_x000D__x000A_        # do not enumerate so we get the same thing back_x000D__x000A_        # even if it is a collection_x000D__x000A_        $PSCmdlet.WriteObject($DefaultValue, $false)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function tryRemoveKey ($Hashtable, $Key) {_x000D__x000A_    if ($Hashtable.ContainsKey($Key)) {_x000D__x000A_        $Hashtable.Remove($Key)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-DataToContext ($Destination, $Data) {_x000D__x000A_    # works as Merge-Hashtable, but additionally adds __x000D__x000A_    # which will become $_, and checks if the Data is_x000D__x000A_    # expandable, otherwise it just defines $__x000D__x000A__x000D__x000A_    if ($Data.Count -eq 0) {_x000D__x000A_        $a = 10_x000D__x000A_    }_x000D__x000A_    if (-not $Destination.ContainsKey("_")) {_x000D__x000A_        $Destination.Add("_", $Data)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Data -is [Collections.IDictionary]) {_x000D__x000A_        # only add non existing keys so in case of conflict_x000D__x000A_        # the framework name wins, as if we had explicit parameters_x000D__x000A_        # on a scriptblock, then the parameter would also win_x000D__x000A_        foreach ($p in $Data.GetEnumerator()) {_x000D__x000A_            if (-not $Destination.ContainsKey($p.Key)) {_x000D__x000A_                $Destination.Add($p.Key, $p.Value)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Merge-Hashtable ($Source, $Destination) {_x000D__x000A_    foreach ($p in $Source.GetEnumerator()) {_x000D__x000A_        # only add non existing keys so in case of conflict_x000D__x000A_        # the framework name wins, as if we had explicit parameters_x000D__x000A_        # on a scriptblock, then the parameter would also win_x000D__x000A_        if (-not $Destination.ContainsKey($p.Key)) {_x000D__x000A_            $Destination.Add($p.Key, $p.Value)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Merge-HashtableOrObject ($Source, $Destination) {_x000D__x000A_    if ($Source -isnot [Collections.IDictionary] -and $Source -isnot [PSObject]) {_x000D__x000A_        throw "Source must be a Hashtable, IDictionary or a PSObject."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Destination -isnot [PSObject]) {_x000D__x000A_        throw "Destination must be a PSObject."_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    $sourceIsPSObject = $Source -is [PSObject]_x000D__x000A_    $sourceIsDictionary = $Source -is [Collections.IDictionary]_x000D__x000A_    $destinationIsPSObject = $Destination -is [PSObject]_x000D__x000A_    $destinationIsDictionary = $Destination -is [Collections.IDictionary]_x000D__x000A__x000D__x000A_    $items = if ($sourceIsDictionary) { $Source.GetEnumerator() } else { $Source.PSObject.Properties }_x000D__x000A_    foreach ($p in $items) {_x000D__x000A_        if ($null -eq $Destination.PSObject.Properties.Item($p.Key)) {_x000D__x000A_            $Destination.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty($p.Key, $p.Value))_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($p.Value -is [hashtable] -or $p.Value -is [PSObject]) {_x000D__x000A_                Merge-HashtableOrObject -Source $p.Value -Destination $Destination.($p.Key)_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $Destination.($p.Key) = $p.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-PesterDebugMessage {_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = "Default")]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [ValidateSet("Filter", "Skip", "Runtime", "RuntimeCore", "Mock", "MockCore", "Discovery", "DiscoveryCore", "SessionState", "Timing", "TimingCore", "Plugin", "PluginCore", "CodeCoverage")]_x000D__x000A_        [String[]] $Scope,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1, ParameterSetName = "Default")]_x000D__x000A_        [String] $Message,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1, ParameterSetName = "Lazy")]_x000D__x000A_        [ScriptBlock] $LazyMessage,_x000D__x000A_        [Parameter(Position = 2)]_x000D__x000A_        [Management.Automation.ErrorRecord] $ErrorRecord_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (-not $PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        throw "This should never happen. All calls to Write-PesterDebugMessage should be wrapped in `if` to avoid perfomace hit of allocating the message and calling the function. Inspect the call stack to know where this call came from. This can also happen if `$PesterPreference is different from the `$PesterPreference that utilities see because of incorrect scoping."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $messagePreference = $PesterPreference.Debug.WriteDebugMessagesFrom.Value_x000D__x000A_    $any = $false_x000D__x000A_    foreach ($s in $Scope) {_x000D__x000A_        if ($any) {_x000D__x000A_            break_x000D__x000A_        }_x000D__x000A_        foreach ($p in $messagePreference) {_x000D__x000A_            if ($s -like $p) {_x000D__x000A_                $any = $true_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $any) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $color = if ($null -ne $ErrorRecord) {_x000D__x000A_            "Red"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            switch ($Scope) {_x000D__x000A_                "Filter" { "Cyan" }_x000D__x000A_                "Skip" { "Cyan" }_x000D__x000A_                "Runtime" { "DarkGray" }_x000D__x000A_                "RuntimeCore" { "Cyan" }_x000D__x000A_                "Mock" { "DarkYellow" }_x000D__x000A_                "Discovery" { "DarkMagenta" }_x000D__x000A_                "DiscoveryCore" { "DarkMagenta" }_x000D__x000A_                "SessionState" { "Gray" }_x000D__x000A_                "Timing" { "Gray" }_x000D__x000A_                "TimingCore" { "Gray" }_x000D__x000A_                "PluginCore" { "Blue" }_x000D__x000A_                "Plugin" { "Blue" }_x000D__x000A_                "CodeCoverage" { "Yellow" }_x000D__x000A_                default { "Cyan" }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_    # this evaluates a message that is expensive to produce so we only evaluate it_x000D__x000A_    # when we know that we will write it. All messages could be provided as scriptblocks_x000D__x000A_    # but making a script block is slightly more expensive than making a string, so lazy approach_x000D__x000A_    # is used only when the message is obviously expensive, like folding the whole tree to get_x000D__x000A_    # count of found tests_x000D__x000A_    #TODO: remove this, it was clever but the best performance is achieved by putting an if around the whole call which is what I do in hopefully all places, that way the scriptblock nor the string are allocated_x000D__x000A_    if ($null -ne $LazyMessage) {_x000D__x000A_        $Message = (&amp;$LazyMessage) -join "`n"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    &amp; $script:SafeCommands['Write-Host'] -ForegroundColor Black -BackgroundColor $color  "${Scope}: $Message "_x000D__x000A_    if ($null -ne $ErrorRecord) {_x000D__x000A_        &amp; $script:SafeCommands['Write-Host'] -ForegroundColor Black -BackgroundColor $color "$ErrorRecord"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Fold-Block {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $Block,_x000D__x000A_        $OnBlock = {},_x000D__x000A_        $OnTest = {},_x000D__x000A_        $Accumulator_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        foreach ($b in $Block) {_x000D__x000A_            $Accumulator = &amp; $OnBlock $Block $Accumulator_x000D__x000A_            foreach ($test in $Block.Tests) {_x000D__x000A_                $Accumulator = &amp;$OnTest $test $Accumulator_x000D__x000A_            }_x000D__x000A__x000D__x000A_            foreach ($b in $Block.Blocks) {_x000D__x000A_                Fold-Block -Block $b -OnTest $OnTest -OnBlock $OnBlock -Accumulator $Accumulator_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Fold-Container {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $Container,_x000D__x000A_        $OnContainer = {},_x000D__x000A_        $OnBlock = {},_x000D__x000A_        $OnTest = {},_x000D__x000A_        $Accumulator_x000D__x000A_    )_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        foreach ($c in $Container) {_x000D__x000A_            $Accumulator = &amp; $OnContainer $c $Accumulator_x000D__x000A_            foreach ($block in $c.Blocks) {_x000D__x000A_                Fold-Block -Block $block -OnBlock $OnBlock -OnTest $OnTest -Accumulator $Accumulator_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Fold-Run {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $Run,_x000D__x000A_        $OnRun = {},_x000D__x000A_        $OnContainer = {},_x000D__x000A_        $OnBlock = {},_x000D__x000A_        $OnTest = {},_x000D__x000A_        $Accumulator_x000D__x000A_    )_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        foreach ($r in $Run) {_x000D__x000A_            $Accumulator = &amp; $OnRun $r $Accumulator_x000D__x000A_            foreach ($container in $r.Containers) {_x000D__x000A_                Fold-Container -Container $container -OnContainer $OnContainer -OnBlock $OnBlock -OnTest $OnTest -Accumulator $Accumulator_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\Pester.Runtime.psm1_x000D__x000A__x000D__x000A_# instances_x000D__x000A_$flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_$script:SessionStateInternalProperty = [System.Management.Automation.SessionState].GetProperty('Internal', $flags)_x000D__x000A_$script:ScriptBlockSessionStateInternalProperty = [System.Management.Automation.ScriptBlock].GetProperty('SessionStateInternal', $flags)_x000D__x000A_$script:ScriptBlockSessionStateProperty = [System.Management.Automation.ScriptBlock].GetProperty("SessionState", $flags)_x000D__x000A__x000D__x000A_if (notDefined PesterPreference) {_x000D__x000A_    $PesterPreference = [PesterConfiguration]::Default_x000D__x000A_}_x000D__x000A_else {_x000D__x000A_    $PesterPreference = [PesterConfiguration] $PesterPreference_x000D__x000A_}_x000D__x000A__x000D__x000A_$state = [PSCustomObject] @{_x000D__x000A_    # indicate whether or not we are currently_x000D__x000A_    # running in discovery mode se we can change_x000D__x000A_    # behavior of the commands appropriately_x000D__x000A_    Discovery           = $false_x000D__x000A__x000D__x000A_    CurrentBlock        = $null_x000D__x000A_    CurrentTest         = $null_x000D__x000A__x000D__x000A_    Plugin              = $null_x000D__x000A_    PluginConfiguration = $null_x000D__x000A_    Configuration       = $null_x000D__x000A__x000D__x000A_    TotalStopWatch      = $null_x000D__x000A_    UserCodeStopWatch   = $null_x000D__x000A_    FrameworkStopWatch  = $null_x000D__x000A_    Stack               = [Collections.Stack]@()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Reset-TestSuiteState {_x000D__x000A_    # resets the module state to the default_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Resetting all state to default."_x000D__x000A_    }_x000D__x000A_    $state.Discovery = $false_x000D__x000A__x000D__x000A_    $state.Plugin = $null_x000D__x000A_    $state.PluginConfiguration = $null_x000D__x000A_    $state.Configuration = $null_x000D__x000A__x000D__x000A_    $state.CurrentBlock = $null_x000D__x000A_    $state.CurrentTest = $null_x000D__x000A_    $state.Stack.Clear()_x000D__x000A_    Reset-TestSuiteTimer_x000D__x000A_}_x000D__x000A__x000D__x000A_function Reset-PerContainerState {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $RootBlock_x000D__x000A_    )_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Resetting per container state."_x000D__x000A_    }_x000D__x000A_    $state.CurrentBlock = $RootBlock_x000D__x000A_    $state.Stack.Clear()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Find-Test {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [PSObject[]] $BlockContainer,_x000D__x000A_        $Filter,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope DiscoveryCore "Running just discovery."_x000D__x000A_    }_x000D__x000A_    $found = Discover-Test -BlockContainer $BlockContainer -Filter $Filter -SessionState $SessionState_x000D__x000A__x000D__x000A_    foreach ($f in $found) {_x000D__x000A_        ConvertTo-DiscoveredBlockContainer -Block $f_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-DiscoveredBlockContainer {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # takes a root block and converts it to a discovered block container_x000D__x000A_    # that we can publish from Find-Test, because keeping everything a block makes the internal_x000D__x000A_    # code simpler_x000D__x000A_    $container = $Block.BlockContainer_x000D__x000A_    $content = tryGetProperty $container Content_x000D__x000A_    $type = tryGetProperty $container Type_x000D__x000A__x000D__x000A_    # TODO: Add other properties that are relevant to found tests_x000D__x000A_    $b = $Block | &amp;$SafeCommands['Select-Object'] -ExcludeProperty @(_x000D__x000A_        "Parent"_x000D__x000A_        "Name"_x000D__x000A_        "Tag"_x000D__x000A_        "First"_x000D__x000A_        "Last"_x000D__x000A_        "StandardOutput"_x000D__x000A_        "Passed"_x000D__x000A_        "Skipped"_x000D__x000A_        "Executed"_x000D__x000A_        "Path",_x000D__x000A_        "StartedAt",_x000D__x000A_        "Duration",_x000D__x000A_        "Aggregated*"_x000D__x000A_    ) -Property @(_x000D__x000A_        @{n = "Content"; e = { $content } }_x000D__x000A_        @{n = "Type"; e = { $type } },_x000D__x000A_        '*'_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $b_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-ExecutedBlockContainer {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    foreach ($b in $Block) {_x000D__x000A_        [Pester.Container]::CreateFromBlock($b)_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_}_x000D__x000A__x000D__x000A_function New-ParametrizedBlock {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String] $Name,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [int] $StartLine = $MyInvocation.ScriptLineNumber,_x000D__x000A_        [String[]] $Tag = @(),_x000D__x000A_        [HashTable] $FrameworkData = @{ },_x000D__x000A_        [Switch] $Focus,_x000D__x000A_        [String] $Id,_x000D__x000A_        [Switch] $Skip,_x000D__x000A_        $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    foreach ($d in @($Data)) {_x000D__x000A_        # shallow clone to give every block it's own copy_x000D__x000A_        $fmwData = $FrameworkData.Clone()_x000D__x000A_        New-Block -Name $Name -ScriptBlock $ScriptBlock -StartLine $StartLine -Tag $Tag -FrameworkData $fmwData -Focus:$Focus -Skip:$Skip -Data $d_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a block that contains tests_x000D__x000A_# or other blocks_x000D__x000A_function New-Block {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String] $Name,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [int] $StartLine = $MyInvocation.ScriptLineNumber,_x000D__x000A_        [String[]] $Tag = @(),_x000D__x000A_        [HashTable] $FrameworkData = @{ },_x000D__x000A_        [Switch] $Focus,_x000D__x000A_        [String] $Id,_x000D__x000A_        [Switch] $Skip,_x000D__x000A_        $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Switch-Timer -Scope Framework_x000D__x000A_    # $overheadStartTime = $state.FrameworkStopWatch.Elapsed_x000D__x000A_    # $blockStartTime = $state.UserCodeStopWatch.Elapsed_x000D__x000A__x000D__x000A_    $state.Stack.Push($Name)_x000D__x000A_    $path = @( &lt;# Get full name #&gt; $history = $state.Stack.ToArray(); [Array]::Reverse($history); $history)_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Entering path $($path -join '.')"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $block = $null_x000D__x000A_    $previousBlock = $state.CurrentBlock_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope DiscoveryCore "Adding block $Name to discovered blocks"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # new block_x000D__x000A_    $block = [Pester.Block]::Create()_x000D__x000A_    $block.Name = $Name_x000D__x000A_    # using the non-expanded name as default to fallback to it if we don't_x000D__x000A_    # reach the point where we expand it, for example because of setup failure_x000D__x000A_    $block.ExpandedName = $Name_x000D__x000A__x000D__x000A_    $block.Path = $Path_x000D__x000A_    # using the non-expanded path as default to fallback to it if we don't_x000D__x000A_    # reach the point where we expand it, for example because of setup failure_x000D__x000A_    $block.ExpandedPath = $Path -join '.'_x000D__x000A_    $block.Tag = $Tag_x000D__x000A_    $block.ScriptBlock = $ScriptBlock_x000D__x000A_    $block.StartLine = $StartLine_x000D__x000A_    $block.FrameworkData = $FrameworkData_x000D__x000A_    $block.Focus = $Focus_x000D__x000A_    $block.Id = $Id_x000D__x000A_    $block.Skip = $Skip_x000D__x000A_    $block.Data = $Data_x000D__x000A__x000D__x000A_    # we attach the current block to the parent, and put it to the parent_x000D__x000A_    # lists_x000D__x000A_    $block.Parent = $state.CurrentBlock_x000D__x000A_    $state.CurrentBlock.Order.Add($block)_x000D__x000A_    $state.CurrentBlock.Blocks.Add($block)_x000D__x000A__x000D__x000A_    # and then make it the new current block_x000D__x000A_    $state.CurrentBlock = $block_x000D__x000A_    try {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope DiscoveryCore "Discovering in body of block $Name"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -ne $block.Data) {_x000D__x000A_            $context = @{}_x000D__x000A_            Add-DataToContext -Destination $context -Data $block.Data_x000D__x000A__x000D__x000A_            $setVariablesAndRunBlock = {_x000D__x000A_                param ($private:______parameters)_x000D__x000A__x000D__x000A_                foreach ($private:______current in $private:______parameters.Context.GetEnumerator()) {_x000D__x000A_                    $ExecutionContext.SessionState.PSVariable.Set($private:______current.Key, $private:______current.Value)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $private:______current = $null_x000D__x000A__x000D__x000A_                . $private:______parameters.ScriptBlock_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $parameters = @{_x000D__x000A_                Context = $context_x000D__x000A_                ScriptBlock = $ScriptBlock_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $SessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($ScriptBlock, $null)_x000D__x000A_            $script:ScriptBlockSessionStateInternalProperty.SetValue($setVariablesAndRunBlock, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_            &amp; $setVariablesAndRunBlock $parameters_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            &amp; $ScriptBlock_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope DiscoveryCore "Finished discovering in body of block $Name"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $state.CurrentBlock = $previousBlock_x000D__x000A_        $null = $state.Stack.Pop()_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Left block $Name"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-Block ($previousBlock) {_x000D__x000A_    Switch-Timer -Scope Framework_x000D__x000A_    $overheadStartTime = $state.FrameworkStopWatch.Elapsed_x000D__x000A_    $blockStartTime = $state.UserCodeStopWatch.Elapsed_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Entering path $($path -join '.')"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($item in $previousBlock.Order) {_x000D__x000A_        if ('Test' -eq $item.ItemType) {_x000D__x000A_            Invoke-TestItem -Test $item_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $block = $item_x000D__x000A_            $state.CurrentBlock = $block_x000D__x000A_            try {_x000D__x000A_                if (-not $block.ShouldRun) {_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        Write-PesterDebugMessage -Scope Runtime "Block '$($block.Name)' is excluded from run, returning"_x000D__x000A_                    }_x000D__x000A_                    continue_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $block.ExecutedAt = [DateTime]::Now_x000D__x000A_                $block.Executed = $true_x000D__x000A__x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Runtime "Executing body of block '$($block.Name)'"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # no callbacks are provided because we are not transitioning between any states_x000D__x000A_                $frameworkSetupResult = Invoke-ScriptBlock `_x000D__x000A_                    -OuterSetup @(_x000D__x000A_                    if ($block.First) { $state.Plugin.OneTimeBlockSetupStart }_x000D__x000A_                ) `_x000D__x000A_                    -Setup @( $state.Plugin.EachBlockSetupStart ) `_x000D__x000A_                    -Context @{_x000D__x000A_                    Context = @{_x000D__x000A_                        # context that is visible to plugins_x000D__x000A_                        Block         = $block_x000D__x000A_                        Test          = $null_x000D__x000A_                        Configuration = $state.PluginConfiguration_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($frameworkSetupResult.Success) {_x000D__x000A_                    # this craziness makes one extra scope that is bound to the user session state_x000D__x000A_                    # and inside of it the Invoke-Block is called recursively. Ultimately this invokes all blocks_x000D__x000A_                    # in their own scope like this:_x000D__x000A_                    # &amp; { # block 1_x000D__x000A_                    #     . block 1 setup_x000D__x000A_                    #     &amp; { # block 2_x000D__x000A_                    #         . block 2 setup_x000D__x000A_                    #         &amp; { # block 3_x000D__x000A_                    #             . block 3 setup_x000D__x000A_                    #             &amp; { # test one_x000D__x000A_                    #                 . test 1 setup_x000D__x000A_                    #                 . test1_x000D__x000A_                    #             }_x000D__x000A_                    #         }_x000D__x000A_                    #     }_x000D__x000A_                    # }_x000D__x000A__x000D__x000A_                    $sb = {_x000D__x000A_                        param($______pester_invoke_block_parameters)_x000D__x000A_                        &amp; $______pester_invoke_block_parameters.Invoke_Block -previousBlock $______pester_invoke_block_parameters.Block_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    $context = @{_x000D__x000A_                        ______pester_invoke_block_parameters = @{_x000D__x000A_                            Invoke_Block = ${function:Invoke-Block}_x000D__x000A_                            Block        = $block_x000D__x000A_                        }_x000D__x000A_                        ____Pester = $State_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    if ($null -ne $block.Data) {_x000D__x000A_                        Add-DataToContext -Destination $context -Data $block.Data_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    $sessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($block.ScriptBlock, $null)_x000D__x000A_                    $script:ScriptBlockSessionStateInternalProperty.SetValue($sb, $SessionStateInternal)_x000D__x000A__x000D__x000A_                    $result = Invoke-ScriptBlock `_x000D__x000A_                        -ScriptBlock $sb `_x000D__x000A_                        -OuterSetup @(_x000D__x000A_                            $(if (-not (Is-Discovery) -and (-not $Block.Skip)) {_x000D__x000A_                                @($previousBlock.EachBlockSetup) + @($block.OneTimeTestSetup)_x000D__x000A_                            })_x000D__x000A_                            $(if (-not $Block.IsRoot) {_x000D__x000A_                                # expand block name by evaluating the &lt;&gt; templates, only match templates that have at least 1 character and are not escaped by `&lt;abc`&gt;_x000D__x000A_                                # avoid using variables so we don't run into conflicts_x000D__x000A_                                $sb = {_x000D__x000A_                                    $____Pester.CurrentBlock.ExpandedName = &amp; ([ScriptBlock]::Create(('"'+ ($____Pester.CurrentBlock.Name -replace '\$', '`$' -replace '"', '`"' -replace '(?&lt;!`)&lt;([^&gt;^`]+)&gt;', '$$($$$1)') + '"')))_x000D__x000A_                                    $____Pester.CurrentBlock.ExpandedPath = if ($____Pester.CurrentBlock.Parent.IsRoot) {_x000D__x000A_                                        # to avoid including Root name in the path_x000D__x000A_                                        $____Pester.CurrentBlock.ExpandedName_x000D__x000A_                                    }_x000D__x000A_                                    else {_x000D__x000A_                                        "$($____Pester.CurrentBlock.Parent.ExpandedPath).$($____Pester.CurrentBlock.ExpandedName)"_x000D__x000A_                                    }_x000D__x000A_                                }_x000D__x000A__x000D__x000A_                                $SessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($State.CurrentBlock.ScriptBlock, $null)_x000D__x000A_                                $script:ScriptBlockSessionStateInternalProperty.SetValue($sb, $SessionStateInternal)_x000D__x000A__x000D__x000A_                                $sb_x000D__x000A_                            })_x000D__x000A_                        ) `_x000D__x000A_                        -OuterTeardown $( if (-not (Is-Discovery) -and (-not $Block.Skip)) {_x000D__x000A_                            @($block.OneTimeTestTeardown) + @($previousBlock.EachBlockTeardown)_x000D__x000A_                        } ) `_x000D__x000A_                        -Context $context `_x000D__x000A_                        -MoveBetweenScopes `_x000D__x000A_                        -Configuration $state.Configuration_x000D__x000A__x000D__x000A_                    $block.OwnPassed = $result.Success_x000D__x000A_                    $block.StandardOutput = $result.StandardOutput_x000D__x000A__x000D__x000A_                    $block.ErrorRecord = $result.ErrorRecord_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        Write-PesterDebugMessage -Scope Runtime "Finished executing body of block $Name"_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $frameworkEachBlockTeardowns = @($state.Plugin.EachBlockTeardownEnd )_x000D__x000A_                $frameworkOneTimeBlockTeardowns = @( if ($block.Last) { $state.Plugin.OneTimeBlockTeardownEnd } )_x000D__x000A_                # reverse the teardowns so they run in opposite order to setups_x000D__x000A_                [Array]::Reverse($frameworkEachBlockTeardowns)_x000D__x000A_                [Array]::Reverse($frameworkOneTimeBlockTeardowns)_x000D__x000A__x000D__x000A__x000D__x000A_                # setting those values here so they are available for the teardown_x000D__x000A_                # BUT they are then set again at the end of the block to make them accurate_x000D__x000A_                # so the value on the screen vs the value in the object is slightly different_x000D__x000A_                # with the value in the result being the correct one_x000D__x000A_                $block.UserDuration = $state.UserCodeStopWatch.Elapsed - $blockStartTime_x000D__x000A_                $block.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A_                $frameworkTeardownResult = Invoke-ScriptBlock `_x000D__x000A_                    -Teardown $frameworkEachBlockTeardowns `_x000D__x000A_                    -OuterTeardown $frameworkOneTimeBlockTeardowns `_x000D__x000A_                    -Context @{_x000D__x000A_                    Context = @{_x000D__x000A_                        # context that is visible to plugins_x000D__x000A_                        Block         = $block_x000D__x000A_                        Test          = $null_x000D__x000A_                        Configuration = $state.PluginConfiguration_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $frameworkSetupResult.Success -or -not $frameworkTeardownResult.Success) {_x000D__x000A_                    Assert-Success -InvocationResult @($frameworkSetupResult, $frameworkTeardownResult) -Message "Framework failed"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            finally {_x000D__x000A_                $state.CurrentBlock = $previousBlock_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Runtime "Left block $Name"_x000D__x000A_                }_x000D__x000A_                $block.UserDuration = $state.UserCodeStopWatch.Elapsed - $blockStartTime_x000D__x000A_                $block.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Timing "Block duration $($block.UserDuration.TotalMilliseconds)ms"_x000D__x000A_                    Write-PesterDebugMessage -Scope Timing "Block framework duration $($block.FrameworkDuration.TotalMilliseconds)ms"_x000D__x000A_                    Write-PesterDebugMessage -Scope Runtime "Leaving path $($path -join '.')"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a test_x000D__x000A_function New-Test {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [String] $Name,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [int] $StartLine = $MyInvocation.ScriptLineNumber,_x000D__x000A_        [String[]] $Tag = @(),_x000D__x000A_        $Data,_x000D__x000A_        [String] $Id,_x000D__x000A_        [Switch] $Focus,_x000D__x000A_        [Switch] $Skip_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope DiscoveryCore "Entering test $Name"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($state.CurrentBlock.IsRoot) {_x000D__x000A_        throw "Test cannot be directly in the root."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # avoid managing state by not pushing to the stack only to pop out in finally_x000D__x000A_    # simply concatenate the arrays_x000D__x000A_    $path = @(&lt;# Get full name #&gt; $history = $state.Stack.ToArray(); [Array]::Reverse($history); $history + $name)_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Entering path $($path -join '.')"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $test = [Pester.Test]::Create()_x000D__x000A_    $test.Id = $Id_x000D__x000A_    $test.ScriptBlock = $ScriptBlock_x000D__x000A_    $test.Name = $Name_x000D__x000A_    # using the non-expanded name as default to fallback to it if we don't_x000D__x000A_    # reach the point where we expand it, for example because of setup failure_x000D__x000A_    $test.ExpandedName = $Name_x000D__x000A_    $test.Path = $path_x000D__x000A_    # using the non-expanded path as default to fallback to it if we don't_x000D__x000A_    # reach the point where we expand it, for example because of setup failure_x000D__x000A_    $test.ExpandedPath = $path -join '.'_x000D__x000A_    $test.StartLine = $StartLine_x000D__x000A_    $test.Tag = $Tag_x000D__x000A_    $test.Focus = $Focus_x000D__x000A_    $test.Skip = $Skip_x000D__x000A_    $test.Data = $Data_x000D__x000A_    $test.FrameworkData.Runtime.Phase = 'Discovery'_x000D__x000A__x000D__x000A_    # add test to current block lists_x000D__x000A_    $state.CurrentBlock.Tests.Add($Test)_x000D__x000A_    $state.CurrentBlock.Order.Add($Test)_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope DiscoveryCore "Added test '$Name'"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-TestItem {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Test_x000D__x000A_    )_x000D__x000A_    # keep this at the top so we report as much time_x000D__x000A_    # of the actual test run as possible_x000D__x000A_    $overheadStartTime = $state.FrameworkStopWatch.Elapsed_x000D__x000A_    $testStartTime = $state.UserCodeStopWatch.Elapsed_x000D__x000A_    Switch-Timer -Scope Framework_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Entering test $($Test.Name)"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Entering path $($Test.Path -join '.')"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Test.FrameworkData.Runtime.Phase = 'Execution'_x000D__x000A_        Set-CurrentTest -Test $Test_x000D__x000A__x000D__x000A_        if (-not $Test.ShouldRun) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Runtime "Test is excluded from run, returning"_x000D__x000A_            }_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Test.ExecutedAt = [DateTime]::Now_x000D__x000A_        $Test.Executed = $true_x000D__x000A__x000D__x000A_        $block = $Test.Block_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Running test '$($Test.Name)'."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # no callbacks are provided because we are not transitioning between any states_x000D__x000A_        $frameworkSetupResult = Invoke-ScriptBlock `_x000D__x000A_            -OuterSetup @(_x000D__x000A_            if ($Test.First) { $state.Plugin.OneTimeTestSetupStart }_x000D__x000A_        ) `_x000D__x000A_            -Setup @( $state.Plugin.EachTestSetupStart ) `_x000D__x000A_            -Context @{_x000D__x000A_            Context = @{_x000D__x000A_                # context visible to Plugins_x000D__x000A_                Block         = $block_x000D__x000A_                Test          = $Test_x000D__x000A_                Configuration = $state.PluginConfiguration_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Test.Skip) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                $path = $Test.Path -join '.'_x000D__x000A_                Write-PesterDebugMessage -Scope Skip "($path) Test is skipped."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # setting the test as passed here, this is by choice_x000D__x000A_            # skipped test are ultimately passed tests that were not executed_x000D__x000A_            # I expect that if someone works with the raw result object and_x000D__x000A_            # filters on .Passed -eq $false they should get the count of failed tests_x000D__x000A_            # not failed + skipped. It might be wise to revert those booleans to "enum"_x000D__x000A_            # because they are exclusive, but keeping the info in the object stupid_x000D__x000A_            # and aggregating it as needed was also a design choice_x000D__x000A_            $Test.Passed = $true_x000D__x000A_            $Test.Skipped = $true_x000D__x000A_            $Test.FrameworkData.Runtime.ExecutionStep = 'Finished'_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A__x000D__x000A_            if ($frameworkSetupResult.Success) {_x000D__x000A_                $context = @{_x000D__x000A_                    ____Pester = $State_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($null -ne $test.Data) {_x000D__x000A_                    Add-DataToContext -Destination $context -Data $test.Data_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # recurse up Recurse-Up $Block { param ($b) $b.EachTestSetup }_x000D__x000A_                $i = $Block_x000D__x000A_                $eachTestSetups = while ($null -ne $i) {_x000D__x000A_                    $i.EachTestSetup_x000D__x000A_                    $i = $i.Parent_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # recurse up Recurse-Up $Block { param ($b) $b.EachTestTeardown }_x000D__x000A_                $i = $Block_x000D__x000A_                $eachTestTeardowns = while ($null -ne $i) {_x000D__x000A_                    $i.EachTestTeardown_x000D__x000A_                    $i = $i.Parent_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $result = Invoke-ScriptBlock `_x000D__x000A_                    -Setup @(_x000D__x000A_                    if ($null -ne $eachTestSetups -and 0 -lt @($eachTestSetups).Count) {_x000D__x000A_                        # we collect the child first but want the parent to run first_x000D__x000A_                        [Array]::Reverse($eachTestSetups)_x000D__x000A_                        @( { $Test.FrameworkData.Runtime.ExecutionStep = 'EachTestSetup' }) + @($eachTestSetups)_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    {_x000D__x000A_                        # setting the execution info here so I don't have to invoke change the_x000D__x000A_                        # contract of Invoke-ScriptBlock to accept multiple -ScriptBlock, because_x000D__x000A_                        # that is not needed, and would complicate figuring out in which session_x000D__x000A_                        # state we should run._x000D__x000A_                        # this should run every time._x000D__x000A_                        $Test.FrameworkData.Runtime.ExecutionStep = 'Test'_x000D__x000A_                    }_x000D__x000A_                    $(_x000D__x000A_                        # expand block name by evaluating the &lt;&gt; templates, only match templates that have at least 1 character and are not escaped by `&lt;abc`&gt;_x000D__x000A_                        # avoid using any variables to avoid running into conflict with user variables_x000D__x000A_                        # $ExecutionContext.SessionState.InvokeCommand.ExpandString() has some weird bug in PowerShell 4 and 3, that makes hashtable resolve to null_x000D__x000A_                        # instead I create a expandable string in a scriptblock and evaluate_x000D__x000A_                        $sb = {_x000D__x000A_                            $____Pester.CurrentTest.ExpandedName = &amp; ([ScriptBlock]::Create(('"'+ ($____Pester.CurrentTest.Name -replace '\$', '`$' -replace '"', '`"' -replace '(?&lt;!`)&lt;([^&gt;^`]+)&gt;', '$$($$$1)') + '"')))_x000D__x000A_                            $____Pester.CurrentTest.ExpandedPath = "$($____Pester.CurrentTest.Block.ExpandedPath -join '.').$($____Pester.CurrentTest.ExpandedName)"_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $SessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($State.CurrentTest.ScriptBlock, $null)_x000D__x000A_                        $script:ScriptBlockSessionStateInternalProperty.SetValue($sb, $SessionStateInternal)_x000D__x000A_                        $sb_x000D__x000A_                    )_x000D__x000A_                ) `_x000D__x000A_                    -ScriptBlock $Test.ScriptBlock `_x000D__x000A_                    -Teardown @(_x000D__x000A_                    if ($null -ne $eachTestTeardowns -and 0 -lt @($eachTestTeardowns).Count) {_x000D__x000A_                        @( { $Test.FrameworkData.Runtime.ExecutionStep = 'EachTestTeardown' }) + @($eachTestTeardowns)_x000D__x000A_                    } ) `_x000D__x000A_                    -Context $context `_x000D__x000A_                    -ReduceContextToInnerScope `_x000D__x000A_                    -MoveBetweenScopes `_x000D__x000A_                    -NoNewScope `_x000D__x000A_                    -Configuration $state.Configuration_x000D__x000A__x000D__x000A_                $Test.FrameworkData.Runtime.ExecutionStep = 'Finished'_x000D__x000A__x000D__x000A_                if ($Result.ErrorRecord.FullyQualifiedErrorId -eq 'PesterTestSkipped') {_x000D__x000A_                    #Same logic as when setting a test block to skip_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        $path = $Test.Path -join '.'_x000D__x000A_                        Write-PesterDebugMessage -Scope Skip "($path) Test is skipped."_x000D__x000A_                    }_x000D__x000A_                    $Test.Passed = $true_x000D__x000A_                    $Test.Skipped = $true_x000D__x000A_                } else {_x000D__x000A_                    $Test.Passed = $result.Success_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $Test.StandardOutput = $result.StandardOutput_x000D__x000A_                $Test.ErrorRecord = $result.ErrorRecord_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A_        # setting those values here so they are available for the teardown_x000D__x000A_        # BUT they are then set again at the end of the block to make them accurate_x000D__x000A_        # so the value on the screen vs the value in the object is slightly different_x000D__x000A_        # with the value in the result being the correct one_x000D__x000A_        $Test.UserDuration = $state.UserCodeStopWatch.Elapsed - $testStartTime_x000D__x000A_        $Test.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A__x000D__x000A_        $frameworkEachTestTeardowns = @( $state.Plugin.EachTestTeardownEnd )_x000D__x000A_        $frameworkOneTimeTestTeardowns = @(if ($Test.Last) { $state.Plugin.OneTimeTestTeardownEnd })_x000D__x000A_        [array]::Reverse($frameworkEachTestTeardowns)_x000D__x000A_        [array]::Reverse($frameworkOneTimeTestTeardowns)_x000D__x000A__x000D__x000A_        $frameworkTeardownResult = Invoke-ScriptBlock `_x000D__x000A_            -Teardown $frameworkEachTestTeardowns `_x000D__x000A_            -OuterTeardown $frameworkOneTimeTestTeardowns `_x000D__x000A_            -Context @{_x000D__x000A_            Context = @{_x000D__x000A_                # context visible to Plugins_x000D__x000A_                Test          = $Test_x000D__x000A_                Block         = $block_x000D__x000A_                Configuration = $state.PluginConfiguration_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $frameworkTeardownResult.Success -or -not $frameworkTeardownResult.Success) {_x000D__x000A_            throw $frameworkTeardownResult.ErrorRecord[-1]_x000D__x000A_        }_x000D__x000A__x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Leaving path $($Test.Path -join '.')"_x000D__x000A_        }_x000D__x000A_        $state.CurrentTest = $null_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Left test $($Test.Name)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # keep this at the end so we report even the test teardown in the framework overhead for the test_x000D__x000A_        $Test.UserDuration = $state.UserCodeStopWatch.Elapsed - $testStartTime_x000D__x000A_        $Test.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Timing -Message "Test duration $($Test.UserDuration.TotalMilliseconds)ms"_x000D__x000A_            Write-PesterDebugMessage -Scope Timing -Message "Framework duration $($Test.FrameworkDuration.TotalMilliseconds)ms"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a setup for each test in the block_x000D__x000A_function New-EachTestSetup {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.EachTestSetup = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a teardown for each test in the block_x000D__x000A_function New-EachTestTeardown {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.EachTestTeardown = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a setup for all tests in the block_x000D__x000A_function New-OneTimeTestSetup {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.OneTimeTestSetup = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a teardown for all tests in the block_x000D__x000A_function New-OneTimeTestTeardown {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.OneTimeTestTeardown = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a setup for each block in the current block_x000D__x000A_function New-EachBlockSetup {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.EachBlockSetup = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a teardown for each block in the current block_x000D__x000A_function New-EachBlockTeardown {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.EachBlockTeardown = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a setup for all blocks in the current block_x000D__x000A_function New-OneTimeBlockSetup {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.OneTimeBlockSetup = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# endpoint for adding a teardown for all clocks in the current block_x000D__x000A_function New-OneTimeBlockTeardown {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        $state.CurrentBlock.OneTimeBlockTeardown = $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CurrentBlock {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param()_x000D__x000A__x000D__x000A_    $state.CurrentBlock_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CurrentTest {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param()_x000D__x000A__x000D__x000A_    $state.CurrentTest_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-CurrentBlock {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $state.CurrentBlock = $Block_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Set-CurrentTest {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Test_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $state.CurrentTest = $Test_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Is-Discovery {_x000D__x000A_    $state.Discovery_x000D__x000A_}_x000D__x000A__x000D__x000A_function Discover-Test {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [PSObject[]] $BlockContainer,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A_        $Filter_x000D__x000A_    )_x000D__x000A_    $totalDiscoveryDuration = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Discovery -Message "Starting test discovery in $(@($BlockContainer).Length) test containers."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $steps = $state.Plugin.DiscoveryStart_x000D__x000A_    if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_        Invoke-PluginStep -Plugins $state.Plugin -Step DiscoveryStart -Context @{_x000D__x000A_            BlockContainers = $BlockContainer_x000D__x000A_            Configuration   = $state.PluginConfiguration_x000D__x000A_            Filter          = $Filter_x000D__x000A_        } -ThrowOnFailure_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $state.Discovery = $true_x000D__x000A_    $found = foreach ($container in $BlockContainer) {_x000D__x000A_        $perContainerDiscoveryDuration = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A__x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Discovery "Discovering tests in $($container.Item)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # this is a block object that we add so we can capture_x000D__x000A_        # OneTime* and Each* setups, and capture multiple blocks in a_x000D__x000A_        # container_x000D__x000A_        $root = [Pester.Block]::Create()_x000D__x000A_        $root.ExpandedName  = $root.Name = "Root"_x000D__x000A__x000D__x000A_        $root.IsRoot = $true_x000D__x000A_        $root.ExpandedPath = $root.Path = "Path"_x000D__x000A__x000D__x000A_        $root.First = $true_x000D__x000A_        $root.Last = $true_x000D__x000A__x000D__x000A_        # set the data from the container to get them_x000D__x000A_        # set correctly as if we provided -Data to New-Block_x000D__x000A_        $root.Data = $root.BlockContainer.Data_x000D__x000A__x000D__x000A_        Reset-PerContainerState -RootBlock $root_x000D__x000A__x000D__x000A_        $steps = $state.Plugin.ContainerDiscoveryStart_x000D__x000A_        if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_            Invoke-PluginStep -Plugins $state.Plugin -Step ContainerDiscoveryStart -Context @{_x000D__x000A_                BlockContainer = $container_x000D__x000A_                Configuration  = $state.PluginConfiguration_x000D__x000A_            } -ThrowOnFailure_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $null = Invoke-BlockContainer -BlockContainer $container -SessionState $SessionState_x000D__x000A__x000D__x000A_        [PSCustomObject] @{_x000D__x000A_            Container = $container_x000D__x000A_            Block     = $root_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $steps = $state.Plugin.ContainerDiscoveryEnd_x000D__x000A_        if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_            Invoke-PluginStep -Plugins $state.Plugin -Step ContainerDiscoveryEnd -Context @{_x000D__x000A_                BlockContainer = $container_x000D__x000A_                Block          = $root_x000D__x000A_                Duration       = $perContainerDiscoveryDuration.Elapsed_x000D__x000A_                Configuration  = $state.PluginConfiguration_x000D__x000A_            } -ThrowOnFailure_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $root.DiscoveryDuration = $perContainerDiscoveryDuration.Elapsed_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Discovery -LazyMessage { "Found $(@(View-Flat -Block $root).Count) tests in $([int]$root.DiscoveryDuration.TotalMilliseconds) ms" }_x000D__x000A_            Write-PesterDebugMessage -Scope DiscoveryCore "Discovery done in this container."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Discovery "Processing discovery result objects, to set root, parents, filters etc."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # focusing is removed from the public api_x000D__x000A_    # # if any tests / block in the suite have -Focus parameter then all filters are disregarded_x000D__x000A_    # # and only those tests / blocks should run_x000D__x000A_    # $focusedTests = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    # foreach ($f in $found) {_x000D__x000A_    #     Fold-Container -Container $f.Block `_x000D__x000A_    #         -OnTest {_x000D__x000A_    #             # add all focused tests_x000D__x000A_    #             param($t)_x000D__x000A_    #             if ($t.Focus) {_x000D__x000A_    #                 $focusedTests.Add("$(if($null -ne $t.ScriptBlock.File) { $t.ScriptBlock.File } else { $t.ScriptBlock.Id }):$($t.ScriptBlock.StartPosition.StartLine)")_x000D__x000A_    #             }_x000D__x000A_    #         } `_x000D__x000A_    #         -OnBlock {_x000D__x000A_    #             param($b) if ($b.Focus) {_x000D__x000A_    #                 # add all tests in the current block, no matter if they are focused or not_x000D__x000A_    #                 Fold-Block -Block $b -OnTest {_x000D__x000A_    #                     param ($t)_x000D__x000A_    #                     $focusedTests.Add("$(if($null -ne $t.ScriptBlock.File) { $t.ScriptBlock.File } else { $t.ScriptBlock.Id }):$($t.ScriptBlock.StartPosition.StartLine)")_x000D__x000A_    #                 }_x000D__x000A_    #             }_x000D__x000A_    #         }_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # if ($focusedTests.Count -gt 0) {_x000D__x000A_    #     if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_    #         Write-PesterDebugMessage -Scope Discovery  -LazyMessage { "There are some ($($focusedTests.Count)) focused tests '$($(foreach ($p in $focusedTests) { $p -join "." }) -join ",")' running just them." }_x000D__x000A_    #     }_x000D__x000A_    #     $Filter =  New-FilterObject -Line $focusedTests_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    foreach ($f in $found) {_x000D__x000A_        # this takes non-trivial time, measure how long it takes and add it to the discovery_x000D__x000A_        # so we get more accurate total time_x000D__x000A_        $sw = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_        PostProcess-DiscoveredBlock -Block $f.Block -Filter $Filter -BlockContainer $f.Container -RootBlock $f.Block_x000D__x000A_        $overhead = $sw.Elapsed_x000D__x000A_        $f.Block.DiscoveryDuration += $overhead_x000D__x000A_        # Write-Host "disc $($f.Block.DiscoveryDuration.totalmilliseconds) $($overhead.totalmilliseconds) ms" #TODO_x000D__x000A_        $f.Block_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $steps = $state.Plugin.DiscoveryEnd_x000D__x000A_    if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_        Invoke-PluginStep -Plugins $state.Plugin -Step DiscoveryEnd -Context @{_x000D__x000A_            BlockContainers = $found.Block_x000D__x000A_            AnyFocusedTests = $focusedTests.Count -gt 0_x000D__x000A_            FocusedTests    = $focusedTests_x000D__x000A_            Duration        = $totalDiscoveryDuration.Elapsed_x000D__x000A_            Configuration   = $state.PluginConfiguration_x000D__x000A_        } -ThrowOnFailure_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Discovery "Test discovery finished."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Run-Test {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [PSObject[]] $Block,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $state.Discovery = $false_x000D__x000A_    foreach ($rootBlock in $Block) {_x000D__x000A_        $blockStartTime = $state.UserCodeStopWatch.Elapsed_x000D__x000A_        $overheadStartTime = $state.FrameworkStopWatch.Elapsed_x000D__x000A_        Switch-Timer -Scope Framework_x000D__x000A__x000D__x000A_        if (-not $rootBlock.ShouldRun) {_x000D__x000A_            ConvertTo-ExecutedBlockContainer -Block $rootBlock_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A_        # this resets the timers so keep that before measuring the time_x000D__x000A_        Reset-PerContainerState -RootBlock $rootBlock_x000D__x000A__x000D__x000A_        $rootBlock.Executed = $true_x000D__x000A_        $rootBlock.ExecutedAt = [DateTime]::now_x000D__x000A__x000D__x000A_        $steps = $state.Plugin.ContainerRunStart_x000D__x000A_        if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_            Invoke-PluginStep -Plugins $state.Plugin -Step ContainerRunStart -Context @{_x000D__x000A_                Block         = $rootBlock_x000D__x000A_                Configuration = $state.PluginConfiguration_x000D__x000A_            } -ThrowOnFailure_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            # if ($null -ne $rootBlock.OneTimeBlockSetup) {_x000D__x000A_            #    throw "One time block setup is not supported in root (directly in the block container)."_x000D__x000A_            #}_x000D__x000A__x000D__x000A_            # if ($null -ne $rootBlock.EachBlockSetup) {_x000D__x000A_            #     throw "Each block setup is not supported in root (directly in the block container)."_x000D__x000A_            # }_x000D__x000A__x000D__x000A_            if ($null -ne $rootBlock.EachTestSetup) {_x000D__x000A_                throw "Each test setup is not supported in root (directly in the block container)."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (_x000D__x000A_                $null -ne $rootBlock.EachTestTeardown_x000D__x000A_                #-or $null -ne $rootBlock.OneTimeBlockTeardown `_x000D__x000A_                #-or $null -ne $rootBlock.EachBlockTeardown `_x000D__x000A_            ) {_x000D__x000A_                throw "Each test Teardown is not supported in root (directly in the block container)."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # add OneTimeTestSetup to set variables, by having $setVariables script that will invoke in the user scope_x000D__x000A_            # and $setVariablesWithContext that carries the data as is closure, this way we avoid having to provide parameters to_x000D__x000A_            # before all script, but it might be better to make this a plugin, because there we can pass data._x000D__x000A_            $setVariables = {_x000D__x000A_                param($private:____parameters)_x000D__x000A__x000D__x000A_                if ($null -eq $____parameters.Data) {_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A__x000D__x000A_                foreach($private:____d in $____parameters.Data.GetEnumerator()) {_x000D__x000A_                    &amp; $____parameters.Set_Variable -Name $private:____d.Name -Value $private:____d.Value_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $SessionStateInternal = $script:SessionStateInternalProperty.GetValue($SessionState, $null)_x000D__x000A_            $script:ScriptBlockSessionStateInternalProperty.SetValue($setVariables, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_            $setVariablesAndThenRunOneTimeSetupIfAny = &amp; {_x000D__x000A_                $action = $setVariables_x000D__x000A_                $setup = $rootBlock.OneTimeTestSetup_x000D__x000A_                $parameters = @{_x000D__x000A_                    Data = $rootBlock.BlockContainer.Data_x000D__x000A_                    Set_Variable = $SafeCommands["Set-Variable"]_x000D__x000A_                }_x000D__x000A__x000D__x000A_                {_x000D__x000A_                    . $action $parameters_x000D__x000A_                    if ($null -ne $setup) {_x000D__x000A_                        . $setup_x000D__x000A_                    }_x000D__x000A_                }.GetNewClosure()_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $rootBlock.OneTimeTestSetup = $setVariablesAndThenRunOneTimeSetupIfAny_x000D__x000A__x000D__x000A_            $rootBlock.ScriptBlock = {}_x000D__x000A_            $SessionStateInternal = $script:SessionStateInternalProperty.GetValue($SessionState, $null)_x000D__x000A_            $script:ScriptBlockSessionStateInternalProperty.SetValue($rootBlock.ScriptBlock, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_            # we add one more artificial block so the root can run_x000D__x000A_            # all of it's setups and teardowns_x000D__x000A_            $private:parent = [Pester.Block]::Create()_x000D__x000A_            $private:parent.Name = "ParentBlock"_x000D__x000A_            $private:parent.Path = "Path"_x000D__x000A__x000D__x000A_            $private:parent.First = $false_x000D__x000A_            $private:parent.Last = $false_x000D__x000A__x000D__x000A_            $private:parent.Order.Add($rootBlock)_x000D__x000A__x000D__x000A_            $null = Invoke-Block -previousBlock $private:parent_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            $rootBlock.ErrorRecord.Add($_)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        PostProcess-ExecutedBlock -Block $rootBlock_x000D__x000A_        $result = ConvertTo-ExecutedBlockContainer -Block $rootBlock_x000D__x000A_        $result.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A_        $result.UserDuration = $state.UserCodeStopWatch.Elapsed - $blockStartTime_x000D__x000A__x000D__x000A_        $steps = $state.Plugin.ContainerRunEnd_x000D__x000A_        if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_            Invoke-PluginStep -Plugins $state.Plugin -Step ContainerRunEnd -Context @{_x000D__x000A_                Result        = $result_x000D__x000A_                Block         = $rootBlock_x000D__x000A_                Configuration = $state.PluginConfiguration_x000D__x000A_            } -ThrowOnFailure_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # set this again so the plugins have some data but that we also include the plugin invocation to the_x000D__x000A_        # overall time to keep the actual timing correct_x000D__x000A_        $result.FrameworkDuration = $state.FrameworkStopWatch.Elapsed - $overheadStartTime_x000D__x000A_        $result.UserDuration = $state.UserCodeStopWatch.Elapsed - $blockStartTime_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Timing "Container duration $($result.UserDuration.TotalMilliseconds)ms"_x000D__x000A_            Write-PesterDebugMessage -Scope Timing "Container framework duration $($result.FrameworkDuration.TotalMilliseconds)ms"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-PluginStep {_x000D__x000A_    # [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [PSObject[]] $Plugins,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ValidateSet('Start', 'DiscoveryStart', 'ContainerDiscoveryStart', 'BlockDiscoveryStart', 'TestDiscoveryStart', 'TestDiscoveryEnd', 'BlockDiscoveryEnd', 'ContainerDiscoveryEnd', 'DiscoveryEnd', 'RunStart', 'ContainerRunStart', 'OneTimeBlockSetupStart', 'EachBlockSetupStart', 'OneTimeTestSetupStart', 'EachTestSetupStart', 'EachTestTeardownEnd', 'OneTimeTestTeardownEnd', 'EachBlockTeardownEnd', 'OneTimeBlockTeardownEnd', 'ContainerRunEnd', 'RunEnd', 'End')]_x000D__x000A_        [String] $Step,_x000D__x000A_        $Context = @{ },_x000D__x000A_        [Switch] $ThrowOnFailure_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # there are actually two ways to invoke plugin steps, this unified cmdlet that allows us to run the steps_x000D__x000A_    # in isolation, and then another where we are using Invoke-ScriptBlock directly when we need the plugin to run_x000D__x000A_    # for example as a teardown step of a test._x000D__x000A__x000D__x000A_    # switch-timer framework_x000D__x000A_    $state.UserCodeStopWatch.Stop()_x000D__x000A_    $state.FrameworkStopWatch.Start()_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        $sw = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $pluginsWithGivenStep = @(foreach ($p in $Plugins) { if ($null -ne $p.$Step) { $p } })_x000D__x000A__x000D__x000A_    if ($null -eq $pluginsWithGivenStep -or 0 -eq @($pluginsWithGivenStep).Count) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope PluginCore "No plugins with step $Step were provided"_x000D__x000A_        }_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # this is end step, we should run all steps no matter if some failed, and we should run them in opposite direction_x000D__x000A_    # only do this if there is more than 1, to avoid the "expensive" -like check and reverse_x000D__x000A_    $isEndStep = 1 -lt $pluginsWithGivenStep.Count -and $Step -like "*End"_x000D__x000A_    if (-not $isEndStep) {_x000D__x000A_        [Array]::Reverse($pluginsWithGivenStep)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $err = [Collections.Generic.List[Management.Automation.ErrorRecord]]@()_x000D__x000A_    $failed = $false_x000D__x000A_    # the plugins expect -Context and then the actual context in it_x000D__x000A_    # this was a choice at the start of the project to make it easy to see_x000D__x000A_    # what is available, not sure if a good choice_x000D__x000A_    $ctx = @{_x000D__x000A_        Context = $Context_x000D__x000A_    }_x000D__x000A_    $standardOutput =_x000D__x000A_    foreach ($p in $pluginsWithGivenStep) {_x000D__x000A_        if ($failed -and -not $isEndStep) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Plugin "Skipping $($p.Name) step $Step because some previous plugin failed"_x000D__x000A_            }_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                $stepSw = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A_                $hasContext = 0 -lt $Context.Count_x000D__x000A_                $c = if ($hasContext) { $Context | &amp; $script:SafeCommands['Out-String'] }_x000D__x000A_                Write-PesterDebugMessage -Scope Plugin "Running $($p.Name) step $Step $(if ($hasContext) { "with context: $c" } else { "without any context"})"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            do {_x000D__x000A_                &amp; $p.$Step @ctx_x000D__x000A_            } while ($false)_x000D__x000A__x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Plugin "Success $($p.Name) step $Step in $($stepSw.ElapsedMilliseconds) ms"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            $failed = $true_x000D__x000A_            $err.Add($_)_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Plugin "Failed $($p.Name) step $Step in $($stepSw.ElapsedMilliseconds) ms" -ErrorRecord $__x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ThrowOnFailure) {_x000D__x000A_        if ($failed) {_x000D__x000A_            $r = [Pester.InvocationResult]::Create((-not $failed), $err, $standardOutput)_x000D__x000A_            Assert-Success $r -Message "Invoking step $step failed"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # do nothing, especially don't create or return the result object_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $r = [Pester.InvocationResult]::Create((-not $failed), $err, $standardOutput)_x000D__x000A_        return $r_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Assert-Success {_x000D__x000A_    # [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [PSObject[]] $InvocationResult,_x000D__x000A_        [String] $Message = "Invocation failed"_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $rc = 0_x000D__x000A_    $anyFailed = $false_x000D__x000A_    $err = ""_x000D__x000A_    foreach ($r in $InvocationResult) {_x000D__x000A_        $ec = 0_x000D__x000A_        if ($null -ne $r.ErrorRecord -and $r.ErrorRecord.Length -gt 0) {_x000D__x000A_            $err += "Result $($rc++):"_x000D__x000A_            $anyFailed = $true_x000D__x000A_            foreach ($e in $r.ErrorRecord) {_x000D__x000A_                $err += "Error $($ec++):"_x000D__x000A_                $err += &amp; $SafeCommands["Out-String"] -InputObject $e_x000D__x000A_                $err += &amp; $SafeCommands["Out-String"] -InputObject $e.ScriptStackTrace_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($anyFailed) {_x000D__x000A_        $Message = $Message + ":`n$err"_x000D__x000A_        &amp; $SafeCommands["Write-Host"] -ForegroundColor Red $Message_x000D__x000A_        throw $Message_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-ScriptBlock {_x000D__x000A_    param(_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [ScriptBlock[]] $OuterSetup,_x000D__x000A_        [ScriptBlock[]] $Setup,_x000D__x000A_        [ScriptBlock[]] $Teardown,_x000D__x000A_        [ScriptBlock[]] $OuterTeardown,_x000D__x000A_        $Context = @{ },_x000D__x000A_        # define data to be shared in only in the inner scope where e.g eachTestSetup + test run but not_x000D__x000A_        # in the scope where OneTimeTestSetup runs, on the other hand, plugins want context_x000D__x000A_        # in all scopes_x000D__x000A_        [Switch] $ReduceContextToInnerScope,_x000D__x000A_        # # setup, body and teardown will all run (be-dotsourced into)_x000D__x000A_        # # the same scope_x000D__x000A_        # [Switch] $SameScope,_x000D__x000A_        # will dot-source the wrapper scriptblock instead of invoking it_x000D__x000A_        # so in combination with the SameScope switch we are effectively_x000D__x000A_        # running the code in the current scope_x000D__x000A_        [Switch] $NoNewScope,_x000D__x000A_        [Switch] $MoveBetweenScopes,_x000D__x000A_        [ScriptBlock] $OnUserScopeTransition = $null,_x000D__x000A_        [ScriptBlock] $OnFrameworkScopeTransition = $null,_x000D__x000A_        $Configuration_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # filter nulls, inlined to avoid overhead of combineNonNull and selectNonNull_x000D__x000A_    $OuterSetup = if ($null -ne $OuterSetup -and 0 -lt $OuterSetup.Count) {_x000D__x000A_        foreach ($i in $OuterSetup) {_x000D__x000A_            if ($null -ne $i) {_x000D__x000A_                $i_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Setup = if ($null -ne $Setup -and 0 -lt $Setup.Count) {_x000D__x000A_        foreach ($i in $Setup) {_x000D__x000A_            if ($null -ne $i) {_x000D__x000A_                $i_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Teardown = if ($null -ne $Teardown -and 0 -lt $Teardown.Count) {_x000D__x000A_        foreach ($i in $Teardown) {_x000D__x000A_            if ($null -ne $i) {_x000D__x000A_                $i_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $OuterTeardown = if ($null -ne $OuterTeardown -and 0 -lt $OuterTeardown.Count) {_x000D__x000A_        foreach ($i in $OuterTeardown) {_x000D__x000A_            if ($null -ne $i) {_x000D__x000A_                $i_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_    # this is what the code below does_x000D__x000A_    # . $OuterSetup_x000D__x000A_    # &amp; {_x000D__x000A_    #     try {_x000D__x000A_    #       # import setup to scope_x000D__x000A_    #       . $Setup_x000D__x000A_    #       # executed the test code in the same scope_x000D__x000A_    #       . $ScriptBlock_x000D__x000A_    #     } finally {_x000D__x000A_    #       . $Teardown_x000D__x000A_    #     }_x000D__x000A_    # }_x000D__x000A_    # . $OuterTeardown_x000D__x000A__x000D__x000A__x000D__x000A_    $wrapperScriptBlock = {_x000D__x000A_        # THIS RUNS (MOST OF THE TIME) IN USER SCOPE, BE CAREFUL WHAT YOU PUBLISH AND CONSUME!_x000D__x000A_        param($______parameters)_x000D__x000A__x000D__x000A_        if (-not $______parameters.NoNewScope) {_x000D__x000A_            # a child runner that will not create a new scope will force itself into the current scope_x000D__x000A_            # and overwrite our params in the inner scope (denoted by &amp; { below), keep a second reference to it_x000D__x000A_            # so we can use it for Teardowns and to forward errors that happened after test teardown_x000D__x000A_            $______parametersForward = $______parameters_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_        try {_x000D__x000A_            if ($______parameters.ContextInOuterScope) {_x000D__x000A_                $______outerSplat = $______parameters.Context_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Setting context variables" }_x000D__x000A_                foreach ($______current in $______outerSplat.GetEnumerator()) {_x000D__x000A_                    if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Setting context variable '$($______current.Key)' with value '$($______current.Value)'" }_x000D__x000A_                    $ExecutionContext.SessionState.PSVariable.Set($______current.Key, $______current.Value)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($______outerSplat.ContainsKey("_")) {_x000D__x000A_                    $______outerSplat.Remove("_")_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $______current = $null_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $______outerSplat = @{ }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($null -ne $______parameters.OuterSetup -and $______parameters.OuterSetup.Length -gt 0) {_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running outer setups" }_x000D__x000A_                foreach ($______current in $______parameters.OuterSetup) {_x000D__x000A_                    if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running outer setup { $______current }" }_x000D__x000A_                    $______parameters.CurrentlyExecutingScriptBlock = $______current_x000D__x000A_                    . $______current @______outerSplat_x000D__x000A_                }_x000D__x000A_                $______current = $null_x000D__x000A_                $______parameters.OuterSetup = $null_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running outer setups" }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "There are no outer setups" }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            &amp; {_x000D__x000A_                try {_x000D__x000A__x000D__x000A_                    if (-not $______parameters.ContextInOuterScope) {_x000D__x000A_                        $______innerSplat = $______parameters.Context_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Setting context variables" }_x000D__x000A_                        foreach ($______current in $______innerSplat.GetEnumerator()) {_x000D__x000A_                            if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Setting context variable '$ ($______current.Key)' with value '$($______current.Value)'" }_x000D__x000A_                            $ExecutionContext.SessionState.PSVariable.Set($______current.Key, $______current.Value)_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        if ($______outerSplat.ContainsKey("_")) {_x000D__x000A_                            $______outerSplat.Remove("_")_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $______current = $null_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $______innerSplat = $______outerSplat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    if ($null -ne $______parameters.Setup -and $______parameters.Setup.Length -gt 0) {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running inner setups" }_x000D__x000A_                        foreach ($______current in $______parameters.Setup) {_x000D__x000A_                            if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running inner setup { $______current }" }_x000D__x000A_                            $______parameters.CurrentlyExecutingScriptBlock = $______current_x000D__x000A_                            . $______current @______innerSplat_x000D__x000A_                        }_x000D__x000A_                        $______current = $null_x000D__x000A_                        $______parameters.Setup = $null_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running inner setups" }_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "There are no inner setups" }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    if ($null -ne $______parameters.ScriptBlock) {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running scriptblock { $($______parameters.ScriptBlock) }" }_x000D__x000A_                        $______parameters.CurrentlyExecutingScriptBlock = $______parameters.ScriptBlock_x000D__x000A_                        . $______parameters.ScriptBlock @______innerSplat_x000D__x000A__x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running scriptblock" }_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "There is no scriptblock to run" }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                catch {_x000D__x000A_                    $______parameters.ErrorRecord.Add($_)_x000D__x000A_                    if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Fail running setups or scriptblock" -ErrorRecord $_ }_x000D__x000A_                }_x000D__x000A_                finally {_x000D__x000A_                    if ($null -ne $______parameters.Teardown -and $______parameters.Teardown.Length -gt 0) {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running inner teardowns" }_x000D__x000A_                        foreach ($______current in $______parameters.Teardown) {_x000D__x000A_                            try {_x000D__x000A_                                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running inner teardown { $______current }" }_x000D__x000A_                                $______parameters.CurrentlyExecutingScriptBlock = $______current_x000D__x000A_                                . $______current @______innerSplat_x000D__x000A_                                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running inner teardown" }_x000D__x000A_                            }_x000D__x000A_                            catch {_x000D__x000A_                                $______parameters.ErrorRecord.Add($_)_x000D__x000A_                                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Fail running inner teardown" -ErrorRecord $_ }_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                        $______current = $null_x000D__x000A__x000D__x000A_                        # nulling this variable is important when we run without new scope_x000D__x000A_                        # then $______parameters.Teardown remains set and EachBlockTeardown_x000D__x000A_                        # runs twice_x000D__x000A_                        $______parameters.Teardown = $null_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running inner teardowns" }_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "There are no inner teardowns" }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        finally {_x000D__x000A__x000D__x000A_            if ($null -ne $______parameters.OuterTeardown -and $______parameters.OuterTeardown.Length -gt 0) {_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running outer teardowns" }_x000D__x000A_                foreach ($______current in $______parameters.OuterTeardown) {_x000D__x000A_                    try {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Running outer teardown { $______current }" }_x000D__x000A_                        $______parameters.CurrentlyExecutingScriptBlock = $______current_x000D__x000A_                        . $______current @______outerSplat_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running outer teardown" }_x000D__x000A_                    }_x000D__x000A_                    catch {_x000D__x000A_                        if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Fail running outer teardown" -ErrorRecord $_ }_x000D__x000A_                        $______parameters.ErrorRecord.Add($_)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                $______parameters.OuterTeardown = $null_x000D__x000A_                $______current = $null_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "Done running outer teardowns" }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($______parameters.EnableWriteDebug) { &amp;$______parameters.WriteDebug "There are no outer teardowns" }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($______parameters.NoNewScope -and $ExecutionContext.SessionState.PSVariable.GetValue('______parametersForward')) {_x000D__x000A_                $______parameters = $______parametersForward_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($MoveBetweenScopes -and $null -ne $ScriptBlock) {_x000D__x000A_        $SessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($ScriptBlock, $null)_x000D__x000A_        # attach the original session state to the wrapper scriptblock_x000D__x000A_        # making it invoke in the same scope as $ScriptBlock_x000D__x000A_        $script:ScriptBlockSessionStateInternalProperty.SetValue($wrapperScriptBlock, $SessionStateInternal, $null)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $writeDebug = if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        {_x000D__x000A_            param($Message, [Management.Automation.ErrorRecord] $ErrorRecord)_x000D__x000A_            Write-PesterDebugMessage -Scope "RuntimeCore" $Message -ErrorRecord $ErrorRecord_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #$break = $true_x000D__x000A_    $err = $null_x000D__x000A_    try {_x000D__x000A_        $parameters = @{_x000D__x000A_            ScriptBlock                   = $ScriptBlock_x000D__x000A_            OuterSetup                    = $OuterSetup_x000D__x000A_            Setup                         = $Setup_x000D__x000A_            Teardown                      = $Teardown_x000D__x000A_            OuterTeardown                 = $OuterTeardown_x000D__x000A_            CurrentlyExecutingScriptBlock = $null_x000D__x000A_            ErrorRecord                   = [Collections.Generic.List[Management.Automation.ErrorRecord]]@()_x000D__x000A_            Context                       = $Context_x000D__x000A_            ContextInOuterScope           = -not $ReduceContextToInnerScope_x000D__x000A_            EnableWriteDebug              = $PesterPreference.Debug.WriteDebugMessages.Value_x000D__x000A_            WriteDebug                    = $writeDebug_x000D__x000A_            Configuration                 = $Configuration_x000D__x000A_            NoNewScope                    = $NoNewScope_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # here we are moving into the user scope if the provided_x000D__x000A_        # scriptblock was bound to user scope, so we want to take some actions_x000D__x000A_        # typically switching between user and framework timer. There are still tiny pieces of_x000D__x000A_        # framework code running in the scriptblock but we can safely ignore those becasue they are_x000D__x000A_        # just logging, so the time difference is miniscule._x000D__x000A_        # The code might also run just in framework scope, in that case the callback can remain empty,_x000D__x000A_        # eg when we are invoking framework setup._x000D__x000A_        if ($MoveBetweenScopes) {_x000D__x000A_            # switch-timer to user scope inlined_x000D__x000A_            $state.UserCodeStopWatch.Start()_x000D__x000A_            $state.FrameworkStopWatch.Stop()_x000D__x000A__x000D__x000A_            if ($null -ne $OnUserScopeTransition) {_x000D__x000A_                &amp; $OnUserScopeTransition_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        do {_x000D__x000A_            $standardOutput = if ($NoNewScope) {_x000D__x000A_                . $wrapperScriptBlock $parameters_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                &amp; $wrapperScriptBlock $parameters_x000D__x000A_            }_x000D__x000A_            # if the code reaches here we did not break_x000D__x000A_            #$break = $false_x000D__x000A_        } while ($false)_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        $err = $__x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($MoveBetweenScopes) {_x000D__x000A_        # switch-timer to framework scope inlined_x000D__x000A_        $state.UserCodeStopWatch.Stop()_x000D__x000A_        $state.FrameworkStopWatch.Start()_x000D__x000A__x000D__x000A_        if ($null -ne $OnFrameworkScopeTransition) {_x000D__x000A_            &amp; $OnFrameworkScopeTransition_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($err) {_x000D__x000A_        $parameters.ErrorRecord.Add($err)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $r = [Pester.InvocationResult]::Create((0 -eq $parameters.ErrorRecord.Count), $parameters. ErrorRecord, $standardOutput)_x000D__x000A__x000D__x000A_    return $r_x000D__x000A_}_x000D__x000A__x000D__x000A_function Reset-TestSuiteTimer {_x000D__x000A_    if ($null -eq $state.TotalStopWatch) {_x000D__x000A_        $state.TotalStopWatch = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $state.UserCodeStopWatch) {_x000D__x000A_        $state.UserCodeStopWatch = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $state.FrameworkStopWatch) {_x000D__x000A_        $state.FrameworkStopWatch = [Diagnostics.Stopwatch]::StartNew()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $state.TotalStopWatch.Restart()_x000D__x000A_    $state.FrameworkStopWatch.Restart()_x000D__x000A_    $state.UserCodeStopWatch.Reset()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Switch-Timer {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ValidateSet("Framework", "UserCode")]_x000D__x000A_        $Scope_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # perf: optimizing away parameter and validate set, and $Scope as int or bool within an if, only brings about 1/3 saving (about 60 ms per 1000 calls)_x000D__x000A_    # not worth it for the moment_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        if ($state.UserCodeStopWatch.IsRunning) {_x000D__x000A_            Write-PesterDebugMessage -Scope TimingCore "Switching from UserCode to $Scope"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($state.FrameworkStopWatch.IsRunning) {_x000D__x000A_            Write-PesterDebugMessage -Scope TimingCore "Switching from Framework to $Scope"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Write-PesterDebugMessage -Scope TimingCore -Message "UserCode total time $($state.UserCodeStopWatch.ElapsedMilliseconds)ms"_x000D__x000A_        Write-PesterDebugMessage -Scope TimingCore -Message "Framework total time $($state.FrameworkStopWatch.ElapsedMilliseconds)ms"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($Scope) {_x000D__x000A_        "Framework" {_x000D__x000A_            # running in framework code adds time only to the overhead timer_x000D__x000A_            $state.UserCodeStopWatch.Stop()_x000D__x000A_            $state.FrameworkStopWatch.Start()_x000D__x000A_        }_x000D__x000A_        "UserCode" {_x000D__x000A_            $state.UserCodeStopWatch.Start()_x000D__x000A_            $state.FrameworkStopWatch.Stop()_x000D__x000A_        }_x000D__x000A_        default { throw [ArgumentException]"" }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-ShouldRun {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Item,_x000D__x000A_        $Filter_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # see https://github.com/pester/Pester/issues/1442 for description of how this filtering works_x000D__x000A__x000D__x000A_    $result = @{_x000D__x000A_        Include  = $false_x000D__x000A_        Exclude  = $false_x000D__x000A_        Explicit = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $anyIncludeFilters = $false_x000D__x000A_    $fullDottedPath = $Item.Path -join "."_x000D__x000A_    if ($null -eq $Filter) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is included, because there is no filters."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result.Include = $true_x000D__x000A_        return $result_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $parent = if ('Test' -eq $Item.ItemType) {_x000D__x000A_        $Item.Block_x000D__x000A_    }_x000D__x000A_    elseif ('Block' -eq $Item.ItemType) {_x000D__x000A_        # no need to check if we are root, we will not run these rules on Root block_x000D__x000A_        $Item.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($parent.Exclude) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is excluded, because it's parent is excluded."_x000D__x000A_        }_x000D__x000A_        $result.Exclude = $true_x000D__x000A_        return $result_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # item is excluded when any of the exclude tags match_x000D__x000A_    $tagFilter = $Filter.ExcludeTag_x000D__x000A_    if ($tagFilter -and 0 -ne $tagFilter.Count) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) There is '$($tagFilter -join ", ")' exclude tag filter."_x000D__x000A_        }_x000D__x000A_        foreach ($f in $tagFilter) {_x000D__x000A_            foreach ($t in $Item.Tag) {_x000D__x000A_                if ($t -like $f) {_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is excluded, because it's tag '$t' matches exclude tag filter '$f'."_x000D__x000A_                    }_x000D__x000A_                    $result.Exclude = $true_x000D__x000A_                    return $result_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) did not match the exclude tag filter, moving on to the next filter."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # - place exclude filters above this line and include below this line_x000D__x000A__x000D__x000A_    $lineFilter = $Filter.Line_x000D__x000A_    # use File for saved files or Id for ScriptBlocks without files_x000D__x000A_    # this filter has the ability to set the test to "explicit" so we can run_x000D__x000A_    # the test even if it is marked as skipped run this include as first so we figure it out_x000D__x000A_    # in one place and check if parent was included after this one to short circuit the other_x000D__x000A_    # filters in case parent already knows that it will run_x000D__x000A__x000D__x000A_    $line = "$(if ($Item.ScriptBlock.File) { $Item.ScriptBlock.File } else { $Item.ScriptBlock.Id }):$($Item.StartLine)" -replace '\\', '/'_x000D__x000A_    if ($lineFilter -and 0 -ne $lineFilter.Count) {_x000D__x000A_        $anyIncludeFilters = $true_x000D__x000A_        foreach ($l in $lineFilter -replace '\\', '/') {_x000D__x000A_            if ($l -eq $line) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is included, because its path:line '$line' matches line filter '$lineFilter'."_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # if ('Test' -eq $Item.ItemType ) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is explicitly included, because it matched line filter, and will run even if -Skip is specified on it. Any skipped children will still be skipped."_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $result.Explicit = $true_x000D__x000A_                # }_x000D__x000A__x000D__x000A_                $result.Include = $true_x000D__x000A_                return $result_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($parent.Include) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is included, because its parent is included."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result.Include = $true_x000D__x000A_        return $result_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # test is included when it has tags and the any of the tags match_x000D__x000A_    $tagFilter = $Filter.Tag_x000D__x000A_    if ($tagFilter -and 0 -ne $tagFilter.Count) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) There is '$($tagFilter -join ", ")' include tag filter."_x000D__x000A_        }_x000D__x000A_        $anyIncludeFilters = $true_x000D__x000A_        if ($null -eq $Item.Tag -or 0 -eq $Item.Tag) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) has no tags, moving to next include filter."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            foreach ($f in $tagFilter) {_x000D__x000A_                foreach ($t in $Item.Tag) {_x000D__x000A_                    if ($t -like $f) {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is included, because it's tag '$t' matches tag filter '$f'."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $result.Include = $true_x000D__x000A_                        return $result_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $allPaths = $Filter.FullName_x000D__x000A_    if ($allPaths -and 0 -ne $allPaths) {_x000D__x000A_        $anyIncludeFilters = $true_x000D__x000A_        foreach ($p in $allPaths) {_x000D__x000A_            if ($fullDottedPath -like $p) {_x000D__x000A_                $include = $true_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($include) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) is included, because it matches fullname filter '$include'."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $result.Include = $true_x000D__x000A_            return $result_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) does not match the dotted path filter, moving to next include filter."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($anyIncludeFilters) {_x000D__x000A_        if ('Test' -eq $Item.ItemType) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) did not match any of the include filters, it will not be included in the run."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ('Block' -eq $Item.ItemType) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) did not match any of the include filters, but it will still be included in the run, it's children will determine if it will run."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "Item type $($Item.ItemType) is not supported in filter."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ('Test' -eq $Item.ItemType) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) will be included in the run, because there were no include filters so all tests are included unless they match exclude rule."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $result.Include = $true_x000D__x000A_        } # putting the bool in both to avoid string comparison_x000D__x000A_        elseif ('Block' -eq $Item.ItemType) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($fullDottedPath) $($Item.ItemType) will be included in the run, because there were no include filters, and will let its children to determine whether or not it should run."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "Item type $($Item.ItemType) is not supported in filter."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return $result_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $result_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-Test {_x000D__x000A_    #[CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [PSObject[]] $BlockContainer,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A_        $Filter,_x000D__x000A_        $Plugin,_x000D__x000A_        $PluginConfiguration,_x000D__x000A_        $Configuration_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # set the incoming value for all the child scopes_x000D__x000A_    # TODO: revisit this because this will probably act weird as we jump between session states_x000D__x000A_    $PesterPreference = $Configuration_x000D__x000A__x000D__x000A_    $state.Plugin = $Plugin_x000D__x000A_    $state.PluginConfiguration = $PluginConfiguration_x000D__x000A_    $state.Configuration = $Configuration_x000D__x000A__x000D__x000A_    # # TODO: this it potentially unreliable, because supressed errors are written to Error as well. And the errors are captured only from the caller state. So let's use it only as a useful indicator during migration and see how it works in production code._x000D__x000A__x000D__x000A_    # # finding if there were any non-terminating errors during the run, user can clear the array, and the array has fixed size so we can't just try to detect if there is any difference by counts before and after. So I capture the last known error in that state and try to find it in the array after the run_x000D__x000A_    # $originalErrors = $SessionState.PSVariable.Get("Error").Value_x000D__x000A_    # $originalLastError = $originalErrors[0]_x000D__x000A_    # $originalErrorCount = $originalErrors.Count_x000D__x000A__x000D__x000A_    $found = Discover-Test -BlockContainer $BlockContainer -Filter $Filter -SessionState $SessionState_x000D__x000A__x000D__x000A_    # $errs = $SessionState.PSVariable.Get("Error").Value_x000D__x000A_    # $errsCount = $errs.Count_x000D__x000A_    # if ($errsCount -lt $originalErrorCount) {_x000D__x000A_    #     # it would be possible to detect that there are 0 errors, in the array and continue,_x000D__x000A_    #     # but this still indicates the user code is running where it should not, so let's throw anyway_x000D__x000A_    #     throw "Test discovery failed. The error count ($errsCount) after running discovery is lower than the error count before discovery ($originalErrorCount). Is some of your code running outside Pester controlled blocks and it clears the `$error array by calling `$error.Clear()?"_x000D__x000A__x000D__x000A_    # }_x000D__x000A__x000D__x000A__x000D__x000A_    # if ($originalErrorCount -lt $errsCount) {_x000D__x000A_    #     # probably the most usual case,  there are more errors then there were before,_x000D__x000A_    #     # so some were written to the screen, this also runs when the user cleared the_x000D__x000A_    #     # array and wrote more errors than there originally were_x000D__x000A_    #     $i = $errsCount - $originalErrorCount_x000D__x000A_    # }_x000D__x000A_    # else {_x000D__x000A_    #     # there is equal amount of errors, the array was probably full and so the original_x000D__x000A_    #     # error shifted towards the end of the array, we try to find it and see how many new_x000D__x000A_    #     # errors are there_x000D__x000A_    #     for ($i = 0 ; $i -lt $errsLength; $i++) {_x000D__x000A_    #         if ([object]::referenceEquals($errs[$i], $lastError)) {_x000D__x000A_    #             break_x000D__x000A_    #         }_x000D__x000A_    #     }_x000D__x000A_    # }_x000D__x000A_    # if (0 -ne $i) {_x000D__x000A_    #     throw "Test discovery failed. There were $i non-terminating errors during test discovery. This indicates that some of your code is invoked outside of Pester controlled blocks and fails. No tests will be run."_x000D__x000A_    # }_x000D__x000A_    Run-Test -Block $found -SessionState $SessionState_x000D__x000A_}_x000D__x000A__x000D__x000A_function PostProcess-DiscoveredBlock {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Block,_x000D__x000A_        $Filter,_x000D__x000A_        $BlockContainer,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $RootBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # pass array of blocks rather than 1 block to cross the function boundary_x000D__x000A_    # as few times as we can_x000D__x000A_    foreach ($b in $Block) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            $path = $b.Path -join "."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # traverses the block structure after a block was found and_x000D__x000A_        # link childs to their parents, filter blocks and tests to_x000D__x000A_        # determine which should run, and mark blocks and tests_x000D__x000A_        # as first or last to know when one time setups &amp; teardowns should run_x000D__x000A_        $b.IsRoot = $b -eq $RootBlock_x000D__x000A_        $b.Root = $RootBlock_x000D__x000A_        $b.BlockContainer = $BlockContainer_x000D__x000A__x000D__x000A_        $tests = $b.Tests_x000D__x000A__x000D__x000A_        if ($b.IsRoot) {_x000D__x000A_            $b.Explicit = $false_x000D__x000A_            $b.Exclude = $false_x000D__x000A_            $b.Include = $false_x000D__x000A_            $b.ShouldRun = $true_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $shouldRun = (Test-ShouldRun -Item $b -Filter $Filter)_x000D__x000A_            $b.Explicit = $shouldRun.Explicit_x000D__x000A__x000D__x000A_            if (-not $shouldRun.Exclude -and -not $shouldRun.Include) {_x000D__x000A_                $b.ShouldRun = $true_x000D__x000A_            }_x000D__x000A_            elseif ($shouldRun.Include) {_x000D__x000A_                $b.ShouldRun = $true_x000D__x000A_            }_x000D__x000A_            elseif ($shouldRun.Exclude) {_x000D__x000A_                $b.ShouldRun = $false_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                throw "Unknown combination of include exclude $($shouldRun)"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $b.Include = $shouldRun.Include -and -not $shouldRun.Exclude_x000D__x000A_            $b.Exclude = $shouldRun.Exclude_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $parentBlockIsSkipped = (-not $b.IsRoot -and $b.Parent.Skip)_x000D__x000A__x000D__x000A_        if ($b.Skip) {_x000D__x000A_            if ($b.Explicit) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Skip "($path) Block was marked as skipped, but will not be skipped because it was explicitly requested to run."_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $b.Skip = $false_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Skip "($path) Block is skipped."_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $b.Skip = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($parentBlockIsSkipped) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Skip "($path) Block is skipped because a parent block was skipped."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $b.Skip = $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $blockShouldRun = $false_x000D__x000A_        if ($tests.Count -gt 0) {_x000D__x000A_            foreach ($t in $tests) {_x000D__x000A_                $t.Block = $b_x000D__x000A__x000D__x000A_                if ($t.Block.Exclude) {_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        $path = $t.Path -join "."_x000D__x000A_                        Write-PesterDebugMessage -Scope Filter "($path) Test is excluded because parent block was excluded."_x000D__x000A_                    }_x000D__x000A_                    $t.ShouldRun = $false_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    # run the exlude filters before checking if the parent is included_x000D__x000A_                    # otherwise you would include tests that could match the exclude rule_x000D__x000A_                    $shouldRun = (Test-ShouldRun -Item $t -Filter $Filter)_x000D__x000A_                    $t.Explicit = $shouldRun.Explicit_x000D__x000A__x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        $path = $t.Path -join "."_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    if (-not $shouldRun.Include -and -not $shouldRun.Exclude) {_x000D__x000A_                        $t.ShouldRun = $false_x000D__x000A_                    }_x000D__x000A_                    elseif ($shouldRun.Include) {_x000D__x000A_                        $t.ShouldRun = $true_x000D__x000A_                    }_x000D__x000A_                    elseif ($shouldRun.Exclude) {_x000D__x000A_                        $t.ShouldRun = $false_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        throw "Unknown combination of ShouldRun $ShouldRun"_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($t.Skip) {_x000D__x000A_                    if ($t.ShouldRun -and $t.Explicit) {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Skip "($path) Test was marked as skipped, but will not be skipped because it was explicitly requested to run."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $t.Skip = $false_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Skip "($path) Test is skipped."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $t.Skip = $true_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                elseif ($b.Skip) {_x000D__x000A_                    if ($t.ShouldRun -and $t.Explicit) {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Skip "($path) Test was marked as skipped, because its parent was marked as skipped, but will not be skipped because it was explicitly requested to run."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $t.Skip = $false_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Skip "($path) Test is skipped because a parent block was skipped."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $t.Skip = $true_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A__x000D__x000A_            # if we determined that the block should run we can still make it not run if_x000D__x000A_            # none of it's children will run_x000D__x000A_            if ($b.ShouldRun) {_x000D__x000A_                $testsToRun = foreach ($t in $tests) { if ($t.ShouldRun) { $t } }_x000D__x000A_                if ($testsToRun -and 0 -ne $testsToRun.Count) {_x000D__x000A_                    $testsToRun[0].First = $true_x000D__x000A_                    $testsToRun[-1].Last = $true_x000D__x000A_                    $blockShouldRun = $true_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $childBlocks = $b.Blocks_x000D__x000A_        $anyChildBlockShouldRun = $false_x000D__x000A_        if ($childBlocks.Count -gt 0) {_x000D__x000A_            foreach ($cb in $childBlocks) {_x000D__x000A_                $cb.Parent = $b_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # passing the array as a whole to cross the function boundary as few times as I can_x000D__x000A_            PostProcess-DiscoveredBlock -Block $childBlocks -Filter $Filter -BlockContainer $BlockContainer -RootBlock $RootBlock_x000D__x000A__x000D__x000A_            $childBlocksToRun = foreach ($cb in $childBlocks) { if ($cb.ShouldRun) { $cb } }_x000D__x000A_            $anyChildBlockShouldRun = $childBlocksToRun -and 0 -ne $childBlocksToRun.Count_x000D__x000A_            if ($anyChildBlockShouldRun) {_x000D__x000A_                $childBlocksToRun[0].First = $true_x000D__x000A_                $childBlocksToRun[-1].Last = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $shouldRunBasedOnChildren = $blockShouldRun -or $anyChildBlockShouldRun_x000D__x000A__x000D__x000A_        if ($b.ShouldRun -and -not $shouldRunBasedOnChildren) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Filter "($($b.Path -join '.')) Block was marked as Should run based on filters, but none of its tests or tests in children blocks were marked as should run. So the block won't run."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $b.ShouldRun = $shouldRunBasedOnChildren_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function PostProcess-ExecutedBlock {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A__x000D__x000A_    # traverses the block structure after a block was executed and_x000D__x000A_    # and sets the failures correctly so the aggreagatted failures_x000D__x000A_    # propagate towards the root so if a child test fails it's block_x000D__x000A_    # aggregated result should be marked as failed_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        foreach ($b in $Block) {_x000D__x000A_            $thisBlockFailed = -not $b.OwnPassed_x000D__x000A__x000D__x000A_            $b.OwnTotalCount = 0_x000D__x000A_            $b.OwnFailedCount = 0_x000D__x000A_            $b.OwnPassedCount = 0_x000D__x000A_            $b.OwnSkippedCount = 0_x000D__x000A_            $b.OwnNotRunCount = 0_x000D__x000A__x000D__x000A_            $testDuration = [TimeSpan]::Zero_x000D__x000A__x000D__x000A_            foreach ($t in $b.Tests) {_x000D__x000A_                $testDuration += $t.Duration_x000D__x000A__x000D__x000A_                $b.OwnTotalCount++_x000D__x000A_                if (-not $t.ShouldRun) {_x000D__x000A_                    $b.OwnNotRunCount++_x000D__x000A_                }_x000D__x000A_                elseif ($t.ShouldRun -and $t.Skipped) {_x000D__x000A_                    $b.OwnSkippedCount++_x000D__x000A_                }_x000D__x000A_                elseif (($t.Executed -and -not $t.Passed) -or ($t.ShouldRun -and -not $t.Executed)) {_x000D__x000A_                    # TODO:  this condition works but needs to be revisited. when the parent fails the test is marked as failed, because it should have run but it did not,and but there is no error in the test result, in such case all tests should probably add error or a flag that indicates that the parent failed, or a log or something, but error is probably the best_x000D__x000A_                    $b.OwnFailedCount++_x000D__x000A_                }_x000D__x000A_                elseif ($t.Executed -and $t.Passed) {_x000D__x000A_                    $b.OwnPassedCount++_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    throw "Test '$($t.Name)' is in invalid state. $($t | Format-List -Force * | &amp; $SafeCommands['Out-String'])"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $anyTestFailed = 0 -lt $b.OwnFailedCount_x000D__x000A__x000D__x000A_            $childBlocks = $b.Blocks_x000D__x000A_            $anyChildBlockFailed = $false_x000D__x000A_            $aggregatedChildDuration = [TimeSpan]::Zero_x000D__x000A_            if (none $childBlocks) {_x000D__x000A_                # one thing to consider here is what happens when a block fails, in the current_x000D__x000A_                # excecution model the block can fail when a setup or teardown fails, with failed_x000D__x000A_                # setup it is easy all the tests in the block are considered failed, with teardown_x000D__x000A_                # not so much, when all tests pass and the teardown itself fails what should be the result?_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_                # todo: there are two concepts mixed with the "own", because the duration and the test counts act differently. With the counting we are using own as "the count of the tests in this block", but with duration the "own" means "self", that is how long this block itself has run, without the tests. This information might not be important but this should be cleared up before shipping. Same goes with the relation to failure, ownPassed means that the block itself passed (that is no setup or teardown failed in it), even though the underlying tests might fail._x000D__x000A__x000D__x000A__x000D__x000A_                $b.OwnDuration = $b.Duration - $testDuration_x000D__x000A__x000D__x000A_                $b.Passed = -not ($thisBlockFailed -or $anyTestFailed)_x000D__x000A__x000D__x000A_                # we have no child blocks so the own counts are the same as the total counts_x000D__x000A_                $b.TotalCount = $b.OwnTotalCount_x000D__x000A_                $b.FailedCount = $b.OwnFailedCount_x000D__x000A_                $b.PassedCount = $b.OwnPassedCount_x000D__x000A_                $b.SkippedCount = $b.OwnSkippedCount_x000D__x000A_                $b.NotRunCount = $b.OwnNotRunCount_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # when we have children we first let them process themselves and_x000D__x000A_                # then we add the results together (the recusion could reach to the parent and add the totals)_x000D__x000A_                # but that is difficult with the duration, so this way is less error prone_x000D__x000A_                PostProcess-ExecutedBlock -Block $childBlocks_x000D__x000A__x000D__x000A_                foreach ($child in $childBlocks) {_x000D__x000A_                    # check that no child block failed, the Passed is aggregate failed, so it will be false_x000D__x000A_                    # when any test fails in the child, or if the block itself fails_x000D__x000A_                    if (-not $child.Passed) {_x000D__x000A_                        $anyChildBlockFailed = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    $aggregatedChildDuration += $child.Duration_x000D__x000A__x000D__x000A_                    $b.TotalCount += $child.TotalCount_x000D__x000A_                    $b.PassedCount += $child.PassedCount_x000D__x000A_                    $b.FailedCount += $child.FailedCount_x000D__x000A_                    $b.SkippedCount += $child.SkippedCount_x000D__x000A_                    $b.NotRunCount += $child.NotRunCount_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # then we add counts from this block to the counts from the children blocks_x000D__x000A_                $b.TotalCount += $b.OwnTotalCount_x000D__x000A_                $b.PassedCount += $b.OwnPassedCount_x000D__x000A_                $b.FailedCount += $b.OwnFailedCount_x000D__x000A_                $b.SkippedCount += $b.OwnSkippedCount_x000D__x000A_                $b.NotRunCount += $b.OwnNotRunCount_x000D__x000A__x000D__x000A_                $b.Passed = -not ($thisBlockFailed -or $anyTestFailed -or $anyChildBlockFailed)_x000D__x000A_                $b.OwnDuration = $b.Duration - $testDuration - $aggregatedChildDuration_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Where-Failed {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Block | View-Flat | &amp; $SafeCommands['Where-Object'] { $_.ShouldRun -and (-not $_.Executed -or -not $_.Passed) }_x000D__x000A_}_x000D__x000A__x000D__x000A_function View-Flat {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $tests = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        # TODO: normally I would output to pipeline but in fold there is accumulator and so it does not output_x000D__x000A_        foreach ($b in $Block) {_x000D__x000A_            Fold-Container $b -OnTest { param($t) $tests.Add($t) }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        $tests_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function flattenBlock ($Block, $Accumulator) {_x000D__x000A_    $Accumulator.Add($Block)_x000D__x000A_    if ($Block.Blocks.Count -eq 0) {_x000D__x000A_        return $Accumulator_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($bl in $Block.Blocks) {_x000D__x000A_        flattenBlock -Block $bl -Accumulator $Accumulator_x000D__x000A_    }_x000D__x000A_    $Accumulator_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-FilterObject {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [String[][]] $FullName,_x000D__x000A_        [String[]] $Tag,_x000D__x000A_        [String[]] $ExcludeTag,_x000D__x000A_        [String[]] $Line_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [PSCustomObject] @{_x000D__x000A_        FullName   = $FullName_x000D__x000A_        Tag        = $Tag_x000D__x000A_        ExcludeTag = $ExcludeTag_x000D__x000A_        Line       = $Line_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-PluginObject {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String] $Name,_x000D__x000A_        [Hashtable] $Configuration,_x000D__x000A_        [ScriptBlock] $Start,_x000D__x000A_        [ScriptBlock] $DiscoveryStart,_x000D__x000A_        [ScriptBlock] $ContainerDiscoveryStart,_x000D__x000A_        [ScriptBlock] $BlockDiscoveryStart,_x000D__x000A_        [ScriptBlock] $TestDiscoveryStart,_x000D__x000A_        [ScriptBlock] $TestDiscoveryEnd,_x000D__x000A_        [ScriptBlock] $BlockDiscoveryEnd,_x000D__x000A_        [ScriptBlock] $ContainerDiscoveryEnd,_x000D__x000A_        [ScriptBlock] $DiscoveryEnd,_x000D__x000A_        [ScriptBlock] $RunStart,_x000D__x000A_        [scriptblock] $ContainerRunStart,_x000D__x000A_        [ScriptBlock] $OneTimeBlockSetupStart,_x000D__x000A_        [ScriptBlock] $EachBlockSetupStart,_x000D__x000A_        [ScriptBlock] $OneTimeTestSetupStart,_x000D__x000A_        [ScriptBlock] $EachTestSetupStart,_x000D__x000A_        [ScriptBlock] $EachTestTeardownEnd,_x000D__x000A_        [ScriptBlock] $OneTimeTestTeardownEnd,_x000D__x000A_        [ScriptBlock] $EachBlockTeardownEnd,_x000D__x000A_        [ScriptBlock] $OneTimeBlockTeardownEnd,_x000D__x000A_        [ScriptBlock] $ContainerRunEnd,_x000D__x000A_        [ScriptBlock] $RunEnd,_x000D__x000A_        [ScriptBlock] $End_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [PSCustomObject] @{_x000D__x000A_        Name                    = $Name_x000D__x000A_        Configuration           = $Configuration_x000D__x000A_        Start                   = $Start_x000D__x000A_        DiscoveryStart          = $DiscoveryStart_x000D__x000A_        ContainerDiscoveryStart = $ContainerDiscoveryStart_x000D__x000A_        BlockDiscoveryStart     = $BlockDiscoveryStart_x000D__x000A_        TestDiscoveryStart      = $TestDiscoveryStart_x000D__x000A_        TestDiscoveryEnd        = $TestDiscoveryEnd_x000D__x000A_        BlockDiscoveryEnd       = $BlockDiscoveryEnd_x000D__x000A_        ContainerDiscoveryEnd   = $ContainerDiscoveryEnd_x000D__x000A_        DiscoveryEnd            = $DiscoveryEnd_x000D__x000A_        RunStart                = $RunStart_x000D__x000A_        ContainerRunStart       = $ContainerRunStart_x000D__x000A_        OneTimeBlockSetupStart  = $OneTimeBlockSetupStart_x000D__x000A_        EachBlockSetupStart     = $EachBlockSetupStart_x000D__x000A_        OneTimeTestSetupStart   = $OneTimeTestSetupStart_x000D__x000A_        EachTestSetupStart      = $EachTestSetupStart_x000D__x000A_        EachTestTeardownEnd     = $EachTestTeardownEnd_x000D__x000A_        OneTimeTestTeardownEnd  = $OneTimeTestTeardownEnd_x000D__x000A_        EachBlockTeardownEnd    = $EachBlockTeardownEnd_x000D__x000A_        OneTimeBlockTeardownEnd = $OneTimeBlockTeardownEnd_x000D__x000A_        ContainerRunEnd         = $ContainerRunEnd_x000D__x000A_        RunEnd                  = $RunEnd_x000D__x000A_        End                     = $End_x000D__x000A_        PSTypeName              = 'Plugin'_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-BlockContainer {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $BlockContainer,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -ne $BlockContainer.Data -and 0 -lt $BlockContainer.Data.Count) {_x000D__x000A_        foreach ($d in $BlockContainer.Data) {_x000D__x000A_            switch ($BlockContainer.Type) {_x000D__x000A_                "ScriptBlock" {_x000D__x000A_                    &amp; $BlockContainer.Item @d_x000D__x000A_                }_x000D__x000A_                "File" { Invoke-File -Path $BlockContainer.Item.PSPath -SessionState $SessionState -Data $d }_x000D__x000A_                default { throw [System.ArgumentOutOfRangeException]"" }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        switch ($BlockContainer.Type) {_x000D__x000A_            "ScriptBlock" {_x000D__x000A_                &amp; $BlockContainer.Item_x000D__x000A_            }_x000D__x000A_            "File" { Invoke-File -Path $BlockContainer.Item.PSPath -SessionState $SessionState }_x000D__x000A_            default { throw [System.ArgumentOutOfRangeException]"" }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-BlockContainerObject {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "ScriptBlock")]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "Path")]_x000D__x000A_        [String] $Path,_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "File")]_x000D__x000A_        [System.IO.FileInfo] $File,_x000D__x000A_        $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $type, $item = switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_        "ScriptBlock" { "ScriptBlock", $ScriptBlock }_x000D__x000A_        "Path" { "File", (&amp; $SafeCommands['Get-Item'] $Path) }_x000D__x000A_        "File" { "File", $File }_x000D__x000A_        default { throw [System.ArgumentOutOfRangeException]"" }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $c = [Pester.ContainerInfo]::Create()_x000D__x000A_    $c.Type = $type_x000D__x000A_    $c.Item = $item_x000D__x000A_    $c.Data = $Data_x000D__x000A_    $c_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-DiscoveredBlockContainerObject {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $BlockContainer,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [PSCustomObject] @{_x000D__x000A_        Type    = $BlockContainer.Type_x000D__x000A_        Item = $BlockContainer.Item_x000D__x000A_        # I create a Root block to keep the discovery unaware of containers,_x000D__x000A_        # but I don't want to publish that root block because it contains properties_x000D__x000A_        # that do not make sense on container level like Name and Parent,_x000D__x000A_        # so here we don't want to take the root block but the blocks inside of it_x000D__x000A_        # and copy the rest of the meaningful properties_x000D__x000A_        Blocks  = $Block.Blocks_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-File {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]_x000D__x000A_        $Path,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A_        [Collections.IDictionary] $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $sb = {_x000D__x000A_        param ($private:p, $private:d)_x000D__x000A_        . $private:p @d_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # set the original session state to the wrapper scriptblock_x000D__x000A_    # making it invoke in the caller session state_x000D__x000A_    # TODO: heat this up if we want to keep the first test running accuately_x000D__x000A_    $SessionStateInternal = $script:SessionStateInternalProperty.GetValue($SessionState, $null)_x000D__x000A_    $script:ScriptBlockSessionStateInternalProperty.SetValue($sb, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_    &amp; $sb $Path $Data_x000D__x000A_}_x000D__x000A__x000D__x000A_function Import-Dependency {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Dependency,_x000D__x000A_        # [Parameter(Mandatory=$true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($Dependency -is [ScriptBlock]) {_x000D__x000A_        . $Dependency_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A__x000D__x000A_        # when importing a file we need to_x000D__x000A_        # dot source it into the user scope, the path has_x000D__x000A_        # no bound session state, so simply dot sourcing it would_x000D__x000A_        # import it into module scope_x000D__x000A_        # instead we wrap it into a scriptblock that we attach to user_x000D__x000A_        # scope, and dot source the file, that will import the functions into_x000D__x000A_        # that script block, and then we dot source it again to import it_x000D__x000A_        # into the caller scope, effectively defining the functions there_x000D__x000A_        $sb = {_x000D__x000A_            param ($p)_x000D__x000A__x000D__x000A_            . $($p; &amp; $SafeCommands['Remove-Variable'] -Scope Local -Name p)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_        $SessionStateInternal = $SessionState.GetType().GetProperty('Internal', $flags).GetValue($SessionState, $null)_x000D__x000A__x000D__x000A_        # attach the original session state to the wrapper scriptblock_x000D__x000A_        # making it invoke in the caller session state_x000D__x000A_        $sb.GetType().GetProperty('SessionStateInternal', $flags).SetValue($sb, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_        # dot source the caller bound scriptblock which imports it into user scope_x000D__x000A_        . $sb $Dependency_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-FrameworkDependency {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Dependency_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # adds dependency that is dotsourced during discovery &amp; execution_x000D__x000A_    # this should be rarely needed, but is useful when you wrap Pester pieces_x000D__x000A_    # into your own functions, and want to have them available during both_x000D__x000A_    # discovery and execution_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Adding framework dependency '$Dependency'"_x000D__x000A_    }_x000D__x000A_    Import-Dependency -Dependency $Dependency -SessionState $SessionState_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-Dependency {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Dependency,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A__x000D__x000A_    # adds dependency that is dotsourced after discovery and before execution_x000D__x000A_    if (-not (Is-Discovery)) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Adding run-time dependency '$Dependency'"_x000D__x000A_        }_x000D__x000A_        Import-Dependency -Dependency $Dependency -SessionState $SessionState_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Anywhere {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # runs piece of code during execution, useful for backwards compatibility_x000D__x000A_    # when you have stuff laying around inbetween describes and want to run it_x000D__x000A_    # only during execution and not twice. works the same as Add-Dependency, but I name_x000D__x000A_    # it differently because this is a bad-practice mitigation tool and should probably_x000D__x000A_    # write a warning to make you use Before* blocks instead_x000D__x000A_    if (-not (Is-Discovery)) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Invoking free floating piece of code"_x000D__x000A_        }_x000D__x000A_        Import-Dependency $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-ParametrizedTest () {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [String] $Name,_x000D__x000A_        [Parameter(Mandatory = $true, Position = 1)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [int] $StartLine = $MyInvocation.ScriptLineNumber,_x000D__x000A_        [String[]] $Tag = @(),_x000D__x000A_        # do not use [hashtable[]] because that throws away the order if user uses [ordered] hashtable_x000D__x000A_        [object[]] $Data,_x000D__x000A_        [Switch] $Focus,_x000D__x000A_        [Switch] $Skip_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # using the position of It as Id for the the test so we can join multiple testcases together, this should be unique enough because it only needs to be unique for the current block, so the way to break this would be to inline multiple tests, but that is unlikely to happen. When it happens just use StartLine:StartPosition_x000D__x000A_    # TODO: I don't think the Id is needed anymore_x000D__x000A_    $id = $StartLine_x000D__x000A_    foreach ($d in $Data) {_x000D__x000A_        New-Test -Id $id -Name $Name -Tag $Tag -ScriptBlock $ScriptBlock -StartLine $StartLine -Data $d -Focus:$Focus -Skip:$Skip_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Recurse-Up {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $InputObject,_x000D__x000A_        [ScriptBlock] $Action_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $i = $InputObject_x000D__x000A_    $level = 0_x000D__x000A_    while ($null -ne $i) {_x000D__x000A_        &amp;$Action $i_x000D__x000A__x000D__x000A_        $level--_x000D__x000A_        $i = $i.Parent_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-HumanTime {_x000D__x000A_    param ([TimeSpan]$TimeSpan)_x000D__x000A_    if ($TimeSpan.Ticks -lt [timespan]::TicksPerSecond) {_x000D__x000A_        "$([int]($TimeSpan.TotalMilliseconds))ms"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        "$([int]($TimeSpan.TotalSeconds))s"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_# initialize internal state_x000D__x000A_Reset-TestSuiteState_x000D__x000A__x000D__x000A_# file src\TypeClass.psm1_x000D__x000A_function Is-Value ($Value) {_x000D__x000A_    $Value = $($Value)_x000D__x000A_    $Value -is [ValueType] -or $Value -is [string] -or $value -is [scriptblock]_x000D__x000A_}_x000D__x000A__x000D__x000A_function Is-Collection ($Value) {_x000D__x000A_    # check for value types and strings explicitly_x000D__x000A_    # because otherwise it does not work for decimal_x000D__x000A_    # so let's skip all values we definitely know_x000D__x000A_    # are not collections_x000D__x000A_    if ($Value -is [ValueType] -or $Value -is [string]) {_x000D__x000A_        return $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    -not [object]::ReferenceEquals($Value, $($Value))_x000D__x000A_}_x000D__x000A__x000D__x000A_function Is-ScriptBlock ($Value) {_x000D__x000A_    $Value -is [ScriptBlock]_x000D__x000A_}_x000D__x000A__x000D__x000A_function Is-DecimalNumber ($Value) {_x000D__x000A_    $Value -is [float] -or $Value -is [single] -or $Value -is [double] -or $Value -is [decimal]_x000D__x000A_}_x000D__x000A__x000D__x000A_function Is-Hashtable ($Value) {_x000D__x000A_    $Value -is [hashtable]_x000D__x000A_}_x000D__x000A__x000D__x000A_function Is-Dictionary ($Value) {_x000D__x000A_    $Value -is [System.Collections.IDictionary]_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Is-Object ($Value) {_x000D__x000A_    # here we need to approximate that that object is not value_x000D__x000A_    # or any special category of object, so other checks might_x000D__x000A_    # need to be added_x000D__x000A__x000D__x000A_    -not ($null -eq $Value -or (Is-Value -Value $Value) -or (Is-Collection -Value $Value))_x000D__x000A_}_x000D__x000A_# file src\Format.psm1_x000D__x000A__x000D__x000A_function Format-Collection ($Value, [switch]$Pretty) {_x000D__x000A_    $Limit = 10_x000D__x000A_    $separator = ', '_x000D__x000A_    if ($Pretty) {_x000D__x000A_        $separator = ",`n"_x000D__x000A_    }_x000D__x000A_    $count = $Value.Count_x000D__x000A_    $trimmed = $count  -gt $Limit_x000D__x000A_    '@(' + (($Value | &amp; $SafeCommands['Select-Object'] -First $Limit | &amp; $SafeCommands['ForEach-Object'] { Format-Nicely -Value $_ -Pretty:$Pretty }) -join $separator) + $(if ($trimmed) {', ...'}) + ')'_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Object ($Value, $Property, [switch]$Pretty) {_x000D__x000A_    if ($null -eq $Property) {_x000D__x000A_        $Property = $Value.PSObject.Properties | &amp; $SafeCommands['Select-Object'] -ExpandProperty Name_x000D__x000A_    }_x000D__x000A_    $valueType = Get-ShortType $Value_x000D__x000A_    $valueFormatted = ([string]([PSObject]$Value | &amp; $SafeCommands['Select-Object'] -Property $Property))_x000D__x000A__x000D__x000A_    if ($Pretty) {_x000D__x000A_        $margin = "    "_x000D__x000A_        $valueFormatted = $valueFormatted `_x000D__x000A_            -replace '^@{', "@{`n$margin" `_x000D__x000A_            -replace '; ', ";`n$margin" `_x000D__x000A_            -replace '}$', "`n}" `_x000D__x000A__x000D__x000A_    }_x000D__x000A__x000D__x000A_    $valueFormatted -replace "^@", $valueType_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Null {_x000D__x000A_    '$null'_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-String ($Value) {_x000D__x000A_    if ('' -eq $Value) {_x000D__x000A_        return '&lt;empty&gt;'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    "'$Value'"_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Date ($Value) {_x000D__x000A_    $Value.ToString('o')_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Boolean ($Value) {_x000D__x000A_    '$' + $Value.ToString().ToLower()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-ScriptBlock ($Value) {_x000D__x000A_    '{' + $Value + '}'_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Number ($Value) {_x000D__x000A_    [string]$Value_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Hashtable ($Value) {_x000D__x000A_    $head = '@{'_x000D__x000A_    $tail = '}'_x000D__x000A__x000D__x000A_    $entries = $Value.Keys | &amp; $SafeCommands['Sort-Object'] | &amp; $SafeCommands['ForEach-Object'] {_x000D__x000A_        $formattedValue = Format-Nicely $Value.$__x000D__x000A_        "$_=$formattedValue" }_x000D__x000A__x000D__x000A_    $head + ( $entries -join '; ') + $tail_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Dictionary ($Value) {_x000D__x000A_    $head = 'Dictionary{'_x000D__x000A_    $tail = '}'_x000D__x000A__x000D__x000A_    $entries = $Value.Keys | &amp; $SafeCommands['Sort-Object'] | &amp; $SafeCommands['ForEach-Object'] {_x000D__x000A_        $formattedValue = Format-Nicely $Value.$__x000D__x000A_        "$_=$formattedValue" }_x000D__x000A__x000D__x000A_    $head + ( $entries -join '; ') + $tail_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Nicely ($Value, [switch]$Pretty) {_x000D__x000A_    if ($null -eq $Value) {_x000D__x000A_        return Format-Null -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Value -is [bool]) {_x000D__x000A_        return Format-Boolean -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Value -is [string]) {_x000D__x000A_        return Format-String -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Value -is [DateTime]) {_x000D__x000A_        return Format-Date -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($value -is [Type]) {_x000D__x000A_        return '[' + (Format-Type -Value $Value) + ']'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-DecimalNumber -Value $Value) {_x000D__x000A_        return Format-Number -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-ScriptBlock -Value $Value) {_x000D__x000A_        return Format-ScriptBlock -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-Value -Value $Value) {_x000D__x000A_        return $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-Hashtable -Value $Value) {_x000D__x000A_        # no advanced formatting of objects in the first version, till I balance it_x000D__x000A_        return [string]$Value_x000D__x000A_        #return Format-Hashtable -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-Dictionary -Value $Value) {_x000D__x000A_        # no advanced formatting of objects in the first version, till I balance it_x000D__x000A_        return [string]$Value_x000D__x000A_        #return Format-Dictionary -Value $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Is-Collection -Value $Value) {_x000D__x000A_        return Format-Collection -Value $Value -Pretty:$Pretty_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # no advanced formatting of objects in the first version, till I balance it_x000D__x000A_    return [string]$Value_x000D__x000A_    # Format-Object -Value $Value -Property (Get-DisplayProperty $Value) -Pretty:$Pretty_x000D__x000A_}_x000D__x000A__x000D__x000A_function Sort-Property ($InputObject, [string[]]$SignificantProperties, $Limit = 4) {_x000D__x000A__x000D__x000A_    $properties = @($InputObject.PSObject.Properties |_x000D__x000A_            &amp; $SafeCommands['Where-Object'] { $_.Name -notlike "_*"} |_x000D__x000A_            &amp; $SafeCommands['Select-Object'] -expand Name |_x000D__x000A_            &amp; $SafeCommands['Sort-Object'])_x000D__x000A_    $significant = @()_x000D__x000A_    $rest = @()_x000D__x000A_    foreach ($p in $properties) {_x000D__x000A_        if ($significantProperties -contains $p) {_x000D__x000A_            $significant += $p_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $rest += $p_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #todo: I am assuming id, name properties, so I am just sorting the selected ones by name._x000D__x000A_    (@($significant | &amp; $SafeCommands['Sort-Object']) + $rest) | &amp; $SafeCommands['Select-Object'] -First $Limit_x000D__x000A__x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DisplayProperty ($Value) {_x000D__x000A_    Sort-Property -InputObject $Value -SignificantProperties 'id', 'name'_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ShortType ($Value) {_x000D__x000A_    if ($null -ne $value) {_x000D__x000A_        $type = Format-Type $Value.GetType()_x000D__x000A_        # PSCustomObject serializes to the whole type name on normal PS but to_x000D__x000A_        # just PSCustomObject on PS Core_x000D__x000A__x000D__x000A_        $type `_x000D__x000A_            -replace "^System\." `_x000D__x000A_            -replace "^Management\.Automation\.PSCustomObject$", "PSObject" `_x000D__x000A_            -replace "^PSCustomObject$", "PSObject" `_x000D__x000A_            -replace "^Object\[\]$", "collection" `_x000D__x000A__x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Format-Type $null_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Type ([Type]$Value) {_x000D__x000A_    if ($null -eq $Value) {_x000D__x000A_        return '&lt;none&gt;'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [string]$Value_x000D__x000A_}_x000D__x000A__x000D__x000A_# file src\Pester.RSpec.ps1_x000D__x000A_function Find-File {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [String[]] $Path,_x000D__x000A_        [String[]] $ExcludePath,_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [string] $Extension_x000D__x000A_    )_x000D__x000A__x000D__x000A__x000D__x000A_    $files =_x000D__x000A_        foreach ($p in $Path) {_x000D__x000A_            if ([String]::IsNullOrWhiteSpace($p))_x000D__x000A_            {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((&amp; $script:SafeCommands['Test-Path'] $p)) {_x000D__x000A_                $item = &amp; $SafeCommands['Get-Item'] $p_x000D__x000A__x000D__x000A_                if ($item.PSIsContainer) {_x000D__x000A_                    # this is an existing directory search it for tests file_x000D__x000A_                    &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $p -Filter "*$Extension" -File_x000D__x000A_                    continue_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ("FileSystem" -ne $item.PSProvider.Name) {_x000D__x000A_                    # item is not a directory and exists but is not a file so we are not interested_x000D__x000A_                    continue_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (".ps1" -ne $item.Extension) {_x000D__x000A_                    &amp; $SafeCommands['Write-Error'] "Script path '$p' is not a ps1 file." -ErrorAction Stop_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # this is some file, we don't care if it is just a .ps1 file or .Tests.ps1 file_x000D__x000A_                &amp; $SafeCommands['Add-Member'] -Name UnresolvedPath -Type NoteProperty -Value $p -InputObject $item_x000D__x000A_                $item_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # this is a path that does not exist so let's hope it is_x000D__x000A_            # a wildcarded path that will resolve to some files_x000D__x000A_            &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $p -Filter "*$Extension" -File_x000D__x000A_        }_x000D__x000A__x000D__x000A_    Filter-Excluded -Files $files -ExcludePath $ExcludePath | &amp; $SafeCommands['Where-Object'] { $_ }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Filter-Excluded ($Files, $ExcludePath) {_x000D__x000A__x000D__x000A_    if ($null -eq $ExcludePath -or @($ExcludePath).Length -eq 0) {_x000D__x000A_        return @($Files)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($file in @($Files)) {_x000D__x000A_        # normalize backslashes for cross-platform ease of use_x000D__x000A_        $p = $file.FullName -replace "/","\"_x000D__x000A_        $excluded = $false_x000D__x000A__x000D__x000A_        foreach ($exclusion in (@($ExcludePath) -replace "/","\")) {_x000D__x000A_            if ($excluded) {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($p -like $exclusion) {_x000D__x000A_                $excluded = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $excluded) {_x000D__x000A_            $file_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-RSpecTestObjectProperties {_x000D__x000A_    param ($TestObject)_x000D__x000A__x000D__x000A_    # adds properties that are specific to RSpec to the result object_x000D__x000A_    # this includes figuring out the result_x000D__x000A_    # formatting the failure message and stacktrace_x000D__x000A__x000D__x000A_    $TestObject.Result = if ($TestObject.Skipped) {_x000D__x000A_        "Skipped"_x000D__x000A_    }_x000D__x000A_    elseif ($TestObject.Passed) {_x000D__x000A_        "Passed"_x000D__x000A_    }_x000D__x000A_    elseif ($TestObject.ShouldRun -and (-not $TestObject.Executed -or -not $TestObject.Passed)) {_x000D__x000A_        "Failed"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        "NotRun"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($e in $TestObject.ErrorRecord) {_x000D__x000A_        $r = ConvertTo-FailureLines $e_x000D__x000A_        $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayErrorMessage", [string]($r.Message -join [Environment]::NewLine)))_x000D__x000A_        $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayStackTrace", [string]($r.Trace -join [Environment]::NewLine)))_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-RSpecBlockObjectProperties ($BlockObject) {_x000D__x000A_    foreach ($e in $BlockObject.ErrorRecord) {_x000D__x000A_        $r = ConvertTo-FailureLines $e_x000D__x000A_        $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayErrorMessage", [string]($r.Message -join [Environment]::NewLine)))_x000D__x000A_        $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayStackTrace", [string]($r.Trace -join [Environment]::NewLine)))_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function PostProcess-RspecTestRun ($TestRun) {_x000D__x000A__x000D__x000A_    Fold-Run $Run -OnTest {_x000D__x000A_        param($t)_x000D__x000A__x000D__x000A_        ## decorate_x000D__x000A_        # we already added the RSpec properties as part of the plugin_x000D__x000A__x000D__x000A_        ### summarize_x000D__x000A_        $TestRun.Tests.Add($t)_x000D__x000A__x000D__x000A_        switch ($t.Result) {_x000D__x000A_            "NotRun" {_x000D__x000A_                $null = $TestRun.NotRun.Add($t)_x000D__x000A_            }_x000D__x000A_            "Passed" {_x000D__x000A_                $null = $TestRun.Passed.Add($t)_x000D__x000A_            }_x000D__x000A_            "Failed" {_x000D__x000A_                $null = $TestRun.Failed.Add($t)_x000D__x000A_            }_x000D__x000A_            "Skipped" {_x000D__x000A_                $null = $TestRun.Skipped.Add($t)_x000D__x000A_            }_x000D__x000A_            default { throw "Result $($t.Result) is not supported."}_x000D__x000A_        }_x000D__x000A__x000D__x000A_    } -OnBlock {_x000D__x000A_        param ($b)_x000D__x000A__x000D__x000A_        ## decorate_x000D__x000A__x000D__x000A_        # we already processed errors in the plugin step to make the available for reporting_x000D__x000A__x000D__x000A_        $b.Result = if ($b.Skip) {_x000D__x000A_            "Skipped"_x000D__x000A_        }_x000D__x000A_        elseif ($b.Passed) {_x000D__x000A_            "Passed"_x000D__x000A_        }_x000D__x000A_        elseif ($b.ShouldRun -and (-not $b.Executed -or -not $b.Passed)) {_x000D__x000A_            "Failed"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            "NotRun"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        ## sumamrize_x000D__x000A__x000D__x000A_        # a block that has errors would write into failed blocks so we can report them_x000D__x000A_        # later we can filter this to only report errors from AfterAll_x000D__x000A_        if (0 -lt $b.ErrorRecord.Count) {_x000D__x000A_            $TestRun.FailedBlocks.Add($b)_x000D__x000A_        }_x000D__x000A__x000D__x000A_    } -OnContainer {_x000D__x000A_        param ($b)_x000D__x000A__x000D__x000A_        ## decorate_x000D__x000A__x000D__x000A_        # here we add result_x000D__x000A_        $b.result = if ($b.Skipped) {_x000D__x000A_            "Skipped"_x000D__x000A_        }_x000D__x000A_        elseif ($b.Passed) {_x000D__x000A_            "Passed"_x000D__x000A_        }_x000D__x000A_        elseif ($b.ShouldRun -and (-not $b.Executed -or -not $b.Passed)) {_x000D__x000A_            "Failed"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            "NotRun"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($e in $b.ErrorRecord) {_x000D__x000A_            $r = ConvertTo-FailureLines $e_x000D__x000A_            $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayErrorMessage", [string]($r.Message -join [Environment]::NewLine)))_x000D__x000A_            $e.PSObject.Properties.Add([Pester.Factory]::CreateNoteProperty("DisplayStackTrace", [string]($r.Trace -join [Environment]::NewLine)))_x000D__x000A_        }_x000D__x000A__x000D__x000A_        ## summarize_x000D__x000A_        if (0 -lt $b.ErrorRecord.Count) {_x000D__x000A_            $TestRun.FailedContainers.Add($b)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $TestRun.Duration += $b.Duration_x000D__x000A_        $TestRun.UserDuration += $b.UserDuration_x000D__x000A_        $TestRun.FrameworkDuration += $b.FrameworkDuration_x000D__x000A_        $TestRun.DiscoveryDuration += $b.DiscoveryDuration_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $TestRun.PassedCount = $TestRun.Passed.Count_x000D__x000A_    $TestRun.FailedCount = $TestRun.Failed.Count_x000D__x000A_    $TestRun.SkippedCount = $TestRun.Skipped.Count_x000D__x000A_    $TestRun.NotRunCount = $TestRun.NotRun.Count_x000D__x000A__x000D__x000A_    $TestRun.TotalCount = $TestRun.Tests.Count_x000D__x000A__x000D__x000A_    $TestRun.FailedBlocksCount = $TestRun.FailedBlocks.Count_x000D__x000A_    $TestRun.FailedContainersCount = $TestRun.FailedContainers.Count_x000D__x000A__x000D__x000A_    $TestRun.Result = if (0 -lt ($TestRun.FailedCount + $TestRun.FailedBlocksCount + $TestRun.FailedContainersCount)) {_x000D__x000A_        "Failed"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        "Passed"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-RSpecObjectDecoratorPlugin () {_x000D__x000A_    New-PluginObject -Name "RSpecObjectDecoratorPlugin" `_x000D__x000A_        -EachTestTeardownEnd {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        # TODO: consider moving this into the core if those results are just what we need, but look first at Gherkin and how many of those results are RSpec specific and how many are Gherkin specific_x000D__x000A_        #TODO: also this is a plugin because it needs to run before the error processing kicks in, this mixes concerns here imho, and needs to be revisited, because the error writing logic is now dependent on this plugin_x000D__x000A_        Add-RSpecTestObjectProperties $Context.Test_x000D__x000A_    } -EachBlockTeardownEnd {_x000D__x000A_        param($Context)_x000D__x000A_        #TODO: also this is a plugin because it needs to run before the error processing kicks in (to be able to report correctly formatted errors on scrren in case teardown failure), this mixes concerns here imho, and needs to be revisited, because the error writing logic is now dependent on this plugin_x000D__x000A_        Add-RSpecBlockObjectProperties $Context.Block_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-PesterConfiguration {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param()_x000D__x000A__x000D__x000A_    [PesterConfiguration]@{}_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-RSpecNonPublicProperties ($run){_x000D__x000A_    # $runProperties = @(_x000D__x000A_    #     'Configuration'_x000D__x000A_    #     'Containers'_x000D__x000A_    #     'ExecutedAt'_x000D__x000A_    #     'FailedBlocksCount'_x000D__x000A_    #     'FailedCount'_x000D__x000A_    #     'NotRunCount'_x000D__x000A_    #     'PassedCount'_x000D__x000A_    #     'PSBoundParameters'_x000D__x000A_    #     'Result'_x000D__x000A_    #     'SkippedCount'_x000D__x000A_    #     'TotalCount'_x000D__x000A_    #     'Duration'_x000D__x000A_    # )_x000D__x000A__x000D__x000A_    # $containerProperties = @(_x000D__x000A_    #     'Blocks'_x000D__x000A_    #     'Content'_x000D__x000A_    #     'ErrorRecord'_x000D__x000A_    #     'Executed'_x000D__x000A_    #     'ExecutedAt'_x000D__x000A_    #     'FailedCount'_x000D__x000A_    #     'NotRunCount'_x000D__x000A_    #     'PassedCount'_x000D__x000A_    #     'Result'_x000D__x000A_    #     'ShouldRun'_x000D__x000A_    #     'Skip'_x000D__x000A_    #     'SkippedCount'_x000D__x000A_    #     'Duration'_x000D__x000A_    #     'Type' # needed because of nunit export path expansion_x000D__x000A_    #     'TotalCount'_x000D__x000A_    # )_x000D__x000A__x000D__x000A_    # $blockProperties = @(_x000D__x000A_    #     'Blocks'_x000D__x000A_    #     'ErrorRecord'_x000D__x000A_    #     'Executed'_x000D__x000A_    #     'ExecutedAt'_x000D__x000A_    #     'FailedCount'_x000D__x000A_    #     'Name'_x000D__x000A_    #     'NotRunCount'_x000D__x000A_    #     'PassedCount'_x000D__x000A_    #     'Path'_x000D__x000A_    #     'Result'_x000D__x000A_    #     'ScriptBlock'_x000D__x000A_    #     'ShouldRun'_x000D__x000A_    #     'Skip'_x000D__x000A_    #     'SkippedCount'_x000D__x000A_    #     'StandardOutput'_x000D__x000A_    #     'Tag'_x000D__x000A_    #     'Tests'_x000D__x000A_    #     'Duration'_x000D__x000A_    #     'TotalCount'_x000D__x000A_    # )_x000D__x000A__x000D__x000A_    # $testProperties = @(_x000D__x000A_    #     'Data'_x000D__x000A_    #     'ErrorRecord'_x000D__x000A_    #     'Executed'_x000D__x000A_    #     'ExecutedAt'_x000D__x000A_    #     'ExpandedName'_x000D__x000A_    #     'Id' # needed because of grouping of data driven tests in nunit export_x000D__x000A_    #     'Name'_x000D__x000A_    #     'Path'_x000D__x000A_    #     'Result'_x000D__x000A_    #     'ScriptBlock'_x000D__x000A_    #     'ShouldRun'_x000D__x000A_    #     'Skip'_x000D__x000A_    #     'Skipped'_x000D__x000A_    #     'StandardOutput'_x000D__x000A_    #     'Tag'_x000D__x000A_    #     'Duration'_x000D__x000A_    # )_x000D__x000A__x000D__x000A_    Fold-Run $run -OnRun {_x000D__x000A_        param($i)_x000D__x000A_        # $ps = $i.PsObject.Properties.Name_x000D__x000A_        # foreach ($p in $ps) {_x000D__x000A_        #     if ($p -like 'Plugin*') {_x000D__x000A_        #         $i.PsObject.Properties.Remove($p)_x000D__x000A_        #     }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        $i.PluginConfiguration = $null_x000D__x000A_        $i.PluginData = $null_x000D__x000A_        $i.Plugins = $null_x000D__x000A__x000D__x000A_    } -OnContainer {_x000D__x000A_        param($i)_x000D__x000A_        # $ps = $i.PsObject.Properties.Name_x000D__x000A_        # foreach ($p in $ps) {_x000D__x000A_        #     if ($p -like 'Own*') {_x000D__x000A_        #         $i.PsObject.Properties.Remove($p)_x000D__x000A_        #     }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        # $i.FrameworkData = $null_x000D__x000A_        # $i.PluginConfiguration = $null_x000D__x000A_        # $i.PluginData = $null_x000D__x000A_        # $i.Plugins = $null_x000D__x000A__x000D__x000A_    } -OnBlock {_x000D__x000A_        param($i)_x000D__x000A_        # $ps = $i.PsObject.Properties.Name_x000D__x000A_        # foreach ($p in $ps) {_x000D__x000A_        #     if ($p -eq 'FrameworkData' -or $p -like 'Own*' -or $p -like 'Plugin*') {_x000D__x000A_        #         $i.PsObject.Properties.Remove($p)_x000D__x000A_        #     }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        $i.FrameworkData = $null_x000D__x000A_        $i.PluginData = $null_x000D__x000A__x000D__x000A_    } -OnTest {_x000D__x000A_        param($i)_x000D__x000A_        # $ps = $i.PsObject.Properties.Name_x000D__x000A_        # foreach ($p in $ps) {_x000D__x000A_        #     if ($p -eq 'FrameworkData' -or $p -like 'Plugin*') {_x000D__x000A_        #         $i.PsObject.Properties.Remove($p)_x000D__x000A_        #     }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        $i.FrameworkData = $null_x000D__x000A_        $i.PluginData = $null_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-PesterContainer {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Generates ContainerInfo-objects used as for Invoke-Pester -Container_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 supports running tests files and scriptblocks using parameter-input._x000D__x000A_    To use this feature, Invoke-Pester expects one or more ContainerInfo-objects_x000D__x000A_    created using this funciton, that specify test containers in the form of paths_x000D__x000A_    to the test files or scriptblocks containing the tests directly._x000D__x000A__x000D__x000A_    A optional Data-dictionary can be provided to supply the containers with any_x000D__x000A_    required parameter-values. This is useful in when tests are generated dynamically_x000D__x000A_    based on parameter-input. This method enables complex test-solutions while being_x000D__x000A_    able to re-use a lot of test-code._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    Specifies one or more scriptblocks containing tests._x000D__x000A__x000D__x000A_    .PARAMETER Data_x000D__x000A_    Allows a dictionary to be provided with parameter-values that should be used during_x000D__x000A_    execution of the test containers defined in Path or ScriptBlock._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $container = New-PesterContainer -Path 'CodingStyle.Tests.ps1' -Data @{ File = "Get-Emoji.ps1" }_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using a generated ContainerInfo-object referencing a file and_x000D__x000A_    required parameters that's provided to the test-file during execution._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $sb = {_x000D__x000A_        Describe 'Testing New-PesterContainer' {_x000D__x000A_            It 'Useless test' {_x000D__x000A_                "foo" | Should -Not -Be "bar"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    $container = New-PesterContainer -ScriptBlock $sb_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester agianst a scriptblock. New-PesterContainer is used to genreated_x000D__x000A_    the requried ContainerInfo-object that enables us to do this directly._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-PesterContainer_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="Path")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "Path")]_x000D__x000A_        [String[]] $Path,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "ScriptBlock")]_x000D__x000A_        [ScriptBlock[]] $ScriptBlock,_x000D__x000A__x000D__x000A_        [Collections.IDictionary[]] $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # it seems that when I don't assign $Data to $dt here the foreach does not always work in 5.1 :/ some vooodo_x000D__x000A_    $dt = $Data_x000D__x000A_    # expand to ContainerInfo user can provide multiple sets of data, but ContainerInfo can hold only one_x000D__x000A_    # to keep the internal logic simple._x000D__x000A_    $kind = $PSCmdlet.ParameterSetName_x000D__x000A_    if ('ScriptBlock' -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows scriptblocks without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($sb in $ScriptBlock) {_x000D__x000A_                New-BlockContainerObject -ScriptBlock $sb -Data $d_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ("Path" -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows files without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($p in $Path) {_x000D__x000A_                # resolve the path we are given in the same way we would resolve -Path on Invoke-Pester_x000D__x000A_                $files = @(Find-File -Path $p -ExcludePath $PesterPreference.Run.ExcludePath.Value -Extension $PesterPreference.Run.TestExtension.Value)_x000D__x000A_                foreach ($file in $files) {_x000D__x000A_                    New-BlockContainerObject -File $file -Data $d_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\Pester.ps1_x000D__x000A_function Assert-ValidAssertionName {_x000D__x000A_    param([string]$Name)_x000D__x000A_    if ($Name -notmatch '^\S+$') {_x000D__x000A_        throw "Assertion name '$name' is invalid, assertion name must be a single word."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Assert-ValidAssertionAlias {_x000D__x000A_    param([string[]]$Alias)_x000D__x000A_    if ($Alias -notmatch '^\S+$') {_x000D__x000A_        throw "Assertion alias '$string' is invalid, assertion alias must be a single word."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-ShouldOperator {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_    Register a Should Operator with Pester_x000D__x000A_.DESCRIPTION_x000D__x000A_    This function allows you to create custom Should assertions._x000D__x000A_.PARAMETER Name_x000D__x000A_    The name of the assertion. This will become a Named Parameter of Should._x000D__x000A_.PARAMETER Test_x000D__x000A_    The test function. The function must return a PSObject with a [Bool]succeeded and a [string]failureMessage property._x000D__x000A_.PARAMETER Alias_x000D__x000A_    A list of aliases for the Named Parameter._x000D__x000A_.PARAMETER SupportsArrayInput_x000D__x000A_    Does the test function support the passing an array of values to test._x000D__x000A_.PARAMETER InternalName_x000D__x000A_    If -Name is different from the actual function name, record the actual function name here._x000D__x000A_    Used by Get-ShouldOperator to pull function help._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    function BeAwesome($ActualValue, [switch] $Negate)_x000D__x000A_    {_x000D__x000A__x000D__x000A_        [bool] $succeeded = $ActualValue -eq 'Awesome'_x000D__x000A_        if ($Negate) { $succeeded = -not $succeeded }_x000D__x000A__x000D__x000A_        if (-not $succeeded)_x000D__x000A_        {_x000D__x000A_            if ($Negate)_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is Awesome"_x000D__x000A_            }_x000D__x000A_            else_x000D__x000A_            {_x000D__x000A_                $failureMessage = "{$ActualValue} is not Awesome"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return New-Object psobject -Property @{_x000D__x000A_            Succeeded      = $succeeded_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-ShouldOperator -Name  BeAwesome `_x000D__x000A_                        -Test  $function:BeAwesome `_x000D__x000A_                        -Alias 'BA'_x000D__x000A__x000D__x000A_    PS C:\&gt; "bad" | should -BeAwesome_x000D__x000A_    {bad} is not Awesome_x000D__x000A_    ```_x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/Add-ShouldOperator_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock] $Test,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [AllowEmptyCollection()]_x000D__x000A_        [string[]] $Alias = @(),_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [string] $InternalName,_x000D__x000A__x000D__x000A_        [switch] $SupportsArrayInput_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $entry = &amp; $SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_        Test               = $Test_x000D__x000A_        SupportsArrayInput = [bool]$SupportsArrayInput_x000D__x000A_        Name               = $Name_x000D__x000A_        Alias              = $Alias_x000D__x000A_        InternalName       = If ($InternalName) {_x000D__x000A_            $InternalName_x000D__x000A_        }_x000D__x000A_        Else {_x000D__x000A_            $Name_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if (Test-AssertionOperatorIsDuplicate -Operator $entry) {_x000D__x000A_        # This is an exact duplicate of an existing assertion operator._x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $namesToCheck = @(_x000D__x000A_        $Name_x000D__x000A_        $Alias_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-AssertionOperatorNameIsUnique -Name $namesToCheck_x000D__x000A__x000D__x000A_    $script:AssertionOperators[$Name] = $entry_x000D__x000A__x000D__x000A_    foreach ($string in $Alias | &amp; $SafeCommands['Where-Object'] { -not ([string]::IsNullOrWhiteSpace($_))}) {_x000D__x000A_        Assert-ValidAssertionAlias -Alias $string_x000D__x000A_        $script:AssertionAliases[$string] = $Name_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-AssertionDynamicParameterSet -AssertionEntry $entry_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-AssertionOperatorIsDuplicate {_x000D__x000A_    param (_x000D__x000A_        [psobject] $Operator_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $existing = $script:AssertionOperators[$Operator.Name]_x000D__x000A_    if (-not $existing) {_x000D__x000A_        return $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $Operator.SupportsArrayInput -eq $existing.SupportsArrayInput -and_x000D__x000A_    $Operator.Test.ToString() -eq $existing.Test.ToString() -and_x000D__x000A_    -not (&amp; $SafeCommands['Compare-Object'] $Operator.Alias $existing.Alias)_x000D__x000A_}_x000D__x000A_function Assert-AssertionOperatorNameIsUnique {_x000D__x000A_    param (_x000D__x000A_        [string[]] $Name_x000D__x000A_    )_x000D__x000A__x000D__x000A_    foreach ($string in $name | &amp; $SafeCommands['Where-Object'] { -not ([string]::IsNullOrWhiteSpace($_))}) {_x000D__x000A_        Assert-ValidAssertionName -Name $string_x000D__x000A__x000D__x000A_        if ($script:AssertionOperators.ContainsKey($string)) {_x000D__x000A_            throw "Assertion operator name '$string' has been added multiple times."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($script:AssertionAliases.ContainsKey($string)) {_x000D__x000A_            throw "Assertion operator name '$string' already exists as an alias for operator '$($script:AssertionAliases[$key])'"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-AssertionDynamicParameterSet {_x000D__x000A_    param (_x000D__x000A_        [object] $AssertionEntry_x000D__x000A_    )_x000D__x000A__x000D__x000A_    ${function:__AssertionTest__} = $AssertionEntry.Test_x000D__x000A_    $commandInfo = &amp; $SafeCommands['Get-Command'] __AssertionTest__ -CommandType Function_x000D__x000A_    $metadata = [System.Management.Automation.CommandMetadata]$commandInfo_x000D__x000A__x000D__x000A_    $attribute = &amp; $SafeCommands['New-Object'] Management.Automation.ParameterAttribute_x000D__x000A_    $attribute.ParameterSetName = $AssertionEntry.Name_x000D__x000A__x000D__x000A_    $attributeCollection = &amp; $SafeCommands['New-Object'] Collections.ObjectModel.Collection[Attribute]_x000D__x000A_    $null = $attributeCollection.Add($attribute)_x000D__x000A_    if (-not ([string]::IsNullOrWhiteSpace($AssertionEntry.Alias))) {_x000D__x000A_        Assert-ValidAssertionAlias -Alias $AssertionEntry.Alias_x000D__x000A_        $attribute = &amp; $SafeCommands['New-Object'] System.Management.Automation.AliasAttribute($AssertionEntry.Alias)_x000D__x000A_        $attributeCollection.Add($attribute)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $dynamic = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter($AssertionEntry.Name, [switch], $attributeCollection)_x000D__x000A_    $null = $script:AssertionDynamicParams.Add($AssertionEntry.Name, $dynamic)_x000D__x000A__x000D__x000A_    if ($script:AssertionDynamicParams.ContainsKey('Not')) {_x000D__x000A_        $dynamic = $script:AssertionDynamicParams['Not']_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $dynamic = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter('Not', [switch], (&amp; $SafeCommands['New-Object'] System.Collections.ObjectModel.Collection[Attribute]))_x000D__x000A_        $null = $script:AssertionDynamicParams.Add('Not', $dynamic)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $attribute = &amp; $SafeCommands['New-Object'] System.Management.Automation.ParameterAttribute_x000D__x000A_    $attribute.ParameterSetName = $AssertionEntry.Name_x000D__x000A_    $attribute.Mandatory = $false_x000D__x000A_    $null = $dynamic.Attributes.Add($attribute)_x000D__x000A__x000D__x000A_    $i = 1_x000D__x000A_    foreach ($parameter in $metadata.Parameters.Values) {_x000D__x000A_        # common parameters that are already defined_x000D__x000A_        if ($parameter.Name -eq 'ActualValue' -or $parameter.Name -eq 'Not' -or $parameter.Name -eq 'Negate') {_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A_        if ($script:AssertionOperators.ContainsKey($parameter.Name) -or $script:AssertionAliases.ContainsKey($parameter.Name)) {_x000D__x000A_            throw "Test block for assertion operator $($AssertionEntry.Name) contains a parameter named $($parameter.Name), which conflicts with another assertion operator's name or alias."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($alias in $parameter.Aliases) {_x000D__x000A_            if ($script:AssertionOperators.ContainsKey($alias) -or $script:AssertionAliases.ContainsKey($alias)) {_x000D__x000A_                throw "Test block for assertion operator $($AssertionEntry.Name) contains a parameter named $($parameter.Name) with alias $alias, which conflicts with another assertion operator's name or alias."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($script:AssertionDynamicParams.ContainsKey($parameter.Name)) {_x000D__x000A_            $dynamic = $script:AssertionDynamicParams[$parameter.Name]_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # We deliberately use a type of [object] here to avoid conflicts between different assertion operators that may use the same parameter name._x000D__x000A_            # We also don't bother to try to copy transformation / validation attributes here for the same reason._x000D__x000A_            # Because we'll be passing these parameters on to the actual test function later, any errors will come out at that time._x000D__x000A__x000D__x000A_            # few years later: using [object] causes problems with switch params (in my case -PassThru), because then we cannot use them without defining a value_x000D__x000A_            # so for switches we must prefer the conflicts over type_x000D__x000A_            if ([switch] -eq $parameter.ParameterType) {_x000D__x000A_                $type = [switch]_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $type = [object]_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $dynamic = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter($parameter.Name, $type, (&amp; $SafeCommands['New-Object'] System.Collections.ObjectModel.Collection[Attribute]))_x000D__x000A_            $null = $script:AssertionDynamicParams.Add($parameter.Name, $dynamic)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $attribute = &amp; $SafeCommands['New-Object'] Management.Automation.ParameterAttribute_x000D__x000A_        $attribute.ParameterSetName = $AssertionEntry.Name_x000D__x000A_        $attribute.Mandatory = $false_x000D__x000A_        $attribute.Position = ($i++)_x000D__x000A__x000D__x000A_        $null = $dynamic.Attributes.Add($attribute)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-AssertionOperatorEntry([string] $Name) {_x000D__x000A_    return $script:AssertionOperators[$Name]_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-AssertionDynamicParams {_x000D__x000A_    return $script:AssertionDynamicParams_x000D__x000A_}_x000D__x000A__x000D__x000A_function Has-Flag {_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Pester.OutputTypes]_x000D__x000A_        $Setting,_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        [Pester.OutputTypes]_x000D__x000A_        $Value_x000D__x000A_    )_x000D__x000A__x000D__x000A_    0 -ne ($Setting -band $Value)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-Pester {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs Pester tests_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    The Invoke-Pester function runs Pester tests, including *.Tests.ps1 files and_x000D__x000A_    Pester tests in PowerShell scripts._x000D__x000A__x000D__x000A_    You can run scripts that include Pester tests just as you would any other_x000D__x000A_    Windows PowerShell script, including typing the full path at the command line_x000D__x000A_    and running in a script editing program. Typically, you use Invoke-Pester to run_x000D__x000A_    all Pester tests in a directory, or to use its many helpful parameters,_x000D__x000A_    including parameters that generate custom objects or XML files._x000D__x000A__x000D__x000A_    By default, Invoke-Pester runs all *.Tests.ps1 files in the current directory_x000D__x000A_    and all subdirectories recursively. You can use its parameters to select tests_x000D__x000A_    by file name, test name, or tag._x000D__x000A__x000D__x000A_    To run Pester tests in scripts that take parameter values, use the Script_x000D__x000A_    parameter with a hash table value._x000D__x000A__x000D__x000A_    Also, by default, Pester tests write test results to the console host, much like_x000D__x000A_    Write-Host does, but you can use the Show parameter set to None to suppress the host_x000D__x000A_    messages, use the PassThru parameter to generate a custom object_x000D__x000A_    (PSCustomObject) that contains the test results, use the OutputXml and_x000D__x000A_    OutputFormat parameters to write the test results to an XML file, and use the_x000D__x000A_    EnableExit parameter to return an exit code that contains the number of failed_x000D__x000A_    tests._x000D__x000A__x000D__x000A_    You can also use the Strict parameter to fail all pending and skipped tests._x000D__x000A_    This feature is ideal for build systems and other processes that require success_x000D__x000A_    on every test._x000D__x000A__x000D__x000A_    To help with test design, Invoke-Pester includes a CodeCoverage parameter that_x000D__x000A_    lists commands, classes, functions, and lines of code that did not run during test_x000D__x000A_    execution and returns the code that ran as a percentage of all tested code._x000D__x000A__x000D__x000A_    Invoke-Pester, and the Pester module that exports it, are products of an_x000D__x000A_    open-source project hosted on GitHub. To view, comment, or contribute to the_x000D__x000A_    repository, see https://github.com/Pester._x000D__x000A__x000D__x000A_    .PARAMETER CI_x000D__x000A_    (Introduced v5)_x000D__x000A_    Enable Code Coverage, Test Results and Exit after Run_x000D__x000A__x000D__x000A_    Replace with ConfigurationProperty_x000D__x000A_        CodeCoverage.Enabled = $true_x000D__x000A_        TestResult.Enabled = $true_x000D__x000A_        Run.Exit = $true_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverage_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.Enabled = $true_x000D__x000A_    Adds a code coverage report to the Pester tests. Takes strings or hash table values._x000D__x000A_    A code coverage report lists the lines of code that did and did not run during_x000D__x000A_    a Pester test. This report does not tell whether code was tested; only whether_x000D__x000A_    the code ran during the test._x000D__x000A_    By default, the code coverage report is written to the host program_x000D__x000A_    (like Write-Host). When you use the PassThru parameter, the custom object_x000D__x000A_    that Invoke-Pester returns has an additional CodeCoverage property that contains_x000D__x000A_    a custom object with detailed results of the code coverage test, including lines_x000D__x000A_    hit, lines missed, and helpful statistics._x000D__x000A_    However, NUnitXml and JUnitXml output (OutputXML, OutputFormat) do not include_x000D__x000A_    any code coverage information, because it's not supported by the schema._x000D__x000A_    Enter the path to the files of code under test (not the test file)._x000D__x000A_    Wildcard characters are supported. If you omit the path, the default is local_x000D__x000A_    directory, not the directory specified by the Script parameter. Pester test files_x000D__x000A_    are by default excluded from code coverage when a directory is provided. When you_x000D__x000A_    provide a test file directly using string, code coverage will be measured. To include_x000D__x000A_    tests in code coverage of a directory, use the dictionary syntax and provide_x000D__x000A_    IncludeTests = $true option, as shown below._x000D__x000A_    To run a code coverage test only on selected classes, functions or lines in a script,_x000D__x000A_    enter a hash table value with the following keys:_x000D__x000A_    -- Path (P)(mandatory) &lt;string&gt;: Enter one path to the files. Wildcard characters_x000D__x000A_    are supported, but only one string is permitted._x000D__x000A_    -- IncludeTests &lt;bool&gt;: Includes code coverage for Pester test files (*.tests.ps1)._x000D__x000A_    Default is false._x000D__x000A_    One of the following: Class/Function or StartLine/EndLine_x000D__x000A_    -- Class (C) &lt;string&gt;: Enter the class name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -- Function (F) &lt;string&gt;: Enter the function name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -or-_x000D__x000A_    -- StartLine (S): Performs code coverage analysis beginning with the specified_x000D__x000A_    line. Default is line 1._x000D__x000A_    -- EndLine (E): Performs code coverage analysis ending with the specified line._x000D__x000A_    Default is the last line of the script._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The path where Invoke-Pester will save formatted code coverage results file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    a required extension (usually the xml)._x000D__x000A_    If this path is not provided, no file will be generated._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileEncoding_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileEncoding_x000D__x000A_    Sets the output encoding of CodeCoverageOutputFileFormat_x000D__x000A_    Default is utf8_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileFormat_x000D__x000A_    The name of a code coverage report file format._x000D__x000A_    Default value is: JaCoCo._x000D__x000A_    Currently supported formats are:_x000D__x000A_    - JaCoCo - this XML file format is compatible with Azure Devops, VSTS/TFS_x000D__x000A__x000D__x000A_    The ReportGenerator tool can be used to consolidate multiple reports and provide code coverage reporting._x000D__x000A_    https://github.com/danielpalme/ReportGenerator_x000D__x000A__x000D__x000A_    .PARAMETER Configuration_x000D__x000A_    (Introduced v5)_x000D__x000A_    [PesterConfiguration] object for Advanced Configuration_x000D__x000A__x000D__x000A_    Pester supports Simple and Advanced Configuration._x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration &lt;PesterConfiguration&gt; [&lt;CommonParameters&gt;]_x000D__x000A__x000D__x000A_    Default is [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_    ConfigurationProperties include following:_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Run_x000D__x000A_    ---_x000D__x000A_    Run.ExcludePath - Directories or files to be excluded from the run._x000D__x000A_    Run.Exit - Exit with non-zero exit code when the test run fails._x000D__x000A_        Default is: false_x000D__x000A_    Run.PassThru - Return result object to the pipeline after finishing the test run._x000D__x000A_        Default is: false_x000D__x000A_    Run.Path - Directories to be searched for tests, paths directly to test files, or combination of both._x000D__x000A_        Default is: ._x000D__x000A_    Run.ScriptBlock - ScriptBlocks containing tests to be executed._x000D__x000A_    Run.Container - ContainerInfo objects containing tests to be executed._x000D__x000A_    Run.TestExtension - Filter used to identify test files._x000D__x000A_        Default is: *.Tests.ps1*_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Output_x000D__x000A_    ------------_x000D__x000A_    Output.Verbosity - The verbosity of output, options are None, Normal, Detailed and Diagnostic._x000D__x000A_        Default is: Normal_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.CodeCoverage_x000D__x000A_    ------------_x000D__x000A_    CodeCoverage.Enabled - Enable CodeCoverage._x000D__x000A_        Default is: false_x000D__x000A_    CodeCoverage.OutputFormat - Format to use for code coverage report. Possible values: JaCoCo_x000D__x000A_    CodeCoverage.OutputPath - Path relative to the current directory where code coverage report is saved._x000D__x000A_        Default is: coverage.xml_x000D__x000A_    CodeCoverage.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    CodeCoverage.Path - Directories or files to be used for codecoverage, by default the Path(s) from general settings are used, unless overridden here._x000D__x000A_    CodeCoverage.ExcludeTests - Exclude tests from code coverage. This uses the TestFilter from general configuration._x000D__x000A_        Default is: true_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.TestResult_x000D__x000A_    ----------_x000D__x000A_    TestResult.Enabled - Enable TestResult._x000D__x000A_    TestResult.OutputFormat - Format to use for test result report. Possible values:  NUnitXml, JUnitXml_x000D__x000A_        Default is: NUnitXml_x000D__x000A_    TestResult.OutputPath - Path relative to the current directory where test result report is saved._x000D__x000A_        Default is: testResults.xml_x000D__x000A_    TestResult.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    TestResult.TestSuiteName - Set the name assigned to the root 'test-suite' element._x000D__x000A_        Default is: Pester_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Filter_x000D__x000A_    ------_x000D__x000A_    Filter.ExcludeTag - Exclude a tag, accepts wildcards_x000D__x000A_    Filter.FullName - Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'_x000D__x000A_    Filter.Line - Filter by file and scriptblock start line, useful to run parsed tests programatically to avoid problems with expanded names. Example: 'C:\tests\file1.Tests.ps1:37'_x000D__x000A_    Filter.Tag - Tags of Describe, Context or It to be run._x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Should_x000D__x000A_    ------------_x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A_        Default is: Stop_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Debug_x000D__x000A_    -----_x000D__x000A_    Debug.ShowFullErrors - Show full errors including Pester internal stack._x000D__x000A_    Debug.ShowNavigationMarkers - Write paths after every block and test, for easy navigation in VSCode._x000D__x000A_    Debug.WriteDebugMessages - Write Debug messages to screen._x000D__x000A_    Debug.WriteDebugMessagesFrom - Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything._x000D__x000A_        Available options: "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A__x000D__x000A_    .PARAMETER Container_x000D__x000A_    Specifies one or more ContainerInfo-objects that define containers with tests._x000D__x000A_    ContainerInfo-objects are generated using New-PesterContainer. Useful for_x000D__x000A_    scenarios where data-driven test are generated, e.g. parametrized test files._x000D__x000A__x000D__x000A_    .PARAMETER EnableExit_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.EnableExit_x000D__x000A_    Will cause Invoke-Pester to exit with a exit code equal to the number of failed_x000D__x000A_    tests once all tests have been run. Use this to "fail" a build when any tests fail._x000D__x000A__x000D__x000A_    .PARAMETER ExcludePath_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.ExcludePath_x000D__x000A__x000D__x000A_    .PARAMETER ExcludeTagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.ExcludeTag_x000D__x000A__x000D__x000A_    .PARAMETER FullNameFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.FullName_x000D__x000A__x000D__x000A_    .PARAMETER Output_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Supports Diagnostic, Detailed, Normal, Minimal, None_x000D__x000A__x000D__x000A_    Default value is: Normal_x000D__x000A__x000D__x000A_    .PARAMETER OutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFile_x000D__x000A_    The path where Invoke-Pester will save formatted test results log file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    the xml extension._x000D__x000A_    If this path is not provided, no log will be generated._x000D__x000A__x000D__x000A_    .PARAMETER OutputFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFormat_x000D__x000A_    The format of output. Currently NUnitXml and JUnitXml is supported._x000D__x000A__x000D__x000A_    .PARAMETER PassThru_x000D__x000A_    Replace with ConfigurationProperty Run.PassThru_x000D__x000A_    Returns a custom object (PSCustomObject) that contains the test results._x000D__x000A_    By default, Invoke-Pester writes to the host program, not to the output stream (stdout)._x000D__x000A_    If you try to save the result in a variable, the variable is empty unless you_x000D__x000A_    use the PassThru parameter._x000D__x000A_    To suppress the host output, use the Show parameter set to None._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Aliases Script_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER PesterOption_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Sets advanced options for the test execution. Enter a PesterOption object,_x000D__x000A_    such as one that you create by using the New-PesterOption cmdlet, or a hash table_x000D__x000A_    in which the keys are option names and the values are option values._x000D__x000A_    For more information on the options available, see the help for New-PesterOption._x000D__x000A__x000D__x000A_    .PARAMETER Quiet_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The parameter Quiet is deprecated since Pester v4.0 and will be deleted_x000D__x000A_    in the next major version of Pester. Please use the parameter Show_x000D__x000A_    with value 'None' instead._x000D__x000A_    The parameter Quiet suppresses the output that Pester writes to the host program,_x000D__x000A_    including the result summary and CodeCoverage output._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Show_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Customizes the output Pester writes to the screen. Available options are None, Default,_x000D__x000A_    Passed, Failed, Pending, Skipped, Inconclusive, Describe, Context, Summary, Header, All, Fails._x000D__x000A_    The options can be combined to define presets._x000D__x000A_    ConfigurationProperty Output.Verbosity supports the following values:_x000D__x000A_    None_x000D__x000A_    Minimal_x000D__x000A_    Normal_x000D__x000A_    Detailed_x000D__x000A_    Diagnostic_x000D__x000A__x000D__x000A_    Show parameter supports the following parameter values:_x000D__x000A_    None - (None) to write no output to the screen._x000D__x000A_    All - (Detailed) to write all available information (this is default option)._x000D__x000A_    Default - (Detailed)_x000D__x000A_    Detailed - (Detailed)_x000D__x000A_    Fails - (Normal) to write everything except Passed (but including Describes etc.)._x000D__x000A_    Diagnostic - (Diagnostic)_x000D__x000A_    Normal - (Normal)_x000D__x000A_    Minimal - (Minimal)_x000D__x000A__x000D__x000A_    A common setting is also Failed, Summary, to write only failed tests and test summary._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Strict_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Makes Pending and Skipped tests to Failed tests. Useful for continuous_x000D__x000A_    integration where you need to make sure all tests passed._x000D__x000A__x000D__x000A_    .PARAMETER TagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Aliases Tag, Tags_x000D__x000A_    Replace with ConfigurationProperty Filter.Tag_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester_x000D__x000A__x000D__x000A_    This command runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester -Path .\Util*_x000D__x000A__x000D__x000A_    This commands runs all *.Tests.ps1 files in subdirectories with names that begin_x000D__x000A_    with 'Util' and their subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $config = [PesterConfiguration]@{_x000D__x000A_        Should = @{ # &lt;- Should configuration._x000D__x000A_            ErrorAction = 'Continue' # &lt;- Always run all Should-assertions in a test_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It shows how advanced configuration can be used by casting a hashtable to override_x000D__x000A_    default settings, in this case to make Pester run all Should-assertions in a test_x000D__x000A_    even if the first fails._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $config = [PesterConfiguration]::Default_x000D__x000A_    $config.TestResults.Enabled = $true_x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It uses advanced configuration to enable testresult-output to file. Access $config.TestResults_x000D__x000A_    to see other testresult options like  output path and format and their default values._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/quick-start_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    # Currently doesn't work. $IgnoreUnsafeCommands filter used in rule as workaround_x000D__x000A_    # [Diagnostics.CodeAnalysis.SuppressMessageAttribute('Pester.BuildAnalyzerRules\Measure-SafeCommands', 'Remove-Variable', Justification = 'Remove-Variable can't remove "optimized variables" when using "alias" for Remove-Variable.')]_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Simple')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Script")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [String[]] $Path = '.',_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [String[]] $ExcludePath = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 4, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tag")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tags")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $TagFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $ExcludeTagFilter,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Alias("Name")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $FullNameFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Switch] $CI,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [ValidateSet("Diagnostic", "Detailed", "Normal", "Minimal", "None")]_x000D__x000A_        [String] $Output = "Normal",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch] $PassThru,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Pester.ContainerInfo[]] $Container,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Advanced")]_x000D__x000A_        [PesterConfiguration] $Configuration,_x000D__x000A__x000D__x000A_        # rest of the Legacy set_x000D__x000A_        [Parameter(Position = 2, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [switch]$EnableExit,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object[]] $CodeCoverage = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFileEncoding = 'utf8',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('JaCoCo')]_x000D__x000A_        [String]$CodeCoverageOutputFileFormat = "JaCoCo",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Strict,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $OutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('NUnitXml', 'NUnit2.5', 'JUnitXml')]_x000D__x000A_        [string] $OutputFormat = 'NUnitXml',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Quiet,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object]$PesterOption,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Pester.OutputTypes]$Show = 'All'_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $start = [DateTime]::Now_x000D__x000A_        # this will inherit to child scopes and allow Describe / Context to run directly from a file or command line_x000D__x000A_        $invokedViaInvokePester = $true_x000D__x000A__x000D__x000A_        # TODO: Remove all references to mock table, there should not be many._x000D__x000A_        $script:mockTable = @{}_x000D__x000A_        # todo: move mock cleanup to BeforeAllBlockContainer when there is any_x000D__x000A_        Remove-MockFunctionsAndAliases_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        try {_x000D__x000A_            if ('Simple' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        if (@($Path)[0] -is [System.Collections.IDictionary]) {_x000D__x000A_                            throw "Passing hashtable configuration to -Path / -Script is currently not supported in Pester 5.0. Please provide just paths, as an array of strings."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludePath')) {_x000D__x000A_                    if ($null -ne $ExcludePath) {_x000D__x000A_                        $Configuration.Run.ExcludePath = $ExcludePath_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludePath' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CI')) {_x000D__x000A_                    if ($CI) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CI' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Output')) {_x000D__x000A_                    if ($null -ne $Output) {_x000D__x000A_                        $Configuration.Output.Verbosity = $Output_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Output' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Container')) {_x000D__x000A_                    if ($null -ne $Container) {_x000D__x000A_                        $Configuration.Run.Container = $Container_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Container' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Legacy' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] "You are using Legacy parameter set that adapts Pester 5 syntax to Pester 4 syntax. This parameter set is deprecated, and does not work 100%. The -Strict and -PesterOption parameters are ignored, and providing advanced configuration to -Path (-Script), and -CodeCoverage via a hash table does not work. Please refer to https://github.com/pester/Pester/releases/tag/5.0.1#legacy-parameter-set for more information."_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('EnableExit')) {_x000D__x000A_                    if ($EnableExit) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'EnableExit' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverage')) {_x000D__x000A__x000D__x000A_                    # advanced CC options won't work (hashtable)_x000D__x000A_                    if ($null -ne $CodeCoverage) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.Path = $CodeCoverage_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverage' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFile')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFile) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputPath = $CodeCoverageOutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileEncoding')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileEncoding) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputEncoding = $CodeCoverageOutputFileEncoding_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileEncoding' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileFormat')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileFormat) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputFormat = $CodeCoverageOutputFileFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('Strict')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Strict' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('PesterOption')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PesterOption' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFile')) {_x000D__x000A_                    if ($null -ne $OutputFile -and 0 -lt @($OutputFile).Count){_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.OutputPath = $OutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFormat')) {_x000D__x000A_                    if ($null -ne $OutputFormat -and 0 -lt @($OutputFormat).Count) {_x000D__x000A_                        $Configuration.TestResult.OutputFormat = $OutputFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Show')) {_x000D__x000A_                    if ($null -ne $Show) {_x000D__x000A_                        # most used v4 options are adapted, and it also takes v5 options to be able to migrate gradually_x000D__x000A_                        # without switching the whole param set just to get Diagnostic output_x000D__x000A_                        # {None | Default | Passed | Failed | Pending | Skipped | Inconclusive | Describe | Context | Summary | Header | Fails | All}_x000D__x000A_                        $verbosity = switch ($Show) {_x000D__x000A_                            "All" { "Detailed" }_x000D__x000A_                            "Default" { "Detailed" }_x000D__x000A_                            "Fails" { "Normal" }_x000D__x000A_                            "Diagnostic" { "Diagnostic" }_x000D__x000A_                            "Detailed" { "Detailed" }_x000D__x000A_                            "Normal" { "Normal" }_x000D__x000A_                            "Minimal" { "Minimal" }_x000D__x000A_                            "None" { "None" }_x000D__x000A_                            default { "Detailed" }_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Output.Verbosity = $verbosity_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Quiet')) {_x000D__x000A_                    if ($null -ne $Quiet) {_x000D__x000A_                        if ($Quiet) {_x000D__x000A_                            $Configuration.Output.Verbosity = 'None'_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # maybe -IgnorePesterPreference to avoid using $PesterPreference from the context_x000D__x000A__x000D__x000A_            $callerPreference = [PesterConfiguration] $PSCmdlet.SessionState.PSVariable.GetValue("PesterPreference")_x000D__x000A_            $hasCallerPreference = $null -ne $callerPreference_x000D__x000A__x000D__x000A_            # we never want to use and keep the pester preference directly,_x000D__x000A_            # because then the settings are modified on an object that outlives the_x000D__x000A_            # invoke-pester run and we leak changes from this run to the next_x000D__x000A_            # such as filters set in the first run will end up in the next run as well_x000D__x000A_            #_x000D__x000A_            # preference is inherited in all subsequent calls in this session state_x000D__x000A_            # but we still pass it explicitly where practical_x000D__x000A_            if (-not $hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = $Configuration_x000D__x000A_            }_x000D__x000A_            elseif ($hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = [PesterConfiguration]::Merge($callerPreference, $Configuration)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            &amp; $SafeCommands['Get-Variable'] 'Configuration' -Scope Local | Remove-Variable_x000D__x000A__x000D__x000A_            # $sessionState = Set-SessionStateHint -PassThru  -Hint "Caller - Captured in Invoke-Pester" -SessionState $PSCmdlet.SessionState_x000D__x000A_            $sessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_            $pluginConfiguration = @{}_x000D__x000A_            $plugins = @()_x000D__x000A_            if ('None' -ne $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $plugins += Get-WriteScreenPlugin -Verbosity $PesterPreference.Output.Verbosity.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Diagnostic' -eq $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessages = $true_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessagesFrom = "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=_x000D__x000A_            @(_x000D__x000A_                # decorator plugin needs to be added after output_x000D__x000A_                # because on teardown they will run in opposite order_x000D__x000A_                # and that way output can consume the fixed object that decorator_x000D__x000A_                # decorated, not nice but works_x000D__x000A_                Get-RSpecObjectDecoratorPlugin_x000D__x000A_                Get-TestDrivePlugin_x000D__x000A_            )_x000D__x000A__x000D__x000A_            if ("Windows" -eq (GetPesterOs)) {_x000D__x000A_                $plugins += @(Get-TestRegistryPlugin)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=  @(Get-MockPlugin)_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $paths = @(if (0 -lt $PesterPreference.CodeCoverage.Path.Value.Count) {_x000D__x000A_                        $PesterPreference.CodeCoverage.Path.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        # no paths specific to CodeCoverage were provided, resolve them from_x000D__x000A_                        # tests by using the whole directory in which the test or the_x000D__x000A_                        # provided directory. We might need another option to disable this convention._x000D__x000A_                        @(foreach ($p in $PesterPreference.Run.Path.Value) {_x000D__x000A_                            # this is a bit ugly, but the logic here is_x000D__x000A_                            # that we check if the path exists,_x000D__x000A_                            # and if it does and is a file then we return the_x000D__x000A_                            # parent directory, otherwise we got a directory_x000D__x000A_                            # and return just it_x000D__x000A_                            $i = &amp; $SafeCommands['Get-Item'] $p_x000D__x000A_                            if ($i.PSIsContainer) {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.FullName "*"_x000D__x000A_                            }_x000D__x000A_                            else {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.Directory.FullName "*"_x000D__x000A_                            }_x000D__x000A_                        })_x000D__x000A_                    })_x000D__x000A__x000D__x000A_                $outputPath = if ([IO.Path]::IsPathRooted($PesterPreference.CodeCoverage.OutputPath.Value)) {_x000D__x000A_                        $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        &amp; $SafeCommands['Join-Path'] $pwd.Path $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                $CodeCoverage = @{_x000D__x000A_                    Enabled = $PesterPreference.CodeCoverage.Enabled.Value_x000D__x000A_                    OutputFormat = $PesterPreference.CodeCoverage.OutputFormat.Value_x000D__x000A_                    OutputPath = $outputPath_x000D__x000A_                    OutputEncoding = $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_                    ExcludeTests = $PesterPreference.CodeCoverage.ExcludeTests.Value_x000D__x000A_                    Path = @($paths)_x000D__x000A_                    TestExtension = $PesterPreference.Run.TestExtension.Value_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $plugins += (Get-CoveragePlugin)_x000D__x000A_                $pluginConfiguration["Coverage"] = $CodeCoverage_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $filter = New-FilterObject `_x000D__x000A_                -Tag $PesterPreference.Filter.Tag.Value `_x000D__x000A_                -ExcludeTag $PesterPreference.Filter.ExcludeTag.Value `_x000D__x000A_                -Line $PesterPreference.Filter.Line.Value `_x000D__x000A_                -FullName $PesterPreference.Filter.FullName.Value_x000D__x000A__x000D__x000A_            $containers = @()_x000D__x000A_            if (any $PesterPreference.Run.ScriptBlock.Value) {_x000D__x000A_                $containers += @( $PesterPreference.Run.ScriptBlock.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -ScriptBlock $_ })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            foreach ($c in $PesterPreference.Run.Container.Value) {_x000D__x000A_                $containers += $c_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((any $PesterPreference.Run.Path.Value)) {_x000D__x000A_                if (((none $PesterPreference.Run.ScriptBlock.Value) -and (none $PesterPreference.Run.Container.Value)) -or ('.' -ne $PesterPreference.Run.Path.Value[0])) {_x000D__x000A_                    #TODO: Skipping the invocation when scriptblock is provided and the default path, later keep path in the default parameter set and remove scriptblock from it, so get-help still shows . as the default value and we can still provide script blocks via an advanced settings parameter_x000D__x000A_                    # TODO: pass the startup options as context to Start instead of just paths_x000D__x000A__x000D__x000A_                    $exclusions = combineNonNull @($PesterPreference.Run.ExcludePath.Value, ($PesterPreference.Run.Container.Value | &amp; $SafeCommands['Where-Object'] { "File" -eq $_.Type } | &amp; $SafeCommands['ForEach-Object'] {$_.Item.FullName }))_x000D__x000A_                    $containers += @(Find-File -Path $PesterPreference.Run.Path.Value -ExcludePath $exclusions -Extension $PesterPreference.Run.TestExtension.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -File $_ })_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # monkey patching that we need global data for code coverage, this is problematic because code coverage should be setup once for the whole run, but because at the start everything was separated on container level the discovery is not done at this point, and we don't have any info about the containers apart from the path, or scriptblock content_x000D__x000A_            $pluginData = @{}_x000D__x000A__x000D__x000A_            $steps = $Plugins.Start_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step Start -Context @{_x000D__x000A_                    Containers = $containers_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                    GlobalPluginData = $pluginData_x000D__x000A_                    WriteDebugMessages = $PesterPreference.Debug.WriteDebugMessages.Value_x000D__x000A_                    Write_PesterDebugMessage = if ($PesterPreference.Debug.WriteDebugMessages) { $script:SafeCommands['Write-PesterDebugMessage'] }_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((none $containers)) {_x000D__x000A_                throw "No test files were found and no scriptblocks were provided."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $r = Invoke-Test -BlockContainer $containers -Plugin $plugins -PluginConfiguration $pluginConfiguration -SessionState $sessionState -Filter $filter -Configuration $PesterPreference_x000D__x000A__x000D__x000A_            foreach ($c in $r) {_x000D__x000A_                Fold-Container -Container $c  -OnTest { param($t) Add-RSpecTestObjectProperties $t }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $parameters = @{_x000D__x000A_                PSBoundParameters = $PSBoundParameters_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run = [Pester.Run]::Create()_x000D__x000A_            $run.Executed = $true_x000D__x000A_            $run.ExecutedAt = $start_x000D__x000A_            $run.PSBoundParameters = $PSBoundParameters_x000D__x000A_            $run.PluginConfiguration = $pluginConfiguration_x000D__x000A_            $run.Plugins = $Plugins_x000D__x000A_            $run.PluginData = $pluginData_x000D__x000A_            $run.Configuration = $PesterPreference_x000D__x000A_            $m = $ExecutionContext.SessionState.Module_x000D__x000A_            $run.Version = if ($m.PrivateData -and $m.PrivateData.PSData -and $m.PrivateData.PSData.PreRelease)_x000D__x000A_            {_x000D__x000A_                "$($m.Version)-$($m.PrivateData.PSData.PreRelease)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $m.Version_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run.PSVersion = $PSVersionTable.PSVersion_x000D__x000A_            foreach ($i in @($r)) {_x000D__x000A_                $run.Containers.Add($i)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            PostProcess-RSpecTestRun -TestRun $run_x000D__x000A__x000D__x000A_            $steps = $Plugins.End_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step End -Context @{_x000D__x000A_                    TestRun = $run_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.TestResult.Enabled.Value) {_x000D__x000A_                Export-PesterResults -Result $run -Path $PesterPreference.TestResult.OutputPath.Value -Format $PesterPreference.TestResult.OutputFormat.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $breakpoints = @($run.PluginData.Coverage.CommandCoverage)_x000D__x000A_                $coverageReport = Get-CoverageReport -CommandCoverage $breakpoints_x000D__x000A_                $totalMilliseconds = $run.Duration.TotalMilliseconds_x000D__x000A_                $jaCoCoReport = Get-JaCoCoReportXml -CommandCoverage $breakpoints -TotalMilliseconds $totalMilliseconds -CoverageReport $coverageReport_x000D__x000A_                $jaCoCoReport | &amp; $SafeCommands['Out-File'] $PesterPreference.CodeCoverage.OutputPath.Value -Encoding $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not $PesterPreference.Debug.ReturnRawResultObject.Value) {_x000D__x000A_                Remove-RSPecNonPublicProperties $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.Run.PassThru.Value) {_x000D__x000A_                $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # exit with exit code if we fail and even if we succeed, othwerise we could inherit_x000D__x000A_            # exit code of some other app end exit with it's exit code instead with ours_x000D__x000A_            $failedCount = $run.FailedCount + $run.FailedBlocksCount + $run.FailedContainersCount_x000D__x000A_            if ($PesterPreference.Run.Exit.Value -and 0 -ne $failedCount) {_x000D__x000A_                # exit with the number of failed tests when there are any_x000D__x000A_                # and the exit preference is set. This will fail the run in CI_x000D__x000A_                # when any tests failed._x000D__x000A_                exit $failedCount_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # just set exit code but don't fail when the option is not set_x000D__x000A_                # or when there are no failed tests, to ensure that we can run_x000D__x000A_                # multiple successful runs of Invoke-Pester in a row._x000D__x000A_                $global:LASTEXITCODE = $failedCount_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            Write-ErrorToScreen $__x000D__x000A_            if ($PesterPreference.Run.Exit.Value) {_x000D__x000A_                exit -1_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-PesterOption {_x000D__x000A_    #TODO: move those options, right now I am just not exposing this function and added the testSuiteName_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Creates an object that contains advanced options for Invoke-Pester_x000D__x000A_    .DESCRIPTION_x000D__x000A_    By using New-PesterOption you can set options what allow easier integration with external applications or_x000D__x000A_    modifies output generated by Invoke-Pester._x000D__x000A_    The result of New-PesterOption need to be assigned to the parameter 'PesterOption' of the Invoke-Pester function._x000D__x000A_    .PARAMETER IncludeVSCodeMarker_x000D__x000A_    When this switch is set, an extra line of output will be written to the console for test failures, making it easier_x000D__x000A_    for VSCode's parser to provide highlighting / tooltips on the line where the error occurred._x000D__x000A_    .PARAMETER TestSuiteName_x000D__x000A_    When generating NUnit XML output, this controls the name assigned to the root "test-suite" element.  Defaults to "Pester"._x000D__x000A_    .PARAMETER ScriptBlockFilter_x000D__x000A_    Filters scriptblock based on the path and line number. This is intended for integration with external tools so we don't rely on names (strings) that can have expandable variables in them._x000D__x000A_    .PARAMETER Experimental_x000D__x000A_    Enables experimental features of Pester to be enabled._x000D__x000A_    .PARAMETER ShowScopeHints_x000D__x000A_    EXPERIMENTAL: Enables debugging output for debugging tranisition among scopes. (Experimental flag needs to be used to enable this.)_x000D__x000A__x000D__x000A_    .INPUTS_x000D__x000A_    None_x000D__x000A_    You cannot pipe input to this command._x000D__x000A_    .OUTPUTS_x000D__x000A_    System.Management.Automation.PSObject_x000D__x000A_    .EXAMPLE_x000D__x000A_        PS &gt; $Options = New-PesterOption -TestSuiteName "Tests - Set A"_x000D__x000A__x000D__x000A_        PS &gt; Invoke-Pester -PesterOption $Options -Outputfile ".\Results-Set-A.xml" -OutputFormat NUnitXML_x000D__x000A__x000D__x000A_        The result of commands will be execution of tests and saving results of them in a NUnitMXL file where the root "test-suite"_x000D__x000A_        will be named "Tests - Set A"._x000D__x000A_    .LINK_x000D__x000A_    https://github.com/pester/Pester/wiki/New-PesterOption_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [switch] $IncludeVSCodeMarker,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string] $TestSuiteName = 'Pester',_x000D__x000A__x000D__x000A_        [switch] $Experimental,_x000D__x000A__x000D__x000A_        [switch] $ShowScopeHints,_x000D__x000A__x000D__x000A_        [hashtable[]] $ScriptBlockFilter_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # in PowerShell 2 Add-Member can attach properties only to_x000D__x000A_    # PSObjects, I could work around this by capturing all instances_x000D__x000A_    # in checking them during runtime, but that would bring a lot of_x000D__x000A_    # object management problems - so let's just not allow this in PowerShell 2_x000D__x000A_    if ($Experimental -and $ShowScopeHints) {_x000D__x000A_        if ($PSVersionTable.PSVersion.Major -lt 3) {_x000D__x000A_            throw "Scope hints cannot be used on PowerShell 2 due to limitations of Add-Member."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $script:DisableScopeHints = $false_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $script:DisableScopeHints = $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return &amp; $script:SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_        IncludeVSCodeMarker = [bool] $IncludeVSCodeMarker_x000D__x000A_        TestSuiteName       = $TestSuiteName_x000D__x000A_        ShowScopeHints      = $ShowScopeHints_x000D__x000A_        Experimental        = $Experimental_x000D__x000A_        ScriptBlockFilter   = $ScriptBlockFilter_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ResolveTestScripts {_x000D__x000A_    param ([object[]] $Path)_x000D__x000A__x000D__x000A_    $resolvedScriptInfo = @(_x000D__x000A_        foreach ($object in $Path) {_x000D__x000A_            if ($object -is [System.Collections.IDictionary]) {_x000D__x000A_                $unresolvedPath = Get-DictionaryValueFromFirstKeyFound -Dictionary $object -Key 'Path', 'p'_x000D__x000A_                $script = Get-DictionaryValueFromFirstKeyFound -Dictionary $object -Key 'Script'_x000D__x000A_                $arguments = @(Get-DictionaryValueFromFirstKeyFound -Dictionary $object -Key 'Arguments', 'args', 'a')_x000D__x000A_                $parameters = Get-DictionaryValueFromFirstKeyFound -Dictionary $object -Key 'Parameters', 'params'_x000D__x000A__x000D__x000A_                if ($null -eq $Parameters) {_x000D__x000A_                    $Parameters = @{}_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($unresolvedPath -isnot [string] -or $unresolvedPath -notmatch '\S' -and ($script -isnot [string] -or $script -notmatch '\S')) {_x000D__x000A_                    throw 'When passing hashtables to the -Path parameter, the Path key is mandatory, and must contain a single string.'_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($null -ne $parameters -and $parameters -isnot [System.Collections.IDictionary]) {_x000D__x000A_                    throw 'When passing hashtables to the -Path parameter, the Parameters key (if present) must be assigned an IDictionary object.'_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $unresolvedPath = [string] $object_x000D__x000A_                $script = [string] $object_x000D__x000A_                $arguments = @()_x000D__x000A_                $parameters = @{}_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not [string]::IsNullOrEmpty($unresolvedPath)) {_x000D__x000A_                if ($unresolvedPath -notmatch '[\*\?\[\]]' -and_x000D__x000A_                    (&amp; $script:SafeCommands['Test-Path'] -LiteralPath $unresolvedPath -PathType Leaf) -and_x000D__x000A_                    (&amp; $script:SafeCommands['Get-Item'] -LiteralPath $unresolvedPath) -is [System.IO.FileInfo]) {_x000D__x000A_                    $extension = [System.IO.Path]::GetExtension($unresolvedPath)_x000D__x000A_                    if ($extension -ne '.ps1') {_x000D__x000A_                        &amp; $script:SafeCommands['Write-Error'] "Script path '$unresolvedPath' is not a ps1 file."_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        &amp; $script:SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_                            Path       = $unresolvedPath_x000D__x000A_                            Script     = $null_x000D__x000A_                            Arguments  = $arguments_x000D__x000A_                            Parameters = $parameters_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    # World's longest pipeline?_x000D__x000A__x000D__x000A_                    &amp; $script:SafeCommands['Resolve-Path'] -Path $unresolvedPath |_x000D__x000A_                        &amp; $script:SafeCommands['Where-Object'] { $_.Provider.Name -eq 'FileSystem' } |_x000D__x000A_                        &amp; $script:SafeCommands['Select-Object'] -ExpandProperty ProviderPath |_x000D__x000A_                        &amp; $script:SafeCommands['Get-ChildItem'] -Include *.Tests.ps1 -Recurse |_x000D__x000A_                        &amp; $script:SafeCommands['Where-Object'] { -not $_.PSIsContainer } |_x000D__x000A_                        &amp; $script:SafeCommands['Select-Object'] -ExpandProperty FullName -Unique |_x000D__x000A_                        &amp; $script:SafeCommands['ForEach-Object'] {_x000D__x000A_                        &amp; $script:SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_                            Path       = $__x000D__x000A_                            Script     = $null_x000D__x000A_                            Arguments  = $arguments_x000D__x000A_                            Parameters = $parameters_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            elseif (-not [string]::IsNullOrEmpty($script)) {_x000D__x000A_                &amp; $script:SafeCommands['New-Object'] psobject -Property @{_x000D__x000A_                    Path       = $null_x000D__x000A_                    Script     = $script_x000D__x000A_                    Arguments  = $arguments_x000D__x000A_                    Parameters = $parameters_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Here, we have the option of trying to weed out duplicate file paths that also contain identical_x000D__x000A_    # Parameters / Arguments.  However, we already make sure that each object in $Path didn't produce_x000D__x000A_    # any duplicate file paths, and if the caller happens to pass in a set of parameters that produce_x000D__x000A_    # dupes, maybe that's not our problem.  For now, just return what we found._x000D__x000A__x000D__x000A_    $resolvedScriptInfo_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DictionaryValueFromFirstKeyFound {_x000D__x000A_    param ([System.Collections.IDictionary] $Dictionary, [object[]] $Key)_x000D__x000A__x000D__x000A_    foreach ($keyToTry in $Key) {_x000D__x000A_        if ($Dictionary.Contains($keyToTry)) {_x000D__x000A_            return $Dictionary[$keyToTry]_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-PesterStatistics($Node) {_x000D__x000A_    if ($null -eq $Node) {_x000D__x000A_        $Node = $pester.TestActions_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($action in $Node.Actions) {_x000D__x000A_        if ($action.Type -eq 'TestGroup') {_x000D__x000A_            Set-PesterStatistics -Node $action_x000D__x000A__x000D__x000A_            $Node.TotalCount += $action.TotalCount_x000D__x000A_            $Node.PassedCount += $action.PassedCount_x000D__x000A_            $Node.FailedCount += $action.FailedCount_x000D__x000A_            $Node.SkippedCount += $action.SkippedCount_x000D__x000A_            $Node.PendingCount += $action.PendingCount_x000D__x000A_            $Node.InconclusiveCount += $action.InconclusiveCount_x000D__x000A_        }_x000D__x000A_        elseif ($action.Type -eq 'TestCase') {_x000D__x000A_            $node.TotalCount++_x000D__x000A__x000D__x000A_            switch ($action.Result) {_x000D__x000A_                Passed {_x000D__x000A_                    $Node.PassedCount++; break;_x000D__x000A_                }_x000D__x000A_                Failed {_x000D__x000A_                    $Node.FailedCount++; break;_x000D__x000A_                }_x000D__x000A_                Skipped {_x000D__x000A_                    $Node.SkippedCount++; break;_x000D__x000A_                }_x000D__x000A_                Pending {_x000D__x000A_                    $Node.PendingCount++; break;_x000D__x000A_                }_x000D__x000A_                Inconclusive {_x000D__x000A_                    $Node.InconclusiveCount++; break;_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Contain-AnyStringLike ($Filter, $Collection) {_x000D__x000A_    foreach ($item in $Collection) {_x000D__x000A_        foreach ($value in $Filter) {_x000D__x000A_            if ($item -like $value) {_x000D__x000A_                return $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-Pester4Result {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester 5 result-object to an Pester 4-compatible object_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 uses a new format for it's result-object compared to previous_x000D__x000A_    versions of Pester. This function is provided as a way to convert the_x000D__x000A_    result-object into an object using the previous format. This can be_x000D__x000A_    useful as a temporary measure to easier migrate to Pester 5 without_x000D__x000A_    having to redesign compelx CI/CD-pipelines._x000D__x000A__x000D__x000A_    .PARAMETER PesterResult_x000D__x000A_    Result object from a Pester 5-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $pester5Result = Invoke-Pester -Passthru_x000D__x000A_    $pester4Result = $pester5Result | ConvertTo-Pester4Result_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve a result-object_x000D__x000A_    in the Pester 5 format and converts it to a new Pester 4-compatible result-object._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-Pester4Result_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $PesterResult_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $legacyResult = [PSCustomObject] @{_x000D__x000A_            Version = 4.99.0_x000D__x000A_            TagFilter = $null_x000D__x000A_            ExcludeTagFilter = $null_x000D__x000A_            TestNameFilter = $null_x000D__x000A_            ScriptBlockFilter = $null_x000D__x000A_            TotalCount = 0_x000D__x000A_            PassedCount = 0_x000D__x000A_            FailedCount = 0_x000D__x000A_            SkippedCount = 0_x000D__x000A_            PendingCount = 0_x000D__x000A_            InconclusiveCount = 0_x000D__x000A_            Time = [TimeSpan]::Zero_x000D__x000A_            TestResult = [System.Collections.Generic.List[object]]@()_x000D__x000A_        }_x000D__x000A_        $filter = $PesterResult.Configuration.Filter_x000D__x000A_        $legacyResult.TagFilter = if (0 -ne $filter.Tag.Value.Count) { $filter.Tag.Value }_x000D__x000A_        $legacyResult.ExcludeTagFilter = if (0 -ne $filter.ExcludeTag.Value.Count) { $filter.ExcludeTag.Value }_x000D__x000A_        $legacyResult.TestNameFilter = if (0 -ne $filter.TestNameFilter.Value.Count) { $filter.TestNameFilter.Value }_x000D__x000A_        $legacyResult.ScriptBlockFilter = if (0 -ne $filter.ScriptBlockFilter.Value.Count) { $filter.ScriptBlockFilter.Value }_x000D__x000A__x000D__x000A_        $sb = {_x000D__x000A_            param($test)_x000D__x000A__x000D__x000A_            if ("NotRun" -eq $test.Result) {_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $result = [PSCustomObject] @{_x000D__x000A_                Passed = "Passed" -eq $test.Result_x000D__x000A_                Result = $test.Result_x000D__x000A_                Time = $test.Duration_x000D__x000A_                Name = $test.Name_x000D__x000A__x000D__x000A_                # in the legacy result the top block is considered to be a Describe and any blocks inside of it are_x000D__x000A_                # considered to be Context and joined by '\'_x000D__x000A_                Describe = $test.Path[0]_x000D__x000A_                Context = $(if ($test.Path.Count -gt 2) { $test.Path[1..($test.Path.Count-2)] -join '\'})_x000D__x000A__x000D__x000A_                Show = $PesterResult.Configuration.Output.Verbosity.Value_x000D__x000A_                Parameters = $test.Data_x000D__x000A_                ParameterizedSuiteName = $test.DisplayName_x000D__x000A__x000D__x000A_                FailureMessage = $(if (any $test.ErrorRecord -and $null -ne $test.ErrorRecord[-1].Exception) { $test.ErrorRecord[-1].DisplayErrorMessage })_x000D__x000A_                ErrorRecord = $(if (any $test.ErrorRecord) { $test.ErrorRecord[-1] })_x000D__x000A_                StackTrace = $(if (any $test.ErrorRecord) { $test.ErrorRecord[1].DisplayStackTrace })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $null = $legacyResult.TestResult.Add($result)_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A_        Fold-Run $PesterResult -OnTest $sb -OnBlock {_x000D__x000A_            param($b)_x000D__x000A__x000D__x000A_            if (0 -ne $b.ErrorRecord.Count) {_x000D__x000A_                &amp; $sb $b_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # the counts here include failed blocks as tests, that's we don't use_x000D__x000A_        # the normal properties on the reslt to count_x000D__x000A__x000D__x000A_        foreach ($r in $legacyResult.TestResult) {_x000D__x000A_            switch ($r.Result) {_x000D__x000A_                "Passed" {_x000D__x000A_                    $legacyResult.PassedCount++_x000D__x000A_                }_x000D__x000A_                "Failed" {_x000D__x000A_                    $legacyResult.FailedCount++_x000D__x000A_                }_x000D__x000A_                "Skipped" {_x000D__x000A_                    $legacyResult.SkippedCount++_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $legacyResult.TotalCount = $legacyResult.TestResult.Count_x000D__x000A_        $legacyResult.PendingCount = 0_x000D__x000A_        $legacyResult.InconclusiveCount = 0_x000D__x000A_        $legacyResult.Time = $PesterResult.Duration_x000D__x000A__x000D__x000A_        $legacyResult_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function BeforeDiscovery {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs setup code that is used during Discovery phase._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Runs your code as is, in the place where this function is defined. This is a semantic block to allow you_x000D__x000A_    to be explicit about code that you need to run during Discovery, instead of just_x000D__x000A_    putting code directly inside of Describe / Context._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    The ScritpBlock to run._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    BeforeDiscovery {_x000D__x000A_        $files = Get-ChildItem -Path $PSScriptRoot -Filter '*.ps1' -Recurse_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "File - &lt;_&gt;" -ForEach $files {_x000D__x000A_        Context "Whitespace" {_x000D__x000A_            It "There is no extra whitespace following a line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File ends with an empty line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    BeforeDiscovery is used to gather a list of script-files during Discovery-phase to_x000D__x000A_    dynamically create a Describe-block and tests for each file found._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/BeforeDiscovery_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ScriptBlock]$ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    . $ScriptBlock_x000D__x000A_}_x000D__x000A__x000D__x000A_# Adding Add-ShouldOperator because it used to be an alias in v4, and so when we now import it will take precedence over_x000D__x000A_# our internal function in v5, so we need a safe way to refer to it_x000D__x000A_$script:SafeCommands['Add-ShouldOperator'] = &amp; $SafeCommands['Get-Command'] -CommandType Function -Name 'Add-ShouldOperator'_x000D__x000A_# file src\functions\assertions\Be.ps1_x000D__x000A_#Be_x000D__x000A_function Should-Be ($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Compares one object with another for equality_x000D__x000A_and throws if the two objects are not the same._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -Be "actual value"_x000D__x000A__x000D__x000A_This test will pass. -Be is not case sensitive._x000D__x000A_For a case sensitive assertion, see -BeExactly._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -Be "not actual value"_x000D__x000A__x000D__x000A_This test will fail, as the two strings are not identical._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = ArraysAreEqual $ActualValue $ExpectedValue_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldBeFailureMessage -ActualValue $ActualValue -Expected $ExpectedValue -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldBeFailureMessage -ActualValue $ActualValue -Expected $ExpectedValue -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldBeFailureMessage($ActualValue, $ExpectedValue, $Because) {_x000D__x000A_    # This looks odd; it's to unroll single-element arrays so the "-is [string]" expression works properly._x000D__x000A_    $ActualValue = $($ActualValue)_x000D__x000A_    $ExpectedValue = $($ExpectedValue)_x000D__x000A__x000D__x000A_    if (-not (($ExpectedValue -is [string]) -and ($ActualValue -is [string]))) {_x000D__x000A_        return "Expected $(Format-Nicely $ExpectedValue),$(if ($null -ne $Because) { Format-Because $Because }) but got $(Format-Nicely $ActualValue)."_x000D__x000A_    }_x000D__x000A_    &lt;#joining the output strings to a single string here, otherwise I get_x000D__x000A_       Cannot find an overload for "Exception" and the argument count: "4"._x000D__x000A_       at line: 63 in C:\Users\nohwnd\github\pester\functions\Assertions\Should.ps1_x000D__x000A__x000D__x000A_    This is a quickwin solution, doing the join in the Should directly might be better_x000D__x000A_    way of doing this. But I don't want to mix two problems._x000D__x000A_    #&gt;_x000D__x000A_    (Get-CompareStringMessage -Expected $ExpectedValue -Actual $ActualValue -Because $Because) -join "`n"_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldBeFailureMessage($ActualValue, $ExpectedValue, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedValue) to be different from the actual value,$(if ($null -ne $Because) { Format-Because $Because }) but got the same value."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name               Be `_x000D__x000A_    -InternalName       Should-Be `_x000D__x000A_    -Test               ${function:Should-Be} `_x000D__x000A_    -Alias              'EQ' `_x000D__x000A_    -SupportsArrayInput_x000D__x000A__x000D__x000A_#BeExactly_x000D__x000A_function Should-BeExactly($ActualValue, $ExpectedValue, $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Compares one object with another for equality and throws if the_x000D__x000A_two objects are not the same. This comparison is case sensitive._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -Be "Actual value"_x000D__x000A__x000D__x000A_This test will pass. The two strings are identical._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -Be "actual value"_x000D__x000A__x000D__x000A_This test will fail, as the two strings do not match case sensitivity._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = ArraysAreEqual $ActualValue $ExpectedValue -CaseSensitive_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldBeExactlyFailureMessage -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldBeExactlyFailureMessage -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldBeExactlyFailureMessage($ActualValue, $ExpectedValue, $Because) {_x000D__x000A_    # This looks odd; it's to unroll single-element arrays so the "-is [string]" expression works properly._x000D__x000A_    $ActualValue = $($ActualValue)_x000D__x000A_    $ExpectedValue = $($ExpectedValue)_x000D__x000A__x000D__x000A_    if (-not (($ExpectedValue -is [string]) -and ($ActualValue -is [string]))) {_x000D__x000A_        return "Expected exactly $(Format-Nicely $ExpectedValue),$(if ($null -ne $Because) { Format-Because $Because }) but got $(Format-Nicely $ActualValue)."_x000D__x000A_    }_x000D__x000A_    &lt;#joining the output strings to a single string here, otherwise I get_x000D__x000A_       Cannot find an overload for "Exception" and the argument count: "4"._x000D__x000A_       at line: 63 in C:\Users\nohwnd\github\pester\functions\Assertions\Should.ps1_x000D__x000A__x000D__x000A_    This is a quickwin solution, doing the join in the Should directly might be better_x000D__x000A_    way of doing this. But I don't want to mix two problems._x000D__x000A_    #&gt;_x000D__x000A_    (Get-CompareStringMessage -Expected $ExpectedValue -Actual $ActualValue -CaseSensitive -Because $Because) -join "`n"_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldBeExactlyFailureMessage($ActualValue, $ExpectedValue, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedValue) to be different from the actual value,$(if ($null -ne $Because) { Format-Because $Because }) but got exactly the same value."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name               BeExactly `_x000D__x000A_    -InternalName       Should-BeExactly `_x000D__x000A_    -Test               ${function:Should-BeExactly} `_x000D__x000A_    -Alias              'CEQ' `_x000D__x000A_    -SupportsArrayInput_x000D__x000A__x000D__x000A__x000D__x000A_#common functions_x000D__x000A_function Get-CompareStringMessage {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [AllowEmptyString()]_x000D__x000A_        [String]$ExpectedValue,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [AllowEmptyString()]_x000D__x000A_        [String]$Actual,_x000D__x000A_        [switch]$CaseSensitive,_x000D__x000A_        $Because_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $ExpectedValueLength = $ExpectedValue.Length_x000D__x000A_    $actualLength = $actual.Length_x000D__x000A_    $maxLength = if ($ExpectedValueLength -gt $actualLength) { $ExpectedValueLength } else { $actualLength }_x000D__x000A__x000D__x000A_    $differenceIndex = $null_x000D__x000A_    for ($i = 0; $i -lt $maxLength -and ($null -eq $differenceIndex); ++$i) {_x000D__x000A_        $differenceIndex = if ($CaseSensitive -and ($ExpectedValue[$i] -cne $actual[$i])) {_x000D__x000A_            $i_x000D__x000A_        }_x000D__x000A_        elseif ($ExpectedValue[$i] -ne $actual[$i]) {_x000D__x000A_            $i_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -ne $differenceIndex) {_x000D__x000A_        "Expected strings to be the same,$(if ($null -ne $Because) { Format-Because $Because }) but they were different."_x000D__x000A__x000D__x000A_        if ($ExpectedValue.Length -ne $actual.Length) {_x000D__x000A_            "Expected length: $ExpectedValueLength"_x000D__x000A_            "Actual length:   $actualLength"_x000D__x000A_            "Strings differ at index $differenceIndex."_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            "String lengths are both $ExpectedValueLength."_x000D__x000A_            "Strings differ at index $differenceIndex."_x000D__x000A_        }_x000D__x000A_        $ellipsis = "..."_x000D__x000A_        $excerptSize = 5;_x000D__x000A_        "Expected: '{0}'" -f (  Expand-SpecialCharacters -InputObject (Format-AsExcerpt -InputObject $ExpectedValue -startIndex $differenceIndex -excerptSize $excerptSize  -excerptMarker $ellipsis) )_x000D__x000A_        "But was:  '{0}'" -f ( Expand-SpecialCharacters -InputObject (Format-AsExcerpt -InputObject $actual -startIndex $differenceIndex -excerptSize $excerptSize -excerptMarker $ellipsis ) )_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_function Format-AsExcerpt {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [AllowEmptyString()]_x000D__x000A_        [string]$InputObject,_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [int]$startIndex,_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [int]$excerptSize,_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [string]$excerptMarker_x000D__x000A_    )_x000D__x000A_    $InputObjectDisplay = [string]::Empty_x000D__x000A_    $displayDifferenceIndex = $startIndex - $excerptSize_x000D__x000A_    $maximumStringLength = 40_x000D__x000A_    $maximumSubstringLength = $excerptSize * 2_x000D__x000A_    $substringLength = $InputObject.Length - $displayDifferenceIndex_x000D__x000A_    if ($substringLength -gt $maximumSubstringLength) {_x000D__x000A_        $substringLength = $maximumSubstringLength_x000D__x000A_    }_x000D__x000A_    if ($displayDifferenceIndex + $substringLength -lt $InputObject.Length) {_x000D__x000A_        $endExcerptMarker = $excerptMarker_x000D__x000A_    }_x000D__x000A_    if ($displayDifferenceIndex -lt 0) {_x000D__x000A_        $displayDifferenceIndex = 0_x000D__x000A_    }_x000D__x000A_    if ($InputObject.length -ge $maximumStringLength) {_x000D__x000A_        if ($displayDifferenceIndex -ne 0) {_x000D__x000A_            $InputObjectDisplay = $excerptMarker_x000D__x000A_        }_x000D__x000A_        $InputObjectDisplay += $InputObject.Substring($displayDifferenceIndex, $substringLength) + $endExcerptMarker_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $InputObjectDisplay = $InputObject_x000D__x000A_    }_x000D__x000A_    $InputObjectDisplay_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_function Expand-SpecialCharacters {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [AllowEmptyString()]_x000D__x000A_        [string[]]$InputObject)_x000D__x000A_    process {_x000D__x000A_        $InputObject -replace "`n", "\n" -replace "`r", "\r" -replace "`t", "\t" -replace "`0", "\0" -replace "`b", "\b"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ArraysAreEqual {_x000D__x000A_    param (_x000D__x000A_        [object[]] $First,_x000D__x000A_        [object[]] $Second,_x000D__x000A_        [switch] $CaseSensitive,_x000D__x000A_        [int] $RecursionDepth = 0,_x000D__x000A_        [int] $RecursionLimit = 100_x000D__x000A_    )_x000D__x000A_    $RecursionDepth++_x000D__x000A__x000D__x000A_    if ($RecursionDepth -gt $RecursionLimit) {_x000D__x000A_        throw "Reached the recursion depth limit of $RecursionLimit when comparing arrays $First and $Second. Is one of your arrays cyclic?"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Do not remove the subexpression @() operators in the following two lines; doing so can cause a_x000D__x000A_    # silly error in PowerShell v3.  (Null Reference exception from the PowerShell engine in a_x000D__x000A_    # method called CheckAutomationNullInCommandArgumentArray(System.Object[]) )._x000D__x000A_    $firstNullOrEmpty = ArrayOrSingleElementIsNullOrEmpty -Array @($First)_x000D__x000A_    $secondNullOrEmpty = ArrayOrSingleElementIsNullOrEmpty -Array @($Second)_x000D__x000A__x000D__x000A_    if ($firstNullOrEmpty -or $secondNullOrEmpty) {_x000D__x000A_        return $firstNullOrEmpty -and $secondNullOrEmpty_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($First.Count -ne $Second.Count) {_x000D__x000A_        return $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    for ($i = 0; $i -lt $First.Count; $i++) {_x000D__x000A_        if ((IsArray $First[$i]) -or (IsArray $Second[$i])) {_x000D__x000A_            if (-not (ArraysAreEqual -First $First[$i] -Second $Second[$i] -CaseSensitive:$CaseSensitive -RecursionDepth $RecursionDepth -RecursionLimit $RecursionLimit)) {_x000D__x000A_                return $false_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($CaseSensitive) {_x000D__x000A_                $comparer = { param($Actual, $Expected) $Expected -ceq $Actual }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $comparer = { param($Actual, $Expected) $Expected -eq $Actual }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not (&amp; $comparer $First[$i] $Second[$i])) {_x000D__x000A_                return $false_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $true_x000D__x000A_}_x000D__x000A__x000D__x000A_function ArrayOrSingleElementIsNullOrEmpty {_x000D__x000A_    param ([object[]] $Array)_x000D__x000A__x000D__x000A_    return $null -eq $Array -or $Array.Count -eq 0 -or ($Array.Count -eq 1 -and $null -eq $Array[0])_x000D__x000A_}_x000D__x000A__x000D__x000A_function IsArray {_x000D__x000A_    param ([object] $InputObject)_x000D__x000A__x000D__x000A_    # Changing this could cause infinite recursion in ArraysAreEqual._x000D__x000A_    # see https://github.com/pester/Pester/issues/785#issuecomment-322794011_x000D__x000A_    return $InputObject -is [Array]_x000D__x000A_}_x000D__x000A__x000D__x000A_function ReplaceValueInArray {_x000D__x000A_    param (_x000D__x000A_        [object[]] $Array,_x000D__x000A_        [object] $Value,_x000D__x000A_        [object] $NewValue_x000D__x000A_    )_x000D__x000A__x000D__x000A_    foreach ($object in $Array) {_x000D__x000A_        if ($Value -eq $object) {_x000D__x000A_            $NewValue_x000D__x000A_        }_x000D__x000A_        elseif (@($object).Count -gt 1) {_x000D__x000A_            ReplaceValueInArray -Array @($object) -Value $Value -NewValue $NewValue_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $object_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeGreaterThan.ps1_x000D__x000A_function Should-BeGreaterThan($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a number (or other comparable value) is greater than an expected value._x000D__x000A_Uses PowerShell's -gt operator to compare the two values._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_2 | Should -BeGreaterThan 0_x000D__x000A_This test passes, as PowerShell evaluates `2 -gt 0` as true._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeLessOrEqual -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ActualValue -le $ExpectedValue) {_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = "Expected the actual value to be greater than $(Format-Nicely $ExpectedValue),$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Should-BeLessOrEqual($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a number (or other comparable value) is lower than, or equal to an expected value._x000D__x000A_Uses PowerShell's -le operator to compare the two values._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1 | Should -BeLessOrEqual 10_x000D__x000A_This test passes, as PowerShell evaluates `1 -le 10` as true._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_10 | Should -BeLessOrEqual 10_x000D__x000A_This test also passes, as PowerShell evaluates `10 -le 10` as true._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeGreaterThan -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ActualValue -gt $ExpectedValue) {_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = "Expected the actual value to be less than or equal to $(Format-Nicely $ExpectedValue),$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeGreaterThan `_x000D__x000A_    -InternalName Should-BeGreaterThan `_x000D__x000A_    -Test         ${function:Should-BeGreaterThan} `_x000D__x000A_    -Alias        'GT'_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeLessOrEqual `_x000D__x000A_    -InternalName Should-BeLessOrEqual `_x000D__x000A_    -Test         ${function:Should-BeLessOrEqual} `_x000D__x000A_    -Alias        'LE'_x000D__x000A__x000D__x000A_#keeping tests happy_x000D__x000A_function ShouldBeGreaterThanFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeGreaterThanFailureMessage() {_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldBeLessOrEqualFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeLessOrEqualFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeIn.ps1_x000D__x000A_function Should-BeIn($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a collection of values contain a specific value._x000D__x000A_Uses PowerShell's -contains operator to confirm._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1 | Should -BeIn @(1,2,3,'a','b','c')_x000D__x000A_This test passes, as 1 exists in the provided collection._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ExpectedValue -contains $ActualValue_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected collection $(Format-Nicely $ExpectedValue) to not contain $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was found."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected collection $(Format-Nicely $ExpectedValue) to contain $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was not found."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeIn `_x000D__x000A_    -InternalName Should-BeIn `_x000D__x000A_    -Test         ${function:Should-BeIn}_x000D__x000A__x000D__x000A__x000D__x000A_function ShouldBeInFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeInFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeLessThan.ps1_x000D__x000A_function Should-BeLessThan($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a number (or other comparable value) is lower than an expected value._x000D__x000A_Uses PowerShell's -lt operator to compare the two values._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1 | Should -BeLessThan 10_x000D__x000A_This test passes, as PowerShell evaluates `1 -lt 10` as true._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeGreaterOrEqual -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ActualValue -ge $ExpectedValue) {_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = "Expected the actual value to be less than $(Format-Nicely $ExpectedValue),$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Should-BeGreaterOrEqual($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a number (or other comparable value) is greater than or equal to an expected value._x000D__x000A_Uses PowerShell's -ge operator to compare the two values._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_2 | Should -BeGreaterOrEqual 0_x000D__x000A_This test passes, as PowerShell evaluates `2 -ge 0` as true._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_2 | Should -BeGreaterOrEqual 2_x000D__x000A_This test also passes, as PowerShell evaluates `2 -ge 2` as true._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeLessThan -ActualValue $ActualValue -ExpectedValue $ExpectedValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ActualValue -lt $ExpectedValue) {_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = "Expected the actual value to be greater than or equal to $(Format-Nicely $ExpectedValue),$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeLessThan `_x000D__x000A_    -InternalName Should-BeLessThan `_x000D__x000A_    -Test         ${function:Should-BeLessThan} `_x000D__x000A_    -Alias        'LT'_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeGreaterOrEqual `_x000D__x000A_    -InternalName Should-BeGreaterOrEqual `_x000D__x000A_    -Test         ${function:Should-BeGreaterOrEqual} `_x000D__x000A_    -Alias        'GE'_x000D__x000A__x000D__x000A_#keeping tests happy_x000D__x000A_function ShouldBeLessThanFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeLessThanFailureMessage() {_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldBeGreaterOrEqualFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeGreaterOrEqualFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeLike.ps1_x000D__x000A_function Should-BeLike($ActualValue, $ExpectedValue, [switch] $Negate, [String] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that the actual value matches a wildcard pattern using PowerShell's -like operator._x000D__x000A_This comparison is not case-sensitive._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -BeLike "actual *"_x000D__x000A__x000D__x000A_This test will pass. -BeLike is not case sensitive._x000D__x000A_For a case sensitive assertion, see -BeLikeExactly._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -BeLike "not actual *"_x000D__x000A__x000D__x000A_This test will fail, as the first string does not match the expected value._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ActualValue -like $ExpectedValue_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected like wildcard $(Format-Nicely $ExpectedValue) to not match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did match."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected like wildcard $(Format-Nicely $ExpectedValue) to match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did not match."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeLike `_x000D__x000A_    -InternalName Should-BeLike `_x000D__x000A_    -Test         ${function:Should-BeLike}_x000D__x000A__x000D__x000A_function ShouldBeLikeFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeLikeFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeLikeExactly.ps1_x000D__x000A_function Should-BeLikeExactly($ActualValue, $ExpectedValue, [switch] $Negate, [String] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that the actual value matches a wildcard pattern using PowerShell's -like operator._x000D__x000A_This comparison is case-sensitive._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -BeLikeExactly "Actual *"_x000D__x000A__x000D__x000A_This test will pass, as the string matches the provided pattern._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = "Actual value"_x000D__x000A_PS C:\&gt;$actual | Should -BeLikeExactly "actual *"_x000D__x000A__x000D__x000A_This test will fail, as -BeLikeExactly is case-sensitive._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ActualValue -clike $ExpectedValue_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected case sensitive like wildcard $(Format-Nicely $ExpectedValue) to not match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did match."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected case sensitive like wildcard $(Format-Nicely $ExpectedValue) to match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did not match."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeLikeExactly `_x000D__x000A_    -InternalName Should-BeLikeExactly `_x000D__x000A_    -Test         ${function:Should-BeLikeExactly}_x000D__x000A__x000D__x000A_function ShouldBeLikeExactlyFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldBeLikeExactlyFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeNullOrEmpty.ps1_x000D__x000A__x000D__x000A_function Should-BeNullOrEmpty([object[]] $ActualValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks values for null or empty (strings)._x000D__x000A_The static [String]::IsNullOrEmpty() method is used to do the comparison._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$null | Should -BeNullOrEmpty_x000D__x000A_This test will pass. $null is null._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$null | Should -Not -BeNullOrEmpty_x000D__x000A_This test will fail and throw an error._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_@() | Should -BeNullOrEmpty_x000D__x000A_An empty collection will pass this test._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_""  | Should -BeNullOrEmpty_x000D__x000A_An empty string will pass this test._x000D__x000A_#&gt;_x000D__x000A_    if ($null -eq $ActualValue -or $ActualValue.Count -eq 0) {_x000D__x000A_        $succeeded = $true_x000D__x000A_    }_x000D__x000A_    elseif ($ActualValue.Count -eq 1) {_x000D__x000A_        $expandedValue = $ActualValue[0]_x000D__x000A_        if ($expandedValue -is [hashtable]) {_x000D__x000A_            $succeeded = $expandedValue.Count -eq 0_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $succeeded = [String]::IsNullOrEmpty($expandedValue)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $succeeded = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldBeNullOrEmptyFailureMessage -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldBeNullOrEmptyFailureMessage -ActualValue $ActualValue -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldBeNullOrEmptyFailureMessage($ActualValue, $Because) {_x000D__x000A_    return "Expected `$null or empty,$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldBeNullOrEmptyFailureMessage ($Because) {_x000D__x000A_    return "Expected a value,$(Format-Because $Because) but got `$null or empty."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name               BeNullOrEmpty `_x000D__x000A_    -InternalName       Should-BeNullOrEmpty `_x000D__x000A_    -Test               ${function:Should-BeNullOrEmpty} `_x000D__x000A_    -SupportsArrayInput_x000D__x000A_# file src\functions\assertions\BeOfType.ps1_x000D__x000A__x000D__x000A_function Should-BeOfType($ActualValue, $ExpectedType, [switch] $Negate, [string]$Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that the actual value should be an object of a specified type_x000D__x000A_(or a subclass of the specified type) using PowerShell's -is operator._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = Get-Item $env:SystemRoot_x000D__x000A_PS C:\&gt;$actual | Should -BeOfType System.IO.DirectoryInfo_x000D__x000A__x000D__x000A_This test passes, as $actual is a DirectoryInfo object._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual | Should -BeOfType System.IO.FileSystemInfo_x000D__x000A_This test passes, as DirectoryInfo's base class is FileSystemInfo._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual | Should -HaveType System.IO.FileSystemInfo_x000D__x000A_This test passes for the same reason, but uses the -HaveType alias instead._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual | Should -BeOfType System.IO.FileInfo_x000D__x000A_This test will fail, as FileInfo is not a base class of DirectoryInfo._x000D__x000A_#&gt;_x000D__x000A_    if ($ExpectedType -is [string]) {_x000D__x000A_        # parses type that is provided as a string in brackets (such as [int])_x000D__x000A_        $parsedType = ($ExpectedType -replace '^\[(.*)\]$', '$1') -as [Type]_x000D__x000A_        if ($null -eq $parsedType) {_x000D__x000A_            throw [ArgumentException]"Could not find type [$ParsedType]. Make sure that the assembly that contains that type is loaded."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $ExpectedType = $parsedType_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $succeded = $ActualValue -is $ExpectedType_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeded = -not $succeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if ($null -ne $ActualValue) {_x000D__x000A_        $actualType = $ActualValue.GetType()_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $actualType = $null_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $succeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = "Expected the value to not have type $(Format-Nicely $ExpectedType) or any of its subtypes,$(Format-Because $Because) but got $(Format-Nicely $ActualValue) with type $(Format-Nicely $actualType)."_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = "Expected the value to have type $(Format-Nicely $ExpectedType) or any of its subtypes,$(Format-Because $Because) but got $(Format-Nicely $ActualValue) with type $(Format-Nicely $actualType)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeOfType `_x000D__x000A_    -InternalName Should-BeOfType `_x000D__x000A_    -Test         ${function:Should-BeOfType} `_x000D__x000A_    -Alias        'HaveType'_x000D__x000A__x000D__x000A_function ShouldBeOfTypeFailureMessage() {_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldBeOfTypeFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\BeTrueOrFalse.ps1_x000D__x000A_function Should-BeTrue($ActualValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that the value is true, or truthy._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$true | Should -BeTrue_x000D__x000A_This test passes. $true is true._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1 | Should -BeTrue_x000D__x000A_This test passes. 1 is true._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1,2,3 | Should -BeTrue_x000D__x000A_PowerShell does not enter a `If (-not @(1,2,3)) {}` block._x000D__x000A_This test passes as a "truthy" result._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeFalse -ActualValue $ActualValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $ActualValue) {_x000D__x000A_        $failureMessage = "Expected `$true,$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Should-BeFalse($ActualValue, [switch] $Negate, $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that the value is false, or falsy._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$false | Should -BeFalse_x000D__x000A_This test passes. $false is false._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_0 | Should -BeFalse_x000D__x000A_This test passes. 0 is false._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$null | Should -BeFalse_x000D__x000A_PowerShell does not enter a `If ($null) {}` block._x000D__x000A_This test passes as a "falsy" result._x000D__x000A_#&gt;_x000D__x000A_    if ($Negate) {_x000D__x000A_        return Should-BeTrue -ActualValue $ActualValue -Negate:$false -Because $Because_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ActualValue) {_x000D__x000A_        $failureMessage = "Expected `$false,$(Format-Because $Because) but got $(Format-Nicely $ActualValue)."_x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeTrue `_x000D__x000A_    -InternalName Should-BeTrue `_x000D__x000A_    -Test         ${function:Should-BeTrue}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         BeFalse `_x000D__x000A_    -InternalName Should-BeFalse `_x000D__x000A_    -Test         ${function:Should-BeFalse}_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_# to keep tests happy_x000D__x000A_function ShouldBeTrueFailureMessage($ActualValue) {_x000D__x000A_}_x000D__x000A_function NotShouldBeTrueFailureMessage($ActualValue) {_x000D__x000A_}_x000D__x000A_function ShouldBeFalseFailureMessage($ActualValue) {_x000D__x000A_}_x000D__x000A_function NotShouldBeFalseFailureMessage($ActualValue) {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\Contain.ps1_x000D__x000A_function Should-Contain($ActualValue, $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that collection contains a specific value._x000D__x000A_Uses PowerShell's -contains operator to confirm._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1,2,3 | Should -Contain 1_x000D__x000A_This test passes, as 1 exists in the provided collection._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ActualValue -contains $ExpectedValue_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected $(Format-Nicely $ExpectedValue) to not be found in collection $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was found."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected $(Format-Nicely $ExpectedValue) to be found in collection $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was not found."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         Contain `_x000D__x000A_    -InternalName Should-Contain `_x000D__x000A_    -Test         ${function:Should-Contain} `_x000D__x000A_    -SupportsArrayInput_x000D__x000A__x000D__x000A_function ShouldContainFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldContainFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\Exist.ps1_x000D__x000A_function Should-Exist($ActualValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Does not perform any comparison, but checks if the object calling Exist is present in a PS Provider._x000D__x000A_The object must have valid path syntax. It essentially must pass a Test-Path call._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$actual = (Dir . )[0].FullName_x000D__x000A_PS C:\&gt;Remove-Item $actual_x000D__x000A_PS C:\&gt;$actual | Should -Exist_x000D__x000A__x000D__x000A_`Should -Exist` calls Test-Path. Test-Path expects a file,_x000D__x000A_returns $false because the file was removed, and fails the test._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = &amp; $SafeCommands['Test-Path'] $ActualValue_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = "Expected path $(Format-Nicely $ActualValue) to not exist,$(Format-Because $Because) but it did exist."_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = "Expected path $(Format-Nicely $ActualValue) to exist,$(Format-Because $Because) but it did not exist."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         Exist `_x000D__x000A_    -InternalName Should-Exist `_x000D__x000A_    -Test         ${function:Should-Exist}_x000D__x000A__x000D__x000A__x000D__x000A_function ShouldExistFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldExistFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\FileContentMatch.ps1_x000D__x000A_function Should-FileContentMatch($ActualValue, $ExpectedContent, [switch] $Negate, $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks to see if a file contains the specified text._x000D__x000A_This search is not case sensitive and uses regular expressions._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Set-Content -Path TestDrive:\file.txt -Value 'I am a file.'_x000D__x000A_PS C:\&gt;'TestDrive:\file.txt' | Should -FileContentMatch 'I Am'_x000D__x000A__x000D__x000A_Create a new file and verify its content. This test passes._x000D__x000A_The 'I Am' regular expression (RegEx) pattern matches against the txt file contents._x000D__x000A_For case-sensitivity, see FileContentMatchExactly._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatch '^I.*file\.$'_x000D__x000A_This RegEx pattern also matches against the "I am a file." string from Example 1._x000D__x000A_With a matching RegEx pattern, this test also passes._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatch 'I Am Not'_x000D__x000A_This test fails, as the RegEx pattern does not match "I am a file."_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatch 'I.am.a.file'_x000D__x000A_This test passes, because "." in RegEx matches any character including a space._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatch ([regex]::Escape('I.am.a.file'))_x000D__x000A_Tip: Use [regex]::Escape("pattern") to match the exact text._x000D__x000A_This test fails, because "I am a file." != "I.am.a.file"_x000D__x000A_#&gt;_x000D__x000A_    $succeeded = (@(&amp; $SafeCommands['Get-Content'] -Encoding UTF8 $ActualValue) -match $ExpectedContent).Count -gt 0_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldFileContentMatchFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldFileContentMatchFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldFileContentMatchFailureMessage($ActualValue, $ExpectedContent, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to be found in file '$ActualValue',$(Format-Because $Because) but it was not found."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldFileContentMatchFailureMessage($ActualValue, $ExpectedContent, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to not be found in file '$ActualValue',$(Format-Because $Because) but it was found."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         FileContentMatch `_x000D__x000A_    -InternalName Should-FileContentMatch `_x000D__x000A_    -Test         ${function:Should-FileContentMatch}_x000D__x000A_# file src\functions\assertions\FileContentMatchExactly.ps1_x000D__x000A_function Should-FileContentMatchExactly($ActualValue, $ExpectedContent, [switch] $Negate, [String] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks to see if a file contains the specified text._x000D__x000A_This search is case sensitive and uses regular expressions to match the text._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Set-Content -Path TestDrive:\file.txt -Value 'I am a file.'_x000D__x000A_PS C:\&gt;'TestDrive:\file.txt' | Should -FileContentMatchExactly 'I am'_x000D__x000A__x000D__x000A_Create a new file and verify its content. This test passes._x000D__x000A_The 'I am' regular expression (RegEx) pattern matches against the txt file contents._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatchExactly 'I Am'_x000D__x000A_This test checks a case-sensitive pattern against the "I am a file." string from Example 1._x000D__x000A_Because the RegEx pattern fails to match, this test fails._x000D__x000A_#&gt;_x000D__x000A_    $succeeded = (@(&amp; $SafeCommands['Get-Content'] -Encoding UTF8 $ActualValue) -cmatch $ExpectedContent).Count -gt 0_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldFileContentMatchExactlyFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldFileContentMatchExactlyFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldFileContentMatchExactlyFailureMessage($ActualValue, $ExpectedContent) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to be case sensitively found in file $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was not found."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldFileContentMatchExactlyFailureMessage($ActualValue, $ExpectedContent) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to not be case sensitively found in file $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was found."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         FileContentMatchExactly `_x000D__x000A_    -InternalName Should-FileContentMatchExactly `_x000D__x000A_    -Test         ${function:Should-FileContentMatchExactly}_x000D__x000A_# file src\functions\assertions\FileContentMatchMultiline.ps1_x000D__x000A_function Should-FileContentMatchMultiline($ActualValue, $ExpectedContent, [switch] $Negate, [String] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_As opposed to FileContentMatch and FileContentMatchExactly operators,_x000D__x000A_FileContentMatchMultiline presents content of the file being tested as one string object,_x000D__x000A_so that the expression you are comparing it to can consist of several lines._x000D__x000A__x000D__x000A_When using FileContentMatchMultiline operator, '^' and '$' represent the beginning and end_x000D__x000A_of the whole file, instead of the beginning and end of a line._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_$Content = "I am the first line.`nI am the second line."_x000D__x000A_PS C:\&gt;Set-Content -Path TestDrive:\file.txt -Value $Content -NoNewline_x000D__x000A_PS C:\&gt;'TestDrive:\file.txt' | Should -FileContentMatchMultiline 'first line\.\r?\nI am'_x000D__x000A__x000D__x000A_This regular expression (RegEx) pattern matches the file contents, and the test passes._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatchMultiline '^I am the first.*\n.*second line\.$'_x000D__x000A_Using the file from Example 1, this RegEx pattern also matches, and this test also passes._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_'TestDrive:\file.txt' | Should -FileContentMatchMultiline '^I am the first line\.$'_x000D__x000A_FileContentMatchMultiline uses the '$' symbol to match the end of the file,_x000D__x000A_not the end of any single line within the file. This test fails._x000D__x000A_#&gt;_x000D__x000A_    $succeeded = [bool] ((&amp; $SafeCommands['Get-Content'] $ActualValue -Delimiter ([char]0)) -match $ExpectedContent)_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldFileContentMatchMultilineFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldFileContentMatchMultilineFailureMessage -ActualValue $ActualValue -ExpectedContent $ExpectedContent -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldFileContentMatchMultilineFailureMessage($ActualValue, $ExpectedContent, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to be found in file $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was not found."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldFileContentMatchMultilineFailureMessage($ActualValue, $ExpectedContent, $Because) {_x000D__x000A_    return "Expected $(Format-Nicely $ExpectedContent) to not be found in file $(Format-Nicely $ActualValue),$(Format-Because $Because) but it was found."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         FileContentMatchMultiline `_x000D__x000A_    -InternalName Should-FileContentMatchMultiline `_x000D__x000A_    -Test         ${function:Should-FileContentMatchMultiline}_x000D__x000A_# file src\functions\assertions\HaveCount.ps1_x000D__x000A_function Should-HaveCount($ActualValue, [int] $ExpectedValue, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Asserts that a collection has the expected amount of items._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_1,2,3 | Should -HaveCount 3_x000D__x000A_This test passes, because it expected three objects, and received three._x000D__x000A_This is like running `@(1,2,3).Count` in PowerShell._x000D__x000A_#&gt;_x000D__x000A_    if ($ExpectedValue -lt 0) {_x000D__x000A_        throw [ArgumentException]"Excpected collection size must be greater than or equal to 0."_x000D__x000A_    }_x000D__x000A_    $count = if ($null -eq $ActualValue) {_x000D__x000A_        0_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ActualValue.Count_x000D__x000A_    }_x000D__x000A_    $expectingEmpty = $ExpectedValue -eq 0_x000D__x000A_    [bool] $succeeded = $count -eq $ExpectedValue_x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A__x000D__x000A_        if ($Negate) {_x000D__x000A_            $expect = if ($expectingEmpty) {_x000D__x000A_                "Expected a non-empty collection"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "Expected a collection with size different from $(Format-Nicely $ExpectedValue)"_x000D__x000A_            }_x000D__x000A_            $but = if ($count -ne 0) {_x000D__x000A_                "but got collection with that size $(Format-Nicely $ActualValue)."_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "but got an empty collection."_x000D__x000A_            }_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "$expect,$(Format-Because $Because) $but"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $expect = if ($expectingEmpty) {_x000D__x000A_                "Expected an empty collection"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "Expected a collection with size $(Format-Nicely $ExpectedValue)"_x000D__x000A_            }_x000D__x000A_            $but = if ($count -ne 0) {_x000D__x000A_                "but got collection with size $(Format-Nicely $count) $(Format-Nicely $ActualValue)."_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "but got an empty collection."_x000D__x000A_            }_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "$expect,$(Format-Because $Because) $but"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         HaveCount `_x000D__x000A_    -InternalName Should-HaveCount `_x000D__x000A_    -Test         ${function:Should-HaveCount} `_x000D__x000A_    -SupportsArrayInput_x000D__x000A__x000D__x000A_function ShouldHaveCountFailureMessage() {_x000D__x000A_}_x000D__x000A_function NotShouldHaveCountFailureMessage() {_x000D__x000A_}_x000D__x000A_# file src\functions\assertions\HaveParameter.ps1_x000D__x000A_function Should-HaveParameter (_x000D__x000A_    $ActualValue,_x000D__x000A_    [String] $ParameterName,_x000D__x000A_    $Type,_x000D__x000A_    [String]$DefaultValue,_x000D__x000A_    [Switch]$Mandatory,_x000D__x000A_    [Switch]$HasArgumentCompleter,_x000D__x000A_    [String]$Alias,_x000D__x000A_    [Switch]$Negate,_x000D__x000A_    [String]$Because ) {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Asserts that a command has the expected parameter._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        Get-Command "Invoke-WebRequest" | Should -HaveParameter Uri -Mandatory_x000D__x000A_        This test passes, because it expected the parameter URI to exist and to_x000D__x000A_        be mandatory._x000D__x000A_    .NOTES_x000D__x000A_        The attribute [ArgumentCompleter] was added with PSv5. Previouse this_x000D__x000A_        assertion will not be able to use the -HasArgumentCompleter parameter_x000D__x000A_        if the attribute does not exist._x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    if ($null -eq $ActualValue -or $ActualValue -isnot [Management.Automation.CommandInfo]) {_x000D__x000A_        throw "Input value must be non-null CommandInfo object. You can get one by calling Get-Command."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $ParameterName) {_x000D__x000A_        throw "The ParameterName can't be empty"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #region HelperFunctions_x000D__x000A_    function Join-And ($Items, $Threshold = 2) {_x000D__x000A__x000D__x000A_        if ($null -eq $items -or $items.count -lt $Threshold) {_x000D__x000A_            $items -join ', '_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $c = $items.count_x000D__x000A_            ($items[0..($c - 2)] -join ', ') + ' and ' + $items[-1]_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function Add-SpaceToNonEmptyString ([string]$Value) {_x000D__x000A_        if ($Value) {_x000D__x000A_            " $Value"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function Get-ParameterInfo {_x000D__x000A_        param(_x000D__x000A_            [Parameter( Mandatory = $true )]_x000D__x000A_            [Management.Automation.CommandInfo]$Command_x000D__x000A_        )_x000D__x000A_        &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_            Use Tokenize to get information about the parameter block of a command_x000D__x000A_        .DESCRIPTION_x000D__x000A_            In order to get information about the parameter block of a command,_x000D__x000A_            several tools can be used (Get-Command, AST, etc)._x000D__x000A_            In order to get the default value of a parameter, AST is the easiest_x000D__x000A_            way to go; but AST was only introduced with PSv3._x000D__x000A_            This function creates an object with information about parameters_x000D__x000A_            using the Tokenize_x000D__x000A_        .NOTES_x000D__x000A_            Author: Chris Dent_x000D__x000A_        #&gt;_x000D__x000A__x000D__x000A_        function Get-TokenGroup {_x000D__x000A_            param(_x000D__x000A_                [Parameter( Mandatory = $true )]_x000D__x000A_                [System.Management.Automation.PSToken[]]$tokens_x000D__x000A_            )_x000D__x000A_            $i = $j = 0_x000D__x000A_            do {_x000D__x000A_                $token = $tokens[$i]_x000D__x000A_                if ($token.Type -eq 'GroupStart') {_x000D__x000A_                    $j++_x000D__x000A_                }_x000D__x000A_                if ($token.Type -eq 'GroupEnd') {_x000D__x000A_                    $j--_x000D__x000A_                }_x000D__x000A_                if (-not $token.PSObject.Properties.Item('Depth')) {_x000D__x000A_                    $token | &amp; $SafeCommands['Add-Member'] Depth -MemberType NoteProperty -Value $j_x000D__x000A_                }_x000D__x000A_                $token_x000D__x000A__x000D__x000A_                $i++_x000D__x000A_            } until ($j -eq 0 -or $i -ge $tokens.Count)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $errors = $null_x000D__x000A_        $tokens = [System.Management.Automation.PSParser]::Tokenize($Command.Definition, [Ref]$errors)_x000D__x000A__x000D__x000A_        # Find param block_x000D__x000A_        $start = $tokens.IndexOf(($tokens | &amp; $SafeCommands['Where-Object'] { $_.Content -eq 'param' } | &amp; $SafeCommands['Select-Object'] -First 1)) + 1_x000D__x000A_        $paramBlock = Get-TokenGroup $tokens[$start..($tokens.Count - 1)]_x000D__x000A__x000D__x000A_        for ($i = 0; $i -lt $paramBlock.Count; $i++) {_x000D__x000A_            $token = $paramBlock[$i]_x000D__x000A__x000D__x000A_            if ($token.Depth -eq 1 -and $token.Type -eq 'Variable') {_x000D__x000A_                $paramInfo = &amp; $SafeCommands['New-Object'] PSObject -Property @{_x000D__x000A_                    Name = $token.Content_x000D__x000A_                } | &amp; $SafeCommands['Select-Object'] Name, Type, DefaultValue, DefaultValueType_x000D__x000A__x000D__x000A_                if ($paramBlock[$i + 1].Content -ne ',') {_x000D__x000A_                    $value = $paramBlock[$i + 2]_x000D__x000A_                    if ($value.Type -eq 'GroupStart') {_x000D__x000A_                        $tokenGroup = Get-TokenGroup $paramBlock[($i + 2)..($paramBlock.Count - 1)]_x000D__x000A_                        $paramInfo.DefaultValue = [String]::Join('', ($tokenGroup | &amp; $SafeCommands['ForEach-Object'] { $_.Content }))_x000D__x000A_                        $paramInfo.DefaultValueType = 'Expression'_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $paramInfo.DefaultValue = $value.Content_x000D__x000A_                        $paramInfo.DefaultValueType = $value.Type_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                if ($paramBlock[$i - 1].Type -eq 'Type') {_x000D__x000A_                    $paramInfo.Type = $paramBlock[$i - 1].Content_x000D__x000A_                }_x000D__x000A_                $paramInfo_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Type -is [string]) {_x000D__x000A_        # parses type that is provided as a string in brackets (such as [int])_x000D__x000A_        $parsedType = ($Type -replace '^\[(.*)\]$', '$1') -as [Type]_x000D__x000A_        if ($null -eq $parsedType) {_x000D__x000A_            throw [ArgumentException]"Could not find type [$ParsedType]. Make sure that the assembly that contains that type is loaded."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Type = $parsedType_x000D__x000A_    }_x000D__x000A_    #endregion HelperFunctions_x000D__x000A__x000D__x000A_    $buts = @()_x000D__x000A_    $filters = @()_x000D__x000A__x000D__x000A_    $null = $ActualValue.Parameters # necessary for PSv2_x000D__x000A_    $hasKey = $ActualValue.Parameters.PSBase.ContainsKey($ParameterName)_x000D__x000A_    $filters += "to$(if ($Negate) {" not"}) have a parameter $ParameterName"_x000D__x000A__x000D__x000A_    if (-not $Negate -and -not $hasKey) {_x000D__x000A_        $buts += "the parameter is missing"_x000D__x000A_    }_x000D__x000A_    elseif ($Negate -and -not $hasKey) {_x000D__x000A_        return &amp; $SafeCommands['New-Object'] PSObject -Property @{ Succeeded = $true }_x000D__x000A_    }_x000D__x000A_    elseif ($Negate -and $hasKey -and -not ($Mandatory -or $Type -or $DefaultValue -or $HasArgumentCompleter)) {_x000D__x000A_        $buts += "the parameter exists"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $attributes = $ActualValue.Parameters[$ParameterName].Attributes_x000D__x000A__x000D__x000A_        if ($Mandatory) {_x000D__x000A_            $testMandatory = $attributes | &amp; $SafeCommands['Where-Object'] { $_ -is [System.Management.Automation.ParameterAttribute] -and $_.Mandatory }_x000D__x000A_            $filters += "which is$(if ($Negate) {" not"}) mandatory"_x000D__x000A__x000D__x000A_            if (-not $Negate -and -not $testMandatory) {_x000D__x000A_                $buts += "it wasn't mandatory"_x000D__x000A_            }_x000D__x000A_            elseif ($Negate -and $testMandatory) {_x000D__x000A_                $buts += "it was mandatory"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Type) {_x000D__x000A_            # This block is not using `Format-Nicely`, as in PSv2 the output differs. Eg:_x000D__x000A_            # PS2&gt; [System.DateTime]_x000D__x000A_            # PS5&gt; [datetime]_x000D__x000A_            [type]$actualType = $ActualValue.Parameters[$ParameterName].ParameterType_x000D__x000A_            $testType = ($Type -eq $actualType)_x000D__x000A_            $filters += "$(if ($Negate) {"not "})of type [$($Type.FullName)]"_x000D__x000A__x000D__x000A_            if (-not $Negate -and -not $testType) {_x000D__x000A_                $buts += "it was of type [$($actualType.FullName)]"_x000D__x000A_            }_x000D__x000A_            elseif ($Negate -and $testType) {_x000D__x000A_                $buts += "it was of type [$($Type.FullName)]"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PSBoundParameters.Keys -contains "DefaultValue") {_x000D__x000A_            $parameterMetadata = Get-ParameterInfo $ActualValue | &amp; $SafeCommands['Where-Object'] { $_.Name -eq $ParameterName }_x000D__x000A_            $actualDefault = if ($parameterMetadata.DefaultValue) { $parameterMetadata.DefaultValue } else { "" }_x000D__x000A_            $testDefault = ($actualDefault -eq $DefaultValue)_x000D__x000A_            $filters += "the default value$(if ($Negate) {" not"}) to be $(Format-Nicely $DefaultValue)"_x000D__x000A__x000D__x000A_            if (-not $Negate -and -not $testDefault) {_x000D__x000A_                $buts += "the default value was $(Format-Nicely $actualDefault)"_x000D__x000A_            }_x000D__x000A_            elseif ($Negate -and $testDefault) {_x000D__x000A_                $buts += "the default value was $(Format-Nicely $DefaultValue)"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($HasArgumentCompleter) {_x000D__x000A_            $testArgumentCompleter = $attributes | &amp; $SafeCommands['Where-Object'] { $_ -is [ArgumentCompleter] }_x000D__x000A_            $filters += "has ArgumentCompletion"_x000D__x000A__x000D__x000A_            if (-not $Negate -and -not $testArgumentCompleter) {_x000D__x000A_                $buts += "has no ArgumentCompletion"_x000D__x000A_            }_x000D__x000A_            elseif ($Negate -and $testArgumentCompleter) {_x000D__x000A_                $buts += "has ArgumentCompletion"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Alias) {_x000D__x000A_            $testPresenceOfAlias = $ActualValue.Parameters[$ParameterName].Aliases -contains $Alias_x000D__x000A_            $filters += "to$(if ($Negate) {" not"}) have an alias '$Alias'"_x000D__x000A__x000D__x000A_            if (-not $Negate -and -not $testPresenceOfAlias) {_x000D__x000A_                $buts += "it didn't have an alias '$Alias'"_x000D__x000A_            }_x000D__x000A_            elseif ($Negate -and $testPresenceOfAlias) {_x000D__x000A_                $buts += "it had an alias '$Alias'"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($buts.Count -ne 0) {_x000D__x000A_        $filter = Add-SpaceToNonEmptyString ( Join-And $filters -Threshold 3 )_x000D__x000A_        $but = Join-And $buts_x000D__x000A_        $failureMessage = "Expected command $($ActualValue.Name)$filter,$(Format-Because $Because) but $but."_x000D__x000A__x000D__x000A_        return &amp; $SafeCommands['New-Object'] PSObject -Property @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        return &amp; $SafeCommands['New-Object'] PSObject -Property @{ Succeeded = $true }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         HaveParameter `_x000D__x000A_    -InternalName Should-HaveParameter `_x000D__x000A_    -Test         ${function:Should-HaveParameter}_x000D__x000A_# file src\functions\assertions\Match.ps1_x000D__x000A_function Should-Match($ActualValue, $RegularExpression, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Uses a regular expression to compare two objects._x000D__x000A_This comparison is not case sensitive._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_"I am a value" | Should -Match "I Am"_x000D__x000A_The "I Am" regular expression (RegEx) pattern matches the provided string,_x000D__x000A_so the test passes. For case sensitive matches, see MatchExactly._x000D__x000A_.EXAMPLE_x000D__x000A_"I am a value" | Should -Match "I am a bad person" # Test will fail_x000D__x000A_RegEx pattern does not match the string, and the test fails._x000D__x000A_.EXAMPLE_x000D__x000A_"Greg" | Should -Match ".reg" # Test will pass_x000D__x000A_This test passes, as "." in RegEx matches any character._x000D__x000A_.EXAMPLE_x000D__x000A_"Greg" | Should -Match ([regex]::Escape(".reg"))_x000D__x000A_One way to provide literal characters to Match is the [regex]::Escape() method._x000D__x000A_This test fails, because the pattern does not match a period symbol._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ActualValue -match $RegularExpression_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldMatchFailureMessage -ActualValue $ActualValue -RegularExpression $RegularExpression -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldMatchFailureMessage -ActualValue $ActualValue -RegularExpression $RegularExpression -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldMatchFailureMessage($ActualValue, $RegularExpression, $Because) {_x000D__x000A_    return "Expected regular expression $(Format-Nicely $RegularExpression) to match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did not match."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldMatchFailureMessage($ActualValue, $RegularExpression, $Because) {_x000D__x000A_    return "Expected regular expression $(Format-Nicely $RegularExpression) to not match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did match."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         Match `_x000D__x000A_    -InternalName Should-Match `_x000D__x000A_    -Test         ${function:Should-Match}_x000D__x000A_# file src\functions\assertions\MatchExactly.ps1_x000D__x000A_function Should-MatchExactly($ActualValue, $RegularExpression, [switch] $Negate, [string] $Because) {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Uses a regular expression to compare two objects._x000D__x000A_This comparison is case sensitive._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_"I am a value" | Should -MatchExactly "I am"_x000D__x000A_The "I am" regular expression (RegEx) pattern matches the string._x000D__x000A_This test passes._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_"I am a value" | Should -MatchExactly "I Am"_x000D__x000A_Because MatchExactly is case sensitive, this test fails._x000D__x000A_For a case insensitive test, see Match._x000D__x000A_#&gt;_x000D__x000A_    [bool] $succeeded = $ActualValue -cmatch $RegularExpression_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        $succeeded = -not $succeeded_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $failureMessage = ''_x000D__x000A__x000D__x000A_    if (-not $succeeded) {_x000D__x000A_        if ($Negate) {_x000D__x000A_            $failureMessage = NotShouldMatchExactlyFailureMessage -ActualValue $ActualValue -RegularExpression $RegularExpression -Because $Because_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $failureMessage = ShouldMatchExactlyFailureMessage -ActualValue $ActualValue -RegularExpression $RegularExpression -Because $Because_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $succeeded_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldMatchExactlyFailureMessage($ActualValue, $RegularExpression) {_x000D__x000A_    return "Expected regular expression $(Format-Nicely $RegularExpression) to case sensitively match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did not match."_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldMatchExactlyFailureMessage($ActualValue, $RegularExpression) {_x000D__x000A_    return "Expected regular expression $(Format-Nicely $RegularExpression) to not case sensitively match $(Format-Nicely $ActualValue),$(Format-Because $Because) but it did match."_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         MatchExactly `_x000D__x000A_    -InternalName Should-MatchExactly `_x000D__x000A_    -Test         ${function:Should-MatchExactly} `_x000D__x000A_    -Alias        'CMATCH'_x000D__x000A_# file src\functions\assertions\PesterThrow.ps1_x000D__x000A_function Should-Throw {_x000D__x000A_    param (_x000D__x000A_        [ScriptBlock] $ActualValue,_x000D__x000A_        [string] $ExpectedMessage,_x000D__x000A_        [string] $ErrorId,_x000D__x000A_        [type] $ExceptionType,_x000D__x000A_        [switch] $Negate,_x000D__x000A_        [string] $Because,_x000D__x000A_        [switch] $PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if an exception was thrown. Enclose input in a script block._x000D__x000A__x000D__x000A_Warning: The input object must be a ScriptBlock, otherwise it is processed outside of the assertion._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_{ foo } | Should -Throw_x000D__x000A_Because "foo" isn't a known command, PowerShell throws an error._x000D__x000A_Throw confirms that an error occurred, and successfully passes the test._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_{ foo } | Should -Not -Throw_x000D__x000A_By using -Not with -Throw, the opposite effect is achieved._x000D__x000A_"Should -Not -Throw" expects no error, but one occurs, and the test fails._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_{ $foo = 1 } | Should -Throw_x000D__x000A_Assigning a variable does not throw an error._x000D__x000A_If asserting "Should -Throw" but no error occurs, the test fails._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_{ $foo = 1 } | Should -Not -Throw_x000D__x000A_Assert that assigning a variable should not throw an error._x000D__x000A_It does not throw an error, so the test passes._x000D__x000A_#&gt;_x000D__x000A_    $actualExceptionMessage = ""_x000D__x000A_    $actualExceptionWasThrown = $false_x000D__x000A_    $actualError = $null_x000D__x000A_    $actualException = $null_x000D__x000A_    $actualExceptionLine = $null_x000D__x000A__x000D__x000A_    if ($null -eq $ActualValue) {_x000D__x000A_        throw [ArgumentNullException] "Input is not a ScriptBlock. Input to '-Throw' and '-Not -Throw' must be enclosed in curly braces."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        do {_x000D__x000A_            Write-ScriptBlockInvocationHint -Hint "Should -Throw" -ScriptBlock $ActualValue_x000D__x000A_            $null = &amp; $ActualValue_x000D__x000A_        } until ($true)_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        $actualExceptionWasThrown = $true_x000D__x000A_        $actualError = $__x000D__x000A_        $actualException = $_.Exception_x000D__x000A_        $actualExceptionMessage = $_.Exception.Message_x000D__x000A_        $actualErrorId = $_.FullyQualifiedErrorId_x000D__x000A_        $actualExceptionLine = (Get-ExceptionLineInfo $_.InvocationInfo) -replace [System.Environment]::NewLine, "$([System.Environment]::NewLine)    "_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [bool] $succeeded = $false_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        # this is for Should -Not -Throw. Once *any* exception was thrown we should fail the assertion_x000D__x000A_        # there is no point in filtering the exception, because there should be none_x000D__x000A_        $succeeded = -not $actualExceptionWasThrown_x000D__x000A_        if (-not $succeeded) {_x000D__x000A_            $failureMessage = "Expected no exception to be thrown,$(Format-Because $Because) but an exception `"$actualExceptionMessage`" was thrown $actualExceptionLine."_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $succeeded_x000D__x000A_                FailureMessage = $failureMessage_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # the rest is for Should -Throw, we must fail the assertion when no exception is thrown_x000D__x000A_    # or when the exception does not match our filter_x000D__x000A__x000D__x000A_    function Join-And ($Items, $Threshold = 2) {_x000D__x000A__x000D__x000A_        if ($null -eq $items -or $items.count -lt $Threshold) {_x000D__x000A_            $items -join ', '_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $c = $items.count_x000D__x000A_            ($items[0..($c - 2)] -join ', ') + ' and ' + $items[-1]_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function Add-SpaceToNonEmptyString ([string]$Value) {_x000D__x000A_        if ($Value) {_x000D__x000A_            " $Value"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $buts = @()_x000D__x000A_    $filters = @()_x000D__x000A__x000D__x000A_    $filterOnExceptionType = $null -ne $ExceptionType_x000D__x000A_    if ($filterOnExceptionType) {_x000D__x000A_        $filters += "with type $(Format-Nicely $ExceptionType)"_x000D__x000A__x000D__x000A_        if ($actualExceptionWasThrown -and $actualException -isnot $ExceptionType) {_x000D__x000A_            $buts += "the exception type was $(Format-Nicely ($actualException.GetType()))"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $filterOnMessage = -not [string]::IsNullOrWhitespace($ExpectedMessage)_x000D__x000A_    if ($filterOnMessage) {_x000D__x000A_        $filters += "with message $(Format-Nicely $ExpectedMessage)"_x000D__x000A_        if ($actualExceptionWasThrown -and (-not (Get-DoValuesMatch $actualExceptionMessage $ExpectedMessage))) {_x000D__x000A_            $buts += "the message was $(Format-Nicely $actualExceptionMessage)"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $filterOnId = -not [string]::IsNullOrWhitespace($ErrorId)_x000D__x000A_    if ($filterOnId) {_x000D__x000A_        $filters += "with FullyQualifiedErrorId $(Format-Nicely $ErrorId)"_x000D__x000A_        if ($actualExceptionWasThrown -and (-not (Get-DoValuesMatch $actualErrorId $ErrorId))) {_x000D__x000A_            $buts += "the FullyQualifiedErrorId was $(Format-Nicely $actualErrorId)"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $actualExceptionWasThrown) {_x000D__x000A_        $buts += "no exception was thrown"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($buts.Count -ne 0) {_x000D__x000A_        $filter = Add-SpaceToNonEmptyString ( Join-And $filters -Threshold 3 )_x000D__x000A_        $but = Join-And $buts_x000D__x000A_        $failureMessage = "Expected an exception,$filter to be thrown,$(Format-Because $Because) but $but. $actualExceptionLine".Trim()_x000D__x000A__x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = $failureMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $result = [PSCustomObject] @{_x000D__x000A_        Succeeded = $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PassThru) {_x000D__x000A_        $result | &amp; $SafeCommands['Add-Member'] -MemberType NoteProperty -Name 'Data' -Value $actualError_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $result_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DoValuesMatch($ActualValue, $ExpectedValue) {_x000D__x000A_    #user did not specify any message filter, so any message matches_x000D__x000A_    if ($null -eq $ExpectedValue) {_x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $ActualValue.ToString() -like $ExpectedValue_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ExceptionLineInfo($info) {_x000D__x000A_    # $info.PositionMessage has a leading blank line that we need to account for in PowerShell 2.0_x000D__x000A_    $positionMessage = $info.PositionMessage -split '\r?\n' -match '\S' -join [System.Environment]::NewLine_x000D__x000A_    return ($positionMessage -replace "^At ", "from ")_x000D__x000A_}_x000D__x000A__x000D__x000A_function ShouldThrowFailureMessage {_x000D__x000A_    # to make the should tests happy, for now_x000D__x000A_}_x000D__x000A__x000D__x000A_function NotShouldThrowFailureMessage {_x000D__x000A_    # to make the should tests happy, for now_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name         Throw `_x000D__x000A_    -InternalName Should-Throw `_x000D__x000A_    -Test         ${function:Should-Throw}_x000D__x000A_# file src\functions\assertions\Should.ps1_x000D__x000A_function Get-FailureMessage($assertionEntry, $negate, $value, $expected) {_x000D__x000A_    if ($negate) {_x000D__x000A_        $failureMessageFunction = $assertionEntry.GetNegativeFailureMessage_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $failureMessageFunction = $assertionEntry.GetPositiveFailureMessage_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return (&amp; $failureMessageFunction $value $expected)_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-ShouldErrorRecord ([string] $Message, [string] $File, [string] $Line, [string] $LineText, $Terminating) {_x000D__x000A_    $exception = [Exception] $Message_x000D__x000A_    $errorID = 'PesterAssertionFailed'_x000D__x000A_    $errorCategory = [Management.Automation.ErrorCategory]::InvalidResult_x000D__x000A_    # we use ErrorRecord.TargetObject to pass structured information about the error to a reporting system._x000D__x000A_    $targetObject = @{ Message = $Message; File = $File; Line = $Line; LineText = $LineText; Terminating = $Terminating }_x000D__x000A_    $errorRecord = &amp; $SafeCommands['New-Object'] Management.Automation.ErrorRecord $exception, $errorID, $errorCategory, $targetObject_x000D__x000A_    return $errorRecord_x000D__x000A_}_x000D__x000A__x000D__x000A_function Should {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A_    Should provides assertion methods to verify assertions e.g. comparing objects._x000D__x000A_    If assertion is not met the test fails and an exception is thrown._x000D__x000A__x000D__x000A_    Should can be used more than once in the It block if more than one assertion_x000D__x000A_    need to be verified. Each Should keyword needs to be on a separate line._x000D__x000A_    Test will be passed only when all assertion will be met (logical conjuction)._x000D__x000A__x000D__x000A_    .PARAMETER ActualValue_x000D__x000A_    The actual value that was obtained in the test which should be verified against_x000D__x000A_    a expected value._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/assertions_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        BeforeEach { $be = 1 }_x000D__x000A_        It "i1" {_x000D__x000A_            $be = 2_x000D__x000A_        }_x000D__x000A_        AfterEach { Write-Host "AfterEach: $be" }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            $user = Get-User_x000D__x000A_            $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A_            $user |_x000D__x000A_                Should -HaveProperty Name -Value "Jakub" |_x000D__x000A_                Should -HaveProperty Age  -Value 30_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $true | Should -BeFalse_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $a | Should -Be 10_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $planets.Name | Should -Be $Expected_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ValueFromPipeline = $true, ValueFromRemainingArguments = $true)]_x000D__x000A_        [object] $ActualValue_x000D__x000A_    )_x000D__x000A__x000D__x000A_    dynamicparam {_x000D__x000A_        # Figuring out if we are using the old syntax is 'easy'_x000D__x000A_        # we can use $myInvocation.Line to get the surrounding context_x000D__x000A_        $myLine = if ($null -ne $MyInvocation -and 0 -le ($MyInvocation.OffsetInLine - 1)) {_x000D__x000A_            $MyInvocation.Line.Substring($MyInvocation.OffsetInLine - 1)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # A bit of Regex lets us know if the line used the old form_x000D__x000A_        if ($myLine -match '^\s{0,}should\s{1,}(?&lt;Operator&gt;[^\-\@\s]+)')_x000D__x000A_        {_x000D__x000A_            $shouldErrorMsg = "Legacy Should syntax (without dashes) is not supported in Pester 5. Please refer to migration guide at: https://pester.dev/docs/migrations/v3-to-v4"_x000D__x000A_            throw $shouldErrorMsg_x000D__x000A_        } else {_x000D__x000A_            Get-AssertionDynamicParams_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $inputArray = [System.Collections.Generic.List[PSObject]]@()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $inputArray.Add($ActualValue)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        $lineNumber = $MyInvocation.ScriptLineNumber_x000D__x000A_        $lineText = $MyInvocation.Line.TrimEnd([System.Environment]::NewLine)_x000D__x000A_        $file = $MyInvocation.ScriptName_x000D__x000A__x000D__x000A_        $negate = $false_x000D__x000A_        if ($PSBoundParameters.ContainsKey('Not')) {_x000D__x000A_            $negate = [bool]$PSBoundParameters['Not']_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $null = $PSBoundParameters.Remove('ActualValue')_x000D__x000A_        $null = $PSBoundParameters.Remove($PSCmdlet.ParameterSetName)_x000D__x000A_        $null = $PSBoundParameters.Remove('Not')_x000D__x000A__x000D__x000A_        $entry = Get-AssertionOperatorEntry -Name $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_        $shouldThrow = $null_x000D__x000A_        $errorActionIsDefined = $PSBoundParameters.ContainsKey("ErrorAction")_x000D__x000A_        if ($errorActionIsDefined) {_x000D__x000A_            $shouldThrow = 'Stop' -eq $PSBoundParameters["ErrorAction"]_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $shouldThrow -or -not $shouldThrow) {_x000D__x000A_            # we are sure that we either:_x000D__x000A_            #    - should not throw because of explicit ErrorAction, and need to figure out a place where to collect the error_x000D__x000A_            #    - or we don't know what to do yet and need to figure out what to do based on the context and settings_x000D__x000A__x000D__x000A_            # first check if we are in the context of Pester, if not we will always throw:_x000D__x000A_            # this is slightly hacky, here we are reaching out the the caller session state and_x000D__x000A_            # look for $______parameters which we know we are using inside of the Pester runtime to_x000D__x000A_            # keep the current invocation context, when we find it, we are able to add non-terminating_x000D__x000A_            # errors without throwing and terminating the test_x000D__x000A_            $pesterRuntimeInvocationContext = $PSCmdlet.SessionState.PSVariable.GetValue('______parameters')_x000D__x000A_            $isInsidePesterRuntime = $null -ne $pesterRuntimeInvocationContext_x000D__x000A_            if (-not $isInsidePesterRuntime) {_x000D__x000A_                $shouldThrow = $true_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($null -eq $shouldThrow) {_x000D__x000A_                    if ($null -ne $PSCmdlet.SessionState.PSVariable.GetValue('______isInMockParameterFilter')) {_x000D__x000A_                        $shouldThrow = $true_x000D__x000A_                    } else {_x000D__x000A_                        # ErrorAction was not specified explictily, figure out what to do from the configuration_x000D__x000A_                        $shouldThrow = 'Stop' -eq $pesterRuntimeInvocationContext.Configuration.Should.ErrorAction.Value_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # here the $ShouldThrow is set from one of multiple places, either as override from -ErrorAction or_x000D__x000A_                # the settings, or based on the Pester runtime availability_x000D__x000A_                if (-not $shouldThrow) {_x000D__x000A_                    # call back into the context we grabbed from the runtime and add this error without throwing_x000D__x000A_                    $addErrorCallback = {_x000D__x000A_                        param($err)_x000D__x000A_                        $null = $pesterRuntimeInvocationContext.ErrorRecord.Add($err)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $assertionParams = @{_x000D__x000A_            AssertionEntry     = $entry_x000D__x000A_            BoundParameters    = $PSBoundParameters_x000D__x000A_            File               = $file_x000D__x000A_            LineNumber         = $lineNumber_x000D__x000A_            LineText           = $lineText_x000D__x000A_            Negate             = $negate_x000D__x000A_            CallerSessionState = $PSCmdlet.SessionState_x000D__x000A_            ShouldThrow        = $shouldThrow_x000D__x000A_            AddErrorCallback   = $addErrorCallback_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $entry) { return }_x000D__x000A__x000D__x000A_        if ($inputArray.Count -eq 0) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $null_x000D__x000A_        }_x000D__x000A_        elseif ($entry.SupportsArrayInput) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $inputArray.ToArray()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            foreach ($object in $inputArray) {_x000D__x000A_                Invoke-Assertion @assertionParams -ValueToTest $object_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-Assertion {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [object]_x000D__x000A_        $AssertionEntry,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [System.Collections.IDictionary]_x000D__x000A_        $BoundParameters,_x000D__x000A__x000D__x000A_        [string]_x000D__x000A_        $File,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [int]_x000D__x000A_        $LineNumber,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]_x000D__x000A_        $LineText,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Management.Automation.SessionState]_x000D__x000A_        $CallerSessionState,_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [switch]_x000D__x000A_        $Negate,_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [AllowNull()]_x000D__x000A_        [object]_x000D__x000A_        $ValueToTest,_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [boolean]_x000D__x000A_        $ShouldThrow,_x000D__x000A__x000D__x000A_        [ScriptBlock]_x000D__x000A_        $AddErrorCallback_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $testResult = &amp; $AssertionEntry.Test -ActualValue $ValueToTest -Negate:$Negate -CallerSessionState $CallerSessionState @BoundParameters_x000D__x000A__x000D__x000A_    if (-not $testResult.Succeeded) {_x000D__x000A_        $errorRecord = [Pester.Factory]::CreateShouldErrorRecord($testResult.FailureMessage, $file, $lineNumber, $lineText, $shouldThrow)_x000D__x000A__x000D__x000A__x000D__x000A_        if ($null -eq $AddErrorCallback -or $ShouldThrow) {_x000D__x000A_            # throw this error to fail the test immediately_x000D__x000A_            throw $errorRecord_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            # throw and catch to not fail the test, but still have stackTrace_x000D__x000A_            # alternatively we could call Get-PSStackTrace and format it ourselves_x000D__x000A_            # in case this turns out too be slow_x000D__x000A_            throw $errorRecord_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            $err = $__x000D__x000A_        }_x000D__x000A__x000D__x000A_        # collect the error via the provided callback_x000D__x000A_        &amp; $AddErrorCallback $err_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        #extract data to return if there are any on the object_x000D__x000A_        $data = $testResult.psObject.Properties.Item('Data')_x000D__x000A_        if ($data) {_x000D__x000A_            $data.Value_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-Because ([string] $Because) {_x000D__x000A_    if ($null -eq $Because) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $bcs = $Because.Trim()_x000D__x000A_    if ([string]::IsNullOrEmpty($bcs)) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    " because $($bcs -replace 'because\s'),"_x000D__x000A_}_x000D__x000A_# file src\functions\Context.ps1_x000D__x000A_function Context {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A_Any Mocks defined inside a Context are removed at the end of the Context scope,_x000D__x000A_as are any files or folders added to the TestDrive during the Context block's_x000D__x000A_execution. Any BeforeEach or AfterEach blocks defined inside a Context also only_x000D__x000A_apply to tests within that Context ._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the Context. This is a phrase describing a set of tests within a describe._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Context blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_Script that is executed. This may include setup specific to the context_x000D__x000A_and one or more It blocks that validate the expected outcomes._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    Context "when root does not exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Context "when root does exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $Foreach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($Fixture -eq $null) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A__x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($invokedInteractively) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        $invokedInteractively = $true_x000D__x000A_        Invoke-Interactively -CommandUsed 'Context' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\Coverage.Plugin.ps1_x000D__x000A_function Get-CoveragePlugin {_x000D__x000A_    New-PluginObject -Name "Coverage" -Start {_x000D__x000A_        param($Context)_x000D__x000A__x000D__x000A_        $logger = if ($Context.WriteDebugMessages) {_x000D__x000A_            $sw = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_            # return partially apply callback to the logger when the logging is enabled_x000D__x000A_            # or implicit null_x000D__x000A_            {_x000D__x000A_                param ($Message)_x000D__x000A_                &amp; $Context.Write_PesterDebugMessage -Scope CodeCoverage -Message $Message_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -ne $logger) {_x000D__x000A_            &amp; $logger "Starting code coverage."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $config = $Context.Configuration['Coverage']_x000D__x000A__x000D__x000A_        if ($null -ne $logger) {_x000D__x000A_            &amp; $logger "Config: $($config | &amp; $script:SafeCommands['Out-String'])"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $breakpoints = Enter-CoverageAnalysis -CodeCoverage $config -Logger $logger_x000D__x000A__x000D__x000A_        $Context.GlobalPluginData.Add('Coverage', @{_x000D__x000A_            CommandCoverage = $breakpoints_x000D__x000A_            CoverageReport = $null_x000D__x000A_        })_x000D__x000A__x000D__x000A_        if ($null -ne $logger) {_x000D__x000A_            &amp; $logger "Added $($breakpoints.Counts) breakpoints in $($sw.ElapsedMilliseconds) ms."_x000D__x000A_        }_x000D__x000A_    } -End {_x000D__x000A_        param($Context)_x000D__x000A__x000D__x000A_        if (-not $Context.TestRun.PluginData.ContainsKey("Coverage")) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $coverageData = $Context.TestRun.PluginData.Coverage_x000D__x000A_        $breakpoints = $coverageData.CommandCoverage_x000D__x000A__x000D__x000A_        Exit-CoverageAnalysis -CommandCoverage $breakpoints_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\Coverage.ps1_x000D__x000A_function Enter-CoverageAnalysis {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [object[]] $CodeCoverage,_x000D__x000A_        [ScriptBlock] $Logger_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $coverageInfo = foreach ($object in $CodeCoverage) {_x000D__x000A_            Get-CoverageInfoFromUserInput -InputObject $object -Logger $Logger_x000D__x000A_        }_x000D__x000A__x000D__x000A_    if ($null -eq $coverageInfo) {_x000D__x000A_        if ($null -ne $logger) {_x000D__x000A_            &amp; $logger "No no files were found for coverage."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    @(Get-CoverageBreakpoints -CoverageInfo $coverageInfo -Logger $Logger)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Exit-CoverageAnalysis {_x000D__x000A_    param ([object] $CommandCoverage)_x000D__x000A__x000D__x000A_    &amp; $SafeCommands['Set-StrictMode'] -Off_x000D__x000A__x000D__x000A_    # PSScriptAnalyzer it will flag this line because $null is on the LHS of -ne._x000D__x000A_    # BUT that is correct in this case. We are filtering the list of breakpoints_x000D__x000A_    # to only get those that are not $null_x000D__x000A_    # (like if we did $breakpoints | where {$_ -ne $null})_x000D__x000A_    # so DON'T change this._x000D__x000A_    $breakpoints = @($CommandCoverage.Breakpoint) -ne $null_x000D__x000A_    if ($breakpoints.Count -gt 0) {_x000D__x000A_        &amp; $SafeCommands['Remove-PSBreakpoint'] -Breakpoint $breakpoints_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageInfoFromUserInput {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [object]_x000D__x000A_        $InputObject,_x000D__x000A_        $Logger_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($InputObject -is [System.Collections.IDictionary]) {_x000D__x000A_        $unresolvedCoverageInfo = Get-CoverageInfoFromDictionary -Dictionary $InputObject_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $Path = $InputObject -as [string]_x000D__x000A__x000D__x000A_        # Auto-detect IncludeTests-value from path-input if user provides path that is a test_x000D__x000A_        $IncludeTests = $Path -like "*$($PesterPreference.Run.TestExtension.Value)"_x000D__x000A__x000D__x000A_        $unresolvedCoverageInfo = New-CoverageInfo -Path $Path -IncludeTests $IncludeTests_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Resolve-CoverageInfo -UnresolvedCoverageInfo $unresolvedCoverageInfo_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-CoverageInfo {_x000D__x000A_    param ($Path, [string] $Class = $null, [string] $Function = $null, [int] $StartLine = 0, [int] $EndLine = 0, [bool] $IncludeTests = $false)_x000D__x000A__x000D__x000A_    return [pscustomobject]@{_x000D__x000A_        Path         = $Path_x000D__x000A_        Class        = $Class_x000D__x000A_        Function     = $Function_x000D__x000A_        StartLine    = $StartLine_x000D__x000A_        EndLine      = $EndLine_x000D__x000A_        IncludeTests = $IncludeTests_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageInfoFromDictionary {_x000D__x000A_    param ([System.Collections.IDictionary] $Dictionary)_x000D__x000A__x000D__x000A_    $path = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'Path', 'p'_x000D__x000A_    if ($null -eq $path -or 0 -ge @($path).Count) {_x000D__x000A_        throw "Coverage value '$($Dictionary | &amp; $script:SafeCommands['Out-String'])' is missing required Path key."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $startLine = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'StartLine', 'Start', 's'_x000D__x000A_    $endLine = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'EndLine', 'End', 'e'_x000D__x000A_    [string] $class = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'Class', 'c'_x000D__x000A_    [string] $function = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'Function', 'f'_x000D__x000A_    $includeTests = Get-DictionaryValueFromFirstKeyFound -Dictionary $Dictionary -Key 'IncludeTests'_x000D__x000A__x000D__x000A_    $startLine = Convert-UnknownValueToInt -Value $startLine -DefaultValue 0_x000D__x000A_    $endLine = Convert-UnknownValueToInt -Value $endLine -DefaultValue 0_x000D__x000A_    [bool] $includeTests = Convert-UnknownValueToInt -Value $includeTests -DefaultValue 0_x000D__x000A__x000D__x000A_    return New-CoverageInfo -Path $path -StartLine $startLine -EndLine $endLine -Class $class -Function $function -IncludeTests $includeTests_x000D__x000A_}_x000D__x000A__x000D__x000A_function Convert-UnknownValueToInt {_x000D__x000A_    param ([object] $Value, [int] $DefaultValue = 0)_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        return [int] $Value_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        return $DefaultValue_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Resolve-CoverageInfo {_x000D__x000A_    param ([psobject] $UnresolvedCoverageInfo)_x000D__x000A__x000D__x000A_    $path = $UnresolvedCoverageInfo.Path_x000D__x000A__x000D__x000A_    $testsPattern = "*$($PesterPreference.Run.TestExtension.Value)"_x000D__x000A_    $includeTests = $UnresolvedCoverageInfo.IncludeTests_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        $resolvedPaths = &amp; $SafeCommands['Resolve-Path'] -Path $path -ErrorAction Stop |_x000D__x000A_            &amp; $SafeCommands['Where-Object'] { $includeTests -or $_.Path -notlike $testsPattern }_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        &amp; $SafeCommands['Write-Error'] "Could not resolve coverage path '$path': $($_.Exception.Message)"_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $filePaths = foreach ($resolvedPath in $resolvedPaths) {_x000D__x000A_        $item = &amp; $SafeCommands['Get-Item'] -LiteralPath $resolvedPath_x000D__x000A_        if ($item -is [System.IO.FileInfo] -and ('.ps1', '.psm1') -contains $item.Extension) {_x000D__x000A_            $item.FullName_x000D__x000A_        }_x000D__x000A_        elseif (-not $item.PsIsContainer) {_x000D__x000A_            # todo: enable this warning for non wildcarded paths? otherwise it prints a ton of warnings for documenatation and so on when using "folder/*" wildcard_x000D__x000A_            # &amp; $SafeCommands['Write-Warning'] "CodeCoverage path '$path' resolved to a non-PowerShell file '$($item.FullName)'; this path will not be part of the coverage report."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $params = @{_x000D__x000A_        StartLine = $UnresolvedCoverageInfo.StartLine_x000D__x000A_        EndLine   = $UnresolvedCoverageInfo.EndLine_x000D__x000A_        Class     = $UnresolvedCoverageInfo.Class_x000D__x000A_        Function  = $UnresolvedCoverageInfo.Function_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($filePath in $filePaths) {_x000D__x000A_        $params['Path'] = $filePath_x000D__x000A_        New-CoverageInfo @params_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageBreakpoints {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [object[]] $CoverageInfo,_x000D__x000A_        [ScriptBlock]$Logger_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $fileGroups = @($CoverageInfo | &amp; $SafeCommands['Group-Object'] -Property Path)_x000D__x000A_    foreach ($fileGroup in $fileGroups) {_x000D__x000A_        if ($null -ne $Logger) {_x000D__x000A_            $sw = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_            &amp; $Logger "Initializing code coverage analysis for file '$($fileGroup.Name)'"_x000D__x000A_        }_x000D__x000A_        $totalCommands = 0_x000D__x000A_        $analyzedCommands = 0_x000D__x000A__x000D__x000A_        :commandLoop_x000D__x000A_        foreach ($command in Get-CommandsInFile -Path $fileGroup.Name) {_x000D__x000A_            $totalCommands++_x000D__x000A__x000D__x000A_            foreach ($coverageInfoObject in $fileGroup.Group) {_x000D__x000A_                if (Test-CoverageOverlapsCommand -CoverageInfo $coverageInfoObject -Command $command) {_x000D__x000A_                    $analyzedCommands++_x000D__x000A_                    New-CoverageBreakpoint -Command $command_x000D__x000A_                    continue commandLoop_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($null -ne $Logger) {_x000D__x000A_            &amp; $Logger  "Analyzing $analyzedCommands of $totalCommands commands in file '$($fileGroup.Name)' for code coverage, in $($sw.ElapsedMilliseconds) ms"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CommandsInFile {_x000D__x000A_    param ([string] $Path)_x000D__x000A__x000D__x000A_    $errors = $null_x000D__x000A_    $tokens = $null_x000D__x000A_    $ast = [System.Management.Automation.Language.Parser]::ParseFile($Path, [ref] $tokens, [ref] $errors)_x000D__x000A__x000D__x000A_    if ($PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_        # In PowerShell 5.0, dynamic keywords for DSC configurations are represented by the DynamicKeywordStatementAst_x000D__x000A_        # class.  They still trigger breakpoints, but are not a child class of CommandBaseAst anymore._x000D__x000A__x000D__x000A_        $predicate = {_x000D__x000A_            $args[0] -is [System.Management.Automation.Language.DynamicKeywordStatementAst] -or_x000D__x000A_            $args[0] -is [System.Management.Automation.Language.CommandBaseAst]_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $predicate = { $args[0] -is [System.Management.Automation.Language.CommandBaseAst] }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $searchNestedScriptBlocks = $true_x000D__x000A_    $ast.FindAll($predicate, $searchNestedScriptBlocks)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-CoverageOverlapsCommand {_x000D__x000A_    param ([object] $CoverageInfo, [System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    if ($CoverageInfo.Class -or $CoverageInfo.Function) {_x000D__x000A_        Test-CommandInScope -Command $Command -Class $CoverageInfo.Class -Function $CoverageInfo.Function_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Test-CoverageOverlapsCommandByLineNumber @PSBoundParameters_x000D__x000A_    }_x000D__x000A__x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-CommandInScope {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Command, [string] $Class, [string] $Function)_x000D__x000A__x000D__x000A_    $classResult = !$Class_x000D__x000A_    $functionResult = !$Function_x000D__x000A_    for ($ast = $Command; $null -ne $ast; $ast = $ast.Parent) {_x000D__x000A_        if (!$classResult -and $PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_            # Classes have been introduced in PowerShell 5.0_x000D__x000A_            $classAst = $ast -as [System.Management.Automation.Language.TypeDefinitionAst]_x000D__x000A_            if ($null -ne $classAst -and $classAst.Name -like $Class) {_x000D__x000A_                $classResult = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if (!$functionResult) {_x000D__x000A_            $functionAst = $ast -as [System.Management.Automation.Language.FunctionDefinitionAst]_x000D__x000A_            if ($null -ne $functionAst -and $functionAst.Name -like $Function) {_x000D__x000A_                $functionResult = $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($classResult -and $functionResult) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-CoverageOverlapsCommandByLineNumber {_x000D__x000A_    param ([object] $CoverageInfo, [System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    $commandStart = $Command.Extent.StartLineNumber_x000D__x000A_    $commandEnd = $Command.Extent.EndLineNumber_x000D__x000A_    $coverStart = $CoverageInfo.StartLine_x000D__x000A_    $coverEnd = $CoverageInfo.EndLine_x000D__x000A__x000D__x000A_    # An EndLine value of 0 means to cover the entire rest of the file from StartLine_x000D__x000A_    # (which may also be 0)_x000D__x000A_    if ($coverEnd -le 0) {_x000D__x000A_        $coverEnd = [int]::MaxValue_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return (Test-RangeContainsValue -Value $commandStart -Min $coverStart -Max $coverEnd) -or_x000D__x000A_    (Test-RangeContainsValue -Value $commandEnd -Min $coverStart -Max $coverEnd)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-RangeContainsValue {_x000D__x000A_    param ([int] $Value, [int] $Min, [int] $Max)_x000D__x000A_    return $Value -ge $Min -and $Value -le $Max_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-CoverageBreakpoint {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    if (IsIgnoredCommand -Command $Command) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $params = @{_x000D__x000A_        Script = $Command.Extent.File_x000D__x000A_        Line   = $Command.Extent.StartLineNumber_x000D__x000A_        Column = $Command.Extent.StartColumnNumber_x000D__x000A_        Action = { }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $breakpoint = &amp; $SafeCommands['Set-PSBreakpoint'] @params_x000D__x000A__x000D__x000A_    [pscustomobject] @{_x000D__x000A_        File        = $Command.Extent.File_x000D__x000A_        Class       = Get-ParentClassName -Ast $Command_x000D__x000A_        Function    = Get-ParentFunctionName -Ast $Command_x000D__x000A_        StartLine   = $Command.Extent.StartLineNumber_x000D__x000A_        EndLine     = $Command.Extent.EndLineNumber_x000D__x000A_        StartColumn = $Command.Extent.StartColumnNumber_x000D__x000A_        EndColumn   = $Command.Extent.EndColumnNumber_x000D__x000A_        Command     = Get-CoverageCommandText -Ast $Command_x000D__x000A_        Breakpoint  = $breakpoint_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_Function Get-AstTopParent {_x000D__x000A_    param(_x000D__x000A_        [System.Management.Automation.Language.Ast] $Ast,_x000D__x000A_        [int] $MaxDepth = 30_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ([string]::IsNullOrEmpty($Ast.Parent)) {_x000D__x000A_        return $Ast_x000D__x000A_    }_x000D__x000A_    elseif ($MaxDepth -le 0) {_x000D__x000A_        &amp; $SafeCommands['Write-Verbose'] "Max depth reached, moving on"_x000D__x000A_        return $null_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $MaxDepth--_x000D__x000A_        Get-AstTopParent -Ast $Ast.Parent -MaxDepth $MaxDepth_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function IsIgnoredCommand {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    if (-not $Command.Extent.File) {_x000D__x000A_        # This can happen if the script contains "configuration" or any similarly implemented_x000D__x000A_        # dynamic keyword.  PowerShell modifies the script code and reparses it in memory, leading_x000D__x000A_        # to AST elements with no File in their Extent._x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSVersionTable.PSVersion.Major -ge 4) {_x000D__x000A_        if ($Command.Extent.Text -eq 'Configuration') {_x000D__x000A_            # More DSC voodoo.  Calls to "configuration" generate breakpoints, but their HitCount_x000D__x000A_            # stays zero (even though they are executed.)  For now, ignore them, unless we can come_x000D__x000A_            # up with a better solution._x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (IsChildOfHashtableDynamicKeyword -Command $Command) {_x000D__x000A_            # The lines inside DSC resource declarations don't trigger their breakpoints when executed,_x000D__x000A_            # just like the "configuration" keyword itself.  I don't know why, at this point, but just like_x000D__x000A_            # configuration, we'll ignore it so it doesn't clutter up the coverage analysis with useless junk._x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Command.Extent.Text -match '^{?&amp; \$wrappedCmd @PSBoundParameters ?}?$' -and_x000D__x000A_        (Get-AstTopParent -Ast $Command) -like '*$steppablePipeline.Begin($PSCmdlet)*$steppablePipeline.Process($_)*$steppablePipeline.End()*' ) {_x000D__x000A_        # Fix for proxy function wrapped pipeline command. PowerShell does not increment the hit count when_x000D__x000A_        # these functions are executed using the steppable pipeline; further, these checks are redundant, as_x000D__x000A_        # all steppable pipeline constituents already get breakpoints set. This checks to ensure the top parent_x000D__x000A_        # node of the command contains all three constituents of the steppable pipeline before ignoring it._x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (IsClosingLoopCondition -Command $Command) {_x000D__x000A_        # For some reason, the closing expressions of do/while and do/until loops don't trigger their breakpoints._x000D__x000A_        # To avoid useless clutter, we'll ignore those lines as well._x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function IsChildOfHashtableDynamicKeyword {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    for ($ast = $Command.Parent; $null -ne $ast; $ast = $ast.Parent) {_x000D__x000A_        if ($PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_            # The ast behaves differently for DSC resources with version 5+.  There's a new DynamicKeywordStatementAst class,_x000D__x000A_            # and they no longer are represented by CommandAst objects._x000D__x000A__x000D__x000A_            if ($ast -is [System.Management.Automation.Language.DynamicKeywordStatementAst] -and_x000D__x000A_                $ast.CommandElements[-1] -is [System.Management.Automation.Language.HashtableAst]) {_x000D__x000A_                return $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($ast -is [System.Management.Automation.Language.CommandAst] -and_x000D__x000A_                $null -ne $ast.DefiningKeyword -and_x000D__x000A_                $ast.DefiningKeyword.BodyMode -eq [System.Management.Automation.Language.DynamicKeywordBodyMode]::Hashtable) {_x000D__x000A_                return $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function IsClosingLoopCondition {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Command)_x000D__x000A__x000D__x000A_    $ast = $Command_x000D__x000A__x000D__x000A_    while ($null -ne $ast.Parent) {_x000D__x000A_        if (($ast.Parent -is [System.Management.Automation.Language.DoWhileStatementAst] -or_x000D__x000A_                $ast.Parent -is [System.Management.Automation.Language.DoUntilStatementAst]) -and_x000D__x000A_            $ast.Parent.Condition -eq $ast) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $ast = $ast.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ParentClassName {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Ast)_x000D__x000A__x000D__x000A_    if ($PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_        # Classes have been introduced in PowerShell 5.0_x000D__x000A__x000D__x000A_        $parent = $Ast.Parent_x000D__x000A__x000D__x000A_        while ($null -ne $parent -and $parent -isnot [System.Management.Automation.Language.TypeDefinitionAst]) {_x000D__x000A_            $parent = $parent.Parent_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $parent) {_x000D__x000A_        return ''_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        return $parent.Name_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ParentFunctionName {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Ast)_x000D__x000A__x000D__x000A_    $parent = $Ast.Parent_x000D__x000A__x000D__x000A_    while ($null -ne $parent -and $parent -isnot [System.Management.Automation.Language.FunctionDefinitionAst]) {_x000D__x000A_        $parent = $parent.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $parent) {_x000D__x000A_        return ''_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        return $parent.Name_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageCommandText {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Ast)_x000D__x000A__x000D__x000A_    $reportParentExtentTypes = @(_x000D__x000A_        [System.Management.Automation.Language.ReturnStatementAst]_x000D__x000A_        [System.Management.Automation.Language.ThrowStatementAst]_x000D__x000A_        [System.Management.Automation.Language.AssignmentStatementAst]_x000D__x000A_        [System.Management.Automation.Language.IfStatementAst]_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $parent = Get-ParentNonPipelineAst -Ast $Ast_x000D__x000A__x000D__x000A_    if ($null -ne $parent) {_x000D__x000A_        if ($parent -is [System.Management.Automation.Language.HashtableAst]) {_x000D__x000A_            return Get-KeyValuePairText -HashtableAst $parent -ChildAst $Ast_x000D__x000A_        }_x000D__x000A_        elseif ($reportParentExtentTypes -contains $parent.GetType()) {_x000D__x000A_            return $parent.Extent.Text_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $Ast.Extent.Text_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ParentNonPipelineAst {_x000D__x000A_    param ([System.Management.Automation.Language.Ast] $Ast)_x000D__x000A__x000D__x000A_    $parent = $null_x000D__x000A_    if ($null -ne $Ast) {_x000D__x000A_        $parent = $Ast.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    while ($parent -is [System.Management.Automation.Language.PipelineAst]) {_x000D__x000A_        $parent = $parent.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $parent_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-KeyValuePairText {_x000D__x000A_    param (_x000D__x000A_        [System.Management.Automation.Language.HashtableAst] $HashtableAst,_x000D__x000A_        [System.Management.Automation.Language.Ast] $ChildAst_x000D__x000A_    )_x000D__x000A__x000D__x000A_    &amp; $SafeCommands['Set-StrictMode'] -Off_x000D__x000A__x000D__x000A_    foreach ($keyValuePair in $HashtableAst.KeyValuePairs) {_x000D__x000A_        if ($keyValuePair.Item2.PipelineElements -contains $ChildAst) {_x000D__x000A_            return '{0} = {1}' -f $keyValuePair.Item1.Extent.Text, $keyValuePair.Item2.Extent.Text_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # This shouldn't happen, but just in case, default to the old output of just the expression._x000D__x000A_    return $ChildAst.Extent.Text_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageMissedCommands {_x000D__x000A_    param ([object[]] $CommandCoverage)_x000D__x000A_    $CommandCoverage | &amp; $SafeCommands['Where-Object'] { $_.Breakpoint.HitCount -eq 0 }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageHitCommands {_x000D__x000A_    param ([object[]] $CommandCoverage)_x000D__x000A_    $CommandCoverage | &amp; $SafeCommands['Where-Object'] { $_.Breakpoint.HitCount -gt 0 }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Merge-CommandCoverage {_x000D__x000A_    param ([object[]] $CommandCoverage)_x000D__x000A__x000D__x000A_    # todo: this is a quick implementation of merging lists of breakpoints together, this is needed_x000D__x000A_    # because the code coverage is stored per container and so in the end a lot of commands are missed_x000D__x000A_    # in the container while they are hit in other, what we want is to know how many of the commands were_x000D__x000A_    # hit in at least one file. This simple implementation does not add together the number of hits on each breakpoint_x000D__x000A_    # so the HitCommands is not accurate, it only keeps the first breakpoint that points to that command and it's hit count_x000D__x000A_    # this should be improved in the future._x000D__x000A__x000D__x000A_    # todo: move this implementation to the calling function so we don't need to split and merge the collection twice and we_x000D__x000A_    # can also accumulate the hit count across the different breakpoints_x000D__x000A__x000D__x000A_    $hitBps = @{}_x000D__x000A_    $hits = [System.Collections.Generic.List[object]]@()_x000D__x000A_    foreach ($bp in $CommandCoverage) {_x000D__x000A_        if (0 -lt $bp.Breakpoint.HitCount) {_x000D__x000A_            $key = "$($bp.File):$($bp.StartLine):$($bp.StartColumn)"_x000D__x000A_            if (-not $hitBps.ContainsKey($key)) {_x000D__x000A_                # adding to a hashtable to make sure we can look up the keys quickly_x000D__x000A_                # and also to an array list to make sure we can later dump them in the correct order_x000D__x000A_                $hitBps.Add($key, $bp)_x000D__x000A_                $null = $hits.Add($bp)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $missedBps = @{}_x000D__x000A_    $misses = [System.Collections.Generic.List[object]]@()_x000D__x000A_    foreach ($bp in $CommandCoverage) {_x000D__x000A_        if (0 -eq $bp.Breakpoint.HitCount) {_x000D__x000A_            $key = "$($bp.File):$($bp.StartLine):$($bp.StartColumn)"_x000D__x000A_            if (-not $hitBps.ContainsKey($key)) {_x000D__x000A_                if (-not $missedBps.ContainsKey($key)) {_x000D__x000A_                    $missedBps.Add($key, $bp)_x000D__x000A_                    $null = $misses.Add($bp)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # this is also not very efficient because in the next step we are splitting this collection again_x000D__x000A_    # into hit and missed breakpoints_x000D__x000A_    $c = $hits.GetEnumerator() + $misses.GetEnumerator()_x000D__x000A_    $c_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CoverageReport {_x000D__x000A_    # make sure this is an array, otherwise the counts start failing_x000D__x000A_    # on powershell 3_x000D__x000A_    param ([object[]] $CommandCoverage)_x000D__x000A__x000D__x000A_    $properties = @(_x000D__x000A_        'File'_x000D__x000A_        @{ Name = 'Line'; Expression = { $_.StartLine } }_x000D__x000A_        'StartLine'_x000D__x000A_        'EndLine'_x000D__x000A_        'StartColumn'_x000D__x000A_        'EndColumn'_x000D__x000A_        'Class'_x000D__x000A_        'Function'_x000D__x000A_        'Command'_x000D__x000A_        @{ Name = 'HitCount'; Expression = { $_.Breakpoint.HitCount } }_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $missedCommands = @(Get-CoverageMissedCommands -CommandCoverage @($CommandCoverage) | &amp; $SafeCommands['Select-Object'] $properties)_x000D__x000A_    $hitCommands = @(Get-CoverageHitCommands -CommandCoverage @($CommandCoverage) | &amp; $SafeCommands['Select-Object'] $properties)_x000D__x000A_    $analyzedFiles = @(@($CommandCoverage) | &amp; $SafeCommands['Select-Object'] -ExpandProperty File -Unique)_x000D__x000A__x000D__x000A__x000D__x000A_    [pscustomobject] @{_x000D__x000A_        NumberOfCommandsAnalyzed = $CommandCoverage.Count_x000D__x000A_        NumberOfFilesAnalyzed    = $analyzedFiles.Count_x000D__x000A_        NumberOfCommandsExecuted = $hitCommands.Count_x000D__x000A_        NumberOfCommandsMissed   = $missedCommands.Count_x000D__x000A_        MissedCommands           = $missedCommands_x000D__x000A_        HitCommands              = $hitCommands_x000D__x000A_        AnalyzedFiles            = $analyzedFiles_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-CommonParentPath {_x000D__x000A_    param ([string[]] $Path)_x000D__x000A__x000D__x000A_    $pathsToTest = @(_x000D__x000A_        $Path |_x000D__x000A_            Normalize-Path |_x000D__x000A_            &amp; $SafeCommands['Select-Object'] -Unique_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($pathsToTest.Count -gt 0) {_x000D__x000A_        $parentPath = &amp; $SafeCommands['Split-Path'] -Path $pathsToTest[0] -Parent_x000D__x000A__x000D__x000A_        while ($parentPath.Length -gt 0) {_x000D__x000A_            $nonMatches = $pathsToTest -notmatch "^$([regex]::Escape($parentPath))"_x000D__x000A__x000D__x000A_            if ($nonMatches.Count -eq 0) {_x000D__x000A_                return $parentPath_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $parentPath = &amp; $SafeCommands['Split-Path'] -Path $parentPath -Parent_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [string]::Empty_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-RelativePath {_x000D__x000A_    param ( [string] $Path, [string] $RelativeTo )_x000D__x000A_    return $Path -replace "^$([regex]::Escape("$RelativeTo$([System.IO.Path]::DirectorySeparatorChar)"))?"_x000D__x000A_}_x000D__x000A__x000D__x000A_function Normalize-Path {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ValueFromPipeline = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        [Alias('PSPath', 'FullName')]_x000D__x000A_        [string[]] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Split-Path and Join-Path will replace any AltDirectorySeparatorChar instances with the DirectorySeparatorChar_x000D__x000A_    # (Even if it's not the one that the split / join happens on.)  So splitting / rejoining a path will give us_x000D__x000A_    # consistent separators for later string comparison._x000D__x000A__x000D__x000A_    process {_x000D__x000A_        if ($null -ne $Path) {_x000D__x000A_            foreach ($p in $Path) {_x000D__x000A_                $normalizedPath = &amp; $SafeCommands['Split-Path'] $p -Leaf_x000D__x000A__x000D__x000A_                if ($normalizedPath -ne $p) {_x000D__x000A_                    $parent = &amp; $SafeCommands['Split-Path'] $p -Parent_x000D__x000A_                    $normalizedPath = &amp; $SafeCommands['Join-Path'] $parent $normalizedPath_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $normalizedPath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-JaCoCoReportXml {_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        $CommandCoverage,_x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [object] $CoverageReport,_x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [long] $TotalMilliseconds_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -eq $CoverageReport -or ($pester.Show -eq [Pester.OutputTypes]::None) -or $CoverageReport.NumberOfCommandsAnalyzed -eq 0) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $now = &amp; $SafeCommands['Get-Date']_x000D__x000A_    $nineteenSeventy = &amp; $SafeCommands['Get-Date'] -Date "01/01/1970"_x000D__x000A_    [long] $endTime = [math]::Floor((New-TimeSpan -start $nineteenSeventy -end $now).TotalMilliseconds)_x000D__x000A_    [long] $startTime = [math]::Floor($endTime - $TotalMilliseconds)_x000D__x000A__x000D__x000A_    $folderGroups = $CommandCoverage | &amp; $SafeCommands["Group-Object"] -Property {_x000D__x000A_        &amp; $SafeCommands["Split-Path"] $_.File -Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $packageList = [System.Collections.Generic.List[psobject]]@()_x000D__x000A__x000D__x000A_    $report = @{_x000D__x000A_        Instruction = @{ Missed = 0; Covered = 0 }_x000D__x000A_        Line        = @{ Missed = 0; Covered = 0 }_x000D__x000A_        Method      = @{ Missed = 0; Covered = 0 }_x000D__x000A_        Class       = @{ Missed = 0; Covered = 0 }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($folderGroup in $folderGroups) {_x000D__x000A__x000D__x000A_        $package = @{_x000D__x000A_            Name        = $folderGroup.Name_x000D__x000A_            Classes     = [ordered] @{ }_x000D__x000A_            Instruction = @{ Missed = 0; Covered = 0 }_x000D__x000A_            Line        = @{ Missed = 0; Covered = 0 }_x000D__x000A_            Method      = @{ Missed = 0; Covered = 0 }_x000D__x000A_            Class       = @{ Missed = 0; Covered = 0 }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($command in $folderGroup.Group) {_x000D__x000A_            $file = $command.File_x000D__x000A_            $function = $command.Function_x000D__x000A_            if (!$function) { $function = '&lt;script&gt;' }_x000D__x000A_            $line = $command.StartLine.ToString()_x000D__x000A__x000D__x000A_            $missed = if ($command.Breakpoint.HitCount) { 0 } else { 1 }_x000D__x000A_            $covered = if ($command.Breakpoint.HitCount) { 1 } else { 0 }_x000D__x000A__x000D__x000A_            if (!$package.Classes.Contains($file)) {_x000D__x000A_                $package.Class.Missed += $missed_x000D__x000A_                $package.Class.Covered += $covered_x000D__x000A_                $package.Classes.$file = @{_x000D__x000A_                    Methods     = [ordered] @{ }_x000D__x000A_                    Lines       = [ordered] @{ }_x000D__x000A_                    Instruction = @{ Missed = 0; Covered = 0 }_x000D__x000A_                    Line        = @{ Missed = 0; Covered = 0 }_x000D__x000A_                    Method      = @{ Missed = 0; Covered = 0 }_x000D__x000A_                    Class       = @{ Missed = $missed; Covered = $covered }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (!$package.Classes.$file.Methods.Contains($function)) {_x000D__x000A_                $package.Method.Missed += $missed_x000D__x000A_                $package.Method.Covered += $covered_x000D__x000A_                $package.Classes.$file.Method.Missed += $missed_x000D__x000A_                $package.Classes.$file.Method.Covered += $covered_x000D__x000A_                $package.Classes.$file.Methods.$function = @{_x000D__x000A_                    FirstLine   = $line_x000D__x000A_                    Instruction = @{ Missed = 0; Covered = 0 }_x000D__x000A_                    Line        = @{ Missed = 0; Covered = 0 }_x000D__x000A_                    Method      = @{ Missed = $missed; Covered = $covered }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (!$package.Classes.$file.Lines.Contains($line)) {_x000D__x000A_                $package.Line.Missed += $missed_x000D__x000A_                $package.Line.Covered += $covered_x000D__x000A_                $package.Classes.$file.Line.Missed += $missed_x000D__x000A_                $package.Classes.$file.Line.Covered += $covered_x000D__x000A_                $package.Classes.$file.Methods.$function.Line.Missed += $missed_x000D__x000A_                $package.Classes.$file.Methods.$function.Line.Covered += $covered_x000D__x000A_                $package.Classes.$file.Lines.$line = @{_x000D__x000A_                    Instruction = @{ Missed = 0; Covered = 0 }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $package.Instruction.Missed += $missed_x000D__x000A_            $package.Instruction.Covered += $covered_x000D__x000A_            $package.Classes.$file.Instruction.Missed += $missed_x000D__x000A_            $package.Classes.$file.Instruction.Covered += $covered_x000D__x000A_            $package.Classes.$file.Methods.$function.Instruction.Missed += $missed_x000D__x000A_            $package.Classes.$file.Methods.$function.Instruction.Covered += $covered_x000D__x000A_            $package.Classes.$file.Lines.$line.Instruction.Missed += $missed_x000D__x000A_            $package.Classes.$file.Lines.$line.Instruction.Covered += $covered_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $report.Class.Missed += $package.Class.Missed_x000D__x000A_        $report.Class.Covered += $package.Class.Covered_x000D__x000A_        $report.Method.Missed += $package.Method.Missed_x000D__x000A_        $report.Method.Covered += $package.Method.Covered_x000D__x000A_        $report.Line.Missed += $package.Line.Missed_x000D__x000A_        $report.Line.Covered += $package.Line.Covered_x000D__x000A_        $report.Instruction.Missed += $package.Instruction.Missed_x000D__x000A_        $report.Instruction.Covered += $package.Instruction.Covered_x000D__x000A__x000D__x000A_        $packageList.Add($package)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $commonParent = Get-CommonParentPath -Path $CoverageReport.AnalyzedFiles_x000D__x000A_    $commonParentLeaf = &amp; $SafeCommands["Split-Path"] $commonParent -Leaf_x000D__x000A__x000D__x000A_    # the JaCoCo xml format without the doctype, as the XML stuff does not like DTD's._x000D__x000A_    $jaCoCoReport = '&lt;?xml version="1.0" encoding="UTF-8" standalone="no"?&gt;'_x000D__x000A_    $jaCoCoReport += '&lt;report name=""&gt;'_x000D__x000A_    $jaCoCoReport += '&lt;sessioninfo id="this" start="" dump="" /&gt;'_x000D__x000A_    $jaCoCoReport += '&lt;/report&gt;'_x000D__x000A__x000D__x000A_    [xml] $jaCoCoReportXml = $jaCoCoReport_x000D__x000A_    $reportElement = $jaCoCoReportXml.report_x000D__x000A_    $reportElement.name = "Pester ($now)"_x000D__x000A_    $reportElement.sessioninfo.start = $startTime.ToString()_x000D__x000A_    $reportElement.sessioninfo.dump = $endTime.ToString()_x000D__x000A__x000D__x000A_    foreach ($package in $packageList) {_x000D__x000A_        $packageRelativePath = Get-RelativePath -Path $package.Name -RelativeTo $commonParent_x000D__x000A__x000D__x000A_        if ($null -eq $packageRelativePath) {_x000D__x000A_            $packageName = $commonParentLeaf_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $packageName = "{0}/{1}" -f $commonParentLeaf, $($packageRelativePath.Replace("\", "/"))_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $packageElement = Add-XmlElement $reportElement "package" @{_x000D__x000A_            name = ($packageName -replace "/$", "")_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($file in $package.Classes.Keys) {_x000D__x000A_            $class = $package.Classes.$file_x000D__x000A_            $classElementRelativePath = (Get-RelativePath -Path $file -RelativeTo $commonParent).Replace("\", "/")_x000D__x000A_            $classElementName = "{0}/{1}" -f $commonParentLeaf, $classElementRelativePath_x000D__x000A_            $classElementName = $classElementName.Substring(0, $($classElementName.LastIndexOf(".")))_x000D__x000A_            $classElement = Add-XmlElement $packageElement 'class' -Attributes ([ordered] @{_x000D__x000A_                    name           = $classElementName_x000D__x000A_                    sourcefilename = (&amp; $SafeCommands["Split-Path"] -Path $classElementRelativePath -Leaf)_x000D__x000A_                })_x000D__x000A__x000D__x000A_            foreach ($function in $class.Methods.Keys) {_x000D__x000A_                $method = $class.Methods.$function_x000D__x000A_                $methodElement = Add-XmlElement $classElement 'method' -Attributes ([ordered] @{_x000D__x000A_                        name = $function_x000D__x000A_                        desc = '()'_x000D__x000A_                        line = $method.FirstLine_x000D__x000A_                    })_x000D__x000A_                Add-JaCoCoCounter Instruction $method $methodElement_x000D__x000A_                Add-JaCoCoCounter Line $method $methodElement_x000D__x000A_                Add-JaCoCoCounter Method $method $methodElement_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Add-JaCoCoCounter Instruction $class $classElement_x000D__x000A_            Add-JaCoCoCounter Line $class $classElement_x000D__x000A_            Add-JaCoCoCounter Method $class $classElement_x000D__x000A_            Add-JaCoCoCounter Class $class $classElement_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($file in $package.Classes.Keys) {_x000D__x000A_            $class = $package.Classes.$file_x000D__x000A_            $sourceFileElement = Add-XmlElement $packageElement 'sourcefile' -Attributes ([ordered] @{_x000D__x000A_                    name = (&amp; $SafeCommands["Split-Path"] -Path $file -Leaf)_x000D__x000A_                })_x000D__x000A__x000D__x000A_            foreach ($line in $class.Lines.Keys) {_x000D__x000A_                $null = Add-XmlElement $sourceFileElement 'line' -Attributes ([ordered] @{_x000D__x000A_                        nr = $line_x000D__x000A_                        mi = $class.Lines.$line.Instruction.Missed_x000D__x000A_                        ci = $class.Lines.$line.Instruction.Covered_x000D__x000A_                        mb = 0_x000D__x000A_                        cb = 0_x000D__x000A_                    })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Add-JaCoCoCounter Instruction $class $sourceFileElement_x000D__x000A_            Add-JaCoCoCounter Line $class $sourceFileElement_x000D__x000A_            Add-JaCoCoCounter Method $class $sourceFileElement_x000D__x000A_            Add-JaCoCoCounter Class $class $sourceFileElement_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Add-JaCoCoCounter Instruction $package $packageElement_x000D__x000A_        Add-JaCoCoCounter Line $package $packageElement_x000D__x000A_        Add-JaCoCoCounter Method $package $packageElement_x000D__x000A_        Add-JaCoCoCounter Class $package $packageElement_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Add-JaCoCoCounter Instruction $report $reportElement_x000D__x000A_    Add-JaCoCoCounter Line $report $reportElement_x000D__x000A_    Add-JaCoCoCounter Method $report $reportElement_x000D__x000A_    Add-JaCoCoCounter Class $report $reportElement_x000D__x000A__x000D__x000A_    # There is no pretty way to insert the Doctype, as microsoft has deprecated the DTD stuff._x000D__x000A_    $jaCoCoReportDocType = '&lt;!DOCTYPE report PUBLIC "-//JACOCO//DTD Report 1.1//EN" "report.dtd"&gt;'_x000D__x000A_    $xml = $jaCocoReportXml.OuterXml.Insert(54, $jaCoCoReportDocType)_x000D__x000A__x000D__x000A_    return $xml_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-XmlElement {_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true)] [System.Xml.XmlNode] $Parent,_x000D__x000A_        [parameter(Mandatory = $true)] [string] $Name,_x000D__x000A_        [System.Collections.IDictionary] $Attributes_x000D__x000A_    )_x000D__x000A_    $element = $Parent.AppendChild($Parent.OwnerDocument.CreateElement($Name))_x000D__x000A_    if ($Attributes) {_x000D__x000A_        foreach ($key in $Attributes.Keys) {_x000D__x000A_            $attribute = $element.Attributes.Append($Parent.OwnerDocument.CreateAttribute($key))_x000D__x000A_            $attribute.Value = $Attributes.$key_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    return $element_x000D__x000A_}_x000D__x000A__x000D__x000A_function Add-JaCoCoCounter {_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true)] [ValidateSet('Instruction', 'Line', 'Method', 'Class')] [string] $Type,_x000D__x000A_        [parameter(Mandatory = $true)] [System.Collections.IDictionary] $Data,_x000D__x000A_        [parameter(Mandatory = $true)] [System.Xml.XmlNode] $Parent_x000D__x000A_    )_x000D__x000A_    if ($Data.$Type.Missed -isnot [int] -or $Data.$Type.Covered -isnot [int]) {_x000D__x000A_        throw 'Counter data expected'_x000D__x000A_    }_x000D__x000A_    $null = Add-XmlElement $Parent 'counter' -Attributes ([ordered] @{_x000D__x000A_            type    = $Type.ToUpperInvariant()_x000D__x000A_            missed  = $Data.$Type.Missed_x000D__x000A_            covered = $Data.$Type.Covered_x000D__x000A_        })_x000D__x000A_}_x000D__x000A_# file src\functions\Describe.ps1_x000D__x000A_function Describe {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Creates a logical group of tests._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Creates a logical group of tests. All Mocks, TestDrive and TestRegistry contents_x000D__x000A_defined within a Describe block are scoped to that Describe; they_x000D__x000A_will no longer be present when the Describe block exits.  A Describe_x000D__x000A_block may contain any number of Context and It blocks._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the test group. This is often an expressive phrase describing_x000D__x000A_the scenario being tested._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_The actual test script. If you are following the AAA pattern (Arrange-Act-Assert),_x000D__x000A_this typically holds the arrange and act sections. The Asserts will also lie_x000D__x000A_in this block but are typically nested each in its own It block. Assertions are_x000D__x000A_typically performed by the Should command within the It blocks._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Describe blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Should_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_TestDrive_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $ForEach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($null -eq $Fixture) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Invoke-Interactively -CommandUsed 'Describe' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-Interactively ($CommandUsed, $ScriptName, $SessionState, $BoundParameters) {_x000D__x000A_    # interactive execution (by F5 in an editor, by F8 on selection, or by pasting to console)_x000D__x000A_    # do not run interactively in non-saved files_x000D__x000A_    # (vscode will use path like "untitled:Untitled-*" so we check if the path is rooted)_x000D__x000A_    if (-not [String]::IsNullOrEmpty($ScriptName) -and [IO.Path]::IsPathRooted($ScriptName)) {_x000D__x000A__x000D__x000A_        if ($null -ne $script:lastExecutedAt -and ([datetime]::now - $script:lastExecutedAt).TotalMilliseconds -lt 100 -and $script:lastExecutedFile -eq $ScriptName) {_x000D__x000A_            # skip file if the same file was executed less than 100 ms ago. This is here because we will run the file from the first_x000D__x000A_            # describe and the subsequent describes in the same file would try to re-run the file. 100ms window should be good enough_x000D__x000A_            # to be transparent for the interactive use, yet big enough to advance from the end of the command to the next, even on slow systems_x000D__x000A_            # use the file name as well to allow running multiple files in sequence_x000D__x000A__x000D__x000A_            $script:lastExecutedFile = $ScriptName_x000D__x000A_            $script:lastExecutedAt = [datetime]::Now_x000D__x000A__x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # we are invoking a file, try call Invoke-Pester on the whole file,_x000D__x000A_        # but make sure we are invoking it in the caller session state, because_x000D__x000A_        # paths don't stay attached to session state_x000D__x000A_        $invokePester =  {_x000D__x000A_            param($private:Path, $private:Out_Null)_x000D__x000A_            Invoke-Pester -Path $Path | &amp; $Out_Null_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Set-ScriptBlockScope -SessionState $SessionState -ScriptBlock $invokePester_x000D__x000A_        &amp; $invokePester $ScriptName $SafeCommands['Out-Null']_x000D__x000A_        $script:lastExecutedFile = $ScriptName_x000D__x000A_        $script:lastExecutedAt = [datetime]::Now_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        throw "Pester can run only saved files interactively. Please save your file to a disk."_x000D__x000A__x000D__x000A_        # there is a number of problems with this that I don't know how to solve right now_x000D__x000A_        # - the scripblock below will be discovered which shows a weird message in the console (maybe just suppress?)_x000D__x000A_        # every block will get it's own summary if we ar running multiple of them (can we somehow get to the actuall executed code?) or know which one is the last one?_x000D__x000A__x000D__x000A_        # use an intermediate module to carry the bound paremeters_x000D__x000A_        # but don't touch the session state the scriptblock is attached_x000D__x000A_        # to, this way we are still running the provided scriptblocks where_x000D__x000A_        # they are coming from (in the SessionState they are attached to),_x000D__x000A_        # this could be replaced by providing params if the current api allowed it_x000D__x000A_        $sb = &amp; {_x000D__x000A_            # only local variables are copied in closure_x000D__x000A_            # make a new scope so we copy only what is needed_x000D__x000A_            param($BoundParameters, $CommandUsed)_x000D__x000A_            {_x000D__x000A_                &amp; $CommandUsed @BoundParameters_x000D__x000A_            }.GetNewClosure()_x000D__x000A_        } $BoundParameters $CommandUsed_x000D__x000A__x000D__x000A_        Invoke-Pester -ScriptBlock $sb | &amp; $SafeCommands['Out-Null']_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Assert-DescribeInProgress {_x000D__x000A_    # TODO: Enforce block structure in the Runtime.Pester if needed, in the meantime this is just a placeholder_x000D__x000A_}_x000D__x000A_# file src\functions\Environment.ps1_x000D__x000A_function GetPesterPsVersion {_x000D__x000A_    # accessing the value indirectly so it can be mocked_x000D__x000A_    (&amp; $SafeCommands['Get-Variable'] 'PSVersionTable' -ValueOnly).PSVersion.Major_x000D__x000A_}_x000D__x000A__x000D__x000A_function GetPesterOs {_x000D__x000A_    # Prior to v6, PowerShell was solely on Windows. In v6, the $IsWindows variable was introduced._x000D__x000A_    if ((GetPesterPsVersion) -lt 6) {_x000D__x000A_        'Windows'_x000D__x000A_    }_x000D__x000A_    elseif (&amp; $SafeCommands['Get-Variable'] -Name 'IsWindows' -ErrorAction 'SilentlyContinue' -ValueOnly ) {_x000D__x000A_        'Windows'_x000D__x000A_    }_x000D__x000A_    elseif (&amp; $SafeCommands['Get-Variable'] -Name 'IsMacOS' -ErrorAction 'SilentlyContinue' -ValueOnly ) {_x000D__x000A_        'macOS'_x000D__x000A_    }_x000D__x000A_    elseif (&amp; $SafeCommands['Get-Variable'] -Name 'IsLinux' -ErrorAction 'SilentlyContinue' -ValueOnly ) {_x000D__x000A_        'Linux'_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        throw "Unsupported Operating system!"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TempDirectory {_x000D__x000A_    if ((GetPesterOs) -eq 'macOS') {_x000D__x000A_        # Special case for macOS using the real path instead of /tmp which is a symlink to this path_x000D__x000A_        "/private/tmp"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        [System.IO.Path]::GetTempPath()_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TempRegistry {_x000D__x000A_    $pesterTempRegistryRoot = 'Microsoft.PowerShell.Core\Registry::HKEY_CURRENT_USER\Software\Pester'_x000D__x000A_    if (-not (&amp; $script:SafeCommands['Test-Path'] $pesterTempRegistryRoot)) {_x000D__x000A_        try {_x000D__x000A_            $null = &amp; $SafeCommands['New-Item'] -Path $pesterTempRegistryRoot -ErrorAction Stop_x000D__x000A_        }_x000D__x000A_        catch [Exception] {_x000D__x000A_            throw ([Exception]"Was not able to create a Pester Registry key for TestRegistry", ($_.Exception))_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    return $pesterTempRegistryRoot_x000D__x000A_}_x000D__x000A_# file src\functions\Get-ShouldOperator.ps1_x000D__x000A_function Get-ShouldOperator {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Display the assertion operators available for use with Should._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Get-ShouldOperator returns a list of available Should parameters,_x000D__x000A_    their aliases, and examples to help you craft the tests you need._x000D__x000A__x000D__x000A_    Get-ShouldOperator will list all available operators,_x000D__x000A_    including any registered by the user with Add-ShouldOperator._x000D__x000A__x000D__x000A_    .NOTES_x000D__x000A_    Pester uses dynamic parameters to populate Should arguments._x000D__x000A__x000D__x000A_    This limits the user's ability to discover the available assertions via_x000D__x000A_    standard PowerShell discovery patterns (like `Get-Help Should -Parameter *`)._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator_x000D__x000A__x000D__x000A_    Return all available Should assertion operators and their aliases._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator -Name Be_x000D__x000A__x000D__x000A_    Return help examples for the Be assertion operator._x000D__x000A_    -Name is a dynamic parameter that tab completes all available options._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Get-ShouldOperator_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param ()_x000D__x000A__x000D__x000A_    # Use a dynamic parameter to create a dynamic ValidateSet_x000D__x000A_    # Define parameter -Name and tab-complete all current values of $AssertionOperators_x000D__x000A_    # Discovers included assertions (-Be, -Not) and any registered by the user via Add-ShouldOperator_x000D__x000A_    # https://martin77s.wordpress.com/2014/06/09/dynamic-validateset-in-a-dynamic-parameter/_x000D__x000A_    DynamicParam {_x000D__x000A_        $ParameterName = 'Name'_x000D__x000A__x000D__x000A_        $RuntimeParameterDictionary = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A_        $AttributeCollection = &amp; $SafeCommands['New-Object'] System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A_        $ParameterAttribute = &amp; $SafeCommands['New-Object'] System.Management.Automation.ParameterAttribute_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ParameterAttribute)_x000D__x000A__x000D__x000A_        $arrSet = $AssertionOperators.Values |_x000D__x000A_        &amp; $SafeCommands['Select-Object'] -Property Name, Alias |_x000D__x000A_        &amp; $SafeCommands['ForEach-Object'] { $_.Name; $_.Alias }_x000D__x000A__x000D__x000A_        $ValidateSetAttribute = &amp; $SafeCommands['New-Object']System.Management.Automation.ValidateSetAttribute($arrSet)_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ValidateSetAttribute)_x000D__x000A__x000D__x000A_        $RuntimeParameter = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter($ParameterName, [string], $AttributeCollection)_x000D__x000A_        $RuntimeParameterDictionary.Add($ParameterName, $RuntimeParameter)_x000D__x000A_        return $RuntimeParameterDictionary_x000D__x000A_    }_x000D__x000A__x000D__x000A_    BEGIN {_x000D__x000A_        # Bind the parameter to a friendly variable_x000D__x000A_        $Name = $PsBoundParameters[$ParameterName]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    END {_x000D__x000A_        if ($Name) {_x000D__x000A_            $operator = $AssertionOperators.Values | &amp; $SafeCommands['Where-Object'] { $Name -eq $_.Name -or $_.Alias -contains $Name }_x000D__x000A_            $help = Get-Help $operator.InternalName -Examples -ErrorAction SilentlyContinue_x000D__x000A__x000D__x000A_            if (($help | &amp; $SafeCommands['Measure-Object']).Count -ne 1) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] ("No help found for Should operator '{0}'" -f ((Get-AssertionOperatorEntry $Name).InternalName))_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $help_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $AssertionOperators.Keys | &amp; $SafeCommands['ForEach-Object'] {_x000D__x000A_                $aliases = (Get-AssertionOperatorEntry $_).Alias_x000D__x000A__x000D__x000A_                # Return name and alias(es) for all registered Should operators_x000D__x000A_                [PSCustomObject] @{_x000D__x000A_                    Name  = $__x000D__x000A_                    Alias = $aliases -join ', '_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\In.ps1_x000D__x000A_function In {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    A convenience function that executes a script from a specified path._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Before the script block passed to the execute parameter is invoked,_x000D__x000A_    the current location is set to the path specified. Once the script_x000D__x000A_    block has been executed, the location will be reset to the location_x000D__x000A_    the script was in prior to calling In._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path that the execute block will be executed in._x000D__x000A__x000D__x000A_    .PARAMETER execute_x000D__x000A_    The script to be executed in the path provided._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://github.com/pester/Pester/wiki/In_x000D__x000A__x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="Default")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ParameterSetName="Default", Position=0)]_x000D__x000A_        [String] $Path,_x000D__x000A_        [Parameter(Mandatory, ParameterSetName="TestDrive", Position=0)]_x000D__x000A_        [Switch] $TestDrive,_x000D__x000A_        [Parameter(Mandatory, Position = 1)]_x000D__x000A_        [Alias("Execute")]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # test drive is not available during discovery, ideally no code should_x000D__x000A_    # depend on location during discovery, but I cannot rely on that, so unless_x000D__x000A_    # the path is TestDrive the path is changed in discovery as well as during_x000D__x000A_    # the run phase_x000D__x000A_    $doNothing = $false_x000D__x000A_    if ($TestDrive) {_x000D__x000A_        if (Is-Discovery) {_x000D__x000A_            $doNothing = $true_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $Path = (&amp; $SafeCommands['Get-PSDrive'] 'TestDrive').Root_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $originalPath = $pwd_x000D__x000A_    if (-not $doNothing) {_x000D__x000A_        &amp; $SafeCommands['Set-Location'] $Path_x000D__x000A_        $pwd = $Path_x000D__x000A_    }_x000D__x000A_    try {_x000D__x000A_        &amp; $ScriptBlock_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        if (-not $doNothing) {_x000D__x000A_            &amp; $SafeCommands['Set-Location'] $originalPath_x000D__x000A_            $pwd = $originalPath_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\InModuleScope.ps1_x000D__x000A_function InModuleScope {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_   Allows you to execute parts of a test script within the_x000D__x000A_   scope of a PowerShell script module._x000D__x000A_.DESCRIPTION_x000D__x000A_   By injecting some test code into the scope of a PowerShell_x000D__x000A_   script module, you can use non-exported functions, aliases_x000D__x000A_   and variables inside that module, to perform unit tests on_x000D__x000A_   its internal implementation._x000D__x000A__x000D__x000A_   InModuleScope may be used anywhere inside a Pester script,_x000D__x000A_   either inside or outside a Describe block._x000D__x000A_.PARAMETER ModuleName_x000D__x000A_   The name of the module into which the test code should be_x000D__x000A_   injected. This module must already be loaded into the current_x000D__x000A_   PowerShell session._x000D__x000A_.PARAMETER ScriptBlock_x000D__x000A_   The code to be executed within the script module._x000D__x000A_.PARAMETER Parameters_x000D__x000A_   A optional hashtable of parameters to be passed to the scriptblock._x000D__x000A_.PARAMETER ArgumentList_x000D__x000A_   A optional list of arguments to be passed to the scriptblock._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    # The script module:_x000D__x000A_    function PublicFunction_x000D__x000A_    {_x000D__x000A_        # Does something_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function PrivateFunction_x000D__x000A_    {_x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function PublicFunction_x000D__x000A__x000D__x000A_    # The test script:_x000D__x000A__x000D__x000A_    Import-Module MyModule_x000D__x000A__x000D__x000A_    InModuleScope MyModule {_x000D__x000A_        Describe 'Testing MyModule' {_x000D__x000A_            It 'Tests the Private function' {_x000D__x000A_                PrivateFunction | Should -Be $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    Normally you would not be able to access "PrivateFunction" from_x000D__x000A_    the PowerShell session, because the module only exported_x000D__x000A_    "PublicFunction".  Using InModuleScope allowed this call to_x000D__x000A_    "PrivateFunction" to work successfully._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/InModuleScope_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]_x000D__x000A_        $ModuleName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [HashTable]_x000D__x000A_        $Parameters,_x000D__x000A__x000D__x000A_        $ArgumentList_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $module = Get-ScriptModule -ModuleName $ModuleName -ErrorAction Stop_x000D__x000A__x000D__x000A_    # TODO: could this simply be $PSCmdlet.SessionState? Because the original scope we are moving from_x000D__x000A_    # is the scope in which this command is running, right?_x000D__x000A_    # $originalState = $Pester.SessionState_x000D__x000A_    # $originalScriptBlockScope = Get-ScriptBlockScope -ScriptBlock $ScriptBlock_x000D__x000A__x000D__x000A_    # try {_x000D__x000A_    # $sessionState = Set-SessionStateHint -PassThru -Hint "Module - $($module.Name)" -SessionState $module.SessionState_x000D__x000A_    # $Pester.SessionState = $sessionState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionState $sessionState_x000D__x000A__x000D__x000A_    # do {_x000D__x000A_    # Write-ScriptBlockInvocationHint -Hint "InModuleScope" -ScriptBlock $ScriptBlock_x000D__x000A_    &amp; $module $ScriptBlock @Parameters @ArgumentList_x000D__x000A_    # } until ($true)_x000D__x000A_    # }_x000D__x000A_    # finally {_x000D__x000A_    # $Pester.SessionState = $originalState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionStateInternal $originalScriptBlockScope_x000D__x000A_    # }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ScriptModule {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string] $ModuleName_x000D__x000A_    )_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Runtime "Searching for a module $ModuleName."_x000D__x000A_        }_x000D__x000A_        $modules = @(&amp; $SafeCommands['Get-Module'] -Name $ModuleName -All -ErrorAction Stop)_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        throw "No modules named '$ModuleName' are currently loaded."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($modules.Count -eq 0) {_x000D__x000A_        throw "No modules named '$ModuleName' are currently loaded."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $scriptModules = @($modules | &amp; $SafeCommands['Where-Object'] { $_.ModuleType -eq 'Script' })_x000D__x000A_    if ($scriptModules.Count -gt 1) {_x000D__x000A_        throw "Multiple script modules named '$ModuleName' are currently loaded.  Make sure to remove any extra copies of the module from your session before testing."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($scriptModules.Count -eq 0) {_x000D__x000A_        $actualTypes = @(_x000D__x000A_            $modules |_x000D__x000A_            &amp; $SafeCommands['Where-Object'] { $_.ModuleType -ne 'Script' } |_x000D__x000A_            &amp; $SafeCommands['Select-Object'] -ExpandProperty ModuleType -Unique_x000D__x000A_        )_x000D__x000A__x000D__x000A_        $actualTypes = $actualTypes -join ', '_x000D__x000A__x000D__x000A_        throw "Module '$ModuleName' is not a Script module.  Detected modules of the following types: '$actualTypes'"_x000D__x000A_    }_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Runtime "Found module $ModuleName version $($scriptModules[0].Version)."_x000D__x000A_    }_x000D__x000A_    return $scriptModules[0]_x000D__x000A_}_x000D__x000A_# file src\functions\It.ps1_x000D__x000A_function It {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Validates the results of a test inside of a Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_The It command is intended to be used inside of a Describe or Context Block._x000D__x000A_If you are familiar with the AAA pattern (Arrange-Act-Assert), the body of_x000D__x000A_the It block is the appropriate location for an assert. The convention is to_x000D__x000A_assert a single expectation for each It block. The code inside of the It block_x000D__x000A_should throw a terminating error if the expectation of the test is not met and_x000D__x000A_thus cause the test to fail. The name of the It block should expressively state_x000D__x000A_the expectation of the test._x000D__x000A__x000D__x000A_In addition to using your own logic to test expectations and throw exceptions,_x000D__x000A_you may also use Pester's Should command to perform assertions in plain language._x000D__x000A__x000D__x000A_You can intentionally mark It block result as inconclusive by using Set-TestInconclusive_x000D__x000A_command as the first tested statement in the It block._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_An expressive phrase describing the expected test outcome._x000D__x000A__x000D__x000A_.PARAMETER Test_x000D__x000A_The script block that should throw an exception if the_x000D__x000A_expectation of the test is not met.If you are following the_x000D__x000A_AAA pattern (Arrange-Act-Assert), this typically holds the_x000D__x000A_Assert._x000D__x000A__x000D__x000A_.PARAMETER Pending_x000D__x000A_Use this parameter to explicitly mark the test as work-in-progress/not implemented/pending when you_x000D__x000A_need to distinguish a test that fails because it is not finished yet from a tests_x000D__x000A_that fail as a result of changes being made in the code base. An empty test, that is a_x000D__x000A_test that contains nothing except whitespace or comments is marked as Pending by default._x000D__x000A__x000D__x000A_.PARAMETER Skip_x000D__x000A_Use this parameter to explicitly mark the test to be skipped. This is preferable to temporarily_x000D__x000A_commenting out a test, because the test remains listed in the output. Use the Strict parameter_x000D__x000A_of Invoke-Pester to force all skipped tests to fail._x000D__x000A__x000D__x000A_.PARAMETER TestCases_x000D__x000A_Optional array of hashtable (or any IDictionary) objects.  If this parameter is used,_x000D__x000A_Pester will call the test script block once for each table in the TestCases array,_x000D__x000A_splatting the dictionary to the test script block as input.  If you want the name of_x000D__x000A_the test to appear differently for each test case, you can embed tokens into the Name_x000D__x000A_parameter with the syntax 'Adds numbers &lt;A&gt; and &lt;B&gt;' (assuming you have keys named A and B_x000D__x000A_in your TestCases hashtables.)_x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to include or exclude tests containing the same Tag._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    $testCases = @(_x000D__x000A_        @{ a = 2;     b = 3;       expectedResult = 5 }_x000D__x000A_        @{ a = -2;    b = -2;      expectedResult = -4 }_x000D__x000A_        @{ a = -2;    b = 2;       expectedResult = 0 }_x000D__x000A_        @{ a = 'two'; b = 'three'; expectedResult = 'twothree' }_x000D__x000A_    )_x000D__x000A__x000D__x000A_    It 'Correctly adds &lt;a&gt; and &lt;b&gt; to get &lt;expectedResult&gt;' -TestCases $testCases {_x000D__x000A_        param ($a, $b, $expectedResult)_x000D__x000A__x000D__x000A_        $sum = Add-Numbers $a $b_x000D__x000A_        $sum | Should -Be $expectedResult_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Normal')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ScriptBlock] $Test,_x000D__x000A__x000D__x000A_        [Alias("ForEach")]_x000D__x000A_        [object[]] $TestCases,_x000D__x000A__x000D__x000A_        [String[]] $Tag,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Pending')]_x000D__x000A_        [Switch] $Pending,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        [Switch] $Skip_x000D__x000A__x000D__x000A_        # [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        # [String] $SkipBecause,_x000D__x000A__x000D__x000A_        # [Switch]$Focus_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($PSBoundParameters.ContainsKey('Pending')) {_x000D__x000A_        $PSBoundParameters.Remove('Pending')_x000D__x000A__x000D__x000A_        $Skip = $Pending_x000D__x000A_        # $SkipBecause = "This test is pending."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $Test) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test name has multiple lines and no test scriptblock is provided. Did you provide the test name?"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "No test scriptblock is provided. Did you put the opening curly brace on the next line?"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey('TestCases')) {_x000D__x000A_        if ($null -ne $TestCases -and 0 -lt @($TestCases).Count) {_x000D__x000A_            New-ParametrizedTest -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Data $TestCases -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # @() or $null is provided do nothing_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        New-Test -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\Mock.ps1_x000D__x000A__x000D__x000A__x000D__x000A_function Add-MockBehavior {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Behaviors,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Behavior_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($Behavior.IsDefault) {_x000D__x000A_        $Behaviors.Default.Add($Behavior)_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $Behaviors.Parametrized.Add($Behavior)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-MockBehavior {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $ContextInfo,_x000D__x000A_        [ScriptBlock] $MockWith = { },_x000D__x000A_        [Switch] $Verifiable,_x000D__x000A_        [ScriptBlock] $ParameterFilter,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Hook,_x000D__x000A_        [string[]]$RemoveParameterType,_x000D__x000A_        [string[]]$RemoveParameterValidation_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [PSCustomObject] @{_x000D__x000A_        CommandName = $ContextInfo.Command.Name_x000D__x000A_        ModuleName  = if ($ContextInfo.IsFromRequestedModule) { $ContextInfo.Module.Name } else { $null }_x000D__x000A_        Filter      = $ParameterFilter_x000D__x000A_        IsDefault   = $null -eq $ParameterFilter_x000D__x000A_        Verifiable  = $Verifiable_x000D__x000A_        ScriptBlock = $MockWith_x000D__x000A_        Hook        = $Hook_x000D__x000A_        PSTypeName  = 'MockBehavior'_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function EscapeSingleQuotedStringContent ($Content) {_x000D__x000A_    if ($global:PSVersionTable.PSVersion.Major -ge 5) {_x000D__x000A_        [System.Management.Automation.Language.CodeGeneration]::EscapeSingleQuotedStringContent($Content)_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $Content -replace "['‘’‚‛]", '$&amp;$&amp;'_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Create-MockHook ($contextInfo, $InvokeMockCallback) {_x000D__x000A_    $commandName = $contextInfo.Command.Name_x000D__x000A_    $moduleName = if ($contextInfo.IsFromRequestedModule) { $contextInfo.Module.Name } else { '' }_x000D__x000A_    $metadata = $null_x000D__x000A_    $cmdletBinding = ''_x000D__x000A_    $paramBlock = ''_x000D__x000A_    $dynamicParamBlock = ''_x000D__x000A_    $dynamicParamScriptBlock = $null_x000D__x000A__x000D__x000A_    if ($contextInfo.Command.psobject.Properties['ScriptBlock'] -or $contextInfo.Command.CommandType -eq 'Cmdlet') {_x000D__x000A_        $metadata = [System.Management.Automation.CommandMetaData]$contextInfo.Command_x000D__x000A_        $null = $metadata.Parameters.Remove('Verbose')_x000D__x000A_        $null = $metadata.Parameters.Remove('Debug')_x000D__x000A_        $null = $metadata.Parameters.Remove('ErrorAction')_x000D__x000A_        $null = $metadata.Parameters.Remove('WarningAction')_x000D__x000A_        $null = $metadata.Parameters.Remove('ErrorVariable')_x000D__x000A_        $null = $metadata.Parameters.Remove('WarningVariable')_x000D__x000A_        $null = $metadata.Parameters.Remove('OutVariable')_x000D__x000A_        $null = $metadata.Parameters.Remove('OutBuffer')_x000D__x000A__x000D__x000A_        # Some versions of PowerShell may include dynamic parameters here_x000D__x000A_        # We will filter them out and add them at the end to be_x000D__x000A_        # compatible with both earlier and later versions_x000D__x000A_        $dynamicParams = foreach ($m in $metadata.Parameters.Values) { if ($m.IsDynamic) { $m } }_x000D__x000A_        if ($null -ne $dynamicParams) {_x000D__x000A_            foreach ($p in $dynamicParams) {_x000D__x000A_                $null = $metadata.Parameters.Remove($d.name)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $cmdletBinding = [Management.Automation.ProxyCommand]::GetCmdletBindingAttribute($metadata)_x000D__x000A_        if ($global:PSVersionTable.PSVersion.Major -ge 3 -and $contextInfo.Command.CommandType -eq 'Cmdlet') {_x000D__x000A_            if ($cmdletBinding -ne '[CmdletBinding()]') {_x000D__x000A_                $cmdletBinding = $cmdletBinding.Insert($cmdletBinding.Length - 2, ',')_x000D__x000A_            }_x000D__x000A_            $cmdletBinding = $cmdletBinding.Insert($cmdletBinding.Length - 2, 'PositionalBinding=$false')_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # Will modify $metadata object in-place_x000D__x000A_        $originalMetadata = $metadata_x000D__x000A_        $metadata = Repair-ConflictingParameters -Metadata $metadata -RemoveParameterType $RemoveParameterType -RemoveParameterValidation $RemoveParameterValidation_x000D__x000A_        $paramBlock = [Management.Automation.ProxyCommand]::GetParamBlock($metadata)_x000D__x000A__x000D__x000A_        if ($contextInfo.Command.CommandType -eq 'Cmdlet') {_x000D__x000A_            $dynamicParamBlock = "dynamicparam { &amp; `$MyInvocation.MyCommand.Mock.Get_MockDynamicParameter -CmdletName '$($contextInfo.Command.Name)' -Parameters `$PSBoundParameters }"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $dynamicParamStatements = Get-DynamicParamBlock -ScriptBlock $contextInfo.Command.ScriptBlock_x000D__x000A__x000D__x000A_            if ($dynamicParamStatements -match '\S') {_x000D__x000A_                $metadataSafeForDynamicParams = [System.Management.Automation.CommandMetaData]$contextInfo.Command_x000D__x000A_                foreach ($param in $metadataSafeForDynamicParams.Parameters.Values) {_x000D__x000A_                    $param.ParameterSets.Clear()_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $paramBlockSafeForDynamicParams = [System.Management.Automation.ProxyCommand]::GetParamBlock($metadataSafeForDynamicParams)_x000D__x000A_                $comma = if ($metadataSafeForDynamicParams.Parameters.Count -gt 0) {_x000D__x000A_                    ','_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    ''_x000D__x000A_                }_x000D__x000A_                $dynamicParamBlock = "dynamicparam { &amp; `$MyInvocation.MyCommand.Mock.Get_MockDynamicParameter -ModuleName '$moduleName' -FunctionName '$commandName' -Parameters `$PSBoundParameters -Cmdlet `$PSCmdlet -DynamicParamScriptBlock `$MyInvocation.MyCommand.Mock.Hook.DynamicParamScriptBlock }"_x000D__x000A__x000D__x000A_                $code = @"_x000D__x000A_                    $cmdletBinding_x000D__x000A_                    param(_x000D__x000A_                        [object] `${P S Cmdlet}$comma_x000D__x000A_                        $paramBlockSafeForDynamicParams_x000D__x000A_                    )_x000D__x000A__x000D__x000A_                    `$PSCmdlet = `${P S Cmdlet}_x000D__x000A__x000D__x000A_                    $dynamicParamStatements_x000D__x000A_"@_x000D__x000A__x000D__x000A_                $dynamicParamScriptBlock = [scriptblock]::Create($code)_x000D__x000A__x000D__x000A_                $sessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($contextInfo.Command.ScriptBlock)_x000D__x000A__x000D__x000A_                if ($null -ne $sessionStateInternal) {_x000D__x000A_                    $script:ScriptBlockSessionStateInternalProperty.SetValue($dynamicParamScriptBlock, $sessionStateInternal)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $mockPrototype = @"_x000D__x000A_    if (`$null -ne `$MyInvocation.MyCommand.Mock.Write_PesterDebugMessage) { &amp; `$MyInvocation.MyCommand.Mock.Write_PesterDebugMessage -Message "Mock bootstrap function #FUNCTIONNAME# called from block #BLOCK#." }_x000D__x000A_    `$MyInvocation.MyCommand.Mock.Args = @()_x000D__x000A_    if (#CANCAPTUREARGS#) {_x000D__x000A_        if (`$null -ne `$MyInvocation.MyCommand.Mock.Write_PesterDebugMessage) { &amp; `$MyInvocation.MyCommand.Mock.Write_PesterDebugMessage -Message "Capturing arguments of the mocked command." }_x000D__x000A_        `$MyInvocation.MyCommand.Mock.Args = `$MyInvocation.MyCommand.Mock.ExecutionContext.SessionState.PSVariable.GetValue('local:args')_x000D__x000A_    }_x000D__x000A_    `$MyInvocation.MyCommand.Mock.PSCmdlet = `$MyInvocation.MyCommand.Mock.ExecutionContext.SessionState.PSVariable.GetValue('local:PSCmdlet')_x000D__x000A__x000D__x000A__x000D__x000A_    `if (`$null -ne `$MyInvocation.MyCommand.Mock.PSCmdlet)_x000D__x000A_    {_x000D__x000A_        `$MyInvocation.MyCommand.Mock.SessionState = `$MyInvocation.MyCommand.Mock.PSCmdlet.SessionState_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # MockCallState initialization is injected only into the begin block by the code that generates this prototype_x000D__x000A_    # also it is not a good idea to share it via the function local data because then it will get overwritten by nested_x000D__x000A_    # mock if there is any, instead it should be a varible that gets defined in begin and so it survives during the whole_x000D__x000A_    # pipeline, but does not overwrite other variables, because we are running in different scopes. Mindblowing._x000D__x000A_    &amp; `$MyInvocation.MyCommand.Mock.Invoke_Mock -CommandName '#FUNCTIONNAME#' -ModuleName '#MODULENAME#' ```_x000D__x000A_        -BoundParameters `$PSBoundParameters ```_x000D__x000A_        -ArgumentList `$MyInvocation.MyCommand.Mock.Args ```_x000D__x000A_        -CallerSessionState `$MyInvocation.MyCommand.Mock.SessionState ```_x000D__x000A_        -MockCallState `$_____MockCallState ```_x000D__x000A_        -FromBlock '#BLOCK#' ```_x000D__x000A_        -Hook `$MyInvocation.MyCommand.Mock.Hook #INPUT#_x000D__x000A_"@_x000D__x000A_    $newContent = $mockPrototype_x000D__x000A_    $newContent = $newContent -replace '#FUNCTIONNAME#', (EscapeSingleQuotedStringContent $CommandName)_x000D__x000A_    $newContent = $newContent -replace '#MODULENAME#', (EscapeSingleQuotedStringContent $ModuleName)_x000D__x000A__x000D__x000A_    $canCaptureArgs = '$true'_x000D__x000A_    if ($contextInfo.Command.CommandType -eq 'Cmdlet' -or_x000D__x000A_        ($contextInfo.Command.CommandType -eq 'Function' -and $contextInfo.Command.CmdletBinding)) {_x000D__x000A_        $canCaptureArgs = '$false'_x000D__x000A_    }_x000D__x000A_    $newContent = $newContent -replace '#CANCAPTUREARGS#', $canCaptureArgs_x000D__x000A__x000D__x000A_    $code = @"_x000D__x000A_    $cmdletBinding_x000D__x000A_    param ( $paramBlock )_x000D__x000A_    $dynamicParamBlock_x000D__x000A_    begin_x000D__x000A_    {_x000D__x000A_        # MockCallState is set only in begin block, to persist state between_x000D__x000A_        # begin, process, and end blocks_x000D__x000A_        `$_____MockCallState = @{}_x000D__x000A_        $($newContent -replace '#BLOCK#', 'Begin' -replace '#INPUT#')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process_x000D__x000A_    {_x000D__x000A_        $($newContent -replace '#BLOCK#', 'Process' -replace '#INPUT#', '-InputObject @($input)')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end_x000D__x000A_    {_x000D__x000A_        $($newContent -replace '#BLOCK#', 'End' -replace '#INPUT#')_x000D__x000A_    }_x000D__x000A_"@_x000D__x000A__x000D__x000A_    $mockScript = [scriptblock]::Create($code)_x000D__x000A__x000D__x000A_    $mock = @{_x000D__x000A_        OriginalCommand         = $contextInfo.Command_x000D__x000A_        CommandName             = $commandName_x000D__x000A_        SessionState            = $contextInfo.SessionState_x000D__x000A_        CallerSessionState      = $contextInfo.CallerSessionState_x000D__x000A_        Metadata                = $metadata_x000D__x000A_        DynamicParamScriptBlock = $dynamicParamScriptBlock_x000D__x000A_        Aliases                 = [Collections.Generic.List[object]]@($commandName)_x000D__x000A_        BootstrapFunctionName   = 'PesterMock_' + [Guid]::NewGuid().Guid_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($mock.OriginalCommand.ModuleName) {_x000D__x000A_        $mock.Aliases.Add("$($mock.OriginalCommand.ModuleName)\$($CommandName)")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ('Application' -eq $Mock.OriginalCommand.CommandType) {_x000D__x000A_        $aliasWithoutExt = $CommandName -replace $Mock.OriginalCommand.Extension_x000D__x000A__x000D__x000A_        $mock.Aliases.Add($aliasWithoutExt)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $parameters = @{_x000D__x000A_        BootstrapFunctionName = $mock.BootstrapFunctionName_x000D__x000A_        Definition            = $mockScript_x000D__x000A_        Aliases               = $mock.Aliases_x000D__x000A__x000D__x000A_        Set_Alias             = $SafeCommands["Set-Alias"]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $defineFunctionAndAliases = {_x000D__x000A_        param($___Mock___parameters)_x000D__x000A_        # Make sure the you don't use _______parameters variable here, otherwise you overwrite_x000D__x000A_        # the variable that is defined in the same scope and the subsequent invocation of scrips will_x000D__x000A_        # be seriously broken (e.g. you will start resolving setups). But such is life of running in once scope._x000D__x000A_        # from upper scope for no reason. But the reason is that you deleted ______param in this scope,_x000D__x000A_        # and so ______param from the parent scope was inherited_x000D__x000A__x000D__x000A_        ## THIS RUNS IN USER SCOPE, BE CAREFUL WHAT YOU PUBLISH AND COSUME_x000D__x000A__x000D__x000A__x000D__x000A_        # it is possible to remove the script: (and -Scope Script) from here and from the alias, which makes the Mock scope just like a function._x000D__x000A_        # but that breaks mocking inside of Pester itself, because the mock is defined in this function and dies with it_x000D__x000A_        # this is a cool concept to play with, but scoping mocks more granularly than per It is not something people asked for, and cleaning up_x000D__x000A_        # mocks is trivial now they are wrote in distinct tables based on where they are defined, so let's just do it as before, script scoped_x000D__x000A_        # function and alias, and cleaning it up in teardown_x000D__x000A__x000D__x000A_        # define the function and returns an array so we need to take the function out_x000D__x000A_        @($ExecutionContext.InvokeProvider.Item.Set("Function:\script:$($___Mock___parameters.BootstrapFunctionName)", $___Mock___parameters.Definition, $true, $true))[0]_x000D__x000A__x000D__x000A_        # define all aliases_x000D__x000A_        foreach ($______current in $___Mock___parameters.Aliases) {_x000D__x000A_            # this does not work because the syntax does not work, but would be faster_x000D__x000A_            # $ExecutionContext.InvokeProvider.Item.Set("Alias:script\:$______current", $___Mock___parameters.BootstrapFunctionName, $true, $true)_x000D__x000A_            &amp; $___Mock___parameters.Set_Alias -Name $______current -Value $___Mock___parameters.BootstrapFunctionName -Scope Script_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # clean up the variables because we are injecting them to the current scope_x000D__x000A_        $ExecutionContext.SessionState.PSVariable.Remove('______current')_x000D__x000A_        $ExecutionContext.SessionState.PSVariable.Remove('___Mock___parameters')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $definedFunction = Invoke-InMockScope -SessionState $mock.SessionState -ScriptBlock $defineFunctionAndAliases -Arguments @($parameters) -NoNewScope_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Defined new hook with bootstrap function $($parameters.BootstrapFunctionName)$(if ($parameters.Aliases.Count -gt 0) {" and aliases $($parameters.Aliases -join ", ")"})."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # attaching this object on the newly created function_x000D__x000A_    # so it has access to our internal and safe functions directly_x000D__x000A_    # and also to avoid any local variables, because everything is_x000D__x000A_    # accessed via $MyInvocation.MyCommand_x000D__x000A_    $functionLocalData = @{_x000D__x000A_        Args                     = $null_x000D__x000A_        SessionState             = $null_x000D__x000A__x000D__x000A_        Invoke_Mock              = $InvokeMockCallBack_x000D__x000A_        Get_MockDynamicParameter = $SafeCommands["Get-MockDynamicParameter"]_x000D__x000A_        # returning empty scriptblock when we should not write debug to avoid patching it in mock prototype_x000D__x000A_        Write_PesterDebugMessage = if ($PesterPreference.Debug.WriteDebugMessages.Value) { { param($Message) &amp; $SafeCommands["Write-PesterDebugMessage"] -Scope MockCore -Message $Message } } else { $null }_x000D__x000A__x000D__x000A_        # used as temp variable_x000D__x000A_        PSCmdlet                 = $null_x000D__x000A__x000D__x000A_        # data from the time we captured and created this mock_x000D__x000A_        Hook                     = $mock_x000D__x000A__x000D__x000A_        ExecutionContext         = $ExecutionContext_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $definedFunction.psobject.properties.Add([Pester.Factory]::CreateNoteProperty('Mock', $functionLocalData))_x000D__x000A__x000D__x000A_    $mock_x000D__x000A_}_x000D__x000A__x000D__x000A_function Should-InvokeVerifiableInternal {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Behaviors_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $unverified = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    foreach ($b in $Behaviors) {_x000D__x000A_        if ($b.Verifiable) {_x000D__x000A_            $unverified.Add($b)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($unVerified.Count -gt 0) {_x000D__x000A_        foreach ($b in $unVerified) {_x000D__x000A_            $message = "$([System.Environment]::NewLine) Expected $($b.CommandName) "_x000D__x000A_            if ($b.ModuleName) {_x000D__x000A_                $message += "in module $($b.ModuleName) "_x000D__x000A_            }_x000D__x000A_            $message += "to be called with $($b.Filter)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return [PSCustomObject] @{_x000D__x000A_            Succeeded      = $false_x000D__x000A_            FailureMessage = $message_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $true_x000D__x000A_        FailureMessage = $null_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Should-InvokeInternal {_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'ParameterFilter')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [hashtable] $ContextInfo,_x000D__x000A__x000D__x000A_        [int]$Times = 1,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ParameterFilter')]_x000D__x000A_        [ScriptBlock]$ParameterFilter = { $True },_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ExclusiveFilter', Mandatory = $true)]_x000D__x000A_        [scriptblock] $ExclusiveFilter,_x000D__x000A__x000D__x000A_        [string] $ModuleName,_x000D__x000A__x000D__x000A_        [switch]$Exactly,_x000D__x000A_        [switch]$Negate,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [HashTable] $MockTable_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq 'ParameterFilter') {_x000D__x000A_        $filter = $ParameterFilter_x000D__x000A_        $filterIsExclusive = $false_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $filter = $ExclusiveFilter_x000D__x000A_        $filterIsExclusive = $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $PSBoundParameters.ContainsKey('ModuleName') -and $null -ne $SessionState.Module) {_x000D__x000A_        $ModuleName = $SessionState.Module.Name_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $ModuleName = if ($ContextInfo.IsFromRequestedModule) { $ContextInfo.Module.Name } else { $null }_x000D__x000A_    $CommandName = $ContextInfo.Command.Name_x000D__x000A__x000D__x000A_    $callHistory = $MockTable["$ModuleName||$CommandName"]_x000D__x000A__x000D__x000A_    $moduleMessage = ''_x000D__x000A_    if ($ModuleName) {_x000D__x000A_        $moduleMessage = " in module $ModuleName"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # if (-not $callHistory) {_x000D__x000A_    #     throw "You did not declare a mock of the $commandName Command${moduleMessage}."_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    $matchingCalls = [System.Collections.Generic.List[object]]@()_x000D__x000A_    $nonMatchingCalls = [System.Collections.Generic.List[object]]@()_x000D__x000A__x000D__x000A_    foreach ($historyEntry in $callHistory) {_x000D__x000A__x000D__x000A_        $params = @{_x000D__x000A_            ScriptBlock     = $filter_x000D__x000A_            BoundParameters = $historyEntry.BoundParams_x000D__x000A_            ArgumentList    = $historyEntry.Args_x000D__x000A_            Metadata        = $ContextInfo.Hook.Metadata_x000D__x000A_            SessionState    = $ContextInfo.Hook.CallerSessionState_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # if ($null -ne $ContextInfo.Hook.Metadata -and $null -ne $params.ScriptBlock) {_x000D__x000A_        #     $params.ScriptBlock = New-BlockWithoutParameterAliasesNew-BlockWithoutParameterAliases -Metadata $ContextInfo.Hook.Metadata -Block $params.ScriptBlock_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        if (Test-ParameterFilter @params) {_x000D__x000A_            $null = $matchingCalls.Add($historyEntry)_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $null = $nonMatchingCalls.Add($historyEntry)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Negate) {_x000D__x000A_        # Negative checks_x000D__x000A_        if ($matchingCalls.Count -eq $Times -and ($Exactly -or !$PSBoundParameters.ContainsKey("Times"))) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected ${commandName}${moduleMessage} not to be called exactly $Times times"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($matchingCalls.Count -ge $Times -and !$Exactly) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected ${commandName}${moduleMessage} to be called less than $Times times but was called $($matchingCalls.Count) times"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    } else {_x000D__x000A_        if ($matchingCalls.Count -ne $Times -and ($Exactly -or ($Times -eq 0))) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected ${commandName}${moduleMessage} to be called $Times times exactly but was called $($matchingCalls.Count) times"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($matchingCalls.Count -lt $Times) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected ${commandName}${moduleMessage} to be called at least $Times times but was called $($matchingCalls.Count) times"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($filterIsExclusive -and $nonMatchingCalls.Count -gt 0) {_x000D__x000A_            return [PSCustomObject] @{_x000D__x000A_                Succeeded      = $false_x000D__x000A_                FailureMessage = "Expected ${commandName}${moduleMessage} to only be called with with parameters matching the specified filter, but $($nonMatchingCalls.Count) non-matching calls were made"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return [PSCustomObject] @{_x000D__x000A_        Succeeded      = $true_x000D__x000A_        FailureMessage = $null_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-MockHook {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Hooks_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $removeMockStub = {_x000D__x000A_        param (_x000D__x000A_            [string] $CommandName,_x000D__x000A_            [string[]] $Aliases,_x000D__x000A_            [bool] $Write_Debug_Enabled,_x000D__x000A_            $Write_Debug_x000D__x000A_        )_x000D__x000A__x000D__x000A_        if ($ExecutionContext.InvokeProvider.Item.Exists("Function:\$CommandName", $true, $true)) {_x000D__x000A_            $ExecutionContext.InvokeProvider.Item.Remove("Function:\$CommandName", $false, $true, $true)_x000D__x000A_            if ($Write_Debug_Enabled) {_x000D__x000A_                &amp; $Write_Debug -Scope Mock -Message "Removed function $($CommandName)$(if ($ExecutionContext.SessionState.Module) { " from module $($ExecutionContext.SessionState.Module) session state"} else { " from script session state"})."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # # this runs from OnContainerRunEnd in the mock plugin, it might be running unnecessarilly_x000D__x000A_            # if ($Write_Debug_Enabled) {_x000D__x000A_            #     &amp; $Write_Debug -Scope Mock -Message "ERROR: Function $($CommandName) was not found$(if ($ExecutionContext.SessionState.Module) { " in module $($ExecutionContext.SessionState.Module) session state"} else { " in script session state"})."_x000D__x000A_            # }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($alias in $Aliases) {_x000D__x000A_            if ($ExecutionContext.InvokeProvider.Item.Exists("Alias:$alias", $true, $true)) {_x000D__x000A_                $ExecutionContext.InvokeProvider.Item.Remove("Alias:$alias", $false, $true, $true)_x000D__x000A_                if ($Write_Debug_Enabled) {_x000D__x000A_                    &amp; $Write_Debug -Scope Mock -Message "Removed alias $($alias)$(if ($ExecutionContext.SessionState.Module) { " from module $($ExecutionContext.SessionState.Module) session state"} else { " from script session state"})."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # # this runs from OnContainerRunEnd in the mock plugin, it might be running unnecessarilly_x000D__x000A_                # if ($Write_Debug_Enabled) {_x000D__x000A_                #     &amp; $Write_Debug -Scope Mock -Message "ERROR: Alias $($alias) was not found$(if ($ExecutionContext.SessionState.Module) { " in module $($ExecutionContext.SessionState.Module) session state"} else { " in script session state"})."_x000D__x000A_                # }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Write_Debug_Enabled = $PesterPreference.Debug.WriteDebugMessages.Value_x000D__x000A_    $Write_Debug = $(if ($PesterPreference.Debug.WriteDebugMessages.Value) { $SafeCommands["Write-PesterDebugMessage"] } else { $null })_x000D__x000A__x000D__x000A_    foreach ($h in $Hooks) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Removing function $($h.BootstrapFunctionName)$(if($h.Aliases) { " and aliases $($h.Aliases -join ", ")" }) for$(if($h.ModuleName) { " $($h.ModuleName) -" }) $($h.CommandName)."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $null = Invoke-InMockScope -SessionState $h.SessionState -ScriptBlock $removeMockStub -Arguments $h.BootstrapFunctionName, $h.Aliases, $Write_Debug_Enabled, $Write_Debug_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Resolve-Command {_x000D__x000A_    param (_x000D__x000A_        [string] $CommandName,_x000D__x000A_        [string] $ModuleName,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # saving the caller session state here, below the command is looked up and_x000D__x000A_    # the $SessionState is overwritten with the session state in which the command_x000D__x000A_    # was found (if -ModuleName was specified), but we will be running the mock body_x000D__x000A_    # in the caller scope (in the test scope), to be able to use the variables defined in the test inside of the mock_x000D__x000A_    # so we need to hold onto the caller scope_x000D__x000A_    $callerSessionState = $SessionState_x000D__x000A__x000D__x000A_    $command = $null_x000D__x000A_    $module = $null_x000D__x000A__x000D__x000A_    $findAndResolveCommand = {_x000D__x000A_        param ($Name)_x000D__x000A__x000D__x000A_        # this scriptblock gets bound to multiple session states so we can find_x000D__x000A_        # commands in module or in caller scope_x000D__x000A_        $command = $ExecutionContext.InvokeCommand.GetCommand($Name, 'All')_x000D__x000A_        # resolve command from alias recursively_x000D__x000A_        while ($null -ne $command -and $command.CommandType -eq [System.Management.Automation.CommandTypes]::Alias) {_x000D__x000A_            $resolved = $command.ResolvedCommand_x000D__x000A_            if ($null -eq $resolved) {_x000D__x000A_                throw "Alias $($command.Name) points to a command $($command.Definition) that but the actual commands no longer exists!"_x000D__x000A_            }_x000D__x000A_            $command = $resolved_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return $command_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Resolving command $CommandName."_x000D__x000A_    }_x000D__x000A_    if ($ModuleName) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "ModuleName was specified searching for the command in module $ModuleName."_x000D__x000A_        }_x000D__x000A_        $module = Get-ScriptModule -ModuleName $ModuleName -ErrorAction Stop_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "Found module $($module.Name) version $($module.Version)."_x000D__x000A_        }_x000D__x000A_        # this is the target session state in which we will insert the mock_x000D__x000A_        $SessionState = $module.SessionState_x000D__x000A_        $command = &amp; $module $findAndResolveCommand -Name $CommandName_x000D__x000A_        if ($command) {_x000D__x000A_            if ($command.Module -eq $module) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock "Found the command $($CommandName) in module $($module.Name) version $($module.Version)$(if ($CommandName -ne $command.Name) {" and it resolved to $($command.Name)"})."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock "Found the command $($CommandName) in a different module$(if ($CommandName -ne $command.Name) {" and it resolved to $($command.Name)"})."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Did not find command $CommandName in module $($module.Name) version $($module.Version)."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $command) {_x000D__x000A__x000D__x000A__x000D__x000A_        # TODO: this resolves the command in the caller scope if the command was not found in the module scope, but that does not make sense does it? When the user specifies that he want's to use Module it should use just Module. Disabling the fall through makes tests fail._x000D__x000A__x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "Searching for command $CommandName in the caller scope."_x000D__x000A_        }_x000D__x000A_        Set-ScriptBlockScope -ScriptBlock $findAndResolveCommand -SessionState $SessionState_x000D__x000A_        $command = &amp; $findAndResolveCommand -Name $CommandName_x000D__x000A_        if ($command) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Found the command $CommandName in the caller scope$(if ($CommandName -ne $command.Name) {" and it resolved to $($command.Name)"})."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Did not find command $CommandName in the caller scope."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $command) {_x000D__x000A_        throw ([System.Management.Automation.CommandNotFoundException] "Could not find Command $CommandName")_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if ($command.Name -like 'PesterMock_*') {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope MockCore "The resolved command is a mock bootstrap function, pointing the mock to the same command info and session state as the original mock."_x000D__x000A_        }_x000D__x000A_        # the target module into which we inserted the mock_x000D__x000A_        $module = $command.Mock.Hook.SessionState.Module_x000D__x000A_        return @{_x000D__x000A_            Command                 = $command.Mock.Hook.OriginalCommand_x000D__x000A_            # the session state of the target module_x000D__x000A_            SessionState            = $command.Mock.Hook.SessionState_x000D__x000A_            # the session state in which we invoke the mock body (where the test runs)_x000D__x000A_            CallerSessionState      = $command.Mock.Hook.CallerSessionState_x000D__x000A_            # the module that defines the command_x000D__x000A_            Module                  = $command.Mock.Hook.OriginalCommand.Module_x000D__x000A_            # true if we inserted the mock into a module_x000D__x000A_            IsFromModule            = $null -ne $module_x000D__x000A_            # true if the commmand comes from the target module_x000D__x000A_            IsFromRequestedModule   = $null -ne $module -and $ModuleName -eq $command.Mock.Hook.OriginalCommand.Module.Name_x000D__x000A_            IsMockBootstrapFunction = $true_x000D__x000A_            Hook                    = $command.Mock.Hook_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $module = $command.Module_x000D__x000A_    return @{_x000D__x000A_        Command                 = $command_x000D__x000A_        SessionState            = $SessionState_x000D__x000A_        CallerSessionState      = $callerSessionState_x000D__x000A_        Module                  = $module_x000D__x000A__x000D__x000A_        IsFromModule            = $null -ne $module_x000D__x000A_        IsFromRequestedModule   = $null -ne $module -and $module.Name -eq $ModuleName_x000D__x000A_        IsMockBootstrapFunction = $false_x000D__x000A_        Hook                    = $null_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-MockInternal {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]_x000D__x000A_        $CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [hashtable] $MockCallState,_x000D__x000A__x000D__x000A_        [string]_x000D__x000A_        $ModuleName,_x000D__x000A__x000D__x000A_        [hashtable]_x000D__x000A_        $BoundParameters = @{ },_x000D__x000A__x000D__x000A_        [object[]]_x000D__x000A_        $ArgumentList = @(),_x000D__x000A__x000D__x000A_        [object] $CallerSessionState,_x000D__x000A__x000D__x000A_        [ValidateSet('Begin', 'Process', 'End')]_x000D__x000A_        [string] $FromBlock,_x000D__x000A__x000D__x000A_        [object] $InputObject,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Behaviors,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [HashTable]_x000D__x000A_        $CallHistory,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Hook_x000D__x000A_    )_x000D__x000A__x000D__x000A_    switch ($FromBlock) {_x000D__x000A_        Begin {_x000D__x000A_            $MockCallState['InputObjects'] = [System.Collections.Generic.List[object]]@()_x000D__x000A_            $MockCallState['ShouldExecuteOriginalCommand'] = $false_x000D__x000A_            $MockCallState['BeginBoundParameters'] = $BoundParameters.Clone()_x000D__x000A_            # argument list must not be null, if the bootstrap functions has no parameters_x000D__x000A_            # we get null and need to replace it with empty array to make the splatting work_x000D__x000A_            # later on._x000D__x000A_            $MockCallState['BeginArgumentList'] = $ArgumentList_x000D__x000A__x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Process {_x000D__x000A_            # the incoming caller session state is the place from where_x000D__x000A_            # the mock hook is invoked, this does not have to be the same as_x000D__x000A_            # the test "caller scope" that we saved earlier, we won't use the_x000D__x000A_            # test caller scope here, but the scope from which the mock was called_x000D__x000A_            $SessionState = if ($CallerSessionState) { $CallerSessionState } else { $Hook.SessionState }_x000D__x000A__x000D__x000A_            # the @() are needed for powerShell3 otherwise it throws CheckAutomationNullInCommandArgumentArray (unless there is any breakpoint defined anywhere, then it works just fine :DDD)_x000D__x000A_            $behavior = FindMatchingBehavior -Behaviors @($Behaviors) -BoundParameters $BoundParameters -ArgumentList @($ArgumentList) -SessionState $SessionState -Hook $Hook_x000D__x000A__x000D__x000A_            if ($null -ne $behavior) {_x000D__x000A_                $call = @{_x000D__x000A_                    BoundParams = $BoundParameters_x000D__x000A_                    Args        = $ArgumentList_x000D__x000A_                    Hook        = $Hook_x000D__x000A_                    Behavior    = $behavior_x000D__x000A_                }_x000D__x000A_                $key = "$($behavior.ModuleName)||$($behavior.CommandName)"_x000D__x000A_                if (-not $CallHistory.ContainsKey($key)) {_x000D__x000A_                    $CallHistory.Add($key, [Collections.Generic.List[object]]@($call))_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $CallHistory[$key].Add($call)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                ExecuteBehavior -Behavior $behavior `_x000D__x000A_                    -Hook $Hook `_x000D__x000A_                    -BoundParameters $BoundParameters `_x000D__x000A_                    -ArgumentList @($ArgumentList)_x000D__x000A__x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $MockCallState['ShouldExecuteOriginalCommand'] = $true_x000D__x000A_                if ($null -ne $InputObject) {_x000D__x000A_                    $null = $MockCallState['InputObjects'].AddRange(@($InputObject))_x000D__x000A_                }_x000D__x000A__x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        End {_x000D__x000A_            if ($MockCallState['ShouldExecuteOriginalCommand']) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock "Invoking the original command."_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $MockCallState['BeginBoundParameters'] = Reset-ConflictingParameters -BoundParameters $MockCallState['BeginBoundParameters']_x000D__x000A__x000D__x000A_                if ($MockCallState['InputObjects'].Count -gt 0) {_x000D__x000A_                    $scriptBlock = {_x000D__x000A_                        param ($Command, $ArgumentList, $BoundParameters, $InputObjects)_x000D__x000A_                        $InputObjects | &amp; $Command @ArgumentList @BoundParameters_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $scriptBlock = {_x000D__x000A_                        param ($Command, $ArgumentList, $BoundParameters, $InputObjects)_x000D__x000A_                        &amp; $Command @ArgumentList @BoundParameters_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $SessionState = if ($CallerSessionState) {_x000D__x000A_                    $CallerSessionState_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $Hook.SessionState_x000D__x000A_                }_x000D__x000A__x000D__x000A_                Set-ScriptBlockScope -ScriptBlock $scriptBlock -SessionState $SessionState_x000D__x000A__x000D__x000A_                # In order to mock Set-Variable correctly we need to write the variable_x000D__x000A_                # two scopes above_x000D__x000A_                if ("Set-Variable" -eq $Hook.OriginalCommand.Name) {_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        Write-PesterDebugMessage -Scope Mock "Original command is Set-Variable, patching the call."_x000D__x000A_                    }_x000D__x000A_                    if ($MockCallState['BeginBoundParameters'].Keys -notcontains "Scope") {_x000D__x000A_                        $MockCallState['BeginBoundParameters'].Add( "Scope", 2)_x000D__x000A_                    }_x000D__x000A_                    # local is the same as scope 0, in that case we also write to scope 2_x000D__x000A_                    elseif ("Local", "0" -contains $MockCallState['BeginBoundParameters'].Scope) {_x000D__x000A_                        $MockCallState['BeginBoundParameters'].Scope = 2_x000D__x000A_                    }_x000D__x000A_                    elseif ($MockCallState['BeginBoundParameters'].Scope -match "\d+") {_x000D__x000A_                        $MockCallState['BeginBoundParameters'].Scope = 2 + $matches[0]_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        # not sure what the user did, but we won't change it_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($null -eq ($MockCallState['BeginArgumentList'])) {_x000D__x000A_                    $arguments = @()_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $arguments = $MockCallState['BeginArgumentList']_x000D__x000A_                }_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-ScriptBlockInvocationHint -Hint "Mock - Original Command" -ScriptBlock $scriptBlock_x000D__x000A_                }_x000D__x000A_                &amp; $scriptBlock -Command $Hook.OriginalCommand `_x000D__x000A_                    -ArgumentList $arguments `_x000D__x000A_                    -BoundParameters $MockCallState['BeginBoundParameters'] `_x000D__x000A_                    -InputObjects $MockCallState['InputObjects']_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function FindMock {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $CommandName,_x000D__x000A_        $ModuleName,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [HashTable] $MockTable_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $result = @{_x000D__x000A_        Mock        = $null_x000D__x000A_        MockFound   = $false_x000D__x000A_        CommandName = $CommandName_x000D__x000A_        ModuleName  = $ModuleName_x000D__x000A_    }_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Looking for mock $($ModuleName)||$CommandName."_x000D__x000A_    }_x000D__x000A_    $MockTable["$($ModuleName)||$CommandName"]_x000D__x000A__x000D__x000A_    if ($null -ne $mock) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "Found mock $(if (-not [string]::IsNullOrEmpty($ModuleName)) {"with module name $($ModuleName)"})||$CommandName."_x000D__x000A_        }_x000D__x000A_        $result.MockFound = $true_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "No mock found, re-trying without module name ||$CommandName."_x000D__x000A_        }_x000D__x000A_        $mock = $MockTable["||$CommandName"]_x000D__x000A_        $result.ModuleName = $null_x000D__x000A_        if ($null -ne $mock) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Found mock without module name, setting the target module to empty."_x000D__x000A_            }_x000D__x000A_            $result.MockFound = $true_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $result.MockFound = $false_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $result_x000D__x000A_}_x000D__x000A__x000D__x000A_function FindMatchingBehavior {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Behaviors,_x000D__x000A_        [hashtable] $BoundParameters = @{ },_x000D__x000A_        [object[]] $ArgumentList = @(),_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A_        $Hook_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Finding a mock behavior."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $foundDefaultBehavior = $false_x000D__x000A_    $defaultBehavior = $null_x000D__x000A_    foreach ($b in $Behaviors) {_x000D__x000A__x000D__x000A_        if ($b.IsDefault -and -not $foundDefaultBehavior) {_x000D__x000A_            # store the most recently defined default behavior we find_x000D__x000A_            $defaultBehavior = $b_x000D__x000A_            $foundDefaultBehavior = $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $b.IsDefault) {_x000D__x000A_            $params = @{_x000D__x000A_                ScriptBlock     = $b.Filter_x000D__x000A_                BoundParameters = $BoundParameters_x000D__x000A_                ArgumentList    = $ArgumentList_x000D__x000A_                Metadata        = $Hook.Metadata_x000D__x000A_                SessionState    = $Hook.CallerSessionState_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (Test-ParameterFilter @params) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock "{ $($b.ScriptBlock) } passed parameter filter and will be used for the mock call."_x000D__x000A_                }_x000D__x000A_                return $b_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($foundDefaultBehavior) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "{ $($defaultBehavior.ScriptBlock) } is a default behavior and will be used for the mock call."_x000D__x000A_        }_x000D__x000A_        return $defaultBehavior_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "No parametrized or default behaviors were found filter."_x000D__x000A_    }_x000D__x000A_    return $null_x000D__x000A_}_x000D__x000A__x000D__x000A_function LastThat {_x000D__x000A_    param (_x000D__x000A_        $Collection,_x000D__x000A_        $Predicate_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $count = $Collection.Count_x000D__x000A_    for ($i = $count; $i -gt 0; $i--) {_x000D__x000A_        $item = $Collection[$i]_x000D__x000A_        if (&amp;$Predicate $Item) {_x000D__x000A_            return $Item_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function ExecuteBehavior {_x000D__x000A_    param (_x000D__x000A_        $Behavior,_x000D__x000A_        $Hook,_x000D__x000A_        [hashtable] $BoundParameters = @{ },_x000D__x000A_        [object[]] $ArgumentList = @()_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $ModuleName = $Behavior.ModuleName_x000D__x000A_    $CommandName = $Behavior.CommandName_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Executing mock behavior for mock$(if ($ModuleName) {" $ModuleName -" }) $CommandName."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Behavior.Verifiable = $false_x000D__x000A__x000D__x000A_    $scriptBlock = {_x000D__x000A_        param (_x000D__x000A_            [Parameter(Mandatory = $true)]_x000D__x000A_            [scriptblock]_x000D__x000A_            ${Script Block},_x000D__x000A__x000D__x000A_            [hashtable]_x000D__x000A_            $___BoundParameters___ = @{ },_x000D__x000A__x000D__x000A_            [object[]]_x000D__x000A_            $___ArgumentList___ = @(),_x000D__x000A__x000D__x000A_            [System.Management.Automation.CommandMetadata]_x000D__x000A_            ${Meta data},_x000D__x000A__x000D__x000A_            [System.Management.Automation.SessionState]_x000D__x000A_            ${Session State},_x000D__x000A__x000D__x000A_            ${R e p o r t S c o p e},_x000D__x000A__x000D__x000A_            ${M o d u l e N a m e},_x000D__x000A__x000D__x000A_            ${Set Dynamic Parameter Variable}_x000D__x000A_        )_x000D__x000A__x000D__x000A_        # This script block exists to hold variables without polluting the test script's current scope._x000D__x000A_        # Dynamic parameters in functions, for some reason, only exist in $PSBoundParameters instead_x000D__x000A_        # of being assigned a local variable the way static parameters do.  By calling Set-DynamicParameterVariable,_x000D__x000A_        # we create these variables for the caller's use in a Parameter Filter or within the mock itself, and_x000D__x000A_        # by doing it inside this temporary script block, those variables don't stick around longer than they_x000D__x000A_        # should._x000D__x000A__x000D__x000A_        &amp; ${Set Dynamic Parameter Variable} -SessionState ${Session State} -Parameters $___BoundParameters___ -Metadata ${Meta data}_x000D__x000A_        # Name property is not present on Application Command metadata in PowerShell 2_x000D__x000A_        &amp; ${R e p o r t S c o p e} -ModuleName ${M o d u l e N a m e} -CommandName $(try {_x000D__x000A_                ${Meta data}.Name_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_            }) -ScriptBlock ${Script Block}_x000D__x000A_        &amp; ${Script Block} @___BoundParameters___ @___ArgumentList____x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $Hook) {_x000D__x000A_        throw "Hook should not be null."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $Hook.SessionState) {_x000D__x000A_        throw "Hook.SessionState should not be null."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $scriptBlock -SessionState $Hook.CallerSessionState_x000D__x000A_    $splat = @{_x000D__x000A_        'Script Block'                   = $Behavior.ScriptBlock_x000D__x000A_        '___ArgumentList___'             = $ArgumentList_x000D__x000A_        '___BoundParameters___'          = $BoundParameters_x000D__x000A_        'Meta data'                      = $Hook.Metadata_x000D__x000A_        'Session State'                  = $Hook.CallerSessionState_x000D__x000A_        'R e p o r t S c o p e'          = {_x000D__x000A_            param ($CommandName, $ModuleName, $ScriptBlock)_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-ScriptBlockInvocationHint -Hint "Mock - of command $CommandName$(if ($ModuleName) { "from module $ModuleName"})" -ScriptBlock $ScriptBlock_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        'Set Dynamic Parameter Variable' = $SafeCommands['Set-DynamicParameterVariable']_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # the real scriptblock is passed to the other one, we are interested in the mock, not the wrapper, so I pass $block.ScriptBlock, and not $scriptBlock_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-ScriptBlockInvocationHint -Hint "Mock - of command $CommandName$(if ($ModuleName) { "from module $ModuleName"})" -ScriptBlock ($behavior.ScriptBlock)_x000D__x000A_    }_x000D__x000A_    &amp; $scriptBlock @splat_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Behavior for$(if ($ModuleName) { " $ModuleName -"}) $CommandName was executed."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Invoke-InMockScope {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [System.Management.Automation.SessionState]_x000D__x000A_        $SessionState,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $Arguments,_x000D__x000A__x000D__x000A_        [Switch]_x000D__x000A_        $NoNewScope_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionState $SessionState_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-ScriptBlockInvocationHint -Hint "Mock - InMockScope" -ScriptBlock $ScriptBlock_x000D__x000A_    }_x000D__x000A_    if ($NoNewScope) {_x000D__x000A_        . $ScriptBlock @Arguments_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        &amp; $ScriptBlock @Arguments_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-ParameterFilter {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [System.Collections.IDictionary]_x000D__x000A_        $BoundParameters,_x000D__x000A__x000D__x000A_        [object[]]_x000D__x000A_        $ArgumentList,_x000D__x000A__x000D__x000A_        [System.Management.Automation.CommandMetadata]_x000D__x000A_        $Metadata,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Management.Automation.SessionState]_x000D__x000A_        $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -eq $BoundParameters) {_x000D__x000A_        $BoundParameters = @{ }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $arguments = $ArgumentList_x000D__x000A_    # $() gets rid of the @() defined for powershell 3_x000D__x000A_    if ($null -eq $($ArgumentList)) {_x000D__x000A_        $arguments = @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $context = Get-ContextToDefine -BoundParameters $BoundParameters -Metadata $Metadata_x000D__x000A__x000D__x000A_    $wrapper = {_x000D__x000A_        param ($private:______mock_parameters)_x000D__x000A_        &amp; $private:______mock_parameters.Set_StrictMode -Off_x000D__x000A__x000D__x000A_        foreach ($private:______current in $private:______mock_parameters.Context.GetEnumerator()) {_x000D__x000A_            $private:______mock_parameters.SessionState.PSVariable.Set($private:______current.Key, $private:______current.Value)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #TODO: a hacky solution to make Should throw on failure in Mock ParameterFilter, to make it good enough for the first release $______isInMockParameterFilter_x000D__x000A_        # this should not be private, it should leak into Should command when used in ParameterFilter_x000D__x000A_        $______isInMockParameterFilter = $true_x000D__x000A_        # $private:BoundParameters = $private:______mock_parameters.BoundParameters_x000D__x000A_        $private:Arguments = $private:______mock_parameters.Arguments_x000D__x000A_        # TODO: not binding the bound parameters here because it would make the parameters unbound when the user does_x000D__x000A_        # not provide a param block, which they would never provide, so that is okay, but if there is a workaround this then_x000D__x000A_        # it would be nice to have. maybe changing the order in which I bind?_x000D__x000A_        &amp; $private:______mock_parameters.ScriptBlock @Arguments_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        $hasContext = 0 -lt $Context.Count_x000D__x000A_        $c = $(if ($hasContext) {foreach ($p in $Context.GetEnumerator()) { "$($p.Key) = $($p.Value)" }}) -join ", "_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Running mock filter { $scriptBlock } $(if ($hasContext) { "with context: $c" } else { "without any context"})."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $wrapper -SessionState $SessionState_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-ScriptBlockInvocationHint -Hint "Mock - Parameter filter" -ScriptBlock $wrapper_x000D__x000A_    }_x000D__x000A_    $parameters = @{_x000D__x000A_        ScriptBlock     = $ScriptBlock_x000D__x000A_        BoundParameters = $BoundParameters_x000D__x000A_        Arguments       = $Arguments_x000D__x000A_        SessionState    = $SessionState_x000D__x000A_        Context         = $context_x000D__x000A_        Set_StrictMode  = $SafeCommands['Set-StrictMode']_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $result = &amp; $wrapper $parameters_x000D__x000A_    if ($result) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock filter passed."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock filter did not pass."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    $result_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ContextToDefine {_x000D__x000A_    param (_x000D__x000A_        [System.Collections.IDictionary] $BoundParameters,_x000D__x000A_        [System.Management.Automation.CommandMetadata] $Metadata_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $conflictingParameterNames = Get-ConflictingParameterNames_x000D__x000A_    $r = @{ }_x000D__x000A_    # key the parameters by aliases so we can resolve to_x000D__x000A_    # the param itself and define it and all of it's aliases_x000D__x000A_    $h = @{ }_x000D__x000A_    if ($null -eq $Metadata) {_x000D__x000A_        # there is no metadata so there will be no aliases_x000D__x000A_        # return the parameters that we got, just fix the conflicting_x000D__x000A_        # names_x000D__x000A_        foreach ($p in $BoundParameters.GetEnumerator()) {_x000D__x000A_            $name = if ($p.Key -in $conflictingParameterNames) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock -Message "! Variable `$$($p.Key) is a built-in variable, rewriting it to `$_$($p.Key). Use the version with _ in your -ParameterFilter."_x000D__x000A_                }_x000D__x000A_                "_$($p.Key)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $p.Key_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $r.Add($name, $p.Value)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return $r_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($p in $Metadata.Parameters.GetEnumerator()) {_x000D__x000A_        $aliases = $p.Value.Aliases_x000D__x000A_        if ($null -ne $aliases -and 0 -lt @($aliases).Count) {_x000D__x000A_            foreach ($a in $aliases) { $h.Add($a, $p) }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($param in $BoundParameters.GetEnumerator()) {_x000D__x000A_        $parameterInfo = if ($h.ContainsKey($param.Key)) {_x000D__x000A_            $h.($param.Key)_x000D__x000A_        }_x000D__x000A_        elseif ($Metadata.Parameters.ContainsKey($param.Key)) {_x000D__x000A_            $Metadata.Parameters.($param.Key)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $value = $param.Value_x000D__x000A__x000D__x000A_        if ($parameterInfo) {_x000D__x000A_            foreach ($p in $parameterInfo) {_x000D__x000A_                $name = if ($p.Name -in $conflictingParameterNames) {_x000D__x000A_                    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                        Write-PesterDebugMessage -Scope Mock -Message "! Variable `$$($p.Name) is a built-in variable, rewriting it to `$_$($p.Name). Use the version with _ in your -ParameterFilter."_x000D__x000A_                    }_x000D__x000A_                    "_$($p.Name)"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $p.Name_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $r.ContainsKey($name)) {_x000D__x000A_                    $r.Add($name, $value)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                foreach ($a in $p.Aliases) {_x000D__x000A_                    $name = if ($a -in $conflictingParameterNames) {_x000D__x000A_                        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                            Write-PesterDebugMessage -Scope Mock -Message "! Variable `$$($a) is a built-in variable, rewriting it to `$_$($a). Use the version with _ in your -ParameterFilter."_x000D__x000A_                        }_x000D__x000A_                        "_$($a)"_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $a_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    if (-not $r.ContainsKey($name)) {_x000D__x000A_                        $r.Add($name, $value)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # the parameter is not defined in the parameter set,_x000D__x000A_            # it is probably dynamic, let's see if I can get away with just adding_x000D__x000A_            # it to the list of stuff to define_x000D__x000A__x000D__x000A_            $name = if ($param.Key -in $script:ConflictingParameterNames) {_x000D__x000A_                if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                    Write-PesterDebugMessage -Scope Mock -Message "! Variable `$$($param.Key) is a built-in variable, rewriting it to `$_$($param.Key). Use the version with _ in your -ParameterFilter."_x000D__x000A_                }_x000D__x000A_                "_$($param.Key)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $param.Key_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not $r.ContainsKey($name)) {_x000D__x000A_                $r.Add($name, $param.Value)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $r_x000D__x000A_}_x000D__x000A__x000D__x000A_function IsCommonParameter {_x000D__x000A_    param (_x000D__x000A_        [string] $Name,_x000D__x000A_        [System.Management.Automation.CommandMetadata] $Metadata_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -ne $Metadata) {_x000D__x000A_        if ([System.Management.Automation.Internal.CommonParameters].GetProperty($Name)) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_        if ($Metadata.SupportsShouldProcess -and [System.Management.Automation.Internal.ShouldProcessParameters].GetProperty($Name)) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_        if ($Metadata.SupportsPaging -and [System.Management.Automation.PagingParameters].GetProperty($Name)) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_        if ($Metadata.SupportsTransactions -and [System.Management.Automation.Internal.TransactionParameters].GetProperty($Name)) {_x000D__x000A_            return $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $false_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-DynamicParameterVariable {_x000D__x000A_    &lt;#_x000D__x000A_        .SYNOPSIS_x000D__x000A_        This command is used by Pester's Mocking framework.  You do not need to call it directly._x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [System.Management.Automation.SessionState]_x000D__x000A_        $SessionState,_x000D__x000A__x000D__x000A_        [hashtable]_x000D__x000A_        $Parameters,_x000D__x000A__x000D__x000A_        [System.Management.Automation.CommandMetadata]_x000D__x000A_        $Metadata_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -eq $Parameters) {_x000D__x000A_        $Parameters = @{ }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($keyValuePair in $Parameters.GetEnumerator()) {_x000D__x000A_        $variableName = $keyValuePair.Key_x000D__x000A__x000D__x000A_        if (-not (IsCommonParameter -Name $variableName -Metadata $Metadata)) {_x000D__x000A_            if ($ExecutionContext.SessionState -eq $SessionState) {_x000D__x000A_                &amp; $SafeCommands['Set-Variable'] -Scope 1 -Name $variableName -Value $keyValuePair.Value -Force -Confirm:$false -WhatIf:$false_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $SessionState.PSVariable.Set($variableName, $keyValuePair.Value)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DynamicParamBlock {_x000D__x000A_    param (_x000D__x000A_        [scriptblock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($ScriptBlock.AST.psobject.Properties.Name -match "Body") {_x000D__x000A_        if ($null -ne $ScriptBlock.Ast.Body.DynamicParamBlock) {_x000D__x000A_            $statements = $ScriptBlock.Ast.Body.DynamicParamBlock.Statements.Extent.Text_x000D__x000A__x000D__x000A_            return $statements -join [System.Environment]::NewLine_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-MockDynamicParameter {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'Cmdlet')]_x000D__x000A_        [string] $CmdletName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'Function')]_x000D__x000A_        [string] $FunctionName,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Function')]_x000D__x000A_        [string] $ModuleName,_x000D__x000A__x000D__x000A_        [System.Collections.IDictionary] $Parameters,_x000D__x000A__x000D__x000A_        [object] $Cmdlet,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Function")]_x000D__x000A_        $DynamicParamScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_        'Cmdlet' {_x000D__x000A_            Get-DynamicParametersForCmdlet -CmdletName $CmdletName -Parameters $Parameters_x000D__x000A_        }_x000D__x000A__x000D__x000A_        'Function' {_x000D__x000A_            Get-DynamicParametersForMockedFunction -DynamicParamScriptBlock $DynamicParamScriptBlock -Parameters $Parameters -Cmdlet $Cmdlet_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DynamicParametersForCmdlet {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string] $CmdletName,_x000D__x000A__x000D__x000A_        [ValidateScript( {_x000D__x000A_                if ($PSVersionTable.PSVersion.Major -ge 3 -and_x000D__x000A_                    $null -ne $_ -and_x000D__x000A_                    $_.GetType().FullName -ne 'System.Management.Automation.PSBoundParametersDictionary') {_x000D__x000A_                    throw 'The -Parameters argument must be a PSBoundParametersDictionary object ($PSBoundParameters).'_x000D__x000A_                }_x000D__x000A__x000D__x000A_                return $true_x000D__x000A_            })]_x000D__x000A_        [System.Collections.IDictionary] $Parameters_x000D__x000A_    )_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        $command = &amp; $SafeCommands['Get-Command'] -Name $CmdletName -CommandType Cmdlet -ErrorAction Stop_x000D__x000A__x000D__x000A_        if (@($command).Count -gt 1) {_x000D__x000A_            throw "Name '$CmdletName' resolved to multiple Cmdlets"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        $PSCmdlet.ThrowTerminatingError($_)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $command.ImplementingType.GetInterface('IDynamicParameters', $true)) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ('5.0.10586.122' -lt $PSVersionTable.PSVersion) {_x000D__x000A_        # Older version of PS required Reflection to do this.  It has run into problems on occasion with certain cmdlets,_x000D__x000A_        # such as ActiveDirectory and AzureRM, so we'll take advantage of the newer PSv5 engine features if at all possible._x000D__x000A__x000D__x000A_        if ($null -eq $Parameters) {_x000D__x000A_            $paramsArg = @()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $paramsArg = @($Parameters)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $command = $ExecutionContext.InvokeCommand.GetCommand($CmdletName, [System.Management.Automation.CommandTypes]::Cmdlet, $paramsArg)_x000D__x000A_        $paramDictionary = [System.Management.Automation.RuntimeDefinedParameterDictionary]::new()_x000D__x000A__x000D__x000A_        foreach ($param in $command.Parameters.Values) {_x000D__x000A_            if (-not $param.IsDynamic) {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A_            if ($Parameters.ContainsKey($param.Name)) {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $dynParam = [System.Management.Automation.RuntimeDefinedParameter]::new($param.Name, $param.ParameterType, $param.Attributes)_x000D__x000A_            $paramDictionary.Add($param.Name, $dynParam)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        return $paramDictionary_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($null -eq $Parameters) {_x000D__x000A_            $Parameters = @{ }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $cmdlet = &amp; $SafeCommands['New-Object'] $command.ImplementingType.FullName_x000D__x000A__x000D__x000A_        $flags = [System.Reflection.BindingFlags]'Instance, Nonpublic'_x000D__x000A_        $context = $ExecutionContext.GetType().GetField('_context', $flags).GetValue($ExecutionContext)_x000D__x000A_        [System.Management.Automation.Cmdlet].GetProperty('Context', $flags).SetValue($cmdlet, $context, $null)_x000D__x000A__x000D__x000A_        foreach ($keyValuePair in $Parameters.GetEnumerator()) {_x000D__x000A_            $property = $cmdlet.GetType().GetProperty($keyValuePair.Key)_x000D__x000A_            if ($null -eq $property -or -not $property.CanWrite) {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $isParameter = [bool]($property.GetCustomAttributes([System.Management.Automation.ParameterAttribute], $true))_x000D__x000A_            if (-not $isParameter) {_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $property.SetValue($cmdlet, $keyValuePair.Value, $null)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            # This unary comma is important in some cases.  On Windows 7 systems, the ActiveDirectory module cmdlets_x000D__x000A_            # return objects from this method which implement IEnumerable for some reason, and even cause PowerShell_x000D__x000A_            # to throw an exception when it tries to cast the object to that interface._x000D__x000A__x000D__x000A_            # We avoid that problem by wrapping the result of GetDynamicParameters() in a one-element array with the_x000D__x000A_            # unary comma.  PowerShell enumerates that array instead of trying to enumerate the goofy object, and_x000D__x000A_            # everyone's happy._x000D__x000A__x000D__x000A_            # Love the comma.  Don't delete it.  We don't have a test for this yet, unless we can get the AD module_x000D__x000A_            # on a Server 2008 R2 build server, or until we write some C# code to reproduce its goofy behavior._x000D__x000A__x000D__x000A_            , $cmdlet.GetDynamicParameters()_x000D__x000A_        }_x000D__x000A_        catch [System.NotImplementedException] {_x000D__x000A_            # Some cmdlets implement IDynamicParameters but then throw a NotImplementedException.  I have no idea why.  Ignore them._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-DynamicParametersForMockedFunction {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $DynamicParamScriptBlock,_x000D__x000A__x000D__x000A_        [System.Collections.IDictionary]_x000D__x000A_        $Parameters,_x000D__x000A__x000D__x000A_        [object]_x000D__x000A_        $Cmdlet_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($DynamicParamScriptBlock) {_x000D__x000A_        $splat = @{ 'P S Cmdlet' = $Cmdlet }_x000D__x000A_        return &amp; $DynamicParamScriptBlock @Parameters @splat_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-IsClosure {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $sessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($ScriptBlock)_x000D__x000A_    if ($null -eq $sessionStateInternal) {_x000D__x000A_        return $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $module = $sessionStateInternal.GetType().GetProperty('Module', $flags).GetValue($sessionStateInternal, $null)_x000D__x000A__x000D__x000A_    return (_x000D__x000A_        $null -ne $module -and_x000D__x000A_        $module.Name -match '^__DynamicModule_([a-f\d-]+)$' -and_x000D__x000A_        $null -ne ($matches[1] -as [guid])_x000D__x000A_    )_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-MockFunctionsAndAliases {_x000D__x000A_    # when a test is terminated (e.g. by stopping at a breakpoint and then stoping the execution of the script)_x000D__x000A_    # the aliases and bootstrap functions for the currently mocked functions will remain in place_x000D__x000A_    # Then on subsequent runs the bootstrap function will be picked up instead of the real command,_x000D__x000A_    # because there is still an alias associated with it, and the test will fail._x000D__x000A_    # So before putting Pester state in place we should make sure that all Pester mocks are gone_x000D__x000A_    # by deleting every alias pointing to a function that starts with PesterMock_. Then we also delete the_x000D__x000A_    # bootstrap function._x000D__x000A_    foreach ($alias in (&amp; $script:SafeCommands['Get-Alias'] -Definition "PesterMock_*")) {_x000D__x000A_        &amp; $script:SafeCommands['Remove-Item'] "alias:/$($alias.Name)"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($bootstrapFunction in (&amp; $script:SafeCommands['Get-Command'] -Name "PesterMock_*")) {_x000D__x000A_        &amp; $script:SafeCommands['Remove-Item'] "function:/$($bootstrapFunction.Name)"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Repair-ConflictingParameters {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.CommandMetadata])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [System.Management.Automation.CommandMetadata]_x000D__x000A_        $Metadata,_x000D__x000A_        [Parameter()]_x000D__x000A_        [string[]]_x000D__x000A_        $RemoveParameterType,_x000D__x000A_        [Parameter()]_x000D__x000A_        [string[]]_x000D__x000A_        $RemoveParameterValidation_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $repairedMetadata = [System.Management.Automation.CommandMetadata]$Metadata_x000D__x000A_    $paramMetadatas = [Collections.Generic.List[object]]@($repairedMetadata.Parameters.Values)_x000D__x000A__x000D__x000A_    # unnecessary function call that could be replaced by variable access, but is needed for tests_x000D__x000A_    $conflictingParams = Get-ConflictingParameterNames_x000D__x000A__x000D__x000A_    foreach ($paramMetadata in $paramMetadatas) {_x000D__x000A_        if ($paramMetadata.IsDynamic) {_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # rewrite the metadata to avoid defining confliting parameters_x000D__x000A_        # in the function such as $PSEdition_x000D__x000A_        if ($conflictingParams -contains $paramMetadata.Name) {_x000D__x000A_            $paramName = $paramMetadata.Name_x000D__x000A_            $newName = "_$paramName"_x000D__x000A_            $paramMetadata.Name = $newName_x000D__x000A_            $paramMetadata.Aliases.Add($paramName)_x000D__x000A__x000D__x000A_            $null = $repairedMetadata.Parameters.Remove($paramName)_x000D__x000A_            $repairedMetadata.Parameters.Add($newName, $paramMetadata)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $attrIndexesToRemove = [System.Collections.Generic.List[object]]@()_x000D__x000A__x000D__x000A_        if ($RemoveParameterType -contains $paramMetadata.Name) {_x000D__x000A_            $paramMetadata.ParameterType = [object]_x000D__x000A__x000D__x000A_            for ($i = 0; $i -lt $paramMetadata.Attributes.Count; $i++) {_x000D__x000A_                $attr = $paramMetadata.Attributes[$i]_x000D__x000A_                if ($attr -is [PSTypeNameAttribute]) {_x000D__x000A_                    $null = $attrIndexesToRemove.Add($i)_x000D__x000A_                    break_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($RemoveParameterValidation -contains $paramMetadata.Name) {_x000D__x000A_            for ($i = 0; $i -lt $paramMetadata.Attributes.Count; $i++) {_x000D__x000A_                $attr = $paramMetadata.Attributes[$i]_x000D__x000A_                if ($attr -is [System.Management.Automation.ValidateArgumentsAttribute]) {_x000D__x000A_                    $null = $attrIndexesToRemove.Add($i)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($index in $attrIndexesToRemove) {_x000D__x000A_            $null = $paramMetadata.Attributes.RemoveAt($index)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $repairedMetadata_x000D__x000A_}_x000D__x000A__x000D__x000A_function Reset-ConflictingParameters {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([hashtable])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [hashtable]_x000D__x000A_        $BoundParameters_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $parameters = $BoundParameters.Clone()_x000D__x000A_    # unnecessary function call that could be replaced by variable access, but is needed for tests_x000D__x000A_    $names = Get-ConflictingParameterNames_x000D__x000A__x000D__x000A_    foreach ($param in $names) {_x000D__x000A_        $fixedName = "_$param"_x000D__x000A__x000D__x000A_        if (-not $parameters.ContainsKey($fixedName)) {_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $parameters[$param] = $parameters[$fixedName]_x000D__x000A_        $null = $parameters.Remove($fixedName)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $parameters_x000D__x000A_}_x000D__x000A__x000D__x000A_$script:ConflictingParameterNames = @(_x000D__x000A_    '?'_x000D__x000A_    'ConsoleFileName'_x000D__x000A_    'EnabledExperimentalFeatures'_x000D__x000A_    'Error'_x000D__x000A_    'ExecutionContext'_x000D__x000A_    'false'_x000D__x000A_    'HOME'_x000D__x000A_    'Host'_x000D__x000A_    'IsCoreCLR'_x000D__x000A_    'IsMacOS'_x000D__x000A_    'IsWindows'_x000D__x000A_    'PID'_x000D__x000A_    'PSCulture'_x000D__x000A_    'PSEdition'_x000D__x000A_    'PSHOME'_x000D__x000A_    'PSUICulture'_x000D__x000A_    'PSVersionTable'_x000D__x000A_    'ShellId'_x000D__x000A_    'true'_x000D__x000A_)_x000D__x000A__x000D__x000A_function Get-ConflictingParameterNames {_x000D__x000A_    $script:ConflictingParameterNames_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ScriptBlockAST {_x000D__x000A_    param (_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($ScriptBlock.Ast -is [System.Management.Automation.Language.ScriptBlockAst]) {_x000D__x000A_        $ast = $Block.Ast.EndBlock_x000D__x000A_    }_x000D__x000A_    elseif ($ScriptBlock.Ast -is [System.Management.Automation.Language.FunctionDefinitionAst]) {_x000D__x000A_        $ast = $Block.Ast.Body.EndBlock_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        throw "Pester failed to parse ParameterFilter, scriptblock is invalid type. Please reformat your ParameterFilter."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $ast_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-BlockWithoutParameterAliases {_x000D__x000A_    [OutputType([scriptblock])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [System.Management.Automation.CommandMetadata]_x000D__x000A_        $Metadata,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [scriptblock]_x000D__x000A_        $Block_x000D__x000A_    )_x000D__x000A_    try {_x000D__x000A_        if ($PSVersionTable.PSVersion.Major -ge 3) {_x000D__x000A_            $params = $Metadata.Parameters.Values_x000D__x000A_            $ast = Get-ScriptBlockAST $Block_x000D__x000A_            $blockText = $ast.Extent.Text_x000D__x000A_            $variables = [array]($Ast.FindAll( { param($ast) $ast -is [System.Management.Automation.Language.VariableExpressionAst] }, $true))_x000D__x000A_            [array]::Reverse($variables)_x000D__x000A__x000D__x000A_            foreach ($var in $variables) {_x000D__x000A_                $varName = $var.VariablePath.UserPath_x000D__x000A_                $length = $varName.Length_x000D__x000A__x000D__x000A_                foreach ($param in $params) {_x000D__x000A_                    if ($param.Aliases -contains $varName) {_x000D__x000A_                        $startIndex = $var.Extent.StartOffset - $ast.Extent.StartOffset + 1 # move one position after the dollar sign_x000D__x000A__x000D__x000A_                        $blockText = $blockText.Remove($startIndex, $length).Insert($startIndex, $param.Name)_x000D__x000A__x000D__x000A_                        break # It is safe to stop checking for further params here, since aliases cannot be shared by parameters_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $Block = [scriptblock]::Create($blockText)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Block_x000D__x000A_    }_x000D__x000A_    catch {_x000D__x000A_        $PSCmdlet.ThrowTerminatingError($_)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\New-Fixture.ps1_x000D__x000A_function New-Fixture {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests. The files are by default_x000D__x000A_    placed in the current directory and are called and populated as such:_x000D__x000A__x000D__x000A_    The script defining the function: .\Clean.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    function Clean {_x000D__x000A_        #Do something_x000D__x000A_        $true_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    The script containing the example test .\Clean.Tests.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    BeforeAll {_x000D__x000A_        . $PSCommandPath.Replace('.Tests.ps1', '.ps1')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "Clean" {_x000D__x000A__x000D__x000A_        It "Returns expected output" {_x000D__x000A_            Clean | Should -Be $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .PARAMETER Name_x000D__x000A_    Defines the name of the function and the name of the test to be created._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Defines path where the test and the function should be created, you can use full or relative path._x000D__x000A_    If the parameter is not specified the scripts are created in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture -Name Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture C:\Projects\Cleaner Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the C:\Projects\Cleaner directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture Cleaner Clean_x000D__x000A__x000D__x000A_    Creates a new folder named Cleaner in the current directory and creates the scripts in it._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-Fixture_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]$Name,_x000D__x000A_        [String]$Path = $PWD_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Name = $Name -replace '.ps(m?)1', ''_x000D__x000A__x000D__x000A_    if($Name -notmatch '^\S+$') {_x000D__x000A_        throw "Name is not valid. Whitespace are not allowed in a function name."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #keep this formatted as is. the format is output to the file as is, including indentation_x000D__x000A_    $scriptCode = "function $Name {_x000D__x000A_    throw [NotImplementedException]'$Name is not implemented.'_x000D__x000A_}"_x000D__x000A__x000D__x000A_    $testCode = 'BeforeAll {_x000D__x000A_    . $PSCommandPath.Replace(''.Tests.ps1'', ''.ps1'')_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "#name#" {_x000D__x000A_    It "Returns expected output" {_x000D__x000A_        #name# | Should -Be "YOUR_EXPECTED_VALUE"_x000D__x000A_    }_x000D__x000A_}' -replace "#name#", $Name_x000D__x000A__x000D__x000A_    $Path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)_x000D__x000A__x000D__x000A_    Create-File -Path $Path -Name "$Name.ps1" -Content $scriptCode_x000D__x000A_    Create-File -Path $Path -Name "$Name.Tests.ps1" -Content $testCode_x000D__x000A_}_x000D__x000A__x000D__x000A_function Create-File {_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('Pester.BuildAnalyzerRules\Measure-SafeCommands', 'Write-Warning', Justification = 'Mocked in unit test for New-Fixture.')]_x000D__x000A_    param($Path, $Name, $Content)_x000D__x000A_    if (-not (&amp; $SafeCommands['Test-Path'] -Path $Path)) {_x000D__x000A_        &amp; $SafeCommands['New-Item'] -ItemType Directory -Path $Path | &amp; $SafeCommands['Out-Null']_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $FullPath = &amp; $SafeCommands['Join-Path'] -Path $Path -ChildPath $Name_x000D__x000A_    if (-not (&amp; $SafeCommands['Test-Path'] -Path $FullPath)) {_x000D__x000A_        &amp; $SafeCommands['Set-Content'] -Path  $FullPath -Value $Content -Encoding UTF8_x000D__x000A_        &amp; $SafeCommands['Get-Item'] -Path $FullPath_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        # This is deliberately not sent through $SafeCommands, because our own tests rely on_x000D__x000A_        # mocking Write-Warning, and it's not really the end of the world if this call happens to_x000D__x000A_        # be screwed up in an edge case._x000D__x000A_        Write-Warning "Skipping the file '$FullPath', because it already exists."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\New-MockObject.ps1_x000D__x000A_function New-MockObject {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_This function instantiates a .NET object from a type._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Using the New-MockObject you can mock an object based on .NET type._x000D__x000A__x000D__x000A_An .NET assembly for the particular type must be available in the system and loaded._x000D__x000A__x000D__x000A_.PARAMETER Type_x000D__x000A_The .NET type to create an object based on._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_$obj = New-MockObject -Type 'System.Diagnostics.Process'_x000D__x000A_$obj.GetType().FullName_x000D__x000A_    System.Diagnostics.Process_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/New-MockObject_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [type]$Type_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [System.Runtime.Serialization.Formatterservices]::GetUninitializedObject($Type)_x000D__x000A__x000D__x000A_}_x000D__x000A_# file src\functions\Output.ps1_x000D__x000A_$script:ReportStrings = DATA {_x000D__x000A_    @{_x000D__x000A_        StartMessage      = "Executing all tests in '{0}'"_x000D__x000A_        FilterMessage     = ' matching test name {0}'_x000D__x000A_        TagMessage        = ' with Tags {0}'_x000D__x000A_        MessageOfs        = "', '"_x000D__x000A__x000D__x000A_        CoverageTitle     = 'Code coverage report:'_x000D__x000A_        CoverageMessage   = 'Covered {2:P2} of {3:N0} analyzed {0} in {4:N0} {1}.'_x000D__x000A_        MissedSingular    = 'Missed command:'_x000D__x000A_        MissedPlural      = 'Missed commands:'_x000D__x000A_        CommandSingular   = 'Command'_x000D__x000A_        CommandPlural     = 'Commands'_x000D__x000A_        FileSingular      = 'File'_x000D__x000A_        FilePlural        = 'Files'_x000D__x000A__x000D__x000A_        Describe          = 'Describing {0}'_x000D__x000A_        Script            = 'Executing script {0}'_x000D__x000A_        Context           = 'Context {0}'_x000D__x000A_        Margin            = ' '_x000D__x000A_        Timing            = 'Tests completed in {0}'_x000D__x000A__x000D__x000A_        # If this is set to an empty string, the count won't be printed_x000D__x000A_        ContextsPassed    = ''_x000D__x000A_        ContextsFailed    = ''_x000D__x000A__x000D__x000A_        TestsPassed       = 'Tests Passed: {0}, '_x000D__x000A_        TestsFailed       = 'Failed: {0}, '_x000D__x000A_        TestsSkipped      = 'Skipped: {0} '_x000D__x000A_        TestsPending      = 'Pending: {0}, '_x000D__x000A_        TestsInconclusive = 'Inconclusive: {0}, '_x000D__x000A_        TestsNotRun       = 'NotRun: {0}'_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_$script:ReportTheme = DATA {_x000D__x000A_    @{_x000D__x000A_        Describe         = 'Green'_x000D__x000A_        DescribeDetail   = 'DarkYellow'_x000D__x000A_        Context          = 'Cyan'_x000D__x000A_        ContextDetail    = 'DarkCyan'_x000D__x000A_        Pass             = 'DarkGreen'_x000D__x000A_        PassTime         = 'DarkGray'_x000D__x000A_        Fail             = 'Red'_x000D__x000A_        FailTime         = 'DarkGray'_x000D__x000A_        Skipped          = 'Yellow'_x000D__x000A_        SkippedTime      = 'DarkGray'_x000D__x000A_        Pending          = 'Gray'_x000D__x000A_        PendingTime      = 'DarkGray'_x000D__x000A_        NotRun           = 'Gray'_x000D__x000A_        NotRunTime       = 'DarkGray'_x000D__x000A_        Total            = 'Gray'_x000D__x000A_        Inconclusive     = 'Gray'_x000D__x000A_        InconclusiveTime = 'DarkGray'_x000D__x000A_        Incomplete       = 'Yellow'_x000D__x000A_        IncompleteTime   = 'DarkGray'_x000D__x000A_        Foreground       = 'White'_x000D__x000A_        Information      = 'DarkGray'_x000D__x000A_        Coverage         = 'White'_x000D__x000A_        CoverageWarn     = 'DarkRed'_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Format-PesterPath ($Path, [String]$Delimiter) {_x000D__x000A_    # -is check is not enough for the arrays, the incoming value will likely be object[]_x000D__x000A_    # so we have to check if we can upcast to our required type_x000D__x000A__x000D__x000A_    if ($null -eq $Path) {_x000D__x000A_        $null_x000D__x000A_    }_x000D__x000A_    elseif ($Path -is [String]) {_x000D__x000A_        $Path_x000D__x000A_    }_x000D__x000A_    elseif ($Path -is [hashtable]) {_x000D__x000A_        # a well formed pester hashtable contains Path_x000D__x000A_        $Path.Path_x000D__x000A_    }_x000D__x000A_    elseif ($null -ne ($path -as [hashtable[]])) {_x000D__x000A_        ($path | &amp; $SafeCommands['ForEach-Object'] { $_.Path }) -join $Delimiter_x000D__x000A_    }_x000D__x000A_    # needs to stay at the bottom because almost everything can be upcast to array of string_x000D__x000A_    elseif ($Path -as [String[]]) {_x000D__x000A_        $Path -join $Delimiter_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-PesterStart {_x000D__x000A_    param(_x000D__x000A_        [Parameter(mandatory = $true, valueFromPipeline = $true)]_x000D__x000A_        $Context_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        # if (-not ( $Context.Show | Has-Flag 'All, Fails, Header')) {_x000D__x000A_        #     return_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        $OFS = $ReportStrings.MessageOfs_x000D__x000A__x000D__x000A_        $hash = @{_x000D__x000A_            Files        = [System.Collections.Generic.List[object]]@()_x000D__x000A_            ScriptBlocks = 0_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($c in $Context.Containers) {_x000D__x000A_            switch ($c.Type) {_x000D__x000A_                "File" { $null = $hash.Files.Add($c.Item.FullName) }_x000D__x000A_                "ScriptBlock" { $null = $hash.ScriptBlocks++ }_x000D__x000A_                Default { throw "$($c.Type) is not supported." }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $message = $ReportStrings.StartMessage -f (Format-PesterPath $hash.Files -Delimiter $OFS)_x000D__x000A__x000D__x000A_        $message = "$message$(if (0 -lt $hash.ScriptBlocks) { ", and in $($hash.ScriptBlocks) scriptblocks." })"_x000D__x000A_        # todo write out filters that are applied_x000D__x000A_        # if ($PesterState.TestNameFilter) {_x000D__x000A_        #     $message += $ReportStrings.FilterMessage -f "$($PesterState.TestNameFilter)"_x000D__x000A_        # }_x000D__x000A_        # if ($PesterState.ScriptBlockFilter) {_x000D__x000A_        #     $m = $(foreach ($m in $PesterState.ScriptBlockFilter) { "$($m.Path):$($m.Line)" }) -join ", "_x000D__x000A_        #     $message += $ReportStrings.FilterMessage -f $m_x000D__x000A_        # }_x000D__x000A_        # if ($PesterState.TagFilter) {_x000D__x000A_        #     $message += $ReportStrings.TagMessage -f "$($PesterState.TagFilter)"_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        &amp; $SafeCommands['Write-Host'] $message -Foreground $ReportTheme.Foreground_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function ConvertTo-PesterResult {_x000D__x000A_    param(_x000D__x000A_        [String] $Name,_x000D__x000A_        [Nullable[TimeSpan]] $Time,_x000D__x000A_        [System.Management.Automation.ErrorRecord] $ErrorRecord_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $testResult = @{_x000D__x000A_        Name           = $Name_x000D__x000A_        Time           = $time_x000D__x000A_        FailureMessage = ""_x000D__x000A_        StackTrace     = ""_x000D__x000A_        ErrorRecord    = $null_x000D__x000A_        Success        = $false_x000D__x000A_        Result         = "Failed"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $ErrorRecord) {_x000D__x000A_        $testResult.Result = "Passed"_x000D__x000A_        $testResult.Success = $true_x000D__x000A_        return $testResult_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (@('PesterAssertionFailed', 'PesterTestSkipped', 'PesterTestInconclusive', 'PesterTestPending') -contains $ErrorRecord.FullyQualifiedErrorID) {_x000D__x000A_        # we use TargetObject to pass structured information about the error._x000D__x000A_        $details = $ErrorRecord.TargetObject_x000D__x000A__x000D__x000A_        $failureMessage = $details.Message_x000D__x000A_        $file = $details.File_x000D__x000A_        $line = $details.Line_x000D__x000A_        $Text = $details.LineText_x000D__x000A__x000D__x000A_        if (-not $Pester.Strict) {_x000D__x000A_            switch ($ErrorRecord.FullyQualifiedErrorID) {_x000D__x000A_                PesterTestInconclusive {_x000D__x000A_                    $testResult.Result = "Inconclusive"; break;_x000D__x000A_                }_x000D__x000A_                PesterTestPending {_x000D__x000A_                    $testResult.Result = "Pending"; break;_x000D__x000A_                }_x000D__x000A_                PesterTestSkipped {_x000D__x000A_                    $testResult.Result = "Skipped"; break;_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $failureMessage = $ErrorRecord.ToString()_x000D__x000A_        $file = $ErrorRecord.InvocationInfo.ScriptName_x000D__x000A_        $line = $ErrorRecord.InvocationInfo.ScriptLineNumber_x000D__x000A_        $Text = $ErrorRecord.InvocationInfo.Line_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $testResult.FailureMessage = $failureMessage_x000D__x000A_    $testResult.StackTrace = "at &lt;ScriptBlock&gt;, ${file}: line ${line}$([System.Environment]::NewLine)${line}: ${Text}"_x000D__x000A_    $testResult.ErrorRecord = $ErrorRecord_x000D__x000A__x000D__x000A_    return $testResult_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-PesterReport {_x000D__x000A_    param (_x000D__x000A_        [Parameter(mandatory = $true, valueFromPipeline = $true)]_x000D__x000A_        $RunResult_x000D__x000A_    )_x000D__x000A_    # if(-not ($PesterState.Show | Has-Flag Summary)) { return }_x000D__x000A__x000D__x000A_    &amp; $SafeCommands['Write-Host'] ($ReportStrings.Timing -f (Get-HumanTime ($RunResult.Duration))) -Foreground $ReportTheme.Foreground_x000D__x000A__x000D__x000A_    $Success, $Failure = if ($RunResult.FailedCount -gt 0) {_x000D__x000A_        $ReportTheme.Foreground, $ReportTheme.Fail_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportTheme.Pass, $ReportTheme.Information_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Skipped = if ($RunResult.SkippedCount -gt 0) {_x000D__x000A_        $ReportTheme.Skipped_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportTheme.Information_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $NotRun = if ($RunResult.NotRunCount -gt 0) {_x000D__x000A_        $ReportTheme.NotRun_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportTheme.Information_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Total = if ($RunResult.TotalCount -gt 0) {_x000D__x000A_        $ReportTheme.Total_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportTheme.Information_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # $Pending = if ($RunResult.PendingCount -gt 0) {_x000D__x000A_    #     $ReportTheme.Pending_x000D__x000A_    # }_x000D__x000A_    # else {_x000D__x000A_    #     $ReportTheme.Information_x000D__x000A_    # }_x000D__x000A_    # $Inconclusive = if ($RunResult.InconclusiveCount -gt 0) {_x000D__x000A_    #     $ReportTheme.Inconclusive_x000D__x000A_    # }_x000D__x000A_    # else {_x000D__x000A_    #     $ReportTheme.Information_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # Try {_x000D__x000A_    #     $PesterStatePassedScenariosCount = $PesterState.PassedScenarios.Count_x000D__x000A_    # }_x000D__x000A_    # Catch {_x000D__x000A_    #     $PesterStatePassedScenariosCount = 0_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # Try {_x000D__x000A_    #     $PesterStateFailedScenariosCount = $PesterState.FailedScenarios.Count_x000D__x000A_    # }_x000D__x000A_    # Catch {_x000D__x000A_    #     $PesterStateFailedScenariosCount = 0_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # if ($ReportStrings.ContextsPassed) {_x000D__x000A_    #     &amp; $SafeCommands['Write-Host'] ($ReportStrings.ContextsPassed -f $PesterStatePassedScenariosCount) -Foreground $Success -NoNewLine_x000D__x000A_    #     &amp; $SafeCommands['Write-Host'] ($ReportStrings.ContextsFailed -f $PesterStateFailedScenariosCount) -Foreground $Failure_x000D__x000A_    # }_x000D__x000A_    # if ($ReportStrings.TestsPassed) {_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsPassed -f $RunResult.PassedCount) -Foreground $Success -NoNewLine_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsFailed -f $RunResult.FailedCount) -Foreground $Failure -NoNewLine_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsSkipped -f $RunResult.SkippedCount) -Foreground $Skipped -NoNewLine_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsTotal -f $RunResult.TotalCount) -Foreground $Total -NoNewLine_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsNotRun -f $RunResult.NotRunCount) -Foreground $NotRun_x000D__x000A__x000D__x000A_    if (0 -lt $RunResult.FailedBlocksCount) {_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ("BeforeAll \ AfterAll failed: {0}" -f $RunResult.FailedBlocksCount) -Foreground $ReportTheme.Fail_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($(foreach ($b in $RunResult.FailedBlocks) { "  - $($b.Path -join '.')" }) -join [Environment]::NewLine) -Foreground $ReportTheme.Fail_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (0 -lt $RunResult.FailedContainersCount) {_x000D__x000A_        $cs = foreach ($container in $RunResult.FailedContainers) {_x000D__x000A_            $path = if ("File" -eq $container.Type) {_x000D__x000A_                $container.Item.FullName_x000D__x000A_            }_x000D__x000A_            elseif ("ScriptBlock" -eq $container.Type) {_x000D__x000A_                "&lt;ScriptBlock&gt;$($container.Item.File):$($container.Item.StartPosition.StartLine)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                throw "Container type '$($container.Type)' is not supported."_x000D__x000A_            }_x000D__x000A__x000D__x000A_            "  - $path"_x000D__x000A_        }_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ("Container failed: {0}" -f $RunResult.FailedContainersCount) -Foreground $ReportTheme.Fail_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($cs -join [Environment]::NewLine) -Foreground $ReportTheme.Fail_x000D__x000A_    }_x000D__x000A_        # &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsPending -f $RunResult.PendingCount) -Foreground $Pending -NoNewLine_x000D__x000A_        # &amp; $SafeCommands['Write-Host'] ($ReportStrings.TestsInconclusive -f $RunResult.InconclusiveCount) -Foreground $Inconclusive_x000D__x000A_    # }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-CoverageReport {_x000D__x000A_    param ([object] $CoverageReport)_x000D__x000A__x000D__x000A_    if ($null -eq $CoverageReport -or ($pester.Show -eq [Pester.OutputTypes]::None) -or $CoverageReport.NumberOfCommandsAnalyzed -eq 0) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $totalCommandCount = $CoverageReport.NumberOfCommandsAnalyzed_x000D__x000A_    $fileCount = $CoverageReport.NumberOfFilesAnalyzed_x000D__x000A_    $executedPercent = ($CoverageReport.NumberOfCommandsExecuted / $CoverageReport.NumberOfCommandsAnalyzed).ToString("P2")_x000D__x000A__x000D__x000A_    $command = if ($totalCommandCount -gt 1) {_x000D__x000A_        $ReportStrings.CommandPlural_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportStrings.CommandSingular_x000D__x000A_    }_x000D__x000A_    $file = if ($fileCount -gt 1) {_x000D__x000A_        $ReportStrings.FilePlural_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $ReportStrings.FileSingular_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $commonParent = Get-CommonParentPath -Path $CoverageReport.AnalyzedFiles_x000D__x000A_    $report = $CoverageReport.MissedCommands | &amp; $SafeCommands['Select-Object'] -Property @(_x000D__x000A_        @{ Name = 'File'; Expression = { Get-RelativePath -Path $_.File -RelativeTo $commonParent } }_x000D__x000A_        'Class'_x000D__x000A_        'Function'_x000D__x000A_        'Line'_x000D__x000A_        'Command'_x000D__x000A_    )_x000D__x000A__x000D__x000A_    &amp; $SafeCommands['Write-Host']_x000D__x000A_    &amp; $SafeCommands['Write-Host'] $ReportStrings.CoverageTitle -Foreground $ReportTheme.Coverage_x000D__x000A__x000D__x000A_    if ($CoverageReport.MissedCommands.Count -gt 0) {_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.CoverageMessage -f $command, $file, $executedPercent, $totalCommandCount, $fileCount) -Foreground $ReportTheme.CoverageWarn_x000D__x000A_        if ($CoverageReport.MissedCommands.Count -eq 1) {_x000D__x000A_            &amp; $SafeCommands['Write-Host'] $ReportStrings.MissedSingular -Foreground $ReportTheme.CoverageWarn_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            &amp; $SafeCommands['Write-Host'] $ReportStrings.MissedPlural -Foreground $ReportTheme.CoverageWarn_x000D__x000A_        }_x000D__x000A_        $report | &amp; $SafeCommands['Format-Table'] -AutoSize | &amp; $SafeCommands['Out-Host']_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        &amp; $SafeCommands['Write-Host'] ($ReportStrings.CoverageMessage -f $command, $file, $executedPercent, $totalCommandCount, $fileCount) -Foreground $ReportTheme.Coverage_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-FailureLines {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $ErrorRecord,_x000D__x000A_        [switch] $ForceFullError_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $lines = [PSCustomObject] @{_x000D__x000A_            Message = @()_x000D__x000A_            Trace   = @()_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # return $lines_x000D__x000A__x000D__x000A_        ## convert the exception messages_x000D__x000A_        $exception = $ErrorRecord.Exception_x000D__x000A_        $exceptionLines = @()_x000D__x000A__x000D__x000A_        while ($exception) {_x000D__x000A_            $exceptionName = $exception.GetType().Name_x000D__x000A_            $thisLines = $exception.Message.Split([string[]]($([System.Environment]::NewLine), "`n"), [System.StringSplitOptions]::RemoveEmptyEntries)_x000D__x000A_            if (0 -lt @($thisLines).Count -and $ErrorRecord.FullyQualifiedErrorId -ne 'PesterAssertionFailed') {_x000D__x000A_                $thisLines[0] = "$exceptionName`: $($thisLines[0])"_x000D__x000A_            }_x000D__x000A_            [array]::Reverse($thisLines)_x000D__x000A_            $exceptionLines += $thisLines_x000D__x000A_            $exception = $exception.InnerException_x000D__x000A_        }_x000D__x000A_        [array]::Reverse($exceptionLines)_x000D__x000A_        $lines.Message += $exceptionLines_x000D__x000A_        if ($ErrorRecord.FullyQualifiedErrorId -eq 'PesterAssertionFailed') {_x000D__x000A_            $lines.Message += "at $($ErrorRecord.TargetObject.LineText.Trim()), $($ErrorRecord.TargetObject.File):$($ErrorRecord.TargetObject.Line)".Split([string[]]($([System.Environment]::NewLine), "`n"), [System.StringSplitOptions]::RemoveEmptyEntries)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ( -not ($ErrorRecord | &amp; $SafeCommands['Get-Member'] -Name ScriptStackTrace) ) {_x000D__x000A_            if ($ErrorRecord.FullyQualifiedErrorID -eq 'PesterAssertionFailed') {_x000D__x000A_                $lines.Trace += "at line: $($ErrorRecord.TargetObject.Line) in $($ErrorRecord.TargetObject.File)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $lines.Trace += "at line: $($ErrorRecord.InvocationInfo.ScriptLineNumber) in $($ErrorRecord.InvocationInfo.ScriptName)"_x000D__x000A_            }_x000D__x000A_            return $lines_x000D__x000A_        }_x000D__x000A__x000D__x000A_        ## convert the stack trace if present (there might be none if we are raising the error ourselves)_x000D__x000A_        # todo: this is a workaround see https://github.com/pester/Pester/pull/886_x000D__x000A_        if ($null -ne $ErrorRecord.ScriptStackTrace) {_x000D__x000A_            $traceLines = $ErrorRecord.ScriptStackTrace.Split([Environment]::NewLine, [System.StringSplitOptions]::RemoveEmptyEntries)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($ForceFullError -or $PesterPreference.Debug.ShowFullErrors.Value) {_x000D__x000A_            $lines.Trace += $traceLines_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # omit the lines internal to Pester_x000D__x000A_            if ((GetPesterOS) -ne 'Windows') {_x000D__x000A_                [String]$isPesterFunction = '^at .*, .*/Pester.psm1: line [0-9]*$'_x000D__x000A_                [String]$isShould = '^at (Should&lt;End&gt;|Invoke-Assertion), .*/Pester.psm1: line [0-9]*$'_x000D__x000A_                # [String]$pattern6 = '^at &lt;ScriptBlock&gt;, (&lt;No file&gt;|.*/Pester.psm1): line [0-9]*$'_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                [String]$isPesterFunction = '^at .*, .*\\Pester.psm1: line [0-9]*$'_x000D__x000A_                [String]$isShould = '^at (Should&lt;End&gt;|Invoke-Assertion), .*\\Pester.psm1: line [0-9]*$'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # reducing the stack trace so we see only stack trace until the current It block and not up until the invocation of the_x000D__x000A_            # whole test script itself. This is achieved by shortening the stack trace when any Runtime function is hit._x000D__x000A_            # what we don't want to do here is shorten the stack on the Should or Invoke-Assertion. That would remove any_x000D__x000A_            # lines describing potential functions that are invoked in the test. e.g. doing function a() { 1 | Should -Be 2 }; a_x000D__x000A_            # we want to be able to see that we invoked the assertion inside of function a_x000D__x000A_            # the internal calls to Should and Invoke-Assertion are filtered out later by the second match_x000D__x000A_            foreach ($line in $traceLines) {_x000D__x000A_                if ($line -match $isPesterFunction -and $line -notmatch $isShould) {_x000D__x000A_                    break_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $isPesterInternalFunction = $line -match $isPesterFunction_x000D__x000A__x000D__x000A_                if (-not $isPesterInternalFunction) {_x000D__x000A_                    $lines.Trace += $line_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # make error navigateable in VSCode_x000D__x000A_        $lines.Trace = $lines.Trace -replace ':\s*line\s*(\d+)\s*$', ':$1'_x000D__x000A_        return $lines_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-HumanTime {_x000D__x000A_    param ([TimeSpan]$TimeSpan)_x000D__x000A_    if ($TimeSpan.Ticks -lt [timespan]::TicksPerSecond) {_x000D__x000A_        "$([int]($TimeSpan.TotalMilliseconds))ms"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        "$([math]::round($TimeSpan.TotalSeconds ,2))s"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-WriteScreenPlugin ($Verbosity) {_x000D__x000A_    # add -FrameworkSetup Write-PesterStart $pester $Script and -FrameworkTeardown { $pester | Write-PesterReport }_x000D__x000A_    # The plugin is not imported when output None is specified so the usual level of output is Normal._x000D__x000A__x000D__x000A_    $p = @{_x000D__x000A_        Name = 'WriteScreen'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ("Detailed" -eq $Verbosity) {_x000D__x000A_        $p.Start = {_x000D__x000A_            param ($Context)_x000D__x000A__x000D__x000A_            # Write-PesterStart $Context_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.DiscoveryStart = {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "`nStarting discovery in $(@($Context.BlockContainers).Length) files."_x000D__x000A__x000D__x000A_        if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_            $activeFilters = $Context.Filter.psobject.Properties | &amp; $SafeCommands['Where-Object'] { $_.Value }_x000D__x000A_            if($null -ne $activeFilters) {_x000D__x000A_                foreach ($aFilter in $activeFilters) {_x000D__x000A_                    # Assuming only StringArrayOption filter-types. Might break in the future._x000D__x000A_                    &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "Filter '$($aFilter.Name)' set to ('$($aFilter.Value -join "', '")')."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_        $p.ContainerDiscoveryStart = {_x000D__x000A_            param ($Context)_x000D__x000A_            &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "Discovering in $($Context.BlockContainer.Item)."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_        $p.ContainerDiscoveryEnd = {_x000D__x000A_            param ($Context)_x000D__x000A_            # todo: this is very very slow because of View-flat_x000D__x000A_            &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "Found $(@(View-Flat -Block $Context.Block).Count) tests. $(ConvertTo-HumanTime $Context.Duration)"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.DiscoveryEnd = {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        # if ($Context.AnyFocusedTests) {_x000D__x000A_        #     $focusedTests = $Context.FocusedTests_x000D__x000A_        #     &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "There are some ($($focusedTests.Count)) focused tests '$($(foreach ($p in $focusedTests) { $p -join "." }) -join ",")' running just them."_x000D__x000A_        # }_x000D__x000A__x000D__x000A_        # . Found $count$(if(1 -eq $count) { " test" } else { " tests" })_x000D__x000A_        &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "Discovery finished in $(ConvertTo-HumanTime $Context.Duration)."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_        $p.ContainerRunStart = {_x000D__x000A_            param ($Context)_x000D__x000A__x000D__x000A_            if ("file" -eq $Context.Block.BlockContainer.Type) {_x000D__x000A_                # write two spaces to separate each file_x000D__x000A_                &amp; $SafeCommands["Write-Host"] -ForegroundColor Magenta "`nRunning tests from '$($Context.Block.BlockContainer.Item)'"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.ContainerRunEnd = {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        if ($Context.Result.ErrorRecord.Count -gt 0) {_x000D__x000A_            &amp; $SafeCommands["Write-Host"] -ForegroundColor $ReportTheme.Fail "[-] $($Context.Result.Item) failed with:"_x000D__x000A_            Write-ErrorToScreen $Context.Result.ErrorRecord_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ('Normal' -eq $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_            $humanTime = "$(Get-HumanTime ($Context.Result.Duration)) ($(Get-HumanTime $Context.Result.UserDuration)|$(Get-HumanTime $Context.Result.FrameworkDuration))"_x000D__x000A__x000D__x000A_            if ($Context.Result.Passed) {_x000D__x000A_                &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Pass "[+] $($Context.Result.Item)" -NoNewLine_x000D__x000A_                &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.PassTime " $humanTime"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # this won't work skipping the whole file when all it's tests are skipped is not a feature yet in 5.0.0_x000D__x000A_            if ($Context.Result.Skip) {_x000D__x000A_                &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Skipped "[!] $($Context.Result.Item)" -NoNewLine_x000D__x000A_                &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.SkippedTime " $humanTime"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_        $p.EachBlockSetupStart = {_x000D__x000A_            $Context.Configuration.BlockWritePostponed = $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_        $p.EachTestSetupStart = {_x000D__x000A_            param ($Context)_x000D__x000A_            # we posponed writing the Describe / Context to grab the Expanded name, because that is done_x000D__x000A_            # during execution to get all the variables in scope, if we are the first test then write it_x000D__x000A_            if ($Context.Test.First) {_x000D__x000A_                Write-BlockToScreen $Context.Test.Block_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.EachTestTeardownEnd = {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        # we are currently in scope of describe so $Test is hardtyped and conflicts_x000D__x000A_        $_test = $Context.Test_x000D__x000A__x000D__x000A_        if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_            $level = $_test.Path.Count_x000D__x000A_            $margin = $ReportStrings.Margin * ($level)_x000D__x000A_            $error_margin = $margin + $ReportStrings.Margin_x000D__x000A_            $out = $_test.ExpandedName_x000D__x000A_            if ($_test.ErrorRecord.FullyQualifiedErrorId -eq 'PesterTestSkipped') {_x000D__x000A_                $skippedMessage = [String]$_Test.ErrorRecord_x000D__x000A_                [String]$out += " $skippedMessage"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ('Normal' -eq $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_            $level = 0_x000D__x000A_            $margin = ''_x000D__x000A_            $error_margin = $ReportStrings.Margin_x000D__x000A_            $out = $_test.ExpandedPath_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "Unsupported level out output '$($PesterPreference.Output.Verbosity.Value)'"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $humanTime = "$(Get-HumanTime ($_test.Duration)) ($(Get-HumanTime $_test.UserDuration)|$(Get-HumanTime $_test.FrameworkDuration))"_x000D__x000A__x000D__x000A_        if ($PesterPreference.Debug.ShowNavigationMarkers.Value) {_x000D__x000A_            $out += ", $($_test.ScriptBlock.File):$($_Test.StartLine)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result = $_test.Result_x000D__x000A_        switch ($result) {_x000D__x000A_            Passed {_x000D__x000A_                if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Pass "$margin[+] $out" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.PassTime " $humanTime"_x000D__x000A_                }_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Failed {_x000D__x000A_                # If VSCode and not Integrated Terminal (usually a test-task), output Pester 4-format to match 'pester'-problemMatcher in VSCode._x000D__x000A_                if($env:TERM_PROGRAM -eq 'vscode' -and -not $psEditor) {_x000D__x000A__x000D__x000A_                    # Loop to generate problem for every failed assertion per test (when $PesterPreference.Should.ErrorAction.Value = "Continue")_x000D__x000A_                    foreach($e in $_test.ErrorRecord) {_x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Fail "$margin[-] $out" -NoNewLine_x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.FailTime " $humanTime"_x000D__x000A__x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Fail $($e.DisplayStackTrace -replace '(?m)^',$error_margin)_x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Fail $($e.DisplayErrorMessage -replace '(?m)^',$error_margin)_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                } else {_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Fail "$margin[-] $out" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.FailTime " $humanTime"_x000D__x000A__x000D__x000A_                    Write-ErrorToScreen $_test.ErrorRecord -ErrorMargin $error_margin_x000D__x000A_                }_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Skipped {_x000D__x000A_                if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Skipped "$margin[!] $out" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.SkippedTime " $humanTime"_x000D__x000A_                }_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Pending {_x000D__x000A_                if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_                    $because = if ($_test.FailureMessage) { ", because $($_test.FailureMessage)" } else { $null }_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Pending "$margin[?] $out" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Pending ", is pending$because" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.PendingTime " $humanTime"_x000D__x000A_                }_x000D__x000A_                break_x000D__x000A_            }_x000D__x000A__x000D__x000A_            Inconclusive {_x000D__x000A_                if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_                    $because = if ($_test.FailureMessage) { ", because $($_test.FailureMessage)" } else { $null }_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Inconclusive "$margin[?] $out" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Inconclusive ", is inconclusive$because" -NoNewLine_x000D__x000A_                    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.InconclusiveTime " $humanTime"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                break_x000D__x000A_            }_x000D__x000A__x000D__x000A_            default {_x000D__x000A_                if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_                    # TODO:  Add actual Incomplete status as default rather than checking for null time._x000D__x000A_                    if ($null -eq $_test.Duration) {_x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Incomplete "$margin[?] $out" -NoNewLine_x000D__x000A_                        &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.IncompleteTime " $humanTime"_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.EachBlockTeardownEnd = {_x000D__x000A_        param ($Context)_x000D__x000A__x000D__x000A_        if ($Context.Block.IsRoot) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Context.Block.OwnPassed) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_            # In Diagnostic output we postpone writing the Describing / Context until before the_x000D__x000A_            # setup of the first test to get the correct ExpandedName of the Block with all the_x000D__x000A_            # variables in context._x000D__x000A_            # if there is a failure before that (e.g. BeforeAll throws) we need to write Describing here._x000D__x000A_            # But not if the first test already executed._x000D__x000A_            if ($null -ne $Context.Block.Tests -and 0 -lt $Context.Block.Tests.Count) {_x000D__x000A_                # go through the tests to find the one that pester would invoke as first_x000D__x000A_                # it might not be the first one in the array if there are some skipped or filtered tests_x000D__x000A_                foreach ($t in $Context.Block.Tests) {_x000D__x000A_                    if ($t.First -and -not $t.Executed) {_x000D__x000A_                        Write-BlockToScreen $Context.Block_x000D__x000A_                        break_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $level = 0_x000D__x000A_        $margin = 0_x000D__x000A_        $error_margin = $ReportStrings.Margin_x000D__x000A__x000D__x000A_        if ($PesterPreference.Output.Verbosity.Value -in 'Detailed', 'Diagnostic') {_x000D__x000A_            $level = $Context.Block.Path.Count_x000D__x000A_            $margin = $ReportStrings.Margin * ($level)_x000D__x000A_            $error_margin = $margin + $ReportStrings.Margin_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($e in $Context.Block.ErrorRecord) { ConvertTo-FailureLines $e }_x000D__x000A_        &amp; $SafeCommands['Write-Host'] -ForegroundColor Red "[-] $($Context.Block.FrameworkData.CommandUsed) $($Context.Block.Path -join ".") failed"_x000D__x000A_        Write-ErrorToScreen $Context.Block.ErrorRecord $error_margin_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $p.End = {_x000D__x000A_        param ( $Context )_x000D__x000A__x000D__x000A_        Write-PesterReport $Context.TestRun_x000D__x000A_    }_x000D__x000A__x000D__x000A_    New-PluginObject @p_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-ErrorToScreen {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Err,_x000D__x000A_        [string] $ErrorMargin_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $multipleErrors = 1 -lt $Err.Count_x000D__x000A__x000D__x000A__x000D__x000A_    $out = if ($multipleErrors) {_x000D__x000A_        $c = 0_x000D__x000A_        $(foreach ($e in $Err) {_x000D__x000A_            $isFormattedError = $null -ne $e.DisplayErrorMessage_x000D__x000A_            "[$(($c++))] $(if ($isFormattedError){ $e.DisplayErrorMessage } else { $e.Exception })$(if ($null -ne $e.DisplayStackTrace) {"$([Environment]::NewLine)$($e.DisplayStackTrace)"})"_x000D__x000A_        }) -join [Environment]::NewLine_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $isFormattedError = $null -ne $Err.DisplayErrorMessage_x000D__x000A_        "$(if ($isFormattedError){ $Err.DisplayErrorMessage } else { $Err.Exception })$(if ($isFormattedError) { if ($null -ne $Err.DisplayStackTrace) {"$([Environment]::NewLine)$($Err.DisplayStackTrace)"}} else { if  ($null -ne $Err.ScriptStackTrace) {"$([Environment]::NewLine)$($Err.ScriptStackTrace)"}})"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $withMargin = ($out -split [Environment]::NewLine) -replace '(?m)^', $ErrorMargin -join [Environment]::NewLine_x000D__x000A_    &amp; $SafeCommands['Write-Host'] -ForegroundColor $ReportTheme.Fail "$withMargin"_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-BlockToScreen {_x000D__x000A_    param ($Block)_x000D__x000A__x000D__x000A_    # this function will write Describe / Context expanded name right before a test setup_x000D__x000A_    # or right before describe failure, we need to postpone this write to have the ExpandedName_x000D__x000A_    # correctly populated when there are data given to the block_x000D__x000A__x000D__x000A_    if ($Block.IsRoot) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($Block.FrameworkData.WrittenToScreen) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # write your parent to screen if they were not written before you_x000D__x000A_    if ($null -ne $Block.Parent -and -not $Block.Parent.IsRoot -and -not $Block.FrameworkData.Parent.WrittenToScreen) {_x000D__x000A_        Write-BlockToScreen -Block $Block.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $commandUsed = $Block.FrameworkData.CommandUsed_x000D__x000A__x000D__x000A_    # -1 moves the block closer to the start of theline_x000D__x000A_    $level = $Block.Path.Count - 1_x000D__x000A_    $margin = $ReportStrings.Margin * $level_x000D__x000A__x000D__x000A_    $name = if (-not [string]::IsNullOrWhiteSpace($Block.ExpandedName)) { $Block.ExpandedName } else { $Block.Name }_x000D__x000A_    $text = $ReportStrings.$commandUsed -f $name_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.ShowNavigationMarkers.Value) {_x000D__x000A_        $text += ", $($block.ScriptBlock.File):$($block.StartLine)"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (0 -eq $level -and -not $block.First) {_x000D__x000A_        # write extra line before top-level describe / context if it is not first_x000D__x000A_        # in that case there are already two spaces before the name of the file_x000D__x000A_        &amp; $SafeCommands['Write-Host']_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Block.FrameworkData.WrittenToScreen = $true_x000D__x000A_    &amp; $SafeCommands['Write-Host'] "${margin}${Text}" -ForegroundColor $ReportTheme.$CommandUsed_x000D__x000A_}_x000D__x000A_# file src\functions\Pester.Debugging.ps1_x000D__x000A_function Count-Scopes {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $ScriptBlock)_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # automatic variable that can help us count scopes must be constant a must not be all scopes_x000D__x000A_    # from the standard ones only Error seems to be that, let's ensure it is like that everywhere run_x000D__x000A_    # other candidate variables can be found by this code_x000D__x000A_    # Get-Variable  | where { -not ($_.Options -band [Management.Automation.ScopedItemOptions]"AllScope") -and $_.Options -band $_.Options -band [Management.Automation.ScopedItemOptions]"Constant" }_x000D__x000A__x000D__x000A_    # get-variable steps on it's toes and recurses when we mock it in a test_x000D__x000A_    # and we are also invoking this in user scope so we need to pass the reference_x000D__x000A_    # to the safely captured function in the user scope_x000D__x000A_    $safeGetVariable = $script:SafeCommands['Get-Variable']_x000D__x000A_    $sb = {_x000D__x000A_        param($safeGetVariable)_x000D__x000A_        $err = (&amp; $safeGetVariable -Name Error).Options_x000D__x000A_        if ($err -band "AllScope" -or (-not ($err -band "Constant"))) {_x000D__x000A_            throw "Error variable is set to AllScope, or is not marked as constant cannot use it to count scopes on this platform."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $scope = 0_x000D__x000A_        while ($null -eq (&amp; $safeGetVariable -Name Error -Scope $scope -ErrorAction SilentlyContinue)) {_x000D__x000A_            $scope++_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $scope - 1 # because we are in a function_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $property = [scriptblock].GetProperty('SessionStateInternal', $flags)_x000D__x000A_    $ssi = $property.GetValue($ScriptBlock, $null)_x000D__x000A_    $property.SetValue($sb, $ssi, $null)_x000D__x000A__x000D__x000A_    &amp;$sb $safeGetVariable_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-ScriptBlockInvocationHint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]_x000D__x000A_        $Hint_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($global:DisableScopeHints) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope SessionState -LazyMessage {_x000D__x000A_            $scope = Get-ScriptBlockHint $ScriptBlock_x000D__x000A_            $count = Count-Scopes -ScriptBlock $ScriptBlock_x000D__x000A_            "Invoking scriptblock from location '$Hint' in state '$scope', $count scopes deep:"_x000D__x000A_            "{"_x000D__x000A_            $ScriptBlock.ToString().Trim()_x000D__x000A_            "}"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Test-Hint {_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $property = $InputObject | &amp; $SafeCommands['Get-Member'] -Name Hint -MemberType NoteProperty_x000D__x000A_    if ($null -eq $property) {_x000D__x000A_        return $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [string]::IsNullOrWhiteSpace($property.Value)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-Hint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String] $Hint,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $InputObject,_x000D__x000A_        [Switch] $Force_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($InputObject | &amp; $SafeCommands['Get-Member'] -Name Hint -MemberType NoteProperty) {_x000D__x000A_        $hintIsNotSet = [string]::IsNullOrWhiteSpace($InputObject.Hint)_x000D__x000A_        if ($Force -or $hintIsNotSet) {_x000D__x000A_            $InputObject.Hint = $Hint_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        # do not change this to be called without the pipeline, it will throw: Cannot evaluate parameter 'InputObject' because its argument is specified as a script block and there is no input. A script block cannot be evaluated without input._x000D__x000A_        $InputObject | &amp; $SafeCommands['Add-Member'] -Name Hint -Value $Hint -MemberType NoteProperty_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-SessionStateHint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String] $Hint,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState,_x000D__x000A_        [Switch] $PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        if ($PassThru) {_x000D__x000A_            return $SessionState_x000D__x000A_        }_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # in all places where we capture SessionState we mark its internal state with a hint_x000D__x000A_    # the internal state does not change and we use it to invoke scriptblock in diferent_x000D__x000A_    # states, setting the hint on SessionState is only secondary to make is easier to debug_x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $internalSessionState = $SessionState.GetType().GetProperty('Internal', $flags).GetValue($SessionState, $null)_x000D__x000A_    if ($null -eq $internalSessionState) {_x000D__x000A_        throw "SessionState does not have any internal SessionState, this should never happen."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $hashcode = $internalSessionState.GetHashCode()_x000D__x000A_    # optionally sets the hint if there was none, so the hint from the_x000D__x000A_    # function that first captured this session state is preserved_x000D__x000A_    Set-Hint -Hint "$Hint ($hashcode))" -InputObject $internalSessionState_x000D__x000A_    # the public session state should always depend on the internal state_x000D__x000A_    Set-Hint -Hint $internalSessionState.Hint -InputObject $SessionState -Force_x000D__x000A__x000D__x000A_    if ($PassThru) {_x000D__x000A_        $SessionState_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-SessionStateHint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [Management.Automation.SessionState] $SessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # the hint is also attached to the session state object, but sessionstate objects are recreated while_x000D__x000A_    # the internal state stays static so to see the hint on object that we receive via $PSCmdlet.SessionState we need_x000D__x000A_    # to look at the InternalSessionState. the internal state should be never null so just looking there is enough_x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $internalSessionState = $SessionState.GetType().GetProperty('Internal', $flags).GetValue($SessionState, $null)_x000D__x000A_    if (Test-Hint $internalSessionState) {_x000D__x000A_        $internalSessionState.Hint_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Set-ScriptBlockHint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock,_x000D__x000A_        [string] $Hint_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $internalSessionState = $ScriptBlock.GetType().GetProperty('SessionStateInternal', $flags).GetValue($ScriptBlock, $null)_x000D__x000A_    if ($null -eq $internalSessionState) {_x000D__x000A_        if (Test-Hint -InputObject $ScriptBlock) {_x000D__x000A_            # the scriptblock already has a hint and there is not internal state_x000D__x000A_            # so the hint on the scriptblock is enough_x000D__x000A_            # if there was an internal state we would try to copy the hint from it_x000D__x000A_            # onto the scriptblock to keep them in sync_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $Hint) {_x000D__x000A_            throw "Cannot set ScriptBlock hint because it is unbound ScriptBlock (with null internal state) and no -Hint was provided."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # adds hint on the ScriptBlock_x000D__x000A_        # the internal session state is null so we must attach the hint directly_x000D__x000A_        # on the scriptblock_x000D__x000A_        Set-Hint -Hint "$Hint (Unbound)" -InputObject $ScriptBlock -Force_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if (Test-Hint -InputObject $internalSessionState) {_x000D__x000A_            # there already is hint on the internal state, we take it and sync_x000D__x000A_            # it with the hint on the object_x000D__x000A_            Set-Hint -Hint $internalSessionState.Hint -InputObject $ScriptBlock -Force_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $Hint) {_x000D__x000A_            throw "Cannot set ScriptBlock hint because it's internal state does not have any Hint and no external -Hint was provided."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $hashcode = $internalSessionState.GetHashCode()_x000D__x000A_        $Hint = "$Hint - ($hashCode)"_x000D__x000A_        Set-Hint -Hint $Hint -InputObject $internalSessionState -Force_x000D__x000A_        Set-Hint -Hint $Hint -InputObject $ScriptBlock -Force_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ScriptBlockHint {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ScriptBlock] $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($script:DisableScopeHints) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # the hint is also attached to the scriptblock object, but not all scriptblocks are tagged by us,_x000D__x000A_    # the internal state stays static so to see the hint on object that we receive we need to look at the InternalSessionState_x000D__x000A_    $flags = [System.Reflection.BindingFlags]'Instance,NonPublic'_x000D__x000A_    $internalSessionState = $ScriptBlock.GetType().GetProperty('SessionStateInternal', $flags).GetValue($ScriptBlock, $null)_x000D__x000A__x000D__x000A__x000D__x000A_    if ($null -ne $internalSessionState -and (Test-Hint $internalSessionState)) {_x000D__x000A_        return $internalSessionState.Hint_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (Test-Hint $ScriptBlock) {_x000D__x000A_        return $ScriptBlock.Hint_x000D__x000A_    }_x000D__x000A__x000D__x000A_    "Unknown unbound ScriptBlock"_x000D__x000A_}_x000D__x000A_# file src\functions\Pester.Scoping.ps1_x000D__x000A_function Set-ScriptBlockScope {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'FromSessionState')]_x000D__x000A_        [System.Management.Automation.SessionState]_x000D__x000A_        $SessionState,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'FromSessionStateInternal')]_x000D__x000A_        [AllowNull()]_x000D__x000A_        $SessionStateInternal_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq 'FromSessionState') {_x000D__x000A_        $SessionStateInternal = $script:SessionStateInternalProperty.GetValue($SessionState, $null)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $scriptBlockSessionState = $script:ScriptBlockSessionStateInternalProperty.GetValue($ScriptBlock, $null)_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        # hint can be attached on the internal state (preferable) when the state is there._x000D__x000A_        # if we are given unbound scriptblock with null internal state then we hope that_x000D__x000A_        # the source cmdlet set the hint directly on the ScriptBlock,_x000D__x000A_        # otherwise the origin is unknown and the cmdlet that allowed this scriptblock in_x000D__x000A_        # should be found and add hint_x000D__x000A__x000D__x000A_        $hint = $scriptBlockSessionState.Hint_x000D__x000A_        if ($null -eq $hint) {_x000D__x000A_            if ($null -ne $ScriptBlock.Hint) {_x000D__x000A_                $hint = $ScriptBlock.Hint_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $hint = 'Unknown unbound ScriptBlock'_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Write-PesterDebugMessage -Scope SessionState "Setting ScriptBlock state from source state '$hint' to '$($SessionStateInternal.Hint)'"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $script:ScriptBlockSessionStateInternalProperty.SetValue($ScriptBlock, $SessionStateInternal, $null)_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Set-ScriptBlockHint -ScriptBlock $ScriptBlock_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ScriptBlockScope {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $sessionStateInternal = $script:ScriptBlockSessionStateInternalProperty.GetValue($ScriptBlock, $null)_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope SessionState "Getting scope from ScriptBlock '$($sessionStateInternal.Hint)'"_x000D__x000A_    }_x000D__x000A_    $sessionStateInternal_x000D__x000A_}_x000D__x000A_# file src\functions\Pester.SessionState.Mock.ps1_x000D__x000A_# session state bound functions that act as endpoints,_x000D__x000A_# so the internal funtions can make their session state_x000D__x000A_# consumption explicit and are testable (also prevents scrolling past_x000D__x000A_# the whole documentation :D )_x000D__x000A__x000D__x000A_function Get-MockPlugin () {_x000D__x000A_    New-PluginObject -Name "Mock" `_x000D__x000A_        -ContainerRunStart {_x000D__x000A_            param($Context)_x000D__x000A__x000D__x000A_            $Context.Block.PluginData.Mock = @{_x000D__x000A_                Hooks       = [System.Collections.Generic.List[object]]@()_x000D__x000A_                CallHistory = @{}_x000D__x000A_                Behaviors   = @{}_x000D__x000A_            }_x000D__x000A_        } -EachBlockSetupStart {_x000D__x000A_        param($Context)_x000D__x000A_        $Context.Block.PluginData.Mock = @{_x000D__x000A_            Hooks       = [System.Collections.Generic.List[object]]@()_x000D__x000A_            CallHistory = @{}_x000D__x000A_            Behaviors   = @{}_x000D__x000A_        }_x000D__x000A_    } -EachTestSetupStart {_x000D__x000A_        param($Context)_x000D__x000A_        $Context.Test.PluginData.Mock = @{_x000D__x000A_            Hooks       = [System.Collections.Generic.List[object]]@()_x000D__x000A_            CallHistory = @{}_x000D__x000A_            Behaviors   = @{}_x000D__x000A_        }_x000D__x000A_    } -EachTestTeardownEnd {_x000D__x000A_        param($Context)_x000D__x000A_        # we are defining that table in the setup but the teardowns_x000D__x000A_        # need to be resilient, because they will run even if the setups_x000D__x000A_        # did not run_x000D__x000A_        # TODO: resolve this path safely_x000D__x000A_        $hooks = $Context.Test.PluginData.Mock.Hooks_x000D__x000A_        Remove-MockHook -Hooks $hooks_x000D__x000A_    } -EachBlockTeardownEnd {_x000D__x000A_        param($Context)_x000D__x000A_        # TODO: resolve this path safely_x000D__x000A_        $hooks = $Context.Block.PluginData.Mock.Hooks_x000D__x000A_        Remove-MockHook -Hooks $hooks_x000D__x000A_    } -ContainerRunEnd {_x000D__x000A_        param($Context)_x000D__x000A_        # TODO: resolve this path safely_x000D__x000A_        $hooks = $Context.Block.PluginData.Mock.Hooks_x000D__x000A_        Remove-MockHook -Hooks $hooks_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Mock {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Mocks the behavior of an existing command with an alternate_x000D__x000A_implementation._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_This creates new behavior for any existing command within the scope of a_x000D__x000A_Describe or Context block. The function allows you to specify a script block_x000D__x000A_that will become the command's new behavior._x000D__x000A__x000D__x000A_Optionally, you may create a Parameter Filter which will examine the_x000D__x000A_parameters passed to the mocked command and will invoke the mocked_x000D__x000A_behavior only if the values of the parameter values pass the filter. If_x000D__x000A_they do not, the original command implementation will be invoked instead_x000D__x000A_of a mock._x000D__x000A__x000D__x000A_You may create multiple mocks for the same command, each using a different_x000D__x000A_ParameterFilter. ParameterFilters will be evaluated in reverse order of_x000D__x000A_their creation. The last one created will be the first to be evaluated._x000D__x000A_The mock of the first filter to pass will be used. The exception to this_x000D__x000A_rule are Mocks with no filters. They will always be evaluated last since_x000D__x000A_they will act as a "catch all" mock._x000D__x000A__x000D__x000A_Mocks can be marked Verifiable. If so, the Assert-VerifiableMock command_x000D__x000A_can be used to check if all Verifiable mocks were actually called. If any_x000D__x000A_verifiable mock is not called, Should -InvokeVerifiable will throw an_x000D__x000A_exception and indicate all mocks not called._x000D__x000A__x000D__x000A_If you wish to mock commands that are called from inside a script module,_x000D__x000A_you can do so by using the -ModuleName parameter to the Mock command. This_x000D__x000A_injects the mock into the specified module. If you do not specify a_x000D__x000A_module name, the mock will be created in the same scope as the test script._x000D__x000A_You may mock the same command multiple times, in different scopes, as needed._x000D__x000A_Each module's mock maintains a separate call history and verified status._x000D__x000A__x000D__x000A_.PARAMETER CommandName_x000D__x000A_The name of the command to be mocked._x000D__x000A__x000D__x000A_.PARAMETER MockWith_x000D__x000A_A ScriptBlock specifying the behavior that will be used to mock CommandName._x000D__x000A_The default is an empty ScriptBlock._x000D__x000A_NOTE: Do not specify param or dynamicparam blocks in this script block._x000D__x000A_These will be injected automatically based on the signature of the command_x000D__x000A_being mocked, and the MockWith script block can contain references to the_x000D__x000A_mocked commands parameter variables._x000D__x000A__x000D__x000A_.PARAMETER Verifiable_x000D__x000A_When this is set, the mock will be checked when Should -InvokeVerifiable is_x000D__x000A_called._x000D__x000A__x000D__x000A_.PARAMETER ParameterFilter_x000D__x000A_An optional filter to limit mocking behavior only to usages of_x000D__x000A_CommandName where the values of the parameters passed to the command_x000D__x000A_pass the filter._x000D__x000A__x000D__x000A_This ScriptBlock must return a boolean value. See examples for usage._x000D__x000A__x000D__x000A_.PARAMETER ModuleName_x000D__x000A_Optional string specifying the name of the module where this command_x000D__x000A_is to be mocked.  This should be a module that _calls_ the mocked_x000D__x000A_command; it doesn't necessarily have to be the same module which_x000D__x000A_originally implemented the command._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterType_x000D__x000A_Optional list of parameter names that should use Object as the parameter_x000D__x000A_type instead of the parameter type defined by the function. This relaxes the_x000D__x000A_type requirements and allows some strongly typed functions to be mocked_x000D__x000A_more easily._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterValidation_x000D__x000A_Optional list of parameter names in the original command_x000D__x000A_that should not have any validation rules applied. This relaxes the_x000D__x000A_validation requirements, and allows functions that are strict about their_x000D__x000A_parameter validation to be mocked more easily._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_This Mock will only be applied to Get-ChildItem calls within the user's temp directory._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Set-Content {} -Verifiable -ParameterFilter { $Path -eq "some_path" -and $Value -eq "Expected Value" }_x000D__x000A__x000D__x000A_When this mock is used, if the Mock is never invoked and Should -InvokeVerifiable is called, an exception will be thrown. The command behavior will do nothing since the ScriptBlock is empty._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\1) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\2) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "C_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\3) }_x000D__x000A_```_x000D__x000A__x000D__x000A_Multiple mocks of the same command may be used. The parameter filter determines which is invoked. Here, if Get-ChildItem is called on the "2" directory of the temp folder, then B_File.txt will be returned._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName="B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName="A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, both mocks could apply since both filters will pass. A_File.TXT will be returned because it was the most recent Mock created._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem c:\windows_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, A_File.TXT will be returned. Since no filter was specified, it will apply to any call to Get-ChildItem that does not pass another filter._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, B_File.TXT will be returned. Even though the filterless mock was created more recently. This illustrates that filterless Mocks are always evaluated last regardless of their creation order._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ModuleName MyTestModule_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem from within the MyTestModule module_x000D__x000A_will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Get-Module -Name ModuleMockExample | Remove-Module_x000D__x000A_New-Module -Name ModuleMockExample  -ScriptBlock {_x000D__x000A_    function Hidden { "Internal Module Function" }_x000D__x000A_    function Exported { Hidden }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function Exported_x000D__x000A_} | Import-Module -Force_x000D__x000A__x000D__x000A_Describe "ModuleMockExample" {_x000D__x000A__x000D__x000A_    It "Hidden function is not directly accessible outside the module" {_x000D__x000A_        { Hidden } | Should -Throw_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Original Hidden function is called" {_x000D__x000A_        Exported | Should -Be "Internal Module Function"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Hidden is replaced with our implementation" {_x000D__x000A_        Mock Hidden { "Mocked" } -ModuleName ModuleMockExample_x000D__x000A_        Exported | Should -Be "Mocked"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_This example shows how calls to commands made from inside a module can be_x000D__x000A_mocked by using the -ModuleName parameter._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Mock_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    # Mock_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [string]$CommandName,_x000D__x000A_        [ScriptBlock]$MockWith = {},_x000D__x000A_        [switch]$Verifiable,_x000D__x000A_        [ScriptBlock]$ParameterFilter,_x000D__x000A_        [string]$ModuleName,_x000D__x000A_        [string[]]$RemoveParameterType,_x000D__x000A_        [string[]]$RemoveParameterValidation_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        # this is to allow mocks in between Describe and It which is discouraged but common_x000D__x000A_        # and will make for an easier move to v5_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Setting up $(if ($ParameterFilter) {"parametrized"} else {"default"}) mock for$(if ($ModuleName) {" $ModuleName -"}) $CommandName."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        $null = Set-ScriptBlockHint -Hint "Unbound MockWith - Captured in Mock" -ScriptBlock $MockWith_x000D__x000A_        $null = if ($ParameterFilter) { Set-ScriptBlockHint -Hint "Unbound ParameterFilter - Captured in Mock" -ScriptBlock $ParameterFilter }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # takes 0.4 ms max_x000D__x000A_    $invokeMockCallBack = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Invoke-Mock', 'function')_x000D__x000A__x000D__x000A_    $mockData = Get-MockDataForCurrentScope_x000D__x000A_    $contextInfo = Resolve-Command $CommandName $ModuleName -SessionState $SessionState_x000D__x000A__x000D__x000A_    if ($contextInfo.IsMockBootstrapFunction) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock resolves to an existing hook, will only define mock behavior."_x000D__x000A_        }_x000D__x000A_        $hook = $contextInfo.Hook_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock does not have a hook yet, creating a new one."_x000D__x000A_        }_x000D__x000A_        $hook = Create-MockHook -ContextInfo $contextInfo -InvokeMockCallback $invokeMockCallBack_x000D__x000A_        $mockData.Hooks.Add($hook)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($mockData.Behaviors.ContainsKey($contextInfo.Command.Name)) {_x000D__x000A_        $behaviors = $mockData.Behaviors[$contextInfo.Command.Name]_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $behaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_        $mockData.Behaviors[$contextInfo.Command.Name] = $behaviors_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $behavior = New-MockBehavior -ContextInfo $contextInfo -MockWith $MockWith -Verifiable:$Verifiable -ParameterFilter $ParameterFilter -Hook $hook_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Adding a new $(if ($behavior.IsDefault) {"default"} else {"parametrized"}) behavior to $(if ($behavior.ModuleName) { " $($behavior.ModuleName) -"})$($behavior.CommandName)."_x000D__x000A_    }_x000D__x000A_    $behaviors.Add($behavior)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-AllMockBehaviors {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $CommandName_x000D__x000A_    )_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Getting all defined mock behaviors in this and parent scopes for command $CommandName."_x000D__x000A_    }_x000D__x000A_    # this is used for invoking mocks_x000D__x000A_    # in there we care about all mocks attached to the current test_x000D__x000A_    # or any of the mocks above it_x000D__x000A_    # this does not list mocks in other tests_x000D__x000A_    $currentTest = Get-CurrentTest_x000D__x000A_    $inTest = $null -ne $currentTest_x000D__x000A__x000D__x000A_    $behaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    if ($inTest) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "We are in a test. Finding all behaviors in this test."_x000D__x000A_        }_x000D__x000A_        $bs = @(if ($currentTest.PluginData.Mock.Behaviors.ContainsKey($CommandName)) {_x000D__x000A_            $currentTest.PluginData.Mock.Behaviors.$CommandName_x000D__x000A_        })_x000D__x000A_        if ($null -ne $bs -and $bs.Count -gt 0) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Found behaviors for '$CommandName' in the test."_x000D__x000A_            }_x000D__x000A_            $bss = @(for ($i = $bs.Count - 1; $i -ge 0; $i--) { $bs[$i] })_x000D__x000A_            $behaviors.AddRange($bss)_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Found no behaviors for '$CommandName' in this test."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Finding all behaviors in this block and parent blocks."_x000D__x000A_    }_x000D__x000A_    $block = Get-CurrentBlock_x000D__x000A__x000D__x000A_    # recurse up_x000D__x000A_    $behaviorsInTestCount = $behaviors.Count_x000D__x000A_    while ($null -ne $block) {_x000D__x000A__x000D__x000A_        # action_x000D__x000A_        $bs = @(if ($block.PluginData.Mock.Behaviors.ContainsKey($CommandName)) {_x000D__x000A_            $block.PluginData.Mock.Behaviors.$CommandName_x000D__x000A_        })_x000D__x000A__x000D__x000A_        if ($null -ne $bs -and 0 -lt @($bs).Count) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope Mock "Found behaviors for '$CommandName' in '$($block.Name)'."_x000D__x000A_            }_x000D__x000A_            $bss = @(for ($i = $bs.Count - 1; $i -ge 0; $i--) { $bs[$i] })_x000D__x000A_            $behaviors.AddRange($bss)_x000D__x000A_        }_x000D__x000A_        # action end_x000D__x000A__x000D__x000A_        $block = $block.Parent_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value -and $behaviorsInTestCount -eq $behaviors.Count) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "No behaviors for '$CommandName' were found in this or any parent blocks."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -LazyMessage {_x000D__x000A_            "Found $($behaviors.Count) behaviors for '$CommandName': "_x000D__x000A_            foreach ($b in $behaviors) {_x000D__x000A_                "    Body: { $($b.ScriptBlock.ToString().Trim()) }"_x000D__x000A_                "    Filter: $(if ($b.Filter) { "{ $($b.Filter.ToString().Trim()) }" } else { '$null' })"_x000D__x000A_                "    Verifiable: $($b.Verifiable)"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $behaviors_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-VerifiableBehaviors {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_    )_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Getting all verifiable mock behaviors in this scope."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $currentTest = Get-CurrentTest_x000D__x000A_    $inTest = $null -ne $currentTest_x000D__x000A__x000D__x000A_    $behaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    if ($inTest) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "We are in a test. Finding all behaviors in this test."_x000D__x000A_        }_x000D__x000A_        $allBehaviors = $currentTest.PluginData.Mock.Behaviors.Values_x000D__x000A_        if ($null -ne $allBehaviors -and $allBehaviors.Count -gt 0) {_x000D__x000A_            # all behaviors for all commands_x000D__x000A_            foreach ($commandBehaviors in $allBehaviors) {_x000D__x000A_                if ($null -ne $commandBehaviors -and $commandBehaviors.Count -gt 0) {_x000D__x000A_                    # all behaviors for single command_x000D__x000A_                    foreach ($behavior in $commandBehaviors) {_x000D__x000A_                        if ($behavior.Verifiable) {_x000D__x000A_                            $behaviors.Add($behavior)_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    $block = Get-CurrentBlock_x000D__x000A__x000D__x000A_    # recurse up_x000D__x000A_    while ($null -ne $block) {_x000D__x000A__x000D__x000A_        ## action_x000D__x000A_        $allBehaviors = $block.PluginData.Mock.Behaviors.Values_x000D__x000A_        # all behaviors for all commands_x000D__x000A_        if ($null -ne $allBehaviors -or $allBehaviors.Count -ne 0) {_x000D__x000A_            foreach ($commandBehaviors in $allBehaviors) {_x000D__x000A_                if ($null -ne $commandBehaviors -and $commandBehaviors.Count -gt 0) {_x000D__x000A_                    # all behaviors for single command_x000D__x000A_                    foreach ($behavior in $commandBehaviors) {_x000D__x000A_                        if ($behavior.Verifiable) {_x000D__x000A_                            $behaviors.Add($behavior)_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # end action_x000D__x000A_        $block = $block.Parent_x000D__x000A_    }_x000D__x000A_    # end_x000D__x000A__x000D__x000A_    $behaviors_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Get-AssertMockTable {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        $Frame,_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $CommandName,_x000D__x000A_        [String] $ModuleName_x000D__x000A_    )_x000D__x000A_    # frame looks like this_x000D__x000A_    # [PSCustomObject]@{_x000D__x000A_    #     Scope = int_x000D__x000A_    #     Frame = block | test_x000D__x000A_    #     IsTest = bool_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    $key = "$ModuleName||$CommandName"_x000D__x000A_    $scope = $Frame.Scope_x000D__x000A_    $inTest = $Frame.IsTest_x000D__x000A_    # this is used for assertions, in here we need to collect_x000D__x000A_    # all call histories for the given command in the scope._x000D__x000A_    # if the scope number is bigger than 0 then we need all_x000D__x000A_    # in the whole scope including all its_x000D__x000A__x000D__x000A_    if ($inTest -and 0 -eq $scope) {_x000D__x000A_        # we are in test and we care only about the test scope,_x000D__x000A_        # this is easy, we just look for call history of the command_x000D__x000A__x000D__x000A__x000D__x000A_        $history = if ($Frame.Frame.PluginData.Mock.CallHistory.ContainsKey($Key)) {_x000D__x000A_            # do not enumerate so we get the same thing back_x000D__x000A_            # even if it is a collection_x000D__x000A_            $Frame.Frame.PluginData.Mock.CallHistory.$Key_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($history) {_x000D__x000A_            return @{_x000D__x000A_                "$key" = [Collections.Generic.List[object]]@($history)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            return @{_x000D__x000A_                "$key" = [Collections.Generic.List[object]]@()_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # TODO: This figures out if the mock was defined, when there  were 0 calls, it adds overhead_x000D__x000A_            # and does not work with the current layout of hooks and history_x000D__x000A_            # $test = $Frame.Frame_x000D__x000A_            # $mockInTest = tryGetValue $test.PluginData.Mock.Hooks $key_x000D__x000A_            # if ($mockInTest) {_x000D__x000A_            #     # the mock was defined in it but it was not called in this scope_x000D__x000A_            #     return @{_x000D__x000A_            #         "$key" = @()_x000D__x000A_            #     }_x000D__x000A_            # }_x000D__x000A_            # else {_x000D__x000A_            #     # try finding the mock definition in upper scopes, because it was not found in the current test_x000D__x000A_            #     $mockInBlock = Recurse-Up $test.Block {_x000D__x000A_            #         param ($b)_x000D__x000A_            #         if ((tryGetProperty $b.PluginData Mock) -and (tryGetProperty $b.PluginData.Mock Hooks)) {_x000D__x000A_            #             tryGetValue $b.PluginData.Mock.Hooks $key_x000D__x000A_            #         }_x000D__x000A_            #     }_x000D__x000A__x000D__x000A_            #     if (none $mockInBlock) {_x000D__x000A_            #         throw "Could not find any mock definition for $CommandName$(if ($ModuleName) { " from module $ModuleName"})."_x000D__x000A_            #     }_x000D__x000A_            #     else {_x000D__x000A_            #         # the mock was defined in some upper scope but it was not called in this it_x000D__x000A_            #         return @{_x000D__x000A_            #             "$key" = @()_x000D__x000A_            #         }_x000D__x000A_            #     }_x000D__x000A_            #}_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    # this is harder, we have scope and we are in a block, we need to look_x000D__x000A_    # in this block and any child for mock calls_x000D__x000A__x000D__x000A_    $currentBlock = if ($inTest) { $Frame.Frame.Block } else { $Frame.Frame }_x000D__x000A_    if ($inTest) {_x000D__x000A_        # we are in test but we only inspect blocks, so getting current block automatically_x000D__x000A_        # makes us in scope 1, so if we got 1 from the parameter we need to translate it to 0_x000D__x000A_        $scope -= 1_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($scope -eq 0) {_x000D__x000A_        # in scope 0 the current block is the base block_x000D__x000A_        $block = $currentBlock_x000D__x000A_    }_x000D__x000A_    elseif ($scope -eq 1) {_x000D__x000A_        # in scope 1 it is the parent_x000D__x000A_        $block = if ($null -ne $currentBlock.Parent) { $currentBlock.Parent } else { $currentBlock }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        # otherwise we just walk up as many scopes as needed until_x000D__x000A_        # we reach the desired scope, or the root of the tree, the above ifs could_x000D__x000A_        # be replaced by this, but they are easier to write and use for the most common_x000D__x000A_        # cases_x000D__x000A_        $i = $currentBlock_x000D__x000A_        $level = $scope - 1_x000D__x000A_        while ($level -gt 0 -and ($null -ne $i.Parent)) {_x000D__x000A_            $level--_x000D__x000A_            $i = $i.Parent_x000D__x000A_        }_x000D__x000A_        $block = $i_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    # we have our block so we need to collect all the history for the given mock_x000D__x000A__x000D__x000A_    $history = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    $addToHistory = {_x000D__x000A_        param($b)_x000D__x000A__x000D__x000A_        if (-not $b.pluginData.ContainsKey('Mock')) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $mockData = $b.pluginData.Mock_x000D__x000A__x000D__x000A_        $callHistory = $mockData.CallHistory_x000D__x000A__x000D__x000A__x000D__x000A_        $v = if ($callHistory.ContainsKey($key)) {_x000D__x000A_            $callHistory.$key_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -ne $v -and 0 -ne $v.Count) {_x000D__x000A_            $history.AddRange([System.Collections.Generic.List[Object]]@($v))_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Fold-Block -Block $Block -OnBlock $addToHistory -OnTest $addToHistory_x000D__x000A_    if (0 -eq $history.Count) {_x000D__x000A_        # we did not find any calls, is the mock even defined?_x000D__x000A_        # TODO: should we look in the scope and the upper scopes for the mock or just assume 0 calls were done?_x000D__x000A_        return @{_x000D__x000A_            "$key" = [Collections.Generic.List[object]]@()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    return @{_x000D__x000A_        "$key" = [Collections.Generic.List[object]]@($history)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-MockDataForCurrentScope {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # this returns a mock table based on location, that we_x000D__x000A_    # then use to add the mock into, keep in mind that what we_x000D__x000A_    # pass must be a reference, so the data can be written in this_x000D__x000A_    # table_x000D__x000A__x000D__x000A_    $location = $currentTest = Get-CurrentTest_x000D__x000A_    $inTest = $null -ne $currentTest_x000D__x000A__x000D__x000A_    if (-not $inTest) {_x000D__x000A_        $location = $currentBlock = Get-CurrentBlock_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (none @($currentTest, $currentBlock)) {_x000D__x000A_        throw "I am neither in a test or a block, where am I?"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $location.PluginData.Mock) {_x000D__x000A_        throw "Mock data are not setup for this scope, what happened?"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($inTest) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "We are in a test. Returning mock table from test scope."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock "We are in a block, one time setup or similar. Returning mock table from test block."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $location.PluginData.Mock_x000D__x000A_}_x000D__x000A__x000D__x000A_function Assert-VerifiableMock {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if all verifiable Mocks has been called at least once._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -InvokeVerifiable INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-VerifiableMock_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A_    [CmdletBinding()]param()_x000D__x000A_    $sb = {_x000D__x000A_        Should -InvokeVerifiable_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb_x000D__x000A_}_x000D__x000A_function Should-InvokeVerifiable {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if any Verifiable Mock has not been invoked. If so, this will throw an exception._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_This can be used in tandem with the -Verifiable switch of the Mock_x000D__x000A_function. Mock can be used to mock the behavior of an existing command_x000D__x000A_and optionally take a -Verifiable switch. When Should -InvokeVerifiable_x000D__x000A_is called, it checks to see if any Mock marked Verifiable has not been_x000D__x000A_invoked. If any mocks have been found that specified -Verifiable and_x000D__x000A_have not been invoked, an exception will be thrown._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Set-Content {} -Verifiable -ParameterFilter {$Path -eq "some_path" -and $Value -eq "Expected Value"}_x000D__x000A__x000D__x000A_{ ...some code that never calls Set-Content some_path -Value "Expected Value"... }_x000D__x000A__x000D__x000A_Should -InvokeVerifiable_x000D__x000A__x000D__x000A_This will throw an exception and cause the test to fail._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Set-Content {} -Verifiable -ParameterFilter {$Path -eq "some_path" -and $Value -eq "Expected Value"}_x000D__x000A__x000D__x000A_Set-Content some_path -Value "Expected Value"_x000D__x000A__x000D__x000A_Should -InvokeVerifiable_x000D__x000A__x000D__x000A_This will not throw an exception because the mock was invoked._x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    $behaviors = @(Get-VerifiableBehaviors)_x000D__x000A_    Should-InvokeVerifiableInternal -Behaviors $behaviors_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name InvokeVerifiable `_x000D__x000A_    -InternalName Should-InvokeVerifiable `_x000D__x000A_    -Test         ${function:Should-InvokeVerifiable}_x000D__x000A__x000D__x000A_function Assert-MockCalled {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if a Mocked command has been called a certain number of times_x000D__x000A_and throws an exception if it has not._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -Invoke INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-MockCalled_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'ParameterFilter')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string]$CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [int]$Times = 1,_x000D__x000A__x000D__x000A_        [ScriptBlock]$ParameterFilter = {$True},_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ExclusiveFilter', Mandatory = $true)]_x000D__x000A_        [scriptblock] $ExclusiveFilter,_x000D__x000A__x000D__x000A_        [string] $ModuleName,_x000D__x000A__x000D__x000A_        [string] $Scope = 0,_x000D__x000A_        [switch] $Exactly_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A__x000D__x000A_    $sb = {_x000D__x000A_        param ($__params__p)_x000D__x000A_        Should -Invoke @__params__p_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb $PSBoundParameters_x000D__x000A_}_x000D__x000A__x000D__x000A_function Should-Invoke {_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if a Mocked command has been called a certain number of times_x000D__x000A_and throws an exception if it has not._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_This command verifies that a mocked command has been called a certain number_x000D__x000A_of times.  If the call history of the mocked command does not match the parameters_x000D__x000A_passed to Should -Invoke, Should -Invoke will throw an exception._x000D__x000A__x000D__x000A_.PARAMETER CommandName_x000D__x000A_The mocked command whose call history should be checked._x000D__x000A__x000D__x000A_.PARAMETER ModuleName_x000D__x000A_The module where the mock being checked was injected.  This is optional,_x000D__x000A_and must match the ModuleName that was used when setting up the Mock._x000D__x000A__x000D__x000A_.PARAMETER Times_x000D__x000A_The number of times that the mock must be called to avoid an exception_x000D__x000A_from throwing._x000D__x000A__x000D__x000A_.PARAMETER Exactly_x000D__x000A_If this switch is present, the number specified in Times must match_x000D__x000A_exactly the number of times the mock has been called. Otherwise it_x000D__x000A_must match "at least" the number of times specified.  If the value_x000D__x000A_passed to the Times parameter is zero, the Exactly switch is implied._x000D__x000A__x000D__x000A_.PARAMETER ParameterFilter_x000D__x000A_An optional filter to qualify which calls should be counted. Only those_x000D__x000A_calls to the mock whose parameters cause this filter to return true_x000D__x000A_will be counted._x000D__x000A__x000D__x000A_.PARAMETER ExclusiveFilter_x000D__x000A_Like ParameterFilter, except when you use ExclusiveFilter, and there_x000D__x000A_were any calls to the mocked command which do not match the filter,_x000D__x000A_an exception will be thrown.  This is a convenient way to avoid needing_x000D__x000A_to have two calls to Should -Invoke like this:_x000D__x000A__x000D__x000A_Should -Invoke SomeCommand -Times 1 -ParameterFilter { $something -eq $true }_x000D__x000A_Should -Invoke SomeCommand -Times 0 -ParameterFilter { $something -ne $true }_x000D__x000A__x000D__x000A_.PARAMETER Scope_x000D__x000A_An optional parameter specifying the Pester scope in which to check for_x000D__x000A_calls to the mocked command. For RSpec style tests, Should -Invoke will find_x000D__x000A_all calls to the mocked command in the current Context block (if present),_x000D__x000A_or the current Describe block (if there is no active Context), by default. Valid_x000D__x000A_values are Describe, Context and It. If you use a scope of Describe or_x000D__x000A_Context, the command will identify all calls to the mocked command in the_x000D__x000A_current Describe / Context block, as well as all child scopes of that block._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_C:\PS&gt;Mock Set-Content {}_x000D__x000A__x000D__x000A_{... Some Code ...}_x000D__x000A__x000D__x000A_C:\PS&gt;Should -Invoke Set-Content_x000D__x000A__x000D__x000A_This will throw an exception and cause the test to fail if Set-Content is not called in Some Code._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_C:\PS&gt;Mock Set-Content -parameterFilter {$path.StartsWith("$env:temp\")}_x000D__x000A__x000D__x000A_{... Some Code ...}_x000D__x000A__x000D__x000A_C:\PS&gt;Should -Invoke Set-Content 2 { $path -eq "$env:temp\test.txt" }_x000D__x000A__x000D__x000A_This will throw an exception if some code calls Set-Content on $path=$env:temp\test.txt less than 2 times_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_C:\PS&gt;Mock Set-Content {}_x000D__x000A__x000D__x000A_{... Some Code ...}_x000D__x000A__x000D__x000A_C:\PS&gt;Should -Invoke Set-Content 0_x000D__x000A__x000D__x000A_This will throw an exception if some code calls Set-Content at all_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_C:\PS&gt;Mock Set-Content {}_x000D__x000A__x000D__x000A_{... Some Code ...}_x000D__x000A__x000D__x000A_C:\PS&gt;Should -Invoke Set-Content -Exactly 2_x000D__x000A__x000D__x000A_This will throw an exception if some code does not call Set-Content Exactly two times._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Describe 'Should -Invoke Scope behavior' {_x000D__x000A_    Mock Set-Content { }_x000D__x000A__x000D__x000A_    It 'Calls Set-Content at least once in the It block' {_x000D__x000A_        {... Some Code ...}_x000D__x000A__x000D__x000A_        Should -Invoke Set-Content -Exactly 0 -Scope It_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_Checks for calls only within the current It block._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Describe 'Describe' {_x000D__x000A_    Mock -ModuleName SomeModule Set-Content { }_x000D__x000A__x000D__x000A_    {... Some Code ...}_x000D__x000A__x000D__x000A_    It 'Calls Set-Content at least once in the Describe block' {_x000D__x000A_        Should -Invoke -ModuleName SomeModule Set-Content_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_Checks for calls to the mock within the SomeModule module.  Note that both the Mock_x000D__x000A_and Should -Invoke commands use the same module name._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Should -Invoke Get-ChildItem -ExclusiveFilter { $Path -eq 'C:\' }_x000D__x000A__x000D__x000A_Checks to make sure that Get-ChildItem was called at least one time with_x000D__x000A_the -Path parameter set to 'C:\', and that it was not called at all with_x000D__x000A_the -Path parameter set to any other value._x000D__x000A__x000D__x000A_.NOTES_x000D__x000A_The parameter filter passed to Should -Invoke does not necessarily have to match the parameter filter_x000D__x000A_(if any) which was used to create the Mock.  Should -Invoke will find any entry in the command history_x000D__x000A_which matches its parameter filter, regardless of how the Mock was created.  However, if any calls to the_x000D__x000A_mocked command are made which did not match any mock's parameter filter (resulting in the original command_x000D__x000A_being executed instead of a mock), these calls to the original command are not tracked in the call history._x000D__x000A_In other words, Should -Invoke can only be used to check for calls to the mocked implementation, not_x000D__x000A_to the original._x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    # Should -Invoke_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'ParameterFilter')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string]$CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [int]$Times = 1,_x000D__x000A__x000D__x000A_        [ScriptBlock]$ParameterFilter = {$True},_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ExclusiveFilter', Mandatory = $true)]_x000D__x000A_        [scriptblock] $ExclusiveFilter,_x000D__x000A__x000D__x000A_        [string] $ModuleName,_x000D__x000A_        [string] $Scope = 0,_x000D__x000A_        [switch] $Exactly,_x000D__x000A__x000D__x000A_        # built-in variables_x000D__x000A_        [object] $ActualValue,_x000D__x000A_        [switch] $Negate,_x000D__x000A_        [string] $Because,_x000D__x000A_        [Management.Automation.SessionState] $CallerSessionState_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($null -ne $ActualValue) {_x000D__x000A_        throw "Should -Invoke does not take pipeline input or ActualValue."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Assert-DescribeInProgress -CommandName Should -Invoke_x000D__x000A_    if ('Describe', 'Context', 'It' -notcontains $Scope -and $Scope -notmatch "^\d+$") {_x000D__x000A_        throw "Parameter Scope must be one of 'Describe', 'Context', 'It' or a non-negative number."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSCmdlet.ParameterSetName -eq 'ExclusiveFilter' -and $Negate) {_x000D__x000A_        # Using -Not with -ExclusiveFilter makes for a very confusing expectation. For example, given the following mocked function:_x000D__x000A_        #_x000D__x000A_        # Mock FunctionUnderTest {}_x000D__x000A_        #_x000D__x000A_        # Consider the normal expection:_x000D__x000A_        # `Should -Invoke FunctionUnderTest -ExclusiveFilter { $param1 -eq 'one' }`_x000D__x000A_        #_x000D__x000A_        # | Invocations               | Should raises an error |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "one"   | No                     |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "one"   | Yes                    |_x000D__x000A_        # | FunctionUnderTest "two"   |                        |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "two"   | Yes                    |_x000D__x000A_        #_x000D__x000A_        # So it follows that if we negate that, using -Not, then we should get the opposite result. That is:_x000D__x000A_        #_x000D__x000A_        # `Should -Not -Invoke FunctionUnderTest -ExclusiveFilter { $param1 -eq 'one' }`_x000D__x000A_        #_x000D__x000A_        # | Invocations               | Should raises an error |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "one"   | Yes                    |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "one"   | No                     | &lt;---- Problem!_x000D__x000A_        # | FunctionUnderTest "two"   |                        |_x000D__x000A_        # | --------------------------| ---------------------- |_x000D__x000A_        # | FunctionUnderTest "two"   | No                     |_x000D__x000A_        #_x000D__x000A_        # The problem is the second row. Because there was an invocation of `{ $param1 -eq 'one' }` the_x000D__x000A_        # expectation is not met and Should should raise an error._x000D__x000A_        #_x000D__x000A_        # In fact it can be shown that_x000D__x000A_        #_x000D__x000A_        # `Should -Not -Invoke FunctionUnderTest -ExclusiveFilter { ... }`_x000D__x000A_        #_x000D__x000A_        # and_x000D__x000A_        #_x000D__x000A_        # `Should -Not -Invoke FunctionUnderTest -ParameterFilter { ... }`_x000D__x000A_        #_x000D__x000A_        # have the same result._x000D__x000A_        throw "Cannot use -ExclusiveFilter when -Not is specified. Use -ParameterFilter instead."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $isNumericScope = $Scope -match "^\d+$"_x000D__x000A_    $currentTest = Get-CurrentTest_x000D__x000A_    $inTest = $null -ne $currentTest_x000D__x000A_    $currentBlock = Get-CurrentBlock_x000D__x000A__x000D__x000A_    $frame = if ($isNumericScope) {_x000D__x000A_        [PSCustomObject]@{_x000D__x000A_            Scope  = $Scope_x000D__x000A_            Frame  = if ($inTest) { $currentTest } else { $currentBlock }_x000D__x000A_            IsTest = $inTest_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($Scope -eq 'It') {_x000D__x000A_            if ($inTest) {_x000D__x000A_                [PSCustomObject]@{_x000D__x000A_                    Scope  = 0_x000D__x000A_                    Frame  = $currentTest_x000D__x000A_                    IsTest = $true_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                throw "Assertion is placed outside of an It block, but -Scope It is specified."_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # we are not looking for an It scope, so we are looking for a block scope_x000D__x000A_            # blocks can be chained arbitrarily, so we need to walk up the tree looking_x000D__x000A_            # for the first match_x000D__x000A__x000D__x000A_            # TODO: this is ad-hoc implementation of folding the tree of parents_x000D__x000A_            # make the normal fold work better, and replace this_x000D__x000A_            $i = $currentBlock_x000D__x000A_            $level = 0_x000D__x000A_            while ($null -ne $i) {_x000D__x000A_                if ($Scope -eq $i.FrameworkData.CommandUsed) {_x000D__x000A_                    if ($inTest) {_x000D__x000A_                        # we are in a test but we looked up the scope based on the block_x000D__x000A_                        # so we need to add 1 to the scope, because the block is scope 1 for us_x000D__x000A_                        $level++_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    [PSCustomObject]@{_x000D__x000A_                        Scope  = $level_x000D__x000A_                        Frame  = if ($inTest) { $currentTest } else { $currentBlock }_x000D__x000A_                        IsTest = $inTest_x000D__x000A_                    }_x000D__x000A_                    break_x000D__x000A_                }_x000D__x000A_                $level++_x000D__x000A_                $i = $i.Parent_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SessionState = $CallerSessionState_x000D__x000A_    $contextInfo = Resolve-Command $CommandName $ModuleName -SessionState $SessionState_x000D__x000A_    $resolvedModule = if ($contextInfo.IsFromRequestedModule) { $contextInfo.Module.Name } else { $null }_x000D__x000A_    $resolvedCommand = $contextInfo.Command.Name_x000D__x000A__x000D__x000A_    $mockTable = Get-AssertMockTable -Frame $frame -CommandName $resolvedCommand -ModuleName $resolvedModule_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey('Scope')) {_x000D__x000A_        $PSBoundParameters.Remove('Scope')_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey('ModuleName')) {_x000D__x000A_        $PSBoundParameters.Remove('ModuleName')_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey('CommandName')) {_x000D__x000A_        $PSBoundParameters.Remove('CommandName')_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey('ActualValue')) {_x000D__x000A_        $PSBoundParameters.Remove('ActualValue')_x000D__x000A_    }_x000D__x000A_    if ($PSBoundParameters.ContainsKey('CallerSessionState')) {_x000D__x000A_        $PSBoundParameters.Remove('CallerSessionState')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $result = Should-InvokeInternal @PSBoundParameters `_x000D__x000A_        -ContextInfo $contextInfo `_x000D__x000A_        -MockTable $mockTable `_x000D__x000A_        -SessionState $SessionState_x000D__x000A__x000D__x000A_    return $result_x000D__x000A_}_x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Add-ShouldOperator'] -Name Invoke `_x000D__x000A_    -InternalName Should-Invoke `_x000D__x000A_    -Test         ${function:Should-Invoke}_x000D__x000A__x000D__x000A_function Invoke-Mock {_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]_x000D__x000A_        $CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [hashtable] $MockCallState,_x000D__x000A__x000D__x000A_        [string]_x000D__x000A_        $ModuleName,_x000D__x000A__x000D__x000A_        [hashtable]_x000D__x000A_        $BoundParameters = @{},_x000D__x000A__x000D__x000A_        [object[]]_x000D__x000A_        $ArgumentList = @(),_x000D__x000A__x000D__x000A_        [object] $CallerSessionState,_x000D__x000A__x000D__x000A_        [ValidateSet('Begin', 'Process', 'End')]_x000D__x000A_        [string] $FromBlock,_x000D__x000A__x000D__x000A_        [object] $InputObject,_x000D__x000A__x000D__x000A_        $Hook_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ('End' -eq $FromBlock) {_x000D__x000A_        if (-not $MockCallState.ShouldExecuteOriginalCommand) {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope MockCore "Mock for $CommandName was invoked from block $FromBlock, and should not execute the original command, returning."_x000D__x000A_            }_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_                Write-PesterDebugMessage -Scope MockCore "Mock for $CommandName was invoked from block $FromBlock, and should execute the original command, forwarding the call to Invoke-MockInternal without call history and without behaviors."_x000D__x000A_            }_x000D__x000A_            Invoke-MockInternal @PSBoundParameters -Behaviors @() -CallHistory @{}_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ('Begin' -eq $FromBlock) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope MockCore "Mock for $CommandName was invoked from block $FromBlock, and should execute the original command, Invoke-MockInternal without call history and without behaviors."_x000D__x000A_        }_x000D__x000A_        Invoke-MockInternal @PSBoundParameters -Behaviors @() -CallHistory @{}_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock "Mock for $CommandName was invoked from block $FromBlock, resolving call history and behaviors."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # this function is called by the mock bootstrap function, so every implementer_x000D__x000A_    # should implement this (but I keep it separate from the core function so I can_x000D__x000A_    # test without dependency on scopes)_x000D__x000A_    $allBehaviors = Get-AllMockBehaviors -CommandName $CommandName_x000D__x000A_    if ([string]::IsNullOrWhiteSpace($ModuleName)) {_x000D__x000A_        $ModuleName = $null_x000D__x000A_    }_x000D__x000A_    $fromModule = $null -ne $ModuleName_x000D__x000A_    $moduleBehaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    $nonModuleBehaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_    foreach ($b in $allBehaviors) {_x000D__x000A_        # sort behaviors into behaviors for the selected module_x000D__x000A_        # other modules and no-modules_x000D__x000A_        # the behaviors for other modules we don't care about so we_x000D__x000A_        # don't collect them_x000D__x000A_        if ($fromModule) {_x000D__x000A_            if ($ModuleName -eq $b.ModuleName) {_x000D__x000A_                $moduleBehaviors.Add($b)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $b.ModuleName) {_x000D__x000A_            $nonModuleBehaviors.Add($b)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # if any behaviors exist for this module, use them. Otherwise use the non module behaviors_x000D__x000A_    $detectedModule, $behaviors = if ($null -ne $moduleBehaviors -and 0 -ne $moduleBehaviors.Count) { $ModuleName, $moduleBehaviors } else {$null, $nonModuleBehaviors}_x000D__x000A_    $callHistory = (Get-MockDataForCurrentScope).CallHistory_x000D__x000A__x000D__x000A_    Invoke-MockInternal @PSBoundParameters -Behaviors $behaviors -CallHistory $callHistory_x000D__x000A_}_x000D__x000A__x000D__x000A_function Assert-RunInProgress {_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [String] $CommandName_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        throw "$CommandName can run only during Run, but not during Discovery."_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_# file src\functions\PesterState.ps1_x000D__x000A_# function New-PesterState_x000D__x000A_# {_x000D__x000A_#     param (_x000D__x000A_#         [String[]]$TagFilter,_x000D__x000A_#         [String[]]$ExcludeTagFilter,_x000D__x000A_#         [String[]]$TestNameFilter,_x000D__x000A_#         [System.Management.Automation.SessionState]$SessionState,_x000D__x000A_#         [Switch]$Strict,_x000D__x000A_#         [Pester.OutputTypes]$Show = 'All',_x000D__x000A_#         [object]$PesterOption,_x000D__x000A_#         [Switch]$RunningViaInvokePester_x000D__x000A_#     )_x000D__x000A__x000D__x000A_#     if ($null -eq $SessionState) {_x000D__x000A_#         $SessionState = Set-SessionStateHint -PassThru  -Hint "Module - Pester (captured in New-PesterState)" -SessionState $ExecutionContext.SessionState_x000D__x000A_#     }_x000D__x000A__x000D__x000A_#     if ($null -eq $PesterOption)_x000D__x000A_#     {_x000D__x000A_#         $PesterOption = New-PesterOption_x000D__x000A_#     }_x000D__x000A_#     elseif ($PesterOption -is [System.Collections.IDictionary])_x000D__x000A_#     {_x000D__x000A_#         try_x000D__x000A_#         {_x000D__x000A_#             $PesterOption = New-PesterOption @PesterOption_x000D__x000A_#         }_x000D__x000A_#         catch_x000D__x000A_#         {_x000D__x000A_#             throw_x000D__x000A_#         }_x000D__x000A_#     }_x000D__x000A__x000D__x000A_#     &amp; $SafeCommands['New-Module'] -Name PesterState -AsCustomObject -ArgumentList $TagFilter, $ExcludeTagFilter, $TestNameFilter, $SessionState, $Strict, $Show, $PesterOption, $RunningViaInvokePester -ScriptBlock {_x000D__x000A_#         param (_x000D__x000A_#             [String[]]$_tagFilter,_x000D__x000A_#             [String[]]$_excludeTagFilter,_x000D__x000A_#             [String[]]$_testNameFilter,_x000D__x000A_#             [System.Management.Automation.SessionState]$_sessionState,_x000D__x000A_#             [Switch]$Strict,_x000D__x000A_#             [Pester.OutputTypes]$Show,_x000D__x000A_#             [object]$PesterOption,_x000D__x000A_#             [Switch]$RunningViaInvokePester_x000D__x000A_#         )_x000D__x000A__x000D__x000A_#         #public read-only_x000D__x000A_#         $TagFilter = $_tagFilter_x000D__x000A_#         $ExcludeTagFilter = $_excludeTagFilter_x000D__x000A_#         $TestNameFilter = $_testNameFilter_x000D__x000A__x000D__x000A_#         $script:SessionState = $_sessionState_x000D__x000A_#         $script:Stopwatch = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_#         $script:MostRecentTimestamp = 0_x000D__x000A_#         $script:CommandCoverage = @()_x000D__x000A_#         $script:Strict = $Strict_x000D__x000A_#         $script:Show = $Show_x000D__x000A_#         $script:InTest = $false_x000D__x000A__x000D__x000A_#         $script:FindCodeCoverage = $false_x000D__x000A_#         $script:CodeCoverage = @()_x000D__x000A__x000D__x000A_#         $script:TestResult = @()_x000D__x000A__x000D__x000A_#         $script:TotalCount = 0_x000D__x000A_#         $script:Time = [timespan]0_x000D__x000A_#         $script:PassedCount = 0_x000D__x000A_#         $script:FailedCount = 0_x000D__x000A_#         $script:SkippedCount = 0_x000D__x000A_#         $script:PendingCount = 0_x000D__x000A_#         $script:InconclusiveCount = 0_x000D__x000A__x000D__x000A_#         $script:IncludeVSCodeMarker = $PesterOption.IncludeVSCodeMarker_x000D__x000A_#         $script:TestSuiteName       = $PesterOption.TestSuiteName_x000D__x000A_#         $script:RunningViaInvokePester = $RunningViaInvokePester_x000D__x000A__x000D__x000A_#         $script:SafeCommands = @{}_x000D__x000A__x000D__x000A_#         $script:SafeCommands['New-Object']          = &amp; (Pester\SafeGetCommand) -Name New-Object          -Module Microsoft.PowerShell.Utility -CommandType Cmdlet_x000D__x000A_#         $script:SafeCommands['Select-Object']       = &amp; (Pester\SafeGetCommand) -Name Select-Object       -Module Microsoft.PowerShell.Utility -CommandType Cmdlet_x000D__x000A_#         $script:SafeCommands['Export-ModuleMember'] = &amp; (Pester\SafeGetCommand) -Name Export-ModuleMember -Module Microsoft.PowerShell.Core    -CommandType Cmdlet_x000D__x000A_#         $script:SafeCommands['Add-Member']          = &amp; (Pester\SafeGetCommand) -Name Add-Member          -Module Microsoft.PowerShell.Utility -CommandType Cmdlet_x000D__x000A__x000D__x000A_#         function New-TestGroup([string] $Name, [string] $Hint)_x000D__x000A_#         {_x000D__x000A_#            [PSCustomObject] @{_x000D__x000A_#                 Name              = $Name_x000D__x000A_#                 Type              = 'TestGroup'_x000D__x000A_#                 Hint              = $Hint_x000D__x000A_#                 Actions           = [System.Collections.Generic.List[object]]@()_x000D__x000A_#                 BeforeEach        = &amp; $SafeCommands['New-Object'] System.Collections.Generic.List[scriptblock]_x000D__x000A_#                 AfterEach         = &amp; $SafeCommands['New-Object'] System.Collections.Generic.List[scriptblock]_x000D__x000A_#                 BeforeAll         = &amp; $SafeCommands['New-Object'] System.Collections.Generic.List[scriptblock]_x000D__x000A_#                 AfterAll          = &amp; $SafeCommands['New-Object'] System.Collections.Generic.List[scriptblock]_x000D__x000A_#                 TotalCount        = 0_x000D__x000A_#                 Time              = [timespan]0_x000D__x000A_#                 PassedCount       = 0_x000D__x000A_#                 FailedCount       = 0_x000D__x000A_#                 SkippedCount      = 0_x000D__x000A_#                 PendingCount      = 0_x000D__x000A_#                 InconclusiveCount = 0_x000D__x000A_#             }_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         $script:TestActions = New-TestGroup -Name Pester -Hint Root_x000D__x000A_#         $script:TestGroupStack = &amp; $SafeCommands['New-Object'] System.Collections.Stack_x000D__x000A_#         $script:TestGroupStack.Push($script:TestActions)_x000D__x000A__x000D__x000A_#         function EnterTestGroup([string] $Name, [string] $Hint)_x000D__x000A_#         {_x000D__x000A_#             $newGroup = New-TestGroup @PSBoundParameters_x000D__x000A_#             $null = $script:TestGroupStack.Peek().Actions.Add($newGroup)_x000D__x000A_#             $script:TestGroupStack.Push($newGroup)_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function LeaveTestGroup([string] $Name, [string] $Hint)_x000D__x000A_#         {_x000D__x000A_#             $currentGroup = $script:TestGroupStack.Pop()_x000D__x000A__x000D__x000A_#             if ($currentGroup.Name -ne $Name -or $currentGroup.Hint -ne $Hint)_x000D__x000A_#             {_x000D__x000A_#                 throw "TestGroups stack corrupted:  Expected name/hint of '$Name','$Hint'.  Found '$($currentGroup.Name)', '$($currentGroup.Hint)'."_x000D__x000A_#             }_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function AddTestResult_x000D__x000A_#         {_x000D__x000A_#             param (_x000D__x000A_#                 [string]$Name,_x000D__x000A_#                 [ValidateSet("Failed","Passed","Skipped","Pending","Inconclusive")]_x000D__x000A_#                 [string]$Result,_x000D__x000A_#                 [Nullable[TimeSpan]]$Time,_x000D__x000A_#                 [string]$FailureMessage,_x000D__x000A_#                 [string]$StackTrace,_x000D__x000A_#                 [string] $ParameterizedSuiteName,_x000D__x000A_#                 [System.Collections.IDictionary] $Parameters,_x000D__x000A_#                 [System.Management.Automation.ErrorRecord] $ErrorRecord_x000D__x000A_#             )_x000D__x000A__x000D__x000A_#             # defining this function in here, because otherwise it is not available_x000D__x000A_#             function New-ErrorRecord ([string] $Message, [string] $ErrorId, [string] $File, [string] $Line, [string] $LineText) {_x000D__x000A_#                 $exception = &amp; $SafeCommands['New-Object'] Exception $Message_x000D__x000A_#                 $errorCategory = [Management.Automation.ErrorCategory]::InvalidResult_x000D__x000A_#                 # we use ErrorRecord.TargetObject to pass structured information about the error to a reporting system._x000D__x000A_#                 $targetObject = @{Message = $Message; File = $File; Line = $Line; LineText = $LineText}_x000D__x000A_#                 $errorRecord = &amp; $SafeCommands['New-Object'] Management.Automation.ErrorRecord $exception, $ErrorID, $errorCategory, $targetObject_x000D__x000A_#                 return $errorRecord_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $previousTime = $script:MostRecentTimestamp_x000D__x000A_#             $script:MostRecentTimestamp = $script:Stopwatch.Elapsed_x000D__x000A__x000D__x000A_#             if ($null -eq $Time)_x000D__x000A_#             {_x000D__x000A_#                 $Time = $script:MostRecentTimestamp - $previousTime_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             if (-not $script:Strict)_x000D__x000A_#             {_x000D__x000A_#                 $Passed = "Passed","Skipped","Pending" -contains $Result_x000D__x000A_#             }_x000D__x000A_#             else_x000D__x000A_#             {_x000D__x000A_#                 $Passed = $Result -eq "Passed"_x000D__x000A_#                 if (($Result -eq "Skipped") -or ($Result -eq "Pending"))_x000D__x000A_#                 {_x000D__x000A_#                     $FailureMessage = "The test failed because the test was executed in Strict mode and the result '$result' was translated to Failed."_x000D__x000A_#                     $ErrorRecord = New-ErrorRecord -ErrorId '*PesterTestInconclusive*' -Message $FailureMessage_x000D__x000A_#                     $Result = "Failed"_x000D__x000A_#                 }_x000D__x000A__x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $script:TotalCount++_x000D__x000A_#             $script:Time += $Time_x000D__x000A__x000D__x000A_#             switch ($Result)_x000D__x000A_#             {_x000D__x000A_#                 Passed  { $script:PassedCount++; break; }_x000D__x000A_#                 Failed  { $script:FailedCount++; break; }_x000D__x000A_#                 Skipped { $script:SkippedCount++; break; }_x000D__x000A_#                 Pending { $script:PendingCount++; break; }_x000D__x000A_#                 Inconclusive { $script:InconclusiveCount++; break; }_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $resultRecord = &amp; $SafeCommands['New-Object'] -TypeName PsObject -Property @{_x000D__x000A_#                 Name                   = $Name_x000D__x000A_#                 Type                   = 'TestCase'_x000D__x000A_#                 Passed                 = $Passed_x000D__x000A_#                 Result                 = $Result_x000D__x000A_#                 Time                   = $Time_x000D__x000A_#                 FailureMessage         = $FailureMessage_x000D__x000A_#                 StackTrace             = $StackTrace_x000D__x000A_#                 ErrorRecord            = $ErrorRecord_x000D__x000A_#                 ParameterizedSuiteName = $ParameterizedSuiteName_x000D__x000A_#                 Parameters             = $Parameters_x000D__x000A_#                 Show                   = $script:Show_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $null = $script:TestGroupStack.Peek().Actions.Add($resultRecord)_x000D__x000A__x000D__x000A_#             # Attempting some degree of backward compatibility for the TestResult collection for now; deprecated and will be removed in the future_x000D__x000A_#             $describe = ''_x000D__x000A_#             $contexts = [System.Collections.Generic.List[object]]@()_x000D__x000A__x000D__x000A_#             # make a copy of the stack and reverse it_x000D__x000A_#             $reversedStack = $script:TestGroupStack.ToArray()_x000D__x000A_#             [array]::Reverse($reversedStack)_x000D__x000A__x000D__x000A_#             foreach ($group in $reversedStack)_x000D__x000A_#             {_x000D__x000A_#                 if ($group.Hint -eq 'Root' -or $group.Hint -eq 'Script') { continue }_x000D__x000A_#                 if ($describe -eq '')_x000D__x000A_#                 {_x000D__x000A_#                     $describe = $group.Name_x000D__x000A_#                 }_x000D__x000A_#                 else_x000D__x000A_#                 {_x000D__x000A_#                     $null = $contexts.Add($group.Name)_x000D__x000A_#                 }_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $context = $contexts -join '\'_x000D__x000A__x000D__x000A_#             $script:TestResult +=[PSCustomObject] @{_x000D__x000A_#                 Describe               = $describe_x000D__x000A_#                 Context                = $context_x000D__x000A_#                 Name                   = $Name_x000D__x000A_#                 Passed                 = $Passed_x000D__x000A_#                 Result                 = $Result_x000D__x000A_#                 Time                   = $Time_x000D__x000A_#                 FailureMessage         = $FailureMessage_x000D__x000A_#                 StackTrace             = $StackTrace_x000D__x000A_#                 ErrorRecord            = $ErrorRecord_x000D__x000A_#                 ParameterizedSuiteName = $ParameterizedSuiteName_x000D__x000A_#                 Parameters             = $Parameters_x000D__x000A_#                 Show                  = $script:Show_x000D__x000A_#             }_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function AddSetupOrTeardownBlock([scriptblock] $ScriptBlock, [string] $CommandName)_x000D__x000A_#         {_x000D__x000A_#             $currentGroup = $script:TestGroupStack.Peek()_x000D__x000A__x000D__x000A_#             $isSetupCommand = IsSetupCommand -CommandName $CommandName_x000D__x000A_#             $isGroupCommand = IsTestGroupCommand -CommandName $CommandName_x000D__x000A__x000D__x000A_#             if ($isSetupCommand)_x000D__x000A_#             {_x000D__x000A_#                 if ($isGroupCommand)_x000D__x000A_#                 {_x000D__x000A_#                     $currentGroup.BeforeAll.Add($ScriptBlock)_x000D__x000A_#                 }_x000D__x000A_#                 else_x000D__x000A_#                 {_x000D__x000A_#                     $currentGroup.BeforeEach.Add($ScriptBlock)_x000D__x000A_#                 }_x000D__x000A_#             }_x000D__x000A_#             else_x000D__x000A_#             {_x000D__x000A_#                 if ($isGroupCommand)_x000D__x000A_#                 {_x000D__x000A_#                     $currentGroup.AfterAll.Add($ScriptBlock)_x000D__x000A_#                 }_x000D__x000A_#                 else_x000D__x000A_#                 {_x000D__x000A_#                     $currentGroup.AfterEach.Add($ScriptBlock)_x000D__x000A_#                 }_x000D__x000A_#             }_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function IsSetupCommand_x000D__x000A_#         {_x000D__x000A_#             param ([string] $CommandName)_x000D__x000A_#             return $CommandName -eq 'BeforeEach' -or $CommandName -eq 'BeforeAll'_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function IsTestGroupCommand_x000D__x000A_#         {_x000D__x000A_#             param ([string] $CommandName)_x000D__x000A_#             return $CommandName -eq 'BeforeAll' -or $CommandName -eq 'AfterAll'_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function GetTestCaseSetupBlocks_x000D__x000A_#         {_x000D__x000A_#             $blocks = @(_x000D__x000A_#                 foreach ($group in $this.TestGroups)_x000D__x000A_#                 {_x000D__x000A_#                     $group.BeforeEach_x000D__x000A_#                 }_x000D__x000A_#             )_x000D__x000A__x000D__x000A_#             return $blocks_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function GetTestCaseTeardownBlocks_x000D__x000A_#         {_x000D__x000A_#             $groups = @($this.TestGroups)_x000D__x000A_#             [Array]::Reverse($groups)_x000D__x000A__x000D__x000A_#             $blocks = @(_x000D__x000A_#                 foreach ($group in $groups)_x000D__x000A_#                 {_x000D__x000A_#                     $group.AfterEach_x000D__x000A_#                 }_x000D__x000A_#             )_x000D__x000A__x000D__x000A_#             return $blocks_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function GetCurrentTestGroupSetupBlocks_x000D__x000A_#         {_x000D__x000A_#             return $script:TestGroupStack.Peek().BeforeAll_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function GetCurrentTestGroupTeardownBlocks_x000D__x000A_#         {_x000D__x000A_#             return $script:TestGroupStack.Peek().AfterAll_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function EnterTest_x000D__x000A_#         {_x000D__x000A_#             if ($script:InTest)_x000D__x000A_#             {_x000D__x000A_#                 throw 'You are already in a test case.'_x000D__x000A_#             }_x000D__x000A__x000D__x000A_#             $script:InTest = $true_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         function LeaveTest_x000D__x000A_#         {_x000D__x000A_#             $script:InTest = $false_x000D__x000A_#         }_x000D__x000A__x000D__x000A_#         $ExportedVariables = "TagFilter",_x000D__x000A_#         "ExcludeTagFilter",_x000D__x000A_#         "TestNameFilter",_x000D__x000A_#         "TestResult",_x000D__x000A_#         "SessionState",_x000D__x000A_#         "CommandCoverage",_x000D__x000A_#         "FindCodeCoverage",_x000D__x000A_#         "CodeCoverage",_x000D__x000A_#         "Strict",_x000D__x000A_#         "Show",_x000D__x000A_#         "Time",_x000D__x000A_#         "TotalCount",_x000D__x000A_#         "PassedCount",_x000D__x000A_#         "FailedCount",_x000D__x000A_#         "SkippedCount",_x000D__x000A_#         "PendingCount",_x000D__x000A_#         "InconclusiveCount",_x000D__x000A_#         "IncludeVSCodeMarker",_x000D__x000A_#         "TestActions",_x000D__x000A_#         "TestGroupStack",_x000D__x000A_#         "TestSuiteName",_x000D__x000A_#         "InTest",_x000D__x000A_#         "RunningViaInvokePester"_x000D__x000A__x000D__x000A_#         $ExportedFunctions = "EnterTestGroup",_x000D__x000A_#                              "LeaveTestGroup",_x000D__x000A_#                              "AddTestResult",_x000D__x000A_#                              "AddSetupOrTeardownBlock",_x000D__x000A_#                              "GetTestCaseSetupBlocks",_x000D__x000A_#                              "GetTestCaseTeardownBlocks",_x000D__x000A_#                              "GetCurrentTestGroupSetupBlocks",_x000D__x000A_#                              "GetCurrentTestGroupTeardownBlocks",_x000D__x000A_#                              "EnterTest",_x000D__x000A_#                              "LeaveTest"_x000D__x000A__x000D__x000A_#         &amp; $SafeCommands['Export-ModuleMember'] -Variable $ExportedVariables -function $ExportedFunctions_x000D__x000A_#     }  |_x000D__x000A_#     &amp; $SafeCommands['Add-Member'] -PassThru -MemberType ScriptProperty -Name CurrentTestGroup -Value {_x000D__x000A_#         $this.TestGroupStack.Peek()_x000D__x000A_#     } |_x000D__x000A_#     &amp; $SafeCommands['Add-Member'] -PassThru -MemberType ScriptProperty -Name TestGroups -Value {_x000D__x000A_#         $array = $this.TestGroupStack.ToArray()_x000D__x000A_#         [Array]::Reverse($array)_x000D__x000A_#         return $array_x000D__x000A_#     } |_x000D__x000A_#     &amp; $SafeCommands['Add-Member'] -PassThru -MemberType ScriptProperty -Name IndentLevel -Value {_x000D__x000A_#         # We ignore the root node of the stack here, and don't start indenting until after the Script nodes inside the root_x000D__x000A_#         return [Math]::Max(0, $this.TestGroupStack.Count - 2)_x000D__x000A_#     }_x000D__x000A_# }_x000D__x000A_# file src\functions\Set-ItResult.ps1_x000D__x000A_function Set-ItResult {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Set-ItResult is used inside the It block to explicitly set the test result_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Sometimes a test shouldn't be executed, sometimes the condition cannot be evaluated._x000D__x000A_    By default such tests would typically fail and produce a big red message._x000D__x000A_    Using Set-ItResult it is possible to set the result from the inside of the It script_x000D__x000A_    block to either inconclusive, pending or skipped._x000D__x000A__x000D__x000A_    As of Pester 5, there is no "Inconclusive" or "Pending" test state, so all tests will now go to state skipped,_x000D__x000A_    however the test result notes will include information about being inconclusive or testing to keep this command_x000D__x000A_    backwards compatible_x000D__x000A__x000D__x000A_    .PARAMETER Inconclusive_x000D__x000A_    **DEPRECATED** Sets the test result to inconclusive. Cannot be used at the same time as -Pending or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Pending_x000D__x000A_    **DEPRECATED** Sets the test result to pending. Cannot be used at the same time as -Inconclusive or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Skipped_x000D__x000A_    Sets the test result to skipped. Cannot be used at the same time as -Inconclusive or -Pending_x000D__x000A__x000D__x000A_    .PARAMETER Because_x000D__x000A_    Similarily to failing tests, skipped and inconclusive tests should have reason. It allows_x000D__x000A_    to provide information to the user why the test is neither successful nor failed._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "Example" {_x000D__x000A_        It "Skipped test" {_x000D__x000A_            Set-ItResult -Skipped -Because "we want it to be skipped"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    the output should be_x000D__x000A__x000D__x000A_    ```_x000D__x000A_    [!] Skipped test is skipped, because we want it to be skipped_x000D__x000A_    Tests completed in 0ms_x000D__x000A_    Tests Passed: 0, Failed: 0, Skipped: 0, Pending: 0, Inconclusive 1_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Inconclusive")][switch]$Inconclusive,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Pending")][switch]$Pending,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Skipped")][switch]$Skipped,_x000D__x000A_        [string]$Because_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-DescribeInProgress -CommandName Set-ItResult_x000D__x000A__x000D__x000A_    $result = $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_    [String]$Message = "is skipped"_x000D__x000A_    if ($Result -ne 'Skipped') {_x000D__x000A_        [String]$Because = if ($Because) {$Result.ToUpper(), $Because -join ': '} else {$Result.ToUpper()}_x000D__x000A_    }_x000D__x000A_    if ($Because) {_x000D__x000A_        [String]$Message += ", because $Because"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($null) {_x000D__x000A_        $File {_x000D__x000A_            [String]$File = $MyInvocation.ScriptName_x000D__x000A_        }_x000D__x000A_        $Line {_x000D__x000A_            [String]$Line = $MyInvocation.ScriptLineNumber_x000D__x000A_        }_x000D__x000A_        $LineText {_x000D__x000A_            [String]$LineText = $MyInvocation.Line.trim()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    throw [Pester.Factory]::CreateErrorRecord(_x000D__x000A_        'PesterTestSkipped', #string errorId_x000D__x000A_        $Message, #string message_x000D__x000A_        $File, #string file_x000D__x000A_        $Line, #string line_x000D__x000A_        $LineText, #string lineText_x000D__x000A_        $false #bool terminating_x000D__x000A_    )_x000D__x000A_}_x000D__x000A_# file src\functions\SetupTeardown.ps1_x000D__x000A_function BeforeEach {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeEach runs once before every test in the current or any child blocks._x000D__x000A_        Typically this is used to create all the prerequisites for the current test,_x000D__x000A_        such as writing content to a file._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "File parsing" {_x000D__x000A_            BeforeEach {_x000D__x000A_                # randomized path, to get fresh file for each test_x000D__x000A_                $file = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())_form.xml"_x000D__x000A_                Copy-Item -Source $template -Destination $file -Force | Out-Null_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes username" {_x000D__x000A_                Write-XmlForm -Path $file -Field "username" -Value "nohwnd"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes name" {_x000D__x000A_                Write-XmlForm -Path $file -Field "name" -Value "Jakub"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses BeforeEach to ensure a clean sample-file is used for each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName BeforeEach_x000D__x000A__x000D__x000A_    New-EachTestSetup -ScriptBlock $Scriptblock_x000D__x000A_}_x000D__x000A__x000D__x000A_function AfterEach {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterEach runs once after every test in the current or any child blocks._x000D__x000A_        Typically this is used to clean up resources created by the test or its setups._x000D__x000A_        AfterEach runs in a finally block, and is guaranteed to run even if the test_x000D__x000A_        (or setup) fails._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Testing export formats" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $filePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())"_x000D__x000A_            }_x000D__x000A_            It "Test Export-CSV" {_x000D__x000A_                Get-ChildItem | Export-CSV -Path $filePath -NoTypeInformation_x000D__x000A_                $dir = Import-CSV -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_            It "Test Export-Clixml" {_x000D__x000A_                Get-ChildItem | Export-Clixml -Path $filePath_x000D__x000A_                $dir = Import-Clixml -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterEach {_x000D__x000A_                if (Test-Path $file) {_x000D__x000A_                    Remove-Item $file -Force_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses AfterEach to remove a temporary file after each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterEach_x000D__x000A__x000D__x000A_    New-EachTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_}_x000D__x000A__x000D__x000A_function BeforeAll {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeAll is used to share setup among all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. BeforeAll runs during Run phase_x000D__x000A_        and runs only once in the current level._x000D__x000A__x000D__x000A_        The typical usage is to setup the whole test script, most commonly to_x000D__x000A_        import the tested function, by dot-sourcing the script file that contains it._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        BeforeAll {_x000D__x000A_            . $PSCommandPath.Replace('.Tests.ps1','.ps1')_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Describe "API validation" {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses dot-sourcing in BeforeAll to make functions in the script-file_x000D__x000A_        available for the tests._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "API validation" {_x000D__x000A_            BeforeAll {_x000D__x000A_                # this calls REST API and takes roughly 1 second_x000D__x000A_                $response = Get-Pokemon -Name Pikachu_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Name = 'Pikachu'" {_x000D__x000A_                $response.Name | Should -Be 'Pikachu'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Type = 'electric'" {_x000D__x000A_                $response.Type | Should -Be 'electric'_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses BeforeAll to perform an expensive operation only once, before validating_x000D__x000A_        the results in separate tests._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    New-OneTimeTestSetup -ScriptBlock $Scriptblock_x000D__x000A_}_x000D__x000A__x000D__x000A_function AfterAll {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterAll is used to share teardown after all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. AfterAll runs during Run phase_x000D__x000A_        and runs only once in the current block. It's guaranteed to run even if tests_x000D__x000A_        fail._x000D__x000A__x000D__x000A_        The typical usage is to clean up state or temporary used in tests._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Validate important file" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $samplePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid()).txt"_x000D__x000A_                Write-Host $samplePath_x000D__x000A_                1..100 | Set-Content -Path $samplePath_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File Contains 100 lines" {_x000D__x000A_                @(Get-Content $samplePath).Count | Should -Be 100_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "First ten lines should be 1 -&gt; 10" {_x000D__x000A_                @(Get-Content $samplePath -TotalCount 10) | Should -Be @(1..10)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterAll {_x000D__x000A_                Remove-Item -Path $samplePath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses AfterAll to clean up a sample-file generated only for_x000D__x000A_        the tests in the Describe-block._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterAll_x000D__x000A__x000D__x000A_    New-OneTimeTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_}_x000D__x000A_# file src\functions\TestDrive.ps1_x000D__x000A_function Get-TestDrivePlugin {_x000D__x000A__x000D__x000A_    # TODO: add OnStart block and put this in it_x000D__x000A__x000D__x000A_    if (&amp; $script:SafeCommands['Test-Path'] TestDrive:\) {_x000D__x000A_        &amp; $SafeCommands['Remove-Item'] (&amp; $SafeCommands['Get-PSDrive'] TestDrive -ErrorAction Stop).Root -Force -Recurse -Confirm:$false_x000D__x000A_        &amp; $SafeCommands['Remove-PSDrive'] TestDrive_x000D__x000A_    }_x000D__x000A_    New-PluginObject -Name "TestDrive" -EachBlockSetupStart {_x000D__x000A_        param($Context)_x000D__x000A_        if (-not ($Context.Block.PluginData.ContainsKey('TestDrive'))) {_x000D__x000A_            $Context.Block.PluginData.Add('TestDrive', @{_x000D__x000A_                    TestDriveAdded   = $false_x000D__x000A_                    TestDriveContent = $null_x000D__x000A_                })_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # TODO: Add option, but probably in a more generic way_x000D__x000A_        # if (-not $NoTestDrive)_x000D__x000A_        # {_x000D__x000A_        if (-not (&amp; $script:SafeCommands['Test-Path'] TestDrive:\)) {_x000D__x000A_            New-TestDrive_x000D__x000A_            $Context.Block.PluginData.TestDrive.TestDriveAdded = $true_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $Context.Block.PluginData.TestDrive.TestDriveContent = Get-TestDriveChildItem_x000D__x000A_        }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_    } -EachBlockTearDownEnd {_x000D__x000A_        # if (-not $NoTestDrive)_x000D__x000A_        # {_x000D__x000A_        if ($Context.Block.PluginData.TestDrive.TestDriveAdded) {_x000D__x000A_            Remove-TestDrive_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            Clear-TestDrive -Exclude ( $Context.Block.PluginData.TestDrive.TestDriveContent | &amp; $SafeCommands['Select-Object'] -ExpandProperty FullName)_x000D__x000A_        }_x000D__x000A_        # }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-TestDrive ([Switch]$PassThru, [string] $Path) {_x000D__x000A_    if ($Path -notmatch '\S') {_x000D__x000A_        $directory = New-RandomTempDirectory_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if (-not (&amp; $SafeCommands['Test-Path'] -Path $Path)) {_x000D__x000A_            $null = &amp; $SafeCommands['New-Item'] -ItemType Container -Path $Path_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $directory = &amp; $SafeCommands['Get-Item'] $Path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $DriveName = "TestDrive"_x000D__x000A__x000D__x000A_    #setup the test drive_x000D__x000A_    if ( -not (&amp; $SafeCommands['Test-Path'] "${DriveName}:\") ) {_x000D__x000A_        $null = &amp; $SafeCommands['New-PSDrive'] -Name $DriveName -PSProvider FileSystem -Root $directory -Scope Global -Description "Pester test drive"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #publish the global TestDrive variable used in few places within the module_x000D__x000A_    if (-not (&amp; $SafeCommands['Test-Path'] "Variable:Global:$DriveName")) {_x000D__x000A_        &amp; $SafeCommands['New-Variable'] -Name $DriveName -Scope Global -Value $directory_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ( $PassThru ) {_x000D__x000A_        &amp; $SafeCommands['Get-PSDrive'] -Name $DriveName_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Clear-TestDrive ([String[]]$Exclude) {_x000D__x000A_    $drive = &amp; $SafeCommands['Get-PSDrive'] -Name TestDrive -ErrorAction Ignore_x000D__x000A__x000D__x000A_    if ($null -eq $drive) {_x000D__x000A_        # someone cleared it up before us, maybe a Pester running in a child scope_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Path = $drive.Root_x000D__x000A__x000D__x000A_    $Path = (&amp; $SafeCommands['Get-PSDrive'] -Name TestDrive).Root_x000D__x000A_    if (&amp; $SafeCommands['Test-Path'] -Path $Path ) {_x000D__x000A__x000D__x000A_        Remove-TestDriveSymbolicLinks -Path $Path_x000D__x000A__x000D__x000A_        #Get-ChildItem -Exclude did not seem to work with full paths_x000D__x000A_        &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $Path |_x000D__x000A_        &amp; $SafeCommands['Sort-Object'] -Descending  -Property "FullName" |_x000D__x000A_        &amp; $SafeCommands['Where-Object'] { $Exclude -NotContains $_.FullName } |_x000D__x000A_        &amp; $SafeCommands['Remove-Item'] -Force -Recurse_x000D__x000A__x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-RandomTempDirectory {_x000D__x000A_    do {_x000D__x000A_        $tempPath = Get-TempDirectory_x000D__x000A_        $Path = &amp; $SafeCommands['Join-Path'] -Path $tempPath -ChildPath ([Guid]::NewGuid())_x000D__x000A_    } until (-not (&amp; $SafeCommands['Test-Path'] -Path $Path ))_x000D__x000A__x000D__x000A_    &amp; $SafeCommands['New-Item'] -ItemType Container -Path $Path_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TestDriveChildItem {_x000D__x000A_    $Path = (&amp; $SafeCommands['Get-PSDrive'] -Name TestDrive).Root_x000D__x000A_    if (&amp; $SafeCommands['Test-Path'] -Path $Path ) {_x000D__x000A_        &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $Path_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-TestDriveSymbolicLinks ([String] $Path) {_x000D__x000A__x000D__x000A_    # remove symbolic links to work around problem with Remove-Item._x000D__x000A_    # see https://github.com/PowerShell/PowerShell/issues/621_x000D__x000A_    #     https://github.com/pester/Pester/issues/1100_x000D__x000A__x000D__x000A_    # powershell 5 and higher_x000D__x000A_    # &amp; $SafeCommands["Get-ChildItem"] -Recurse -Path $Path -Attributes "ReparsePoint" |_x000D__x000A_    #    % { $_.Delete() }_x000D__x000A__x000D__x000A_    # issue 621 was fixed before PowerShell 6.1_x000D__x000A_    # now there is an issue with calling the Delete method in recent (6.1) builds of PowerShell_x000D__x000A_    if ( (GetPesterPSVersion) -ge 6) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # powershell 2-compatible_x000D__x000A_    $reparsePoint = [System.IO.FileAttributes]::ReparsePoint_x000D__x000A_    &amp; $SafeCommands["Get-ChildItem"] -Recurse -Path $Path |_x000D__x000A_    &amp; $SafeCommands['Where-Object'] { ($_.Attributes -band $reparsePoint) -eq $reparsePoint } |_x000D__x000A_    &amp; $SafeCommands['Foreach-Object'] { $_.Delete() }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-TestDrive {_x000D__x000A__x000D__x000A_    $DriveName = "TestDrive"_x000D__x000A_    $Drive = &amp; $SafeCommands['Get-PSDrive'] -Name $DriveName -ErrorAction Ignore_x000D__x000A_    $Path = ($Drive).Root_x000D__x000A__x000D__x000A__x000D__x000A_    if ($pwd -like "$DriveName*" ) {_x000D__x000A_        #will staying in the test drive cause issues?_x000D__x000A_        #TODO: review this_x000D__x000A_        &amp; $SafeCommands['Write-Warning'] -Message "Your current path is set to ${pwd}:. You should leave ${DriveName}:\ before leaving Describe."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ( $Drive ) {_x000D__x000A_        $Drive | &amp; $SafeCommands['Remove-PSDrive'] -Force #This should fail explicitly as it impacts future pester runs_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A__x000D__x000A_    if ($null -ne $Path -and (&amp; $SafeCommands['Test-Path'] -Path $Path)) {_x000D__x000A_        Remove-TestDriveSymbolicLinks -Path $Path_x000D__x000A_        &amp; $SafeCommands['Remove-Item'] -Path $Path -Force -Recurse_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (&amp; $SafeCommands['Get-Variable'] -Name $DriveName -Scope Global -ErrorAction Ignore) {_x000D__x000A_        &amp; $SafeCommands['Remove-Variable'] -Scope Global -Name $DriveName -Force_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\TestRegistry.ps1_x000D__x000A_ function New-TestRegistry {_x000D__x000A_    param(_x000D__x000A_        [Switch]_x000D__x000A_        $PassThru,_x000D__x000A__x000D__x000A_        [string]_x000D__x000A_        $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ($Path -notmatch '\S') {_x000D__x000A_        $directory = New-RandomTempRegistry_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if (-not (&amp; $SafeCommands['Test-Path'] -Path $Path)) {_x000D__x000A_            # the pester registry root path HKCU:\Pester is created once_x000D__x000A_            # and then stays in place, in TestDrive we use system Temp folder,_x000D__x000A_            # but no such folder exists for registry so we create our own._x000D__x000A_            # removing the folder after test run would be possible but we potentially_x000D__x000A_            # running into conflict with other instance of Pester that is running_x000D__x000A_            # so keeping it in place is a small price to pay for being able to run_x000D__x000A_            # parallel pester sessions easily._x000D__x000A_            # Also don't use -Force parameter here_x000D__x000A_            # because that deletes the folder and creates a race condition see_x000D__x000A_            # https://github.com/pester/Pester/issues/1181_x000D__x000A_            $null = &amp; $SafeCommands['New-Item'] -Path $Path_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $directory = &amp; $SafeCommands['Get-Item'] $Path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $DriveName = "TestRegistry"_x000D__x000A_    #setup the test drive_x000D__x000A_    if ( -not (&amp; $SafeCommands['Test-Path'] "${DriveName}:\") ) {_x000D__x000A_        try {_x000D__x000A_            $null = &amp; $SafeCommands['New-PSDrive'] -Name $DriveName -PSProvider Registry -Root $directory -Scope Global -Description "Pester test registry" -ErrorAction Stop_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            if ($_.FullyQualifiedErrorId -like 'DriveAlreadyExists*') {_x000D__x000A_                # it can happen that Test-Path reports false even though the drive_x000D__x000A_                # exists. I don't know why but I see it in "Context Teardown fails"_x000D__x000A_                # it would be possible to use Get-PsDrive directly for the test but it_x000D__x000A_                # is about 10ms slower and we do it in every Describe and It so it would_x000D__x000A_                # quickly add up_x000D__x000A__x000D__x000A_                # so if that happens just ignore the error, the goal of this function is to_x000D__x000A_                # create the testdrive and the testdrive already exists, so all is good._x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                &amp; $SafeCommands['Write-Error'] $_ -ErrorAction 'Stop'_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ( $PassThru ) {_x000D__x000A_        &amp; $SafeCommands['Get-PSDrive'] -Name $DriveName_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TestRegistryPath () {_x000D__x000A_    "Microsoft.PowerShell.Core\Registry::" + (&amp; $SafeCommands['Get-PSDrive'] -Name TestRegistry -ErrorAction Stop).Root_x000D__x000A_}_x000D__x000A__x000D__x000A_function Clear-TestRegistry {_x000D__x000A_    param(_x000D__x000A_        [String[]]_x000D__x000A_        $Exclude_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # if the setup fails before we mark test registry added_x000D__x000A_    # we would be trying to teardown something that does not_x000D__x000A_    # exist and fail in Get-TestRegistryPath_x000D__x000A_    if (-not (&amp; $SafeCommands['Test-Path'] "TestRegistry:\")) {_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $path = Get-TestRegistryPath_x000D__x000A__x000D__x000A_    if ($null -ne $path -and (&amp; $SafeCommands['Test-Path'] -Path $Path)) {_x000D__x000A_        #Get-ChildItem -Exclude did not seem to work with full paths_x000D__x000A_        &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $Path |_x000D__x000A_            &amp; $SafeCommands['Sort-Object'] -Descending  -Property 'PSPath' |_x000D__x000A_            &amp; $SafeCommands['Where-Object'] { $Exclude -NotContains $_.PSPath } |_x000D__x000A_            &amp; $SafeCommands['Remove-Item'] -Force -Recurse_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TestRegistryChildItem {_x000D__x000A_    $path = Get-TestRegistryPath_x000D__x000A_    &amp; $SafeCommands['Get-ChildItem'] -Recurse -Path $path_x000D__x000A_}_x000D__x000A__x000D__x000A_function New-RandomTempRegistry {_x000D__x000A_    do {_x000D__x000A_        $tempPath = Get-TempRegistry_x000D__x000A_        $Path = &amp; $SafeCommands['Join-Path'] -Path $tempPath -ChildPath ([Guid]::NewGuid())_x000D__x000A_    } until (-not (&amp; $SafeCommands['Test-Path'] -Path $Path ))_x000D__x000A__x000D__x000A_    try {_x000D__x000A_        &amp; $SafeCommands['New-Item'] -Path $Path_x000D__x000A_    }_x000D__x000A_    catch [System.IO.IOException] {_x000D__x000A_        # when running in parallel this occasionally triggers_x000D__x000A_        # IOException: No more data is available_x000D__x000A_        # let's just retry the operation_x000D__x000A_        &amp; $SafeCommands['New-Item'] -Path $Path_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Remove-TestRegistry {_x000D__x000A_    $DriveName = "TestRegistry"_x000D__x000A_    $Drive = &amp; $SafeCommands['Get-PSDrive'] -Name $DriveName -ErrorAction Ignore_x000D__x000A_    if ($null -eq $Drive) {_x000D__x000A_        # the drive does not exist, someone must have removed it instead of us,_x000D__x000A_        # most likely a test that tests pester itself, so we just hope that the_x000D__x000A_        # one who removed this removed also the contents of it correctly_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $path = Get-TestRegistryPath_x000D__x000A__x000D__x000A_    if ($pwd -like "$DriveName*" ) {_x000D__x000A_        #will staying in the test drive cause issues?_x000D__x000A_        #TODO: review this_x000D__x000A_        &amp; $SafeCommands['Write-Warning'] -Message "Your current path is set to ${pwd}:. You should leave ${DriveName}:\ before leaving Describe."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ( $Drive ) {_x000D__x000A_        $Drive | &amp; $SafeCommands['Remove-PSDrive'] -Force #This should fail explicitly as it impacts future pester runs_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (&amp; $SafeCommands['Test-Path'] -Path $path) {_x000D__x000A_        &amp; $SafeCommands['Remove-Item'] -Path $path -Force -Recurse_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (&amp; $SafeCommands['Get-Variable'] -Name $DriveName -Scope Global -ErrorAction Ignore) {_x000D__x000A_        &amp; $SafeCommands['Remove-Variable'] -Scope Global -Name $DriveName -Force_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_function Get-TestRegistryPlugin {_x000D__x000A__x000D__x000A_    # TODO: add OnStart block and put this in it_x000D__x000A__x000D__x000A_    if (&amp; $script:SafeCommands['Test-Path'] TestRegistry:\) {_x000D__x000A_        &amp; $SafeCommands['Remove-Item'] (&amp; $SafeCommands['Get-PSDrive'] TestRegistry -ErrorAction Stop).Root -Force -Recurse -Confirm:$false -ErrorAction Ignore_x000D__x000A_        &amp; $SafeCommands['Remove-PSDrive'] TestRegistry_x000D__x000A_    }_x000D__x000A_    New-PluginObject -Name "TestRegistry" -EachBlockSetupStart {_x000D__x000A_        param($Context)_x000D__x000A_        if (-not ($Context.Block.PluginData.ContainsKey('TestRegistry'))) {_x000D__x000A_            $Context.Block.PluginData.Add('TestRegistry', @{_x000D__x000A_                    TestRegistryAdded   = $false_x000D__x000A_                    TestRegistryContent = $null_x000D__x000A_                })_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # TODO: Add option, but probably in a more generic way_x000D__x000A_        # if (-not $NoTestRegistry)_x000D__x000A_        # {_x000D__x000A_        if (-not (&amp; $script:SafeCommands['Test-Path'] TestRegistry:\)) {_x000D__x000A_            New-TestRegistry_x000D__x000A_            $Context.Block.PluginData.TestRegistry.TestRegistryAdded = $true_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $Context.Block.PluginData.TestRegistry.TestRegistryContent = Get-TestRegistryChildItem_x000D__x000A_        }_x000D__x000A_        # }_x000D__x000A__x000D__x000A_    } -EachBlockTearDownEnd {_x000D__x000A_        # if (-not $NoTestRegistry)_x000D__x000A_        # {_x000D__x000A_        if ($Context.Block.PluginData.TestRegistry.TestRegistryAdded) {_x000D__x000A_            Remove-TestRegistry_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            Clear-TestRegistry -Exclude ( $Context.Block.PluginData.TestRegistry.TestRegistryContent | &amp; $SafeCommands['Select-Object'] -ExpandProperty PSPath)_x000D__x000A_        }_x000D__x000A_        # }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_# file src\functions\TestResults.ps1_x000D__x000A_function Get-HumanTime {_x000D__x000A_    param( [TimeSpan] $TimeSpan)_x000D__x000A_    if ($TimeSpan.Ticks -lt [timespan]::TicksPerSecond) {_x000D__x000A_        $time = [int]($TimeSpan.TotalMilliseconds)_x000D__x000A_        $unit = "ms"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $time = [math]::Round($TimeSpan.TotalSeconds, 2)_x000D__x000A_        $unit = 's'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return "$time$unit"_x000D__x000A_}_x000D__x000A__x000D__x000A_function GetFullPath ([string]$Path) {_x000D__x000A_    $Folder = &amp; $SafeCommands['Split-Path'] -Path $Path -Parent_x000D__x000A_    $File = &amp; $SafeCommands['Split-Path'] -Path $Path -Leaf_x000D__x000A__x000D__x000A_    if ( -not ([String]::IsNullOrEmpty($Folder))) {_x000D__x000A_        $FolderResolved = &amp; $SafeCommands['Resolve-Path'] -Path $Folder_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $FolderResolved = &amp; $SafeCommands['Resolve-Path'] -Path $ExecutionContext.SessionState.Path.CurrentFileSystemLocation_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Path = &amp; $SafeCommands['Join-Path'] -Path $FolderResolved.ProviderPath -ChildPath $File_x000D__x000A__x000D__x000A_    return $Path_x000D__x000A_}_x000D__x000A__x000D__x000A_function Export-PesterResults {_x000D__x000A_    param (_x000D__x000A_        $Result,_x000D__x000A_        [string] $Path,_x000D__x000A_        [string] $Format_x000D__x000A_    )_x000D__x000A__x000D__x000A_    switch -Wildcard ($Format) {_x000D__x000A_        'NUnit2.5' {_x000D__x000A_            Export-XmlReport -Result $Result -Path $Path -Format $Format_x000D__x000A_        }_x000D__x000A__x000D__x000A_        '*Xml' {_x000D__x000A_            Export-XmlReport -Result $Result -Path $Path -Format $Format_x000D__x000A_        }_x000D__x000A__x000D__x000A_        default {_x000D__x000A_            throw "'$Format' is not a valid Pester export format."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Export-NUnitReport {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an NUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-NUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an NUnit 2.5-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format NUnitXml_x000D__x000A_}_x000D__x000A__x000D__x000A_function Export-JUnitReport {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an JUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    JUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-JUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an JUnit 4-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format JUnitXml_x000D__x000A_}_x000D__x000A__x000D__x000A_function Export-XmlReport {_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [ValidateSet('NUnitXml', 'NUnit2.5', 'JUnitXml')]_x000D__x000A_        [string] $Format_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if ('NUnit2.5' -eq $Format) {_x000D__x000A_        $Format = 'NUnitXml'_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #the xmlwriter create method can resolve relatives paths by itself. but its current directory might_x000D__x000A_    #be different from what PowerShell sees as the current directory so I have to resolve the path beforehand_x000D__x000A_    #working around the limitations of Resolve-Path_x000D__x000A_    $Path = GetFullPath -Path $Path_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $xmlFile = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $xmlFile = [IO.File]::Create($Path)_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($xmlFile, $settings)_x000D__x000A__x000D__x000A_        switch ($Format) {_x000D__x000A_            'NUnitXml' {_x000D__x000A_                Write-NUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A_            }_x000D__x000A__x000D__x000A_            'JUnitXml' {_x000D__x000A_                Write-JUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $xmlFile.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        if ($null -ne $xmlWriter) {_x000D__x000A_            try {_x000D__x000A_                $xmlWriter.Close()_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($null -ne $xmlFile) {_x000D__x000A_            try {_x000D__x000A_                $xmlFile.Close()_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-NUnitReport {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an NUnit 2.5-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-NUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitReport($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    # Write the XML Declaration_x000D__x000A_    $XmlWriter.WriteStartDocument($false)_x000D__x000A__x000D__x000A_    # Write Root Element_x000D__x000A_    $xmlWriter.WriteStartElement('test-results')_x000D__x000A__x000D__x000A_    Write-NUnitTestResultAttributes @PSBoundParameters_x000D__x000A_    Write-NUnitTestResultChildNodes @PSBoundParameters_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestResultAttributes($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    $XmlWriter.WriteAttributeString('xmlns', 'xsi', $null, 'http://www.w3.org/2001/XMLSchema-instance')_x000D__x000A_    $XmlWriter.WriteAttributeString('xsi', 'noNamespaceSchemaLocation', [Xml.Schema.XmlSchema]::InstanceNamespace , 'nunit_schema_2.5.xsd')_x000D__x000A_    $XmlWriter.WriteAttributeString('name', $Result.Configuration.TestResult.TestSuiteName.Value)_x000D__x000A_    $XmlWriter.WriteAttributeString('total', ($Result.TotalCount - $Result.NotRunCount))_x000D__x000A_    $XmlWriter.WriteAttributeString('errors', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('failures', $Result.FailedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('not-run', $Result.NotRunCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('inconclusive', '0') # $Result.PendingCount + $Result.InconclusiveCount) #TODO: reflect inconclusive count once it is added_x000D__x000A_    $XmlWriter.WriteAttributeString('ignored', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('skipped', $Result.SkippedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('invalid', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('date', $Result.ExecutedAt.ToString('yyyy-MM-dd'))_x000D__x000A_    $XmlWriter.WriteAttributeString('time', $Result.ExecutedAt.ToString('HH:mm:ss'))_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestResultChildNodes($RunResult, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    Write-NUnitEnvironmentInformation -Result $RunResult -XmlWriter $XmlWriter_x000D__x000A_    Write-NUnitCultureInformation -Result $RunResult -XmlWriter $XmlWriter_x000D__x000A__x000D__x000A_    $suiteInfo = Get-TestSuiteInfo -TestSuite $Result -Path "Pester"_x000D__x000A__x000D__x000A_    $XmlWriter.WriteStartElement('test-suite')_x000D__x000A__x000D__x000A_    Write-NUnitTestSuiteAttributes -TestSuiteInfo $suiteInfo -XmlWriter $XmlWriter_x000D__x000A__x000D__x000A_    $XmlWriter.WriteStartElement('results')_x000D__x000A__x000D__x000A_    foreach ($container in $Result.Containers) {_x000D__x000A_        if (-not $container.ShouldRun) {_x000D__x000A_            # skip containers that were discovered but none of their tests run_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ("File" -eq $container.Type) {_x000D__x000A_            $path = $container.Item.FullName_x000D__x000A_        }_x000D__x000A_        elseif ("ScriptBlock" -eq $container.Type) {_x000D__x000A_            $path = "&lt;ScriptBlock&gt;$($container.Item.File):$($container.Item.StartPosition.StartLine)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "Container type '$($container.Type)' is not supported."_x000D__x000A_        }_x000D__x000A_        Write-NUnitTestSuiteElements -XmlWriter $XmlWriter -Node $container -Path $path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitEnvironmentInformation($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    $XmlWriter.WriteStartElement('environment')_x000D__x000A__x000D__x000A_    $environment = Get-RunTimeEnvironment_x000D__x000A_    foreach ($keyValuePair in $environment.GetEnumerator()) {_x000D__x000A_        if ($keyValuePair.Name -eq 'junit-version') {_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $XmlWriter.WriteAttributeString($keyValuePair.Name, $keyValuePair.Value)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitCultureInformation($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    $XmlWriter.WriteStartElement('culture-info')_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('current-culture', ([System.Threading.Thread]::CurrentThread.CurrentCulture).Name)_x000D__x000A_    $XmlWriter.WriteAttributeString('current-uiculture', ([System.Threading.Thread]::CurrentThread.CurrentUiCulture).Name)_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestSuiteElements($Node, [System.Xml.XmlWriter] $XmlWriter, [string] $Path) {_x000D__x000A_    $suiteInfo = Get-TestSuiteInfo -TestSuite $Node -Path $Path_x000D__x000A__x000D__x000A_    $XmlWriter.WriteStartElement('test-suite')_x000D__x000A__x000D__x000A_    Write-NUnitTestSuiteAttributes -TestSuiteInfo $suiteInfo -XmlWriter $XmlWriter_x000D__x000A__x000D__x000A_    $XmlWriter.WriteStartElement('results')_x000D__x000A__x000D__x000A_    foreach ($action in $Node.Blocks) {_x000D__x000A_        if (-not $action.ShouldRun) {_x000D__x000A_            # skip blocks that were discovered but did not run_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A_        Write-NUnitTestSuiteElements -Node $action -XmlWriter $XmlWriter -Path $action.ExpandedPath_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $suites = @(_x000D__x000A_        # todo: what is this? is it ordering tests into groups based on which test cases they belong to so we data driven tests in one result?_x000D__x000A_        $Node.Tests | &amp; $SafeCommands['Group-Object'] -Property Id_x000D__x000A_    )_x000D__x000A__x000D__x000A_    foreach ($suite in $suites) {_x000D__x000A_        # TODO: when suite has name it belongs into a test group (test cases that are generated from the same test, based on the provided data) so we want extra level of nesting for them, right now this is encoded as having an Id that is non empty, but this is not ideal, it would be nicer to make it more explicit_x000D__x000A_        $testGroupId = $suite.Name_x000D__x000A_        if ($testGroupId) {_x000D__x000A_            $parameterizedSuiteInfo = Get-ParameterizedTestSuiteInfo -TestSuiteGroup $suite_x000D__x000A__x000D__x000A_            $XmlWriter.WriteStartElement('test-suite')_x000D__x000A__x000D__x000A_            Write-NUnitTestSuiteAttributes -TestSuiteInfo $parameterizedSuiteInfo -TestSuiteType 'ParameterizedTest' -XmlWriter $XmlWriter -Path $newPath_x000D__x000A__x000D__x000A_            $XmlWriter.WriteStartElement('results')_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($testCase in $suite.Group) {_x000D__x000A_            if (-not $testCase.ShouldRun) {_x000D__x000A_                # skip tests that were discovered but did not run_x000D__x000A_                continue_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $suiteName = if ($testGroupId) { $parameterizedSuiteInfo.Name } else { "" }_x000D__x000A_            Write-NUnitTestCaseElement -TestResult $testCase -XmlWriter $XmlWriter -Path ($testCase.Path -join '.') -ParameterizedSuiteName $suiteName_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($testGroupId) {_x000D__x000A_            # close the extra nesting element when we were writing testcases_x000D__x000A_            $XmlWriter.WriteEndElement()_x000D__x000A_            $XmlWriter.WriteEndElement()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitReport($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    # Write the XML Declaration_x000D__x000A_    $XmlWriter.WriteStartDocument($false)_x000D__x000A__x000D__x000A_    # Write Root Element_x000D__x000A_    $xmlWriter.WriteStartElement('testsuites')_x000D__x000A__x000D__x000A_    Write-JUnitTestResultAttributes @PSBoundParameters_x000D__x000A__x000D__x000A_    $testSuiteNumber = 0_x000D__x000A_    foreach ($container in $Result.Containers) {_x000D__x000A_        if (-not $container.ShouldRun) {_x000D__x000A_            # skip containers that were discovered but none of their tests run_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Write-JUnitTestSuiteElements -XmlWriter $XmlWriter -Container $container -Id $testSuiteNumber_x000D__x000A_        $testSuiteNumber++_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function ConvertTo-JUnitReport {_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an JUnit-compatible XML report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-JUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestResultAttributes($Result, [System.Xml.XmlWriter] $XmlWriter) {_x000D__x000A_    $XmlWriter.WriteAttributeString('xmlns', 'xsi', $null, 'http://www.w3.org/2001/XMLSchema-instance')_x000D__x000A_    $XmlWriter.WriteAttributeString('xsi', 'noNamespaceSchemaLocation', [Xml.Schema.XmlSchema]::InstanceNamespace , 'junit_schema_4.xsd')_x000D__x000A_    $XmlWriter.WriteAttributeString('name', $Result.Configuration.TestResult.TestSuiteName.Value)_x000D__x000A_    $XmlWriter.WriteAttributeString('tests', $Result.TotalCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('errors', $Result.FailedContainersCount + $Result.FailedBlocksCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('failures', $Result.FailedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('disabled', $Result.NotRunCount + $Result.SkippedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('time', ($Result.Duration.TotalSeconds.ToString('0.000', [System.Globalization.CultureInfo]::InvariantCulture)))_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestSuiteElements($Container, [System.Xml.XmlWriter] $XmlWriter, [uint16] $Id) {_x000D__x000A_    $XmlWriter.WriteStartElement('testsuite')_x000D__x000A__x000D__x000A_    if ("File" -eq $Container.Type) {_x000D__x000A_        $path = $Container.Item.FullName_x000D__x000A_    }_x000D__x000A_    elseif ("ScriptBlock" -eq $Container.Type) {_x000D__x000A_        $path = "&lt;ScriptBlock&gt;$($Container.Item.File):$($Container.Item.StartPosition.StartLine)"_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        throw "Container type '$($Container.Type)' is not supported."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Write-JUnitTestSuiteAttributes -Action $Container -XmlWriter $XmlWriter -Package $path -Id $Id_x000D__x000A__x000D__x000A__x000D__x000A_    $testResults = [Pester.Factory]::CreateCollection()_x000D__x000A_    Fold-Container -Container $Container -OnTest { param ($t) if ($t.ShouldRun) { $testResults.Add($t) } }_x000D__x000A_    foreach ($t in $testResults) {_x000D__x000A_        Write-JUnitTestCaseElements -TestResult $t -XmlWriter $XmlWriter -Package $path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestSuiteAttributes($Action, [System.Xml.XmlWriter] $XmlWriter, [string] $Package, [uint16] $Id) {_x000D__x000A_    $environment = Get-RunTimeEnvironment_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('name', $Package)_x000D__x000A_    $XmlWriter.WriteAttributeString('tests', $Action.TotalCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('errors', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('failures', $Action.FailedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('hostname', $environment.'machine-name')_x000D__x000A_    $XmlWriter.WriteAttributeString('id', $Id)_x000D__x000A_    $XmlWriter.WriteAttributeString('skipped', $Action.SkippedCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('disabled', $Action.NotRunCount)_x000D__x000A_    $XmlWriter.WriteAttributeString('package', $Package)_x000D__x000A_    $XmlWriter.WriteAttributeString('time', $Action.Duration.TotalSeconds.ToString('0.000', [System.Globalization.CultureInfo]::InvariantCulture))_x000D__x000A__x000D__x000A_    $XmlWriter.WriteStartElement('properties')_x000D__x000A__x000D__x000A_    foreach ($keyValuePair in $environment.GetEnumerator()) {_x000D__x000A_        if ($keyValuePair.Name -eq 'nunit-version') {_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $XmlWriter.WriteStartElement('property')_x000D__x000A_        $XmlWriter.WriteAttributeString('name', $keyValuePair.Name)_x000D__x000A_        $XmlWriter.WriteAttributeString('value', $keyValuePair.Value)_x000D__x000A_        $XmlWriter.WriteEndElement()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestCaseElements($TestResult, [System.Xml.XmlWriter] $XmlWriter, [string] $Package) {_x000D__x000A_    $XmlWriter.WriteStartElement('testcase')_x000D__x000A__x000D__x000A_    Write-JUnitTestCaseAttributes -TestResult $TestResult -XmlWriter $XmlWriter -ClassName $Package_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestCaseAttributes($TestResult, [System.Xml.XmlWriter] $XmlWriter, [string] $ClassName) {_x000D__x000A_    $XmlWriter.WriteAttributeString('name', $TestResult.ExpandedPath)_x000D__x000A__x000D__x000A_    $statusElementName = switch ($TestResult.Result) {_x000D__x000A_        Passed {_x000D__x000A_            $null_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Failed {_x000D__x000A_            'failure'_x000D__x000A_        }_x000D__x000A__x000D__x000A_        default {_x000D__x000A_            'skipped'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('status', $TestResult.Result)_x000D__x000A_    $XmlWriter.WriteAttributeString('classname', $ClassName)_x000D__x000A_    $XmlWriter.WriteAttributeString('assertions', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('time', $TestResult.Duration.TotalSeconds.ToString('0.000', [System.Globalization.CultureInfo]::InvariantCulture))_x000D__x000A__x000D__x000A_    if ($null -ne $statusElementName) {_x000D__x000A_        Write-JUnitTestCaseMessageElements -TestResult $TestResult -XmlWriter $XmlWriter -StatusElementName $statusElementName_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-JUnitTestCaseMessageElements($TestResult, [System.Xml.XmlWriter] $XmlWriter, [string] $StatusElementName) {_x000D__x000A_    $XmlWriter.WriteStartElement($StatusElementName)_x000D__x000A__x000D__x000A_    $result = Get-ErrorForXmlReport -TestResult $TestResult_x000D__x000A_    $XmlWriter.WriteAttributeString('message', $result.FailureMessage)_x000D__x000A_    $XmlWriter.WriteString($result.StackTrace)_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ParameterizedTestSuiteInfo ([Microsoft.PowerShell.Commands.GroupInfo] $TestSuiteGroup) {_x000D__x000A_    # this is generating info for a group of tests that were generated from the same test when TestCases are used_x000D__x000A_    # I am using the Name from the first test as the name of the test group, even though we are grouping at_x000D__x000A_    # the Id of the test (which is the line where the ScriptBlock of that test starts). This allows us to have_x000D__x000A_    # unique Id (the line number) and also a readable name_x000D__x000A_    # the possible edgecase here is putting $(Get-Date) into the test name, which would prevent us from_x000D__x000A_    # grouping the tests together if we used just the name, and not the linenumber (which remains static)_x000D__x000A_    $node = [PSCustomObject] @{_x000D__x000A_        Path = $TestSuiteGroup.Group[0].Path_x000D__x000A_        TotalCount        = 0_x000D__x000A_        Duration          = [timespan]0_x000D__x000A_        PassedCount       = 0_x000D__x000A_        FailedCount       = 0_x000D__x000A_        SkippedCount      = 0_x000D__x000A_        PendingCount      = 0_x000D__x000A_        InconclusiveCount = 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($testCase in $TestSuiteGroup.Group) {_x000D__x000A_        $node.TotalCount++_x000D__x000A_        switch ($testCase.Result) {_x000D__x000A_            Passed {_x000D__x000A_                $node.PassedCount++; break;_x000D__x000A_            }_x000D__x000A_            Failed {_x000D__x000A_                $node.FailedCount++; break;_x000D__x000A_            }_x000D__x000A_            Skipped {_x000D__x000A_                $node.SkippedCount++; break;_x000D__x000A_            }_x000D__x000A_            Pending {_x000D__x000A_                $node.PendingCount++; break;_x000D__x000A_            }_x000D__x000A_            Inconclusive {_x000D__x000A_                $node.InconclusiveCount++; break;_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $node.Duration += $testCase.Duration_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return Get-TestSuiteInfo -TestSuite $node -Path $node.Path_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TestSuiteInfo ($TestSuite, $Path) {_x000D__x000A_    # if (-not $Path) {_x000D__x000A_    #     $Path = $TestSuite.Name_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    # if (-not $Path) {_x000D__x000A_    #     $pathProperty = $TestSuite.PSObject.Properties.Item("path")_x000D__x000A_    #     if ($pathProperty) {_x000D__x000A_    #         $path = $pathProperty.Value_x000D__x000A_    #         if ($path -is [System.IO.FileInfo]) {_x000D__x000A_    #             $Path = $path.FullName_x000D__x000A_    #         }_x000D__x000A_    #         else {_x000D__x000A_    #             $Path = $pathProperty.Value -join "."_x000D__x000A_    #         }_x000D__x000A_    #     }_x000D__x000A_    # }_x000D__x000A__x000D__x000A_    $time = $TestSuite.Duration_x000D__x000A__x000D__x000A_    if (1 -lt @($Path).Count) {_x000D__x000A_        $name = $Path -join '.'_x000D__x000A_        $description = $Path[-1]_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $name = $Path_x000D__x000A_        $description = $Path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $suite = @{_x000D__x000A_        resultMessage = 'Failure'_x000D__x000A_        success = if ($TestSuite.FailedCount -eq 0) {_x000D__x000A_            'True'_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            'False'_x000D__x000A_        }_x000D__x000A_        totalTime     = Convert-TimeSpan $time_x000D__x000A_        name          = $name_x000D__x000A_        description   = $description_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $suite.resultMessage = Get-GroupResult $TestSuite_x000D__x000A_    $suite_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-TestTime($tests) {_x000D__x000A_    [TimeSpan]$totalTime = 0;_x000D__x000A_    if ($tests) {_x000D__x000A_        foreach ($test in $tests) {_x000D__x000A_            $totalTime += $test.time_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Convert-TimeSpan -TimeSpan $totalTime_x000D__x000A_}_x000D__x000A_function Convert-TimeSpan {_x000D__x000A_    param (_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        $TimeSpan_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if ($TimeSpan) {_x000D__x000A_            [string][math]::round(([TimeSpan]$TimeSpan).totalseconds, 4)_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            '0'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestSuiteAttributes($TestSuiteInfo, [string] $TestSuiteType = 'TestFixture', [System.Xml.XmlWriter] $XmlWriter, [string] $Path) {_x000D__x000A_    $name = $TestSuiteInfo.Name_x000D__x000A__x000D__x000A_    if ($TestSuiteType -eq 'ParameterizedTest' -and $Path) {_x000D__x000A_        $name = "$Path.$name"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('type', $TestSuiteType)_x000D__x000A_    $XmlWriter.WriteAttributeString('name', $name)_x000D__x000A_    $XmlWriter.WriteAttributeString('executed', 'True')_x000D__x000A_    $XmlWriter.WriteAttributeString('result', $TestSuiteInfo.resultMessage)_x000D__x000A_    $XmlWriter.WriteAttributeString('success', $TestSuiteInfo.success)_x000D__x000A_    $XmlWriter.WriteAttributeString('time', $TestSuiteInfo.totalTime)_x000D__x000A_    $XmlWriter.WriteAttributeString('asserts', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('description', $TestSuiteInfo.Description)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestCaseElement($TestResult, [System.Xml.XmlWriter] $XmlWriter, [string] $ParameterizedSuiteName, [string] $Path) {_x000D__x000A_    $XmlWriter.WriteStartElement('test-case')_x000D__x000A__x000D__x000A_    Write-NUnitTestCaseAttributes -TestResult $TestResult -XmlWriter $XmlWriter -ParameterizedSuiteName $ParameterizedSuiteName -Path $Path_x000D__x000A__x000D__x000A_    $XmlWriter.WriteEndElement()_x000D__x000A_}_x000D__x000A__x000D__x000A_function Write-NUnitTestCaseAttributes($TestResult, [System.Xml.XmlWriter] $XmlWriter, [string] $ParameterizedSuiteName, [string] $Path) {_x000D__x000A__x000D__x000A_    $testName = $TestResult.ExpandedPath_x000D__x000A__x000D__x000A_    # todo: this comparison would fail if the test name would contain $(Get-Date) or something similar that changes all the time_x000D__x000A_    if ($testName -eq $ParameterizedSuiteName) {_x000D__x000A_        $paramString = ''_x000D__x000A_        if ($null -ne $TestResult.Data) {_x000D__x000A_            $paramsUsedInTestName =$false_x000D__x000A__x000D__x000A_            if (-not $paramsUsedInTestName) {_x000D__x000A_                $params = @(_x000D__x000A_                    foreach ($value in $TestResult.Data.Values) {_x000D__x000A_                        if ($null -eq $value) {_x000D__x000A_                            'null'_x000D__x000A_                        }_x000D__x000A_                        elseif ($value -is [string]) {_x000D__x000A_                            '"{0}"' -f $value_x000D__x000A_                        }_x000D__x000A_                        else {_x000D__x000A_                            #do not use .ToString() it uses the current culture settings_x000D__x000A_                            #and we need to use en-US culture, which [string] or .ToString([Globalization.CultureInfo]'en-us') uses_x000D__x000A_                            [string]$value_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                )_x000D__x000A__x000D__x000A_                $paramString = "($($params -join ','))"_x000D__x000A_                $testName = "$testName$paramString"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('description', $TestResult.ExpandedName)_x000D__x000A__x000D__x000A_    $XmlWriter.WriteAttributeString('name', $testName)_x000D__x000A_    $XmlWriter.WriteAttributeString('time', (Convert-TimeSpan $TestResult.Duration))_x000D__x000A_    $XmlWriter.WriteAttributeString('asserts', '0')_x000D__x000A_    $XmlWriter.WriteAttributeString('success', "Passed" -eq $TestResult.Result)_x000D__x000A__x000D__x000A_    switch ($TestResult.Result) {_x000D__x000A_        Passed {_x000D__x000A_            $XmlWriter.WriteAttributeString('result', 'Success')_x000D__x000A_            $XmlWriter.WriteAttributeString('executed', 'True')_x000D__x000A__x000D__x000A_            break_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Skipped {_x000D__x000A_            $XmlWriter.WriteAttributeString('result', 'Ignored')_x000D__x000A_            $XmlWriter.WriteAttributeString('executed', 'False')_x000D__x000A__x000D__x000A_            if ($TestResult.FailureMessage) {_x000D__x000A_                $XmlWriter.WriteStartElement('reason')_x000D__x000A_                $xmlWriter.WriteElementString('message', $TestResult.FailureMessage)_x000D__x000A_                $XmlWriter.WriteEndElement() # Close reason tag_x000D__x000A_            }_x000D__x000A__x000D__x000A_            break_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Pending {_x000D__x000A_            $XmlWriter.WriteAttributeString('result', 'Inconclusive')_x000D__x000A_            $XmlWriter.WriteAttributeString('executed', 'True')_x000D__x000A__x000D__x000A_            if ($TestResult.FailureMessage) {_x000D__x000A_                $XmlWriter.WriteStartElement('reason')_x000D__x000A_                $xmlWriter.WriteElementString('message', $TestResult.FailureMessage)_x000D__x000A_                $XmlWriter.WriteEndElement() # Close reason tag_x000D__x000A_            }_x000D__x000A__x000D__x000A_            break_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Inconclusive {_x000D__x000A_            $XmlWriter.WriteAttributeString('result', 'Inconclusive')_x000D__x000A_            $XmlWriter.WriteAttributeString('executed', 'True')_x000D__x000A__x000D__x000A_            if ($TestResult.FailureMessage) {_x000D__x000A_                $XmlWriter.WriteStartElement('reason')_x000D__x000A_                $xmlWriter.WriteElementString('message', $TestResult.DisplayErrorMessage)_x000D__x000A_                $XmlWriter.WriteEndElement() # Close reason tag_x000D__x000A_            }_x000D__x000A__x000D__x000A_            break_x000D__x000A_        }_x000D__x000A_        Failed {_x000D__x000A_            $XmlWriter.WriteAttributeString('result', 'Failure')_x000D__x000A_            $XmlWriter.WriteAttributeString('executed', 'True')_x000D__x000A_            $XmlWriter.WriteStartElement('failure')_x000D__x000A__x000D__x000A_            # TODO: remove monkey patching the error message when parent setup failed so this test never run_x000D__x000A_            # TODO: do not format the errors here, instead format them in the core using some unified function so we get the same thing on the screen and in nunit_x000D__x000A__x000D__x000A_            $result = Get-ErrorForXmlReport -TestResult $TestResult_x000D__x000A__x000D__x000A_            $xmlWriter.WriteElementString('message', $result.FailureMessage)_x000D__x000A_            $XmlWriter.WriteElementString('stack-trace', $result.StackTrace)_x000D__x000A_            $XmlWriter.WriteEndElement() # Close failure tag_x000D__x000A_            break_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-ErrorForXmlReport ($TestResult) {_x000D__x000A_    $failureMessage = if (($TestResult.ShouldRun -and -not $TestResult.Executed)) {_x000D__x000A_        "This test should run but it did not. Most likely a setup in some parent block failed."_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $multipleErrors = 1 -lt $TestResult.ErrorRecord.Count_x000D__x000A__x000D__x000A_        if ($multipleErrors) {_x000D__x000A_            $c = 0_x000D__x000A_            $(foreach ($err in $TestResult.ErrorRecord) {_x000D__x000A_                "[$(($c++))] $($err.DisplayErrorMessage)"_x000D__x000A_            }) -join [Environment]::NewLine_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $TestResult.ErrorRecord.DisplayErrorMessage_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $st = &amp; {_x000D__x000A_        $multipleErrors = 1 -lt $TestResult.ErrorRecord.Count_x000D__x000A__x000D__x000A_        if ($multipleErrors) {_x000D__x000A_            $c = 0_x000D__x000A_            $(foreach ($err in $TestResult.ErrorRecord) {_x000D__x000A_                "[$(($c++))] $($err.DisplayStackTrace)"_x000D__x000A_            }) -join [Environment]::NewLine_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            [string] $TestResult.ErrorRecord.DisplayStackTrace_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    @{_x000D__x000A_        FailureMessage = $failureMessage_x000D__x000A_        StackTrace = $st_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-RunTimeEnvironment() {_x000D__x000A_    # based on what we found during startup, use the appropriate cmdlet_x000D__x000A_    $computerName = $env:ComputerName_x000D__x000A_    $userName = $env:Username_x000D__x000A_    if ($null -ne $SafeCommands['Get-CimInstance']) {_x000D__x000A_        $osSystemInformation = (&amp; $SafeCommands['Get-CimInstance'] Win32_OperatingSystem)_x000D__x000A_    }_x000D__x000A_    elseif ($null -ne $SafeCommands['Get-WmiObject']) {_x000D__x000A_        $osSystemInformation = (&amp; $SafeCommands['Get-WmiObject'] Win32_OperatingSystem)_x000D__x000A_    }_x000D__x000A_    elseif ($IsMacOS -or $IsLinux) {_x000D__x000A_        $osSystemInformation = @{_x000D__x000A_            Name = "Unknown"_x000D__x000A_            Version = "0.0.0.0"_x000D__x000A_        }_x000D__x000A_        try {_x000D__x000A_            if ($null -ne $SafeCommands['uname']) {_x000D__x000A_                $osSystemInformation.Version = &amp; $SafeCommands['uname'] -r_x000D__x000A_                $osSystemInformation.Name = &amp; $SafeCommands['uname'] -s_x000D__x000A_                $computerName = &amp; $SafeCommands['uname'] -n_x000D__x000A_            }_x000D__x000A_            if ($null -ne $SafeCommands['id']) {_x000D__x000A_                $userName = &amp; $SafeCommands['id'] -un_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            # well, we tried_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $osSystemInformation = @{_x000D__x000A_            Name = "Unknown"_x000D__x000A_            Version = "0.0.0.0"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ( ($PSVersionTable.ContainsKey('PSEdition')) -and ($PSVersionTable.PSEdition -eq 'Core')) {_x000D__x000A_        $CLrVersion = "Unknown"_x000D__x000A__x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $CLrVersion = [string]$PSVersionTable.ClrVersion_x000D__x000A_    }_x000D__x000A__x000D__x000A_    @{_x000D__x000A_        'nunit-version' = '2.5.8.0'_x000D__x000A_        'junit-version' = '4'_x000D__x000A_        'os-version'    = $osSystemInformation.Version_x000D__x000A_        platform        = $osSystemInformation.Name_x000D__x000A_        cwd             = $pwd.Path_x000D__x000A_        'machine-name'  = $computerName_x000D__x000A_        user            = $username_x000D__x000A_        'user-domain'   = $env:userDomain_x000D__x000A_        'clr-version'   = $CLrVersion_x000D__x000A_    }_x000D__x000A_}_x000D__x000A__x000D__x000A_function Exit-WithCode ($FailedCount) {_x000D__x000A_    $host.SetShouldExit($FailedCount)_x000D__x000A_}_x000D__x000A__x000D__x000A_function Get-GroupResult ($InputObject) {_x000D__x000A_    #I am not sure about the result precedence, and can't find any good source_x000D__x000A_    #TODO: Confirm this is the correct order of precedence_x000D__x000A_    if ($inputObject.FailedCount -gt 0) {_x000D__x000A_        return 'Failure'_x000D__x000A_    }_x000D__x000A_    if ($InputObject.SkippedCount -gt 0) {_x000D__x000A_        return 'Ignored'_x000D__x000A_    }_x000D__x000A_    if ($InputObject.PendingCount -gt 0) {_x000D__x000A_        return 'Inconclusive'_x000D__x000A_    }_x000D__x000A_    return 'Success'_x000D__x000A_}_x000D__x000A_# file src\Pester.psm1_x000D__x000A_# Set-SessionStateHint -Hint Pester -SessionState $ExecutionContext.SessionState_x000D__x000A_# these functions will be shared with the mock bootstrap function, or used in mocked calls so let's capture them just once instead of everytime we use a mock_x000D__x000A_$script:SafeCommands['ExecutionContext'] = $ExecutionContext_x000D__x000A_$script:SafeCommands['Get-MockDynamicParameter'] = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Get-MockDynamicParameter', 'function')_x000D__x000A_$script:SafeCommands['Write-PesterDebugMessage'] = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Write-PesterDebugMessage', 'function')_x000D__x000A_$script:SafeCommands['Set-DynamicParameterVariable'] = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Set-DynamicParameterVariable', 'function')_x000D__x000A__x000D__x000A__x000D__x000A_&amp; $SafeCommands['Set-Alias'] 'Add-AssertionOperator' 'Add-ShouldOperator'_x000D__x000A_&amp; $SafeCommands['Set-Alias'] 'Get-AssertionOperator' 'Get-ShouldOperator'_x000D__x000A__x000D__x000A__x000D__x000A_&amp; $script:SafeCommands['Export-ModuleMember'] @(_x000D__x000A_    'Invoke-Pester'_x000D__x000A__x000D__x000A_    # blocks_x000D__x000A_    'Describe'_x000D__x000A_    'Context'_x000D__x000A_    'It'_x000D__x000A__x000D__x000A_    # mocking_x000D__x000A_    'Mock'_x000D__x000A_    'InModuleScope'_x000D__x000A__x000D__x000A_    # setups_x000D__x000A_    'BeforeDiscovery'_x000D__x000A_    'BeforeAll'_x000D__x000A_    'BeforeEach'_x000D__x000A_    'AfterEach'_x000D__x000A_    'AfterAll'_x000D__x000A__x000D__x000A_    # should_x000D__x000A_    'Should'_x000D__x000A_    'Add-ShouldOperator'_x000D__x000A_    'Get-ShouldOperator'_x000D__x000A__x000D__x000A_    # config_x000D__x000A_    'New-PesterContainer'_x000D__x000A__x000D__x000A_    # export_x000D__x000A_    'Export-NunitReport'_x000D__x000A_    'ConvertTo-NUnitReport'_x000D__x000A_    'Export-JUnitReport'_x000D__x000A_    'ConvertTo-JUnitReport'_x000D__x000A_    'ConvertTo-Pester4Result'_x000D__x000A__x000D__x000A_    # legacy_x000D__x000A_    'Assert-VerifiableMock'_x000D__x000A_    'Assert-MockCalled'_x000D__x000A_    'Set-ItResult'_x000D__x000A_    'New-MockObject'_x000D__x000A__x000D__x000A_    'New-Fixture'_x000D__x000A_) -Alias @(_x000D__x000A_    'Add-AssertionOperator'_x000D__x000A_    'Get-AssertionOperator'_x000D__x000A_)_x000D__x000A__x000D__x000A__x000D__x000A_# SIG # Begin signature block_x000D__x000A_# MIIcVgYJKoZIhvcNAQcCoIIcRzCCHEMCAQExCzAJBgUrDgMCGgUAMGkGCisGAQQB_x000D__x000A_# gjcCAQSgWzBZMDQGCisGAQQBgjcCAR4wJgIDAQAABBAfzDtgWUsITrck0sYpfvNR_x000D__x000A_# AgEAAgEAAgEAAgEAAgEAMCEwCQYFKw4DAhoFAAQUhanOOyatVRir+7c35zEpq3Ov_x000D__x000A_# kxuggheFMIIFDjCCA/agAwIBAgIQCIQ1OU/QbU6rESO7M78utDANBgkqhkiG9w0B_x000D__x000A_# AQsFADByMQswCQYDVQQGEwJVUzEVMBMGA1UEChMMRGlnaUNlcnQgSW5jMRkwFwYD_x000D__x000A_# VQQLExB3d3cuZGlnaWNlcnQuY29tMTEwLwYDVQQDEyhEaWdpQ2VydCBTSEEyIEFz_x000D__x000A_# c3VyZWQgSUQgQ29kZSBTaWduaW5nIENBMB4XDTIwMDEzMTAwMDAwMFoXDTIxMDEw_x000D__x000A_# NTEyMDAwMFowSzELMAkGA1UEBhMCQ1oxDjAMBgNVBAcTBVByYWhhMRUwEwYDVQQK_x000D__x000A_# DAxKYWt1YiBKYXJlxaExFTATBgNVBAMMDEpha3ViIEphcmXFoTCCASIwDQYJKoZI_x000D__x000A_# hvcNAQEBBQADggEPADCCAQoCggEBALYF0cDtFUyYgraHpHdObGJM9dxjfRr0WaPN_x000D__x000A_# kVZcEHdPXk4bVCPZLSca3Byybx745CpB3oejDHEbohLSTrbunoSA9utpwxVQSutt_x000D__x000A_# /H1onVexiJgwGJ6xoQgR17FGLBGiIHgyPhFJhba9yENh0dqargLWllsg070WE2yb_x000D__x000A_# gz3m659gmfuCuSZOhQ2nCHvOjEocTiI67mZlHvN7axg+pCgdEJrtIyvhHPqXeE2j_x000D__x000A_# cdMrfmYY1lq2FBpELEW1imYlu5BnaJd/5IT7WjHL3LWx5Su9FkY5RwrA6+X78+j+_x000D__x000A_# vKv00JtDjM0dT+4A/m65jXSywxa4YoGDqQ5n+BwDMQlWCzfu37sCAwEAAaOCAcUw_x000D__x000A_# ggHBMB8GA1UdIwQYMBaAFFrEuXsqCqOl6nEDwGD5LfZldQ5YMB0GA1UdDgQWBBRE_x000D__x000A_# 05R/U5mVzc4vKq4rvKyyPm12EzAOBgNVHQ8BAf8EBAMCB4AwEwYDVR0lBAwwCgYI_x000D__x000A_# KwYBBQUHAwMwdwYDVR0fBHAwbjA1oDOgMYYvaHR0cDovL2NybDMuZGlnaWNlcnQu_x000D__x000A_# Y29tL3NoYTItYXNzdXJlZC1jcy1nMS5jcmwwNaAzoDGGL2h0dHA6Ly9jcmw0LmRp_x000D__x000A_# Z2ljZXJ0LmNvbS9zaGEyLWFzc3VyZWQtY3MtZzEuY3JsMEwGA1UdIARFMEMwNwYJ_x000D__x000A_# YIZIAYb9bAMBMCowKAYIKwYBBQUHAgEWHGh0dHBzOi8vd3d3LmRpZ2ljZXJ0LmNv_x000D__x000A_# bS9DUFMwCAYGZ4EMAQQBMIGEBggrBgEFBQcBAQR4MHYwJAYIKwYBBQUHMAGGGGh0_x000D__x000A_# dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBOBggrBgEFBQcwAoZCaHR0cDovL2NhY2Vy_x000D__x000A_# dHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0U0hBMkFzc3VyZWRJRENvZGVTaWduaW5n_x000D__x000A_# Q0EuY3J0MAwGA1UdEwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggEBADAk7PRuDcdl_x000D__x000A_# lPZQSfZ1Y0jeItmEWPMNcAL0LQaa6M5Slrznjxv1ZiseT9SMWTxOQylfPvpOSo1x_x000D__x000A_# xV3kD7qf7tf2EuicKkV6dBgGiHb0riWZ3+wMA6C8IK3cGesJ4jgpTtYEzbh88pxT_x000D__x000A_# g2MSzpRnwyXHhrgcKSps1z34JmmmHP1lncxNC6DTM6yEUwE7XiDD2xNoeLITgdTQ_x000D__x000A_# jjMMT6nDJe8+xL0Zyh32OPIyrG7qPjG6MmEjzlCaWsE/trVo7I9CSOjwpp8721Hj_x000D__x000A_# q/tIHzPFg1C3dYmDh8Kbmr21dHWBLYQF4P8lq8u8AYDa6H7xvkx7G0i2jglAA4YK_x000D__x000A_# i1V8AlyTwRkwggUwMIIEGKADAgECAhAECRgbX9W7ZnVTQ7VvlVAIMA0GCSqGSIb3_x000D__x000A_# DQEBCwUAMGUxCzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAX_x000D__x000A_# BgNVBAsTEHd3dy5kaWdpY2VydC5jb20xJDAiBgNVBAMTG0RpZ2lDZXJ0IEFzc3Vy_x000D__x000A_# ZWQgSUQgUm9vdCBDQTAeFw0xMzEwMjIxMjAwMDBaFw0yODEwMjIxMjAwMDBaMHIx_x000D__x000A_# CzAJBgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3_x000D__x000A_# dy5kaWdpY2VydC5jb20xMTAvBgNVBAMTKERpZ2lDZXJ0IFNIQTIgQXNzdXJlZCBJ_x000D__x000A_# RCBDb2RlIFNpZ25pbmcgQ0EwggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB_x000D__x000A_# AQD407Mcfw4Rr2d3B9MLMUkZz9D7RZmxOttE9X/lqJ3bMtdx6nadBS63j/qSQ8Cl_x000D__x000A_# +YnUNxnXtqrwnIal2CWsDnkoOn7p0WfTxvspJ8fTeyOU5JEjlpB3gvmhhCNmElQz_x000D__x000A_# UHSxKCa7JGnCwlLyFGeKiUXULaGj6YgsIJWuHEqHCN8M9eJNYBi+qsSyrnAxZjNx_x000D__x000A_# PqxwoqvOf+l8y5Kh5TsxHM/q8grkV7tKtel05iv+bMt+dDk2DZDv5LVOpKnqagqr_x000D__x000A_# hPOsZ061xPeM0SAlI+sIZD5SlsHyDxL0xY4PwaLoLFH3c7y9hbFig3NBggfkOItq_x000D__x000A_# cyDQD2RzPJ6fpjOp/RnfJZPRAgMBAAGjggHNMIIByTASBgNVHRMBAf8ECDAGAQH/_x000D__x000A_# AgEAMA4GA1UdDwEB/wQEAwIBhjATBgNVHSUEDDAKBggrBgEFBQcDAzB5BggrBgEF_x000D__x000A_# BQcBAQRtMGswJAYIKwYBBQUHMAGGGGh0dHA6Ly9vY3NwLmRpZ2ljZXJ0LmNvbTBD_x000D__x000A_# BggrBgEFBQcwAoY3aHR0cDovL2NhY2VydHMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0_x000D__x000A_# QXNzdXJlZElEUm9vdENBLmNydDCBgQYDVR0fBHoweDA6oDigNoY0aHR0cDovL2Ny_x000D__x000A_# bDQuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9vdENBLmNybDA6oDig_x000D__x000A_# NoY0aHR0cDovL2NybDMuZGlnaWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEUm9v_x000D__x000A_# dENBLmNybDBPBgNVHSAESDBGMDgGCmCGSAGG/WwAAgQwKjAoBggrBgEFBQcCARYc_x000D__x000A_# aHR0cHM6Ly93d3cuZGlnaWNlcnQuY29tL0NQUzAKBghghkgBhv1sAzAdBgNVHQ4E_x000D__x000A_# FgQUWsS5eyoKo6XqcQPAYPkt9mV1DlgwHwYDVR0jBBgwFoAUReuir/SSy4IxLVGL_x000D__x000A_# p6chnfNtyA8wDQYJKoZIhvcNAQELBQADggEBAD7sDVoks/Mi0RXILHwlKXaoHV0c_x000D__x000A_# LToaxO8wYdd+C2D9wz0PxK+L/e8q3yBVN7Dh9tGSdQ9RtG6ljlriXiSBThCk7j9x_x000D__x000A_# jmMOE0ut119EefM2FAaK95xGTlz/kLEbBw6RFfu6r7VRwo0kriTGxycqoSkoGjpx_x000D__x000A_# KAI8LpGjwCUR4pwUR6F6aGivm6dcIFzZcbEMj7uo+MUSaJ/PQMtARKUT8OZkDCUI_x000D__x000A_# QjKyNookAv4vcn4c10lFluhZHen6dGRrsutmQ9qzsIzV6Q3d9gEgzpkxYz0IGhiz_x000D__x000A_# gZtPxpMQBvwHgfqL2vmCSfdibqFT+hKUGIUukpHqaGxEMrJmoecYpJpkUe8wggZq_x000D__x000A_# MIIFUqADAgECAhADAZoCOv9YsWvW1ermF/BmMA0GCSqGSIb3DQEBBQUAMGIxCzAJ_x000D__x000A_# BgNVBAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5k_x000D__x000A_# aWdpY2VydC5jb20xITAfBgNVBAMTGERpZ2lDZXJ0IEFzc3VyZWQgSUQgQ0EtMTAe_x000D__x000A_# Fw0xNDEwMjIwMDAwMDBaFw0yNDEwMjIwMDAwMDBaMEcxCzAJBgNVBAYTAlVTMREw_x000D__x000A_# DwYDVQQKEwhEaWdpQ2VydDElMCMGA1UEAxMcRGlnaUNlcnQgVGltZXN0YW1wIFJl_x000D__x000A_# c3BvbmRlcjCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKNkXfx8s+CC_x000D__x000A_# NeDg9sYq5kl1O8xu4FOpnx9kWeZ8a39rjJ1V+JLjntVaY1sCSVDZg85vZu7dy4Xp_x000D__x000A_# X6X51Id0iEQ7Gcnl9ZGfxhQ5rCTqqEsskYnMXij0ZLZQt/USs3OWCmejvmGfrvP9_x000D__x000A_# Enh1DqZbFP1FI46GRFV9GIYFjFWHeUhG98oOjafeTl/iqLYtWQJhiGFyGGi5uHzu_x000D__x000A_# 5uc0LzF3gTAfuzYBje8n4/ea8EwxZI3j6/oZh6h+z+yMDDZbesF6uHjHyQYuRhDI_x000D__x000A_# jegEYNu8c3T6Ttj+qkDxss5wRoPp2kChWTrZFQlXmVYwk/PJYczQCMxr7GJCkawC_x000D__x000A_# wO+k8IkRj3cCAwEAAaOCAzUwggMxMA4GA1UdDwEB/wQEAwIHgDAMBgNVHRMBAf8E_x000D__x000A_# AjAAMBYGA1UdJQEB/wQMMAoGCCsGAQUFBwMIMIIBvwYDVR0gBIIBtjCCAbIwggGh_x000D__x000A_# BglghkgBhv1sBwEwggGSMCgGCCsGAQUFBwIBFhxodHRwczovL3d3dy5kaWdpY2Vy_x000D__x000A_# dC5jb20vQ1BTMIIBZAYIKwYBBQUHAgIwggFWHoIBUgBBAG4AeQAgAHUAcwBlACAA_x000D__x000A_# bwBmACAAdABoAGkAcwAgAEMAZQByAHQAaQBmAGkAYwBhAHQAZQAgAGMAbwBuAHMA_x000D__x000A_# dABpAHQAdQB0AGUAcwAgAGEAYwBjAGUAcAB0AGEAbgBjAGUAIABvAGYAIAB0AGgA_x000D__x000A_# ZQAgAEQAaQBnAGkAQwBlAHIAdAAgAEMAUAAvAEMAUABTACAAYQBuAGQAIAB0AGgA_x000D__x000A_# ZQAgAFIAZQBsAHkAaQBuAGcAIABQAGEAcgB0AHkAIABBAGcAcgBlAGUAbQBlAG4A_x000D__x000A_# dAAgAHcAaABpAGMAaAAgAGwAaQBtAGkAdAAgAGwAaQBhAGIAaQBsAGkAdAB5ACAA_x000D__x000A_# YQBuAGQAIABhAHIAZQAgAGkAbgBjAG8AcgBwAG8AcgBhAHQAZQBkACAAaABlAHIA_x000D__x000A_# ZQBpAG4AIABiAHkAIAByAGUAZgBlAHIAZQBuAGMAZQAuMAsGCWCGSAGG/WwDFTAf_x000D__x000A_# BgNVHSMEGDAWgBQVABIrE5iymQftHt+ivlcNK2cCzTAdBgNVHQ4EFgQUYVpNJLZJ_x000D__x000A_# Mp1KKnkag0v0HonByn0wfQYDVR0fBHYwdDA4oDagNIYyaHR0cDovL2NybDMuZGln_x000D__x000A_# aWNlcnQuY29tL0RpZ2lDZXJ0QXNzdXJlZElEQ0EtMS5jcmwwOKA2oDSGMmh0dHA6_x000D__x000A_# Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRENBLTEuY3JsMHcG_x000D__x000A_# CCsGAQUFBwEBBGswaTAkBggrBgEFBQcwAYYYaHR0cDovL29jc3AuZGlnaWNlcnQu_x000D__x000A_# Y29tMEEGCCsGAQUFBzAChjVodHRwOi8vY2FjZXJ0cy5kaWdpY2VydC5jb20vRGln_x000D__x000A_# aUNlcnRBc3N1cmVkSURDQS0xLmNydDANBgkqhkiG9w0BAQUFAAOCAQEAnSV+GzNN_x000D__x000A_# siaBXJuGziMgD4CH5Yj//7HUaiwx7ToXGXEXzakbvFoWOQCd42yE5FpA+94GAYw3_x000D__x000A_# +puxnSR+/iCkV61bt5qwYCbqaVchXTQvH3Gwg5QZBWs1kBCge5fH9j/n4hFBpr1i_x000D__x000A_# 2fAnPTgdKG86Ugnw7HBi02JLsOBzppLA044x2C/jbRcTBu7kA7YUq/OPQ6dxnSHd_x000D__x000A_# FMoVXZJB2vkPgdGZdA0mxA5/G7X1oPHGdwYoFenYk+VVFvC7Cqsc21xIJ2bIo4sK_x000D__x000A_# HOWV2q7ELlmgYd3a822iYemKC23sEhi991VUQAOSK2vCUcIKSK+w1G7g9BQKOhvj_x000D__x000A_# jz3Kr2qNe9zYRDCCBs0wggW1oAMCAQICEAb9+QOWA63qAArrPye7uhswDQYJKoZI_x000D__x000A_# hvcNAQEFBQAwZTELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZ_x000D__x000A_# MBcGA1UECxMQd3d3LmRpZ2ljZXJ0LmNvbTEkMCIGA1UEAxMbRGlnaUNlcnQgQXNz_x000D__x000A_# dXJlZCBJRCBSb290IENBMB4XDTA2MTExMDAwMDAwMFoXDTIxMTExMDAwMDAwMFow_x000D__x000A_# YjELMAkGA1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQ_x000D__x000A_# d3d3LmRpZ2ljZXJ0LmNvbTEhMB8GA1UEAxMYRGlnaUNlcnQgQXNzdXJlZCBJRCBD_x000D__x000A_# QS0xMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA6IItmfnKwkKVpYBz_x000D__x000A_# QHDSnlZUXKnE0kEGj8kz/E1FkVyBn+0snPgWWd+etSQVwpi5tHdJ3InECtqvy15r_x000D__x000A_# 7a2wcTHrzzpADEZNk+yLejYIA6sMNP4YSYL+x8cxSIB8HqIPkg5QycaH6zY/2DDD_x000D__x000A_# /6b3+6LNb3Mj/qxWBZDwMiEWicZwiPkFl32jx0PdAug7Pe2xQaPtP77blUjE7h6z_x000D__x000A_# 8rwMK5nQxl0SQoHhg26Ccz8mSxSQrllmCsSNvtLOBq6thG9IhJtPQLnxTPKvmPv2_x000D__x000A_# zkBdXPao8S+v7Iki8msYZbHBc63X8djPHgp0XEK4aH631XcKJ1Z8D2KkPzIUYJX9_x000D__x000A_# BwSiCQIDAQABo4IDejCCA3YwDgYDVR0PAQH/BAQDAgGGMDsGA1UdJQQ0MDIGCCsG_x000D__x000A_# AQUFBwMBBggrBgEFBQcDAgYIKwYBBQUHAwMGCCsGAQUFBwMEBggrBgEFBQcDCDCC_x000D__x000A_# AdIGA1UdIASCAckwggHFMIIBtAYKYIZIAYb9bAABBDCCAaQwOgYIKwYBBQUHAgEW_x000D__x000A_# Lmh0dHA6Ly93d3cuZGlnaWNlcnQuY29tL3NzbC1jcHMtcmVwb3NpdG9yeS5odG0w_x000D__x000A_# ggFkBggrBgEFBQcCAjCCAVYeggFSAEEAbgB5ACAAdQBzAGUAIABvAGYAIAB0AGgA_x000D__x000A_# aQBzACAAQwBlAHIAdABpAGYAaQBjAGEAdABlACAAYwBvAG4AcwB0AGkAdAB1AHQA_x000D__x000A_# ZQBzACAAYQBjAGMAZQBwAHQAYQBuAGMAZQAgAG8AZgAgAHQAaABlACAARABpAGcA_x000D__x000A_# aQBDAGUAcgB0ACAAQwBQAC8AQwBQAFMAIABhAG4AZAAgAHQAaABlACAAUgBlAGwA_x000D__x000A_# eQBpAG4AZwAgAFAAYQByAHQAeQAgAEEAZwByAGUAZQBtAGUAbgB0ACAAdwBoAGkA_x000D__x000A_# YwBoACAAbABpAG0AaQB0ACAAbABpAGEAYgBpAGwAaQB0AHkAIABhAG4AZAAgAGEA_x000D__x000A_# cgBlACAAaQBuAGMAbwByAHAAbwByAGEAdABlAGQAIABoAGUAcgBlAGkAbgAgAGIA_x000D__x000A_# eQAgAHIAZQBmAGUAcgBlAG4AYwBlAC4wCwYJYIZIAYb9bAMVMBIGA1UdEwEB/wQI_x000D__x000A_# MAYBAf8CAQAweQYIKwYBBQUHAQEEbTBrMCQGCCsGAQUFBzABhhhodHRwOi8vb2Nz_x000D__x000A_# cC5kaWdpY2VydC5jb20wQwYIKwYBBQUHMAKGN2h0dHA6Ly9jYWNlcnRzLmRpZ2lj_x000D__x000A_# ZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJRFJvb3RDQS5jcnQwgYEGA1UdHwR6MHgw_x000D__x000A_# OqA4oDaGNGh0dHA6Ly9jcmwzLmRpZ2ljZXJ0LmNvbS9EaWdpQ2VydEFzc3VyZWRJ_x000D__x000A_# RFJvb3RDQS5jcmwwOqA4oDaGNGh0dHA6Ly9jcmw0LmRpZ2ljZXJ0LmNvbS9EaWdp_x000D__x000A_# Q2VydEFzc3VyZWRJRFJvb3RDQS5jcmwwHQYDVR0OBBYEFBUAEisTmLKZB+0e36K+_x000D__x000A_# Vw0rZwLNMB8GA1UdIwQYMBaAFEXroq/0ksuCMS1Ri6enIZ3zbcgPMA0GCSqGSIb3_x000D__x000A_# DQEBBQUAA4IBAQBGUD7Jtygkpzgdtlspr1LPUukxR6tWXHvVDQtBs+/sdR90OPKy_x000D__x000A_# XGGinJXDUOSCuSPRujqGcq04eKx1XRcXNHJHhZRW0eu7NoR3zCSl8wQZVann4+er_x000D__x000A_# Ys37iy2QwsDStZS9Xk+xBdIOPRqpFFumhjFiqKgz5Js5p8T1zh14dpQlc+Qqq8+c_x000D__x000A_# dkvtX8JLFuRLcEwAiR78xXm8TBJX/l/hHrwCXaj++wc4Tw3GXZG5D2dFzdaD7eeS_x000D__x000A_# DY2xaYxP+1ngIw/Sqq4AfO6cQg7PkdcntxbuD8O9fAqg7iwIVYUiuOsYGk38KiGt_x000D__x000A_# STGDR5V3cdyxG0tLHBCcdxTBnU8vWpUIKRAmMYIEOzCCBDcCAQEwgYYwcjELMAkG_x000D__x000A_# A1UEBhMCVVMxFTATBgNVBAoTDERpZ2lDZXJ0IEluYzEZMBcGA1UECxMQd3d3LmRp_x000D__x000A_# Z2ljZXJ0LmNvbTExMC8GA1UEAxMoRGlnaUNlcnQgU0hBMiBBc3N1cmVkIElEIENv_x000D__x000A_# ZGUgU2lnbmluZyBDQQIQCIQ1OU/QbU6rESO7M78utDAJBgUrDgMCGgUAoHgwGAYK_x000D__x000A_# KwYBBAGCNwIBDDEKMAigAoAAoQKAADAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIB_x000D__x000A_# BDAcBgorBgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAjBgkqhkiG9w0BCQQxFgQU_x000D__x000A_# LrWpmRhSxLhK1BJVjPQvUfPijl8wDQYJKoZIhvcNAQEBBQAEggEAC1SpyRl+JHxa_x000D__x000A_# JozGVBb2c844aB5PPZSzta8woWYu3LDCRqFrSud+enGwplk7WNuZU+5lXL7GZ2JS_x000D__x000A_# mrGEAV2l0+Ddd4kvA1yNPpEFenwWB3f72bSvDl2LEjcDEXN+oFfTuyqlS4A7/h3t_x000D__x000A_# BSCLppyZGgcfCipsigFrqPRiKBteByba4rCSaUdYWcN708lQLeFiIX7bpcCZSCHk_x000D__x000A_# EE+7z+FVGxGrZW+2Hf4NGs25vOMPSkEEISgRAOZH5Bp3FQM2kQWJSZ5QlmFSzEnC_x000D__x000A_# vuuSuRk4uxg4JKU37odn7PnZc8HSdrFDTuZ9Fdhp7PyO3/Dlh3Zl/bkpfiucblV2_x000D__x000A_# +o06i4sWxqGCAg8wggILBgkqhkiG9w0BCQYxggH8MIIB+AIBATB2MGIxCzAJBgNV_x000D__x000A_# BAYTAlVTMRUwEwYDVQQKEwxEaWdpQ2VydCBJbmMxGTAXBgNVBAsTEHd3dy5kaWdp_x000D__x000A_# Y2VydC5jb20xITAfBgNVBAMTGERpZ2lDZXJ0IEFzc3VyZWQgSUQgQ0EtMQIQAwGa_x000D__x000A_# Ajr/WLFr1tXq5hfwZjAJBgUrDgMCGgUAoF0wGAYJKoZIhvcNAQkDMQsGCSqGSIb3_x000D__x000A_# DQEHATAcBgkqhkiG9w0BCQUxDxcNMjAxMjExMTAxNjAxWjAjBgkqhkiG9w0BCQQx_x000D__x000A_# FgQUWpp/5s6dxQtX/k4xgKZLROYZ+fUwDQYJKoZIhvcNAQEBBQAEggEAaWgqwD+k_x000D__x000A_# Y1CREFmKNwh3W6jBrrLfyHceMGP9rJyp4BBCV2rw47hLpmqIPHtcXlpKq6gdoKPm_x000D__x000A_# lxrn686Dlcfl6P+iimSMHnFsI0zEGgnv6Zsyzg7YU6AFvokBHvpekgINSj2Tsahk_x000D__x000A_# z6SfsYxC1oqt0I4ysLPccsQ4pX/HZTO3JazM5sM4pkqpGCBTLk+mBNEM5qXkOl8K_x000D__x000A_# 7+6yo2ym1SLwAWAdyB3B7aO67qKisVB6MNkPgyAwjAjo4o1FNAbS6AbBWHf+D/nh_x000D__x000A_# +PG+YQI5n/wdFieGeT5fd5nEfpgWClFx7sbHXyhgGORwqfYZHLnvCI1iTaJ1sq1E_x000D__x000A_# yZ9a8XJwMI8T7g==_x000D__x000A_# SIG # End signature block_x000D__x000A_</S>
          <S N="Description">Pester provides a framework for running BDD style Tests to execute and validate PowerShell commands inside of PowerShell and offers a powerful set of Mocking Functions that allow tests to mimic and mock the functionality of any command inside of a piece of PowerShell code being tested. Pester tests can execute any command or script that is accessible to a pester test file. This can include functions, Cmdlets, Modules and scripts. Pester can be run in ad hoc style in a console or it can be integrated into the Build scripts of a Continuous Integration system.</S>
          <G N="Guid">a699dea5-2c73-4616-a270-1f7abb777e71</G>
          <Nil N="HelpInfoUri" />
          <S N="ModuleBase">C:\Users\JGrote\OneDrive - Allied Digital Services LLC\Documents\PowerShell\Modules\Pester\5.1.1</S>
          <Obj N="PrivateData" RefId="504">
            <TNRef RefId="16" />
            <DCT>
              <En>
                <S N="Key">PSData</S>
                <Obj N="Value" RefId="505">
                  <TNRef RefId="16" />
                  <DCT>
                    <En>
                      <S N="Key">IconUri</S>
                      <S N="Value">https://raw.githubusercontent.com/pester/Pester/master/images/pester.PNG</S>
                    </En>
                    <En>
                      <S N="Key">Prerelease</S>
                      <S N="Value"></S>
                    </En>
                    <En>
                      <S N="Key">Tags</S>
                      <Obj N="Value" RefId="506">
                        <TNRef RefId="17" />
                        <LST>
                          <S>powershell</S>
                          <S>unit_testing</S>
                          <S>bdd</S>
                          <S>tdd</S>
                          <S>mocking</S>
                          <S>PSEdition_Core</S>
                          <S>PSEdition_Desktop</S>
                          <S>Windows</S>
                          <S>Linux</S>
                          <S>MacOS</S>
                        </LST>
                      </Obj>
                    </En>
                    <En>
                      <S N="Key">LicenseUri</S>
                      <S N="Value">https://www.apache.org/licenses/LICENSE-2.0.html</S>
                    </En>
                    <En>
                      <S N="Key">Category</S>
                      <S N="Value">Scripting Techniques</S>
                    </En>
                    <En>
                      <S N="Key">ReleaseNotes</S>
                      <S N="Value">https://github.com/pester/Pester/releases/tag/5.1.1</S>
                    </En>
                    <En>
                      <S N="Key">ProjectUri</S>
                      <S N="Value">https://github.com/Pester/Pester</S>
                    </En>
                  </DCT>
                </Obj>
              </En>
            </DCT>
          </Obj>
          <Ref N="ExperimentalFeatures" RefId="24" />
          <Obj N="Tags" RefId="507">
            <TNRef RefId="19" />
            <LST>
              <S>powershell</S>
              <S>unit_testing</S>
              <S>bdd</S>
              <S>tdd</S>
              <S>mocking</S>
              <S>PSEdition_Core</S>
              <S>PSEdition_Desktop</S>
              <S>Windows</S>
              <S>Linux</S>
              <S>MacOS</S>
              <S>powershell</S>
              <S>unit_testing</S>
              <S>bdd</S>
              <S>tdd</S>
              <S>mocking</S>
              <S>PSEdition_Core</S>
              <S>PSEdition_Desktop</S>
              <S>Windows</S>
              <S>Linux</S>
              <S>MacOS</S>
            </LST>
          </Obj>
          <URI N="ProjectUri">https://github.com/Pester/Pester</URI>
          <URI N="IconUri">https://raw.githubusercontent.com/pester/Pester/master/images/pester.PNG</URI>
          <URI N="LicenseUri">https://www.apache.org/licenses/LICENSE-2.0.html</URI>
          <S N="ReleaseNotes">https://github.com/pester/Pester/releases/tag/5.1.1</S>
          <URI N="RepositorySourceLocation">https://www.powershellgallery.com/api/v2</URI>
          <Version N="Version">5.1.1</Version>
          <S N="ModuleType">Script</S>
          <S N="Author">Pester Team</S>
          <S N="AccessMode">ReadWrite</S>
          <Nil N="ClrVersion" />
          <S N="CompanyName">Pester</S>
          <S N="Copyright">Copyright (c) 2020 by Pester Team, licensed under Apache 2.0 License.</S>
          <Nil N="DotNetFrameworkVersion" />
          <Obj N="ExportedFunctions" RefId="508">
            <TNRef RefId="20" />
            <DCT>
              <En>
                <S N="Key">Add-ShouldOperator</S>
                <S N="Value">Add-ShouldOperator</S>
              </En>
              <En>
                <S N="Key">AfterAll</S>
                <S N="Value">AfterAll</S>
              </En>
              <En>
                <S N="Key">AfterEach</S>
                <S N="Value">AfterEach</S>
              </En>
              <En>
                <S N="Key">Assert-MockCalled</S>
                <S N="Value">Assert-MockCalled</S>
              </En>
              <En>
                <S N="Key">Assert-VerifiableMock</S>
                <S N="Value">Assert-VerifiableMock</S>
              </En>
              <En>
                <S N="Key">BeforeAll</S>
                <S N="Value">BeforeAll</S>
              </En>
              <En>
                <S N="Key">BeforeDiscovery</S>
                <S N="Value">BeforeDiscovery</S>
              </En>
              <En>
                <S N="Key">BeforeEach</S>
                <S N="Value">BeforeEach</S>
              </En>
              <En>
                <S N="Key">Context</S>
                <S N="Value">Context</S>
              </En>
              <En>
                <S N="Key">ConvertTo-JUnitReport</S>
                <S N="Value">ConvertTo-JUnitReport</S>
              </En>
              <En>
                <S N="Key">ConvertTo-NUnitReport</S>
                <S N="Value">ConvertTo-NUnitReport</S>
              </En>
              <En>
                <S N="Key">ConvertTo-Pester4Result</S>
                <S N="Value">ConvertTo-Pester4Result</S>
              </En>
              <En>
                <S N="Key">Describe</S>
                <S N="Value">Describe</S>
              </En>
              <En>
                <S N="Key">Export-JUnitReport</S>
                <S N="Value">Export-JUnitReport</S>
              </En>
              <En>
                <S N="Key">Export-NUnitReport</S>
                <S N="Value">Export-NUnitReport</S>
              </En>
              <En>
                <S N="Key">Get-ShouldOperator</S>
                <S N="Value">Get-ShouldOperator</S>
              </En>
              <En>
                <S N="Key">InModuleScope</S>
                <S N="Value">InModuleScope</S>
              </En>
              <En>
                <S N="Key">Invoke-Pester</S>
                <S N="Value">Invoke-Pester</S>
              </En>
              <En>
                <S N="Key">It</S>
                <S N="Value">It</S>
              </En>
              <En>
                <S N="Key">Mock</S>
                <S N="Value">Mock</S>
              </En>
              <En>
                <S N="Key">New-Fixture</S>
                <S N="Value">New-Fixture</S>
              </En>
              <En>
                <S N="Key">New-MockObject</S>
                <S N="Value">New-MockObject</S>
              </En>
              <En>
                <S N="Key">New-PesterContainer</S>
                <S N="Value">New-PesterContainer</S>
              </En>
              <En>
                <S N="Key">Set-ItResult</S>
                <S N="Value">Set-ItResult</S>
              </En>
              <En>
                <S N="Key">Should</S>
                <S N="Value">Should</S>
              </En>
            </DCT>
          </Obj>
          <S N="Prefix"></S>
          <Obj N="ExportedCmdlets" RefId="509">
            <TNRef RefId="21" />
            <DCT />
          </Obj>
          <Obj N="ExportedCommands" RefId="510">
            <TNRef RefId="22" />
            <DCT>
              <En>
                <S N="Key">Add-ShouldOperator</S>
                <S N="Value">Add-ShouldOperator</S>
              </En>
              <En>
                <S N="Key">AfterAll</S>
                <S N="Value">AfterAll</S>
              </En>
              <En>
                <S N="Key">AfterEach</S>
                <S N="Value">AfterEach</S>
              </En>
              <En>
                <S N="Key">Assert-MockCalled</S>
                <S N="Value">Assert-MockCalled</S>
              </En>
              <En>
                <S N="Key">Assert-VerifiableMock</S>
                <S N="Value">Assert-VerifiableMock</S>
              </En>
              <En>
                <S N="Key">BeforeAll</S>
                <S N="Value">BeforeAll</S>
              </En>
              <En>
                <S N="Key">BeforeDiscovery</S>
                <S N="Value">BeforeDiscovery</S>
              </En>
              <En>
                <S N="Key">BeforeEach</S>
                <S N="Value">BeforeEach</S>
              </En>
              <En>
                <S N="Key">Context</S>
                <S N="Value">Context</S>
              </En>
              <En>
                <S N="Key">ConvertTo-JUnitReport</S>
                <S N="Value">ConvertTo-JUnitReport</S>
              </En>
              <En>
                <S N="Key">ConvertTo-NUnitReport</S>
                <S N="Value">ConvertTo-NUnitReport</S>
              </En>
              <En>
                <S N="Key">ConvertTo-Pester4Result</S>
                <S N="Value">ConvertTo-Pester4Result</S>
              </En>
              <En>
                <S N="Key">Describe</S>
                <S N="Value">Describe</S>
              </En>
              <En>
                <S N="Key">Export-JUnitReport</S>
                <S N="Value">Export-JUnitReport</S>
              </En>
              <En>
                <S N="Key">Export-NUnitReport</S>
                <S N="Value">Export-NUnitReport</S>
              </En>
              <En>
                <S N="Key">Get-ShouldOperator</S>
                <S N="Value">Get-ShouldOperator</S>
              </En>
              <En>
                <S N="Key">InModuleScope</S>
                <S N="Value">InModuleScope</S>
              </En>
              <En>
                <S N="Key">Invoke-Pester</S>
                <S N="Value">Invoke-Pester</S>
              </En>
              <En>
                <S N="Key">It</S>
                <S N="Value">It</S>
              </En>
              <En>
                <S N="Key">Mock</S>
                <S N="Value">Mock</S>
              </En>
              <En>
                <S N="Key">New-Fixture</S>
                <S N="Value">New-Fixture</S>
              </En>
              <En>
                <S N="Key">New-MockObject</S>
                <S N="Value">New-MockObject</S>
              </En>
              <En>
                <S N="Key">New-PesterContainer</S>
                <S N="Value">New-PesterContainer</S>
              </En>
              <En>
                <S N="Key">Set-ItResult</S>
                <S N="Value">Set-ItResult</S>
              </En>
              <En>
                <S N="Key">Should</S>
                <S N="Value">Should</S>
              </En>
              <En>
                <S N="Key">Add-AssertionOperator</S>
                <S N="Value">Add-AssertionOperator</S>
              </En>
              <En>
                <S N="Key">Get-AssertionOperator</S>
                <S N="Value">Get-AssertionOperator</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="FileList" RefId="511">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="CompatiblePSEditions" RefId="512">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="ModuleList" RefId="513">
            <TNRef RefId="23" />
            <LST />
          </Obj>
          <Obj N="NestedModules" RefId="514">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <Nil N="PowerShellHostName" />
          <Nil N="PowerShellHostVersion" />
          <Version N="PowerShellVersion">3.0</Version>
          <S N="ProcessorArchitecture">None</S>
          <Obj N="Scripts" RefId="515">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="RequiredAssemblies" RefId="516">
            <TNRef RefId="25" />
            <LST />
          </Obj>
          <Obj N="RequiredModules" RefId="517">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <S N="RootModule">Pester.psm1</S>
          <Obj N="ExportedVariables" RefId="518">
            <TNRef RefId="26" />
            <DCT />
          </Obj>
          <Obj N="ExportedAliases" RefId="519">
            <TNRef RefId="27" />
            <DCT>
              <En>
                <S N="Key">Add-AssertionOperator</S>
                <S N="Value">Add-AssertionOperator</S>
              </En>
              <En>
                <S N="Key">Get-AssertionOperator</S>
                <S N="Value">Get-AssertionOperator</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="ExportedDscResources" RefId="520">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <S N="SessionState">System.Management.Automation.SessionState</S>
          <Nil N="OnRemove" />
          <Obj N="ExportedFormatFiles" RefId="521">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <Obj N="ExportedTypeFiles" RefId="522">
            <TNRef RefId="28" />
            <LST />
          </Obj>
        </Props>
      </Obj>
      <Obj N="RemotingCapability" RefId="523">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="524">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="525">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="526">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Test</S>
            <Obj N="Value" RefId="527">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Test</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="528">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Alias</S>
            <Obj N="Value" RefId="529">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Alias</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="530">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InternalName</S>
            <Obj N="Value" RefId="531">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InternalName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="532">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SupportsArrayInput</S>
            <Obj N="Value" RefId="533">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SupportsArrayInput</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="534">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="535">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="536">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="537">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="538">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="539">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="540">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="541">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="542">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="543">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="544">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="545">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="546">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="547">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="548">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="549">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="550">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="551">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="552">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="553">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="554">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="555">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="556">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="557">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="558">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [-Test] &lt;scriptblock&gt; [[-Alias] &lt;string[]&gt;] [[-InternalName] &lt;string&gt;] [-SupportsArrayInput] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="559">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-ShouldOperator</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Add-ShouldOperator</S>
    </MS>
  </Obj>
  <Obj RefId="560">
    <TNRef RefId="0" />
    <ToString>Add-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [cmdletBinding()]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelWorksheet])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Package", Position = 0)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "Workbook")]_x000D__x000A_        [OfficeOpenXml.ExcelWorkbook]$ExcelWorkbook,_x000D__x000A_        [string]$WorksheetName ,_x000D__x000A_        [switch]$ClearSheet,_x000D__x000A_        [Switch]$MoveToStart,_x000D__x000A_        [Switch]$MoveToEnd,_x000D__x000A_        $MoveBefore ,_x000D__x000A_        $MoveAfter ,_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$CopySource,_x000D__x000A_        [parameter(DontShow=$true)]_x000D__x000A_        [Switch] $NoClobber_x000D__x000A_    )_x000D__x000A_    #if we were given a workbook use it, if we were given a package, use its workbook_x000D__x000A_    if      ($ExcelPackage -and -not $ExcelWorkbook) {$ExcelWorkbook = $ExcelPackage.Workbook}_x000D__x000A__x000D__x000A_    # If WorksheetName was given, try to use that worksheet. If it wasn't, and we are copying an existing sheet, try to use the sheet name_x000D__x000A_    # If we are not copying a sheet, and have no name, use the name "SheetX" where X is the number of the new sheet_x000D__x000A_    if      (-not $WorksheetName -and $CopySource -and -not $ExcelWorkbook[$CopySource.Name]) {$WorksheetName = $CopySource.Name}_x000D__x000A_    elseif  (-not $WorksheetName) {$WorksheetName = "Sheet" + (1 + $ExcelWorkbook.Worksheets.Count)}_x000D__x000A_    else    {$ws = $ExcelWorkbook.Worksheets[$WorksheetName]}_x000D__x000A__x000D__x000A_    #If -clearsheet was specified and the named sheet exists, delete it_x000D__x000A_    if      ($ws -and $ClearSheet) { $ExcelWorkbook.Worksheets.Delete($WorksheetName) ; $ws = $null }_x000D__x000A__x000D__x000A_    #Copy or create new sheet as needed_x000D__x000A_    if (-not $ws -and $CopySource) {_x000D__x000A_          Write-Verbose -Message "Copying into worksheet '$WorksheetName'."_x000D__x000A_          $ws = $ExcelWorkbook.Worksheets.Add($WorksheetName, $CopySource)_x000D__x000A_    }_x000D__x000A_    elseif (-not $ws) {_x000D__x000A_          $ws = $ExcelWorkbook.Worksheets.Add($WorksheetName)_x000D__x000A_          Write-Verbose -Message "Adding worksheet '$WorksheetName'."_x000D__x000A_    }_x000D__x000A_    else {Write-Verbose -Message "Worksheet '$WorksheetName' already existed."}_x000D__x000A_    #region Move sheet if needed_x000D__x000A_    if     ($MoveToStart) {$ExcelWorkbook.Worksheets.MoveToStart($WorksheetName) }_x000D__x000A_    elseif ($MoveToEnd  ) {$ExcelWorkbook.Worksheets.MoveToEnd($WorksheetName)   }_x000D__x000A_    elseif ($MoveBefore ) {_x000D__x000A_        if ($ExcelWorkbook.Worksheets[$MoveBefore]) {_x000D__x000A_            if ($MoveBefore -is [int]) {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveBefore($ws.Index, $MoveBefore)_x000D__x000A_            }_x000D__x000A_            else {$ExcelWorkbook.Worksheets.MoveBefore($WorksheetName, $MoveBefore)}_x000D__x000A_        }_x000D__x000A_        else {Write-Warning "Can't find worksheet '$MoveBefore'; worsheet '$WorksheetName' will not be moved."}_x000D__x000A_    }_x000D__x000A_    elseif ($MoveAfter  ) {_x000D__x000A_        if ($MoveAfter -eq "*") {_x000D__x000A_            if ($WorksheetName -lt $ExcelWorkbook.Worksheets[1].Name) {$ExcelWorkbook.Worksheets.MoveToStart($WorksheetName)}_x000D__x000A_            else {_x000D__x000A_                $i = 1_x000D__x000A_                While ($i -lt $ExcelWorkbook.Worksheets.Count -and ($ExcelWorkbook.Worksheets[$i + 1].Name -le $WorksheetName) ) { $i++}_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($ws.Index, $i)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($ExcelWorkbook.Worksheets[$MoveAfter]) {_x000D__x000A_            if ($MoveAfter -is [int]) {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($ws.Index, $MoveAfter)_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($WorksheetName, $MoveAfter)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {Write-Warning "Can't find worksheet '$MoveAfter'; worsheet '$WorksheetName' will not be moved."}_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A_    if ($Activate) {Select-Worksheet -ExcelWorksheet $ws  }_x000D__x000A_    if ($ExcelPackage -and -not (Get-Member -InputObject $ExcelPackage -Name $ws.Name)) {_x000D__x000A_        $sb = [scriptblock]::Create(('$this.workbook.Worksheets["{0}"]' -f $ws.name))_x000D__x000A_        Add-Member -InputObject $ExcelPackage -MemberType ScriptProperty -Name $ws.name -Value $sb_x000D__x000A_    }_x000D__x000A_    return $ws_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [cmdletBinding()]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelWorksheet])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = "Package", Position = 0)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "Workbook")]_x000D__x000A_        [OfficeOpenXml.ExcelWorkbook]$ExcelWorkbook,_x000D__x000A_        [string]$WorksheetName ,_x000D__x000A_        [switch]$ClearSheet,_x000D__x000A_        [Switch]$MoveToStart,_x000D__x000A_        [Switch]$MoveToEnd,_x000D__x000A_        $MoveBefore ,_x000D__x000A_        $MoveAfter ,_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$CopySource,_x000D__x000A_        [parameter(DontShow=$true)]_x000D__x000A_        [Switch] $NoClobber_x000D__x000A_    )_x000D__x000A_    #if we were given a workbook use it, if we were given a package, use its workbook_x000D__x000A_    if      ($ExcelPackage -and -not $ExcelWorkbook) {$ExcelWorkbook = $ExcelPackage.Workbook}_x000D__x000A__x000D__x000A_    # If WorksheetName was given, try to use that worksheet. If it wasn't, and we are copying an existing sheet, try to use the sheet name_x000D__x000A_    # If we are not copying a sheet, and have no name, use the name "SheetX" where X is the number of the new sheet_x000D__x000A_    if      (-not $WorksheetName -and $CopySource -and -not $ExcelWorkbook[$CopySource.Name]) {$WorksheetName = $CopySource.Name}_x000D__x000A_    elseif  (-not $WorksheetName) {$WorksheetName = "Sheet" + (1 + $ExcelWorkbook.Worksheets.Count)}_x000D__x000A_    else    {$ws = $ExcelWorkbook.Worksheets[$WorksheetName]}_x000D__x000A__x000D__x000A_    #If -clearsheet was specified and the named sheet exists, delete it_x000D__x000A_    if      ($ws -and $ClearSheet) { $ExcelWorkbook.Worksheets.Delete($WorksheetName) ; $ws = $null }_x000D__x000A__x000D__x000A_    #Copy or create new sheet as needed_x000D__x000A_    if (-not $ws -and $CopySource) {_x000D__x000A_          Write-Verbose -Message "Copying into worksheet '$WorksheetName'."_x000D__x000A_          $ws = $ExcelWorkbook.Worksheets.Add($WorksheetName, $CopySource)_x000D__x000A_    }_x000D__x000A_    elseif (-not $ws) {_x000D__x000A_          $ws = $ExcelWorkbook.Worksheets.Add($WorksheetName)_x000D__x000A_          Write-Verbose -Message "Adding worksheet '$WorksheetName'."_x000D__x000A_    }_x000D__x000A_    else {Write-Verbose -Message "Worksheet '$WorksheetName' already existed."}_x000D__x000A_    #region Move sheet if needed_x000D__x000A_    if     ($MoveToStart) {$ExcelWorkbook.Worksheets.MoveToStart($WorksheetName) }_x000D__x000A_    elseif ($MoveToEnd  ) {$ExcelWorkbook.Worksheets.MoveToEnd($WorksheetName)   }_x000D__x000A_    elseif ($MoveBefore ) {_x000D__x000A_        if ($ExcelWorkbook.Worksheets[$MoveBefore]) {_x000D__x000A_            if ($MoveBefore -is [int]) {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveBefore($ws.Index, $MoveBefore)_x000D__x000A_            }_x000D__x000A_            else {$ExcelWorkbook.Worksheets.MoveBefore($WorksheetName, $MoveBefore)}_x000D__x000A_        }_x000D__x000A_        else {Write-Warning "Can't find worksheet '$MoveBefore'; worsheet '$WorksheetName' will not be moved."}_x000D__x000A_    }_x000D__x000A_    elseif ($MoveAfter  ) {_x000D__x000A_        if ($MoveAfter -eq "*") {_x000D__x000A_            if ($WorksheetName -lt $ExcelWorkbook.Worksheets[1].Name) {$ExcelWorkbook.Worksheets.MoveToStart($WorksheetName)}_x000D__x000A_            else {_x000D__x000A_                $i = 1_x000D__x000A_                While ($i -lt $ExcelWorkbook.Worksheets.Count -and ($ExcelWorkbook.Worksheets[$i + 1].Name -le $WorksheetName) ) { $i++}_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($ws.Index, $i)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($ExcelWorkbook.Worksheets[$MoveAfter]) {_x000D__x000A_            if ($MoveAfter -is [int]) {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($ws.Index, $MoveAfter)_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $ExcelWorkbook.Worksheets.MoveAfter($WorksheetName, $MoveAfter)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {Write-Warning "Can't find worksheet '$MoveAfter'; worsheet '$WorksheetName' will not be moved."}_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A_    if ($Activate) {Select-Worksheet -ExcelWorksheet $ws  }_x000D__x000A_    if ($ExcelPackage -and -not (Get-Member -InputObject $ExcelPackage -Name $ws.Name)) {_x000D__x000A_        $sb = [scriptblock]::Create(('$this.workbook.Worksheets["{0}"]' -f $ws.name))_x000D__x000A_        Add-Member -InputObject $ExcelPackage -MemberType ScriptProperty -Name $ws.name -Value $sb_x000D__x000A_    }_x000D__x000A_    return $ws_x000D__x000A_</S>
      <Obj N="Options" RefId="561">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Add</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="562">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.ExcelWorksheet</S>
        </LST>
      </Obj>
      <S N="Name">Add-Worksheet</S>
      <Obj N="CommandType" RefId="563">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="564">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="565">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="566">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="567">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="568">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelWorkbook</S>
            <Obj N="Value" RefId="569">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelWorkbook</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorkbook</S>
                <Obj N="Aliases" RefId="570">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="571">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="572">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ClearSheet</S>
            <Obj N="Value" RefId="573">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ClearSheet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="574">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToStart</S>
            <Obj N="Value" RefId="575">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToStart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="576">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToEnd</S>
            <Obj N="Value" RefId="577">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToEnd</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="578">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveBefore</S>
            <Obj N="Value" RefId="579">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveBefore</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="580">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveAfter</S>
            <Obj N="Value" RefId="581">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveAfter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="582">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Activate</S>
            <Obj N="Value" RefId="583">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Activate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="584">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CopySource</S>
            <Obj N="Value" RefId="585">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CopySource</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="586">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoClobber</S>
            <Obj N="Value" RefId="587">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoClobber</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="588">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="589">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="590">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="591">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="592">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="593">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="594">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="595">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="596">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="597">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="598">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="599">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="600">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="601">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="602">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="603">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="604">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="605">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="606">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="607">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="608">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="609">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="610">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="611">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="612">
            <TNRef RefId="8" />
            <ToString>[-ExcelPackage] &lt;ExcelPackage&gt; [-WorksheetName &lt;string&gt;] [-ClearSheet] [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-Activate] [-CopySource &lt;ExcelWorksheet&gt;] [-NoClobber] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Package</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="613">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="614">
            <TNRef RefId="8" />
            <ToString>-ExcelWorkbook &lt;ExcelWorkbook&gt; [-WorksheetName &lt;string&gt;] [-ClearSheet] [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-Activate] [-CopySource &lt;ExcelWorksheet&gt;] [-NoClobber] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Workbook</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="615">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Add-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="616">
    <TNRef RefId="0" />
    <ToString>AfterAll</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterAll is used to share teardown after all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. AfterAll runs during Run phase_x000D__x000A_        and runs only once in the current block. It's guaranteed to run even if tests_x000D__x000A_        fail._x000D__x000A__x000D__x000A_        The typical usage is to clean up state or temporary used in tests._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Validate important file" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $samplePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid()).txt"_x000D__x000A_                Write-Host $samplePath_x000D__x000A_                1..100 | Set-Content -Path $samplePath_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File Contains 100 lines" {_x000D__x000A_                @(Get-Content $samplePath).Count | Should -Be 100_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "First ten lines should be 1 -&gt; 10" {_x000D__x000A_                @(Get-Content $samplePath -TotalCount 10) | Should -Be @(1..10)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterAll {_x000D__x000A_                Remove-Item -Path $samplePath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses AfterAll to clean up a sample-file generated only for_x000D__x000A_        the tests in the Describe-block._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterAll_x000D__x000A__x000D__x000A_    New-OneTimeTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterAll is used to share teardown after all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. AfterAll runs during Run phase_x000D__x000A_        and runs only once in the current block. It's guaranteed to run even if tests_x000D__x000A_        fail._x000D__x000A__x000D__x000A_        The typical usage is to clean up state or temporary used in tests._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Validate important file" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $samplePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid()).txt"_x000D__x000A_                Write-Host $samplePath_x000D__x000A_                1..100 | Set-Content -Path $samplePath_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File Contains 100 lines" {_x000D__x000A_                @(Get-Content $samplePath).Count | Should -Be 100_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "First ten lines should be 1 -&gt; 10" {_x000D__x000A_                @(Get-Content $samplePath -TotalCount 10) | Should -Be @(1..10)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterAll {_x000D__x000A_                Remove-Item -Path $samplePath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses AfterAll to clean up a sample-file generated only for_x000D__x000A_        the tests in the Describe-block._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterAll_x000D__x000A__x000D__x000A_    New-OneTimeTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_</S>
      <Obj N="Options" RefId="617">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="618">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">AfterAll</S>
      <Obj N="CommandType" RefId="619">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="620">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="621">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="622">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Scriptblock</S>
            <Obj N="Value" RefId="623">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scriptblock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="624">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="625">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="626">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="627">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="628">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="629">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="630">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="631">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="632">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="633">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="634">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="635">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="636">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="637">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="638">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="639">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="640">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="641">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="642">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="643">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="644">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="645">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="646">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="647">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="648">
            <TNRef RefId="8" />
            <ToString>[-Scriptblock] &lt;scriptblock&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="649">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::AfterAll</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/AfterAll</S>
    </MS>
  </Obj>
  <Obj RefId="650">
    <TNRef RefId="0" />
    <ToString>AfterEach</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterEach runs once after every test in the current or any child blocks._x000D__x000A_        Typically this is used to clean up resources created by the test or its setups._x000D__x000A_        AfterEach runs in a finally block, and is guaranteed to run even if the test_x000D__x000A_        (or setup) fails._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Testing export formats" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $filePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())"_x000D__x000A_            }_x000D__x000A_            It "Test Export-CSV" {_x000D__x000A_                Get-ChildItem | Export-CSV -Path $filePath -NoTypeInformation_x000D__x000A_                $dir = Import-CSV -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_            It "Test Export-Clixml" {_x000D__x000A_                Get-ChildItem | Export-Clixml -Path $filePath_x000D__x000A_                $dir = Import-Clixml -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterEach {_x000D__x000A_                if (Test-Path $file) {_x000D__x000A_                    Remove-Item $file -Force_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses AfterEach to remove a temporary file after each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterEach_x000D__x000A__x000D__x000A_    New-EachTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the end of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        AfterEach runs once after every test in the current or any child blocks._x000D__x000A_        Typically this is used to clean up resources created by the test or its setups._x000D__x000A_        AfterEach runs in a finally block, and is guaranteed to run even if the test_x000D__x000A_        (or setup) fails._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during teardown._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "Testing export formats" {_x000D__x000A_            BeforeAll {_x000D__x000A_                $filePath = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())"_x000D__x000A_            }_x000D__x000A_            It "Test Export-CSV" {_x000D__x000A_                Get-ChildItem | Export-CSV -Path $filePath -NoTypeInformation_x000D__x000A_                $dir = Import-CSV -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_            It "Test Export-Clixml" {_x000D__x000A_                Get-ChildItem | Export-Clixml -Path $filePath_x000D__x000A_                $dir = Import-Clixml -Path $filePath_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            AfterEach {_x000D__x000A_                if (Test-Path $file) {_x000D__x000A_                    Remove-Item $file -Force_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses AfterEach to remove a temporary file after each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/AfterEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName AfterEach_x000D__x000A__x000D__x000A_    New-EachTestTeardown -ScriptBlock $Scriptblock_x000D__x000A_</S>
      <Obj N="Options" RefId="651">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="652">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">AfterEach</S>
      <Obj N="CommandType" RefId="653">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="654">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="655">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="656">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Scriptblock</S>
            <Obj N="Value" RefId="657">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scriptblock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="658">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="659">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="660">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="661">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="662">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="663">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="664">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="665">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="666">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="667">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="668">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="669">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="670">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="671">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="672">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="673">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="674">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="675">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="676">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="677">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="678">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="679">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="680">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="681">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="682">
            <TNRef RefId="8" />
            <ToString>[-Scriptblock] &lt;scriptblock&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="683">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::AfterEach</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/AfterEach</S>
    </MS>
  </Obj>
  <Obj RefId="684">
    <TNRef RefId="0" />
    <ToString>Assert-MockCalled</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if a Mocked command has been called a certain number of times_x000D__x000A_and throws an exception if it has not._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -Invoke INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-MockCalled_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'ParameterFilter')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string]$CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [int]$Times = 1,_x000D__x000A__x000D__x000A_        [ScriptBlock]$ParameterFilter = {$True},_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ExclusiveFilter', Mandatory = $true)]_x000D__x000A_        [scriptblock] $ExclusiveFilter,_x000D__x000A__x000D__x000A_        [string] $ModuleName,_x000D__x000A__x000D__x000A_        [string] $Scope = 0,_x000D__x000A_        [switch] $Exactly_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A__x000D__x000A_    $sb = {_x000D__x000A_        param ($__params__p)_x000D__x000A_        Should -Invoke @__params__p_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb $PSBoundParameters_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">ParameterFilter</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if a Mocked command has been called a certain number of times_x000D__x000A_and throws an exception if it has not._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -Invoke INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-MockCalled_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'ParameterFilter')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string]$CommandName,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [int]$Times = 1,_x000D__x000A__x000D__x000A_        [ScriptBlock]$ParameterFilter = {$True},_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'ExclusiveFilter', Mandatory = $true)]_x000D__x000A_        [scriptblock] $ExclusiveFilter,_x000D__x000A__x000D__x000A_        [string] $ModuleName,_x000D__x000A__x000D__x000A_        [string] $Scope = 0,_x000D__x000A_        [switch] $Exactly_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A__x000D__x000A_    $sb = {_x000D__x000A_        param ($__params__p)_x000D__x000A_        Should -Invoke @__params__p_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb $PSBoundParameters_x000D__x000A_</S>
      <Obj N="Options" RefId="685">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Assert</S>
      <S N="Noun">MockCalled</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="686">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Assert-MockCalled</S>
      <Obj N="CommandType" RefId="687">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="688">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="689">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="690">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="691">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="692">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Times</S>
            <Obj N="Value" RefId="693">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Times</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="694">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ParameterFilter</S>
            <Obj N="Value" RefId="695">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ParameterFilter</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="696">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExclusiveFilter</S>
            <Obj N="Value" RefId="697">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExclusiveFilter</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="698">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModuleName</S>
            <Obj N="Value" RefId="699">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="700">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Scope</S>
            <Obj N="Value" RefId="701">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scope</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="702">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Exactly</S>
            <Obj N="Value" RefId="703">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Exactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="704">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="705">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="706">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="707">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="708">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="709">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="710">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="711">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="712">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="713">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="714">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="715">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="716">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="717">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="718">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="719">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="720">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="721">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="722">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="723">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="724">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="725">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="726">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="727">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="728">
            <TNRef RefId="8" />
            <ToString>[-CommandName] &lt;string&gt; [[-Times] &lt;int&gt;] [-ParameterFilter &lt;scriptblock&gt;] [-ModuleName &lt;string&gt;] [-Scope &lt;string&gt;] [-Exactly] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ParameterFilter</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="729">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="730">
            <TNRef RefId="8" />
            <ToString>[-CommandName] &lt;string&gt; [[-Times] &lt;int&gt;] -ExclusiveFilter &lt;scriptblock&gt; [-ParameterFilter &lt;scriptblock&gt;] [-ModuleName &lt;string&gt;] [-Scope &lt;string&gt;] [-Exactly] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ExclusiveFilter</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="731">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Assert-MockCalled</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Assert-MockCalled</S>
    </MS>
  </Obj>
  <Obj RefId="732">
    <TNRef RefId="0" />
    <ToString>Assert-VerifiableMock</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if all verifiable Mocks has been called at least once._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -InvokeVerifiable INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-VerifiableMock_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A_    [CmdletBinding()]param()_x000D__x000A_    $sb = {_x000D__x000A_        Should -InvokeVerifiable_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Checks if all verifiable Mocks has been called at least once._x000D__x000A__x000D__x000A_THIS COMMAND IS OBSOLETE AND WILL BE REMOVED SOMEWHERE DURING v5 LIFETIME,_x000D__x000A_USE Should -InvokeVerifiable INSTEAD._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Assert-VerifiableMock_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    # Should does not accept a session state, so invoking it directly would_x000D__x000A_    # make the assertion run from inside of Pester module, we move it to the_x000D__x000A_    # user scope instead an run it from there to keep the scoping correct_x000D__x000A_    # for this compatibility adapter_x000D__x000A_    [CmdletBinding()]param()_x000D__x000A_    $sb = {_x000D__x000A_        Should -InvokeVerifiable_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Set-ScriptBlockScope -ScriptBlock $sb -SessionState $PSCmdlet.SessionState_x000D__x000A_    &amp; $sb_x000D__x000A_</S>
      <Obj N="Options" RefId="733">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Assert</S>
      <S N="Noun">VerifiableMock</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="734">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Assert-VerifiableMock</S>
      <Obj N="CommandType" RefId="735">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="736">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="737">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="738">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="739">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="740">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="741">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="742">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="743">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="744">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="745">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="746">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="747">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="748">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="749">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="750">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="751">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="752">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="753">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="754">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="755">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="756">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="757">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="758">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="759">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="760">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="761">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="762">
            <TNRef RefId="8" />
            <ToString>[&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="763">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Assert-VerifiableMock</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Assert-VerifiableMock</S>
    </MS>
  </Obj>
  <Obj RefId="764">
    <TNRef RefId="0" />
    <ToString>B:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="765">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="766">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">B:</S>
      <Obj N="CommandType" RefId="767">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="768">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="769">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="770">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="771">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="772">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="773">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::B:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="774">
    <TNRef RefId="0" />
    <ToString>BarChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="BarStacked",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="BarStacked",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="775">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="776">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">BarChart</S>
      <Obj N="CommandType" RefId="777">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="778">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="779">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="780">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="781">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="782">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">title</S>
            <Obj N="Value" RefId="783">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="784">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="785">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="786">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="787">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="788">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="789">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="790">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="791">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="792">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="793">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="794">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="795">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="796">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="797">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="798">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="799">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="800">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="801">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="802">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="803">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="804">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="805">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="806">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="807">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="808">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="809">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="810">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="811">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="812">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="813">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="814">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="815">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="816">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="817">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::BarChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="818">
    <TNRef RefId="0" />
    <ToString>BeforeAll</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeAll is used to share setup among all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. BeforeAll runs during Run phase_x000D__x000A_        and runs only once in the current level._x000D__x000A__x000D__x000A_        The typical usage is to setup the whole test script, most commonly to_x000D__x000A_        import the tested function, by dot-sourcing the script file that contains it._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        BeforeAll {_x000D__x000A_            . $PSCommandPath.Replace('.Tests.ps1','.ps1')_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Describe "API validation" {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses dot-sourcing in BeforeAll to make functions in the script-file_x000D__x000A_        available for the tests._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "API validation" {_x000D__x000A_            BeforeAll {_x000D__x000A_                # this calls REST API and takes roughly 1 second_x000D__x000A_                $response = Get-Pokemon -Name Pikachu_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Name = 'Pikachu'" {_x000D__x000A_                $response.Name | Should -Be 'Pikachu'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Type = 'electric'" {_x000D__x000A_                $response.Type | Should -Be 'electric'_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses BeforeAll to perform an expensive operation only once, before validating_x000D__x000A_        the results in separate tests._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    New-OneTimeTestSetup -ScriptBlock $Scriptblock_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of the current container,_x000D__x000A_        Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeAll is used to share setup among all the tests in a container, Describe_x000D__x000A_        or Context including all child blocks and tests. BeforeAll runs during Run phase_x000D__x000A_        and runs only once in the current level._x000D__x000A__x000D__x000A_        The typical usage is to setup the whole test script, most commonly to_x000D__x000A_        import the tested function, by dot-sourcing the script file that contains it._x000D__x000A__x000D__x000A_        BeforeAll and AfterAll are unique in that they apply to the entire container,_x000D__x000A_        Context or Describe block regardless of the order of the statements compared to_x000D__x000A_        other Context or Describe blcoks at the same level._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        BeforeAll {_x000D__x000A_            . $PSCommandPath.Replace('.Tests.ps1','.ps1')_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Describe "API validation" {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses dot-sourcing in BeforeAll to make functions in the script-file_x000D__x000A_        available for the tests._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "API validation" {_x000D__x000A_            BeforeAll {_x000D__x000A_                # this calls REST API and takes roughly 1 second_x000D__x000A_                $response = Get-Pokemon -Name Pikachu_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Name = 'Pikachu'" {_x000D__x000A_                $response.Name | Should -Be 'Pikachu'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "response has Type = 'electric'" {_x000D__x000A_                $response.Type | Should -Be 'electric'_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        This example uses BeforeAll to perform an expensive operation only once, before validating_x000D__x000A_        the results in separate tests._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeAll_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    New-OneTimeTestSetup -ScriptBlock $Scriptblock_x000D__x000A_</S>
      <Obj N="Options" RefId="819">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="820">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">BeforeAll</S>
      <Obj N="CommandType" RefId="821">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="822">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="823">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="824">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Scriptblock</S>
            <Obj N="Value" RefId="825">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scriptblock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="826">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="827">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="828">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="829">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="830">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="831">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="832">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="833">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="834">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="835">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="836">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="837">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="838">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="839">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="840">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="841">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="842">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="843">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="844">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="845">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="846">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="847">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="848">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="849">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="850">
            <TNRef RefId="8" />
            <ToString>[-Scriptblock] &lt;scriptblock&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="851">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::BeforeAll</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/BeforeAll</S>
    </MS>
  </Obj>
  <Obj RefId="852">
    <TNRef RefId="0" />
    <ToString>BeforeDiscovery</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs setup code that is used during Discovery phase._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Runs your code as is, in the place where this function is defined. This is a semantic block to allow you_x000D__x000A_    to be explicit about code that you need to run during Discovery, instead of just_x000D__x000A_    putting code directly inside of Describe / Context._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    The ScritpBlock to run._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    BeforeDiscovery {_x000D__x000A_        $files = Get-ChildItem -Path $PSScriptRoot -Filter '*.ps1' -Recurse_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "File - &lt;_&gt;" -ForEach $files {_x000D__x000A_        Context "Whitespace" {_x000D__x000A_            It "There is no extra whitespace following a line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File ends with an empty line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    BeforeDiscovery is used to gather a list of script-files during Discovery-phase to_x000D__x000A_    dynamically create a Describe-block and tests for each file found._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/BeforeDiscovery_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ScriptBlock]$ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    . $ScriptBlock_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs setup code that is used during Discovery phase._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Runs your code as is, in the place where this function is defined. This is a semantic block to allow you_x000D__x000A_    to be explicit about code that you need to run during Discovery, instead of just_x000D__x000A_    putting code directly inside of Describe / Context._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    The ScritpBlock to run._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    BeforeDiscovery {_x000D__x000A_        $files = Get-ChildItem -Path $PSScriptRoot -Filter '*.ps1' -Recurse_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "File - &lt;_&gt;" -ForEach $files {_x000D__x000A_        Context "Whitespace" {_x000D__x000A_            It "There is no extra whitespace following a line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "File ends with an empty line" {_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    BeforeDiscovery is used to gather a list of script-files during Discovery-phase to_x000D__x000A_    dynamically create a Describe-block and tests for each file found._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/BeforeDiscovery_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [ScriptBlock]$ScriptBlock_x000D__x000A_    )_x000D__x000A__x000D__x000A_    . $ScriptBlock_x000D__x000A_</S>
      <Obj N="Options" RefId="853">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="854">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">BeforeDiscovery</S>
      <Obj N="CommandType" RefId="855">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="856">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="857">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="858">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ScriptBlock</S>
            <Obj N="Value" RefId="859">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ScriptBlock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="860">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="861">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="862">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="863">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="864">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="865">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="866">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="867">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="868">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="869">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="870">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="871">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="872">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="873">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="874">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="875">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="876">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="877">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="878">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="879">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="880">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="881">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="882">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="883">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="884">
            <TNRef RefId="8" />
            <ToString>[-ScriptBlock] &lt;scriptblock&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="885">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::BeforeDiscovery</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/BeforeDiscovery</S>
    </MS>
  </Obj>
  <Obj RefId="886">
    <TNRef RefId="0" />
    <ToString>BeforeEach</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeEach runs once before every test in the current or any child blocks._x000D__x000A_        Typically this is used to create all the prerequisites for the current test,_x000D__x000A_        such as writing content to a file._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "File parsing" {_x000D__x000A_            BeforeEach {_x000D__x000A_                # randomized path, to get fresh file for each test_x000D__x000A_                $file = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())_form.xml"_x000D__x000A_                Copy-Item -Source $template -Destination $file -Force | Out-Null_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes username" {_x000D__x000A_                Write-XmlForm -Path $file -Field "username" -Value "nohwnd"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes name" {_x000D__x000A_                Write-XmlForm -Path $file -Field "name" -Value "Jakub"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses BeforeEach to ensure a clean sample-file is used for each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName BeforeEach_x000D__x000A__x000D__x000A_    New-EachTestSetup -ScriptBlock $Scriptblock_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_        Defines a series of steps to perform at the beginning of every It block within_x000D__x000A_        the current Context or Describe block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_        BeforeEach runs once before every test in the current or any child blocks._x000D__x000A_        Typically this is used to create all the prerequisites for the current test,_x000D__x000A_        such as writing content to a file._x000D__x000A__x000D__x000A_        BeforeEach and AfterEach are unique in that they apply to the entire Context_x000D__x000A_        or Describe block, regardless of the order of the statements in the_x000D__x000A_        Context or Describe._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_        A scriptblock with steps to be executed during setup._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_        ```powershell_x000D__x000A_        Describe "File parsing" {_x000D__x000A_            BeforeEach {_x000D__x000A_                # randomized path, to get fresh file for each test_x000D__x000A_                $file = "$([IO.Path]::GetTempPath())/$([Guid]::NewGuid())_form.xml"_x000D__x000A_                Copy-Item -Source $template -Destination $file -Force | Out-Null_x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes username" {_x000D__x000A_                Write-XmlForm -Path $file -Field "username" -Value "nohwnd"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A__x000D__x000A_            It "Writes name" {_x000D__x000A_                Write-XmlForm -Path $file -Field "name" -Value "Jakub"_x000D__x000A_                $content = Get-Content $file_x000D__x000A_                # ..._x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        ```_x000D__x000A__x000D__x000A_        The example uses BeforeEach to ensure a clean sample-file is used for each test._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/commands/BeforeEach_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        https://pester.dev/docs/usage/setup-and-teardown_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_        about_BeforeEach_AfterEach_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        # the scriptblock to execute_x000D__x000A_        [Parameter(Mandatory = $true,_x000D__x000A_            Position = 1)]_x000D__x000A_        [Scriptblock]_x000D__x000A_        $Scriptblock_x000D__x000A_    )_x000D__x000A_    Assert-DescribeInProgress -CommandName BeforeEach_x000D__x000A__x000D__x000A_    New-EachTestSetup -ScriptBlock $Scriptblock_x000D__x000A_</S>
      <Obj N="Options" RefId="887">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="888">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">BeforeEach</S>
      <Obj N="CommandType" RefId="889">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="890">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="891">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="892">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Scriptblock</S>
            <Obj N="Value" RefId="893">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scriptblock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="894">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="895">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="896">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="897">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="898">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="899">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="900">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="901">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="902">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="903">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="904">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="905">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="906">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="907">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="908">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="909">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="910">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="911">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="912">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="913">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="914">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="915">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="916">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="917">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="918">
            <TNRef RefId="8" />
            <ToString>[-Scriptblock] &lt;scriptblock&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="919">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::BeforeEach</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/BeforeEach</S>
    </MS>
  </Obj>
  <Obj RefId="920">
    <TNRef RefId="0" />
    <ToString>bounceCode</ToString>
    <Props>
      <SBK N="ScriptBlock"> Get-Process code* | Stop-Process;code </SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition"> Get-Process code* | Stop-Process;code </S>
      <Obj N="Options" RefId="921">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="922">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">bounceCode</S>
      <Obj N="CommandType" RefId="923">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="924">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="925">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="926">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="927">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="928">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="929">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::bounceCode</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="930">
    <TNRef RefId="0" />
    <ToString>C:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="931">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="932">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">C:</S>
      <Obj N="CommandType" RefId="933">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="934">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="935">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="936">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="937">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="938">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="939">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::C:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="940">
    <TNRef RefId="0" />
    <ToString>cd..</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location ..</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location ..</S>
      <Obj N="Options" RefId="941">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="942">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">cd..</S>
      <Obj N="CommandType" RefId="943">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="944">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="945">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="946">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="947">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="948">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="949">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::cd..</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="950">
    <TNRef RefId="0" />
    <ToString>cd\</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location \</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location \</S>
      <Obj N="Options" RefId="951">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="952">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">cd\</S>
      <Obj N="CommandType" RefId="953">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="954">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="955">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="956">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="957">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="958">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="959">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::cd\</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="960">
    <TNRef RefId="0" />
    <ToString>cicommit</ToString>
    <Props>
      <SBK N="ScriptBlock"> git commit --amend --no-edit;git push -f </SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition"> git commit --amend --no-edit;git push -f </S>
      <Obj N="Options" RefId="961">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="962">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">cicommit</S>
      <Obj N="CommandType" RefId="963">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="964">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="965">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="966">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="967">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="968">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="969">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::cicommit</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="970">
    <TNRef RefId="0" />
    <ToString>Clear-Host</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [Alias('cls')]_x000D__x000A_    param()_x000D__x000A__x000D__x000A_    __clearhost_x000D__x000A_    if ($host.Runspace.LanguageMode -eq [System.Management.Automation.PSLanguageMode]::FullLanguage) {_x000D__x000A_        $psEditor.Window.Terminal.Clear()_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [Alias('cls')]_x000D__x000A_    param()_x000D__x000A__x000D__x000A_    __clearhost_x000D__x000A_    if ($host.Runspace.LanguageMode -eq [System.Management.Automation.PSLanguageMode]::FullLanguage) {_x000D__x000A_        $psEditor.Window.Terminal.Clear()_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="971">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Clear</S>
      <S N="Noun">Host</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="972">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Clear-Host</S>
      <Obj N="CommandType" RefId="973">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="974">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Obj N="Module" RefId="975">
        <TNRef RefId="15" />
        <ToString>PowerShellEditorServices.Commands</ToString>
        <Props>
          <B N="LogPipelineExecutionDetails">false</B>
          <S N="Name">PowerShellEditorServices.Commands</S>
          <S N="Path">C:\Users\JGrote\.vscode-insiders\extensions\ms-vscode.powershell-preview-2020.9.0\modules\PowerShellEditorServices\Commands\PowerShellEditorServices.Commands.psm1</S>
          <Nil N="ImplementingAssembly" />
          <S N="Definition">#_x000D__x000A_# Copyright (c) Microsoft. All rights reserved._x000D__x000A_# Licensed under the MIT license. See LICENSE file in the project root for full license information._x000D__x000A_#_x000D__x000A__x000D__x000A_Microsoft.PowerShell.Utility\Import-LocalizedData -BindingVariable Strings -FileName Strings -ErrorAction Ignore_x000D__x000A__x000D__x000A_Microsoft.PowerShell.Management\Get-ChildItem -Path $PSScriptRoot\Public\*.ps1 | ForEach-Object {_x000D__x000A_    . $PSItem.FullName_x000D__x000A_}_x000D__x000A__x000D__x000A_Microsoft.PowerShell.Core\Export-ModuleMember -Function *-*_x000D__x000A__x000D__x000A_# SIG # Begin signature block_x000D__x000A_# MIIjjgYJKoZIhvcNAQcCoIIjfzCCI3sCAQExDzANBglghkgBZQMEAgEFADB5Bgor_x000D__x000A_# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG_x000D__x000A_# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCCw96z/3HydOdgL_x000D__x000A_# dGiOl6/KKRkC9puwB1QHHAhIrMOSAKCCDYEwggX/MIID56ADAgECAhMzAAABh3IX_x000D__x000A_# chVZQMcJAAAAAAGHMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD_x000D__x000A_# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy_x000D__x000A_# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p_x000D__x000A_# bmcgUENBIDIwMTEwHhcNMjAwMzA0MTgzOTQ3WhcNMjEwMzAzMTgzOTQ3WjB0MQsw_x000D__x000A_# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u_x000D__x000A_# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy_x000D__x000A_# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB_x000D__x000A_# AQDOt8kLc7P3T7MKIhouYHewMFmnq8Ayu7FOhZCQabVwBp2VS4WyB2Qe4TQBT8aB_x000D__x000A_# znANDEPjHKNdPT8Xz5cNali6XHefS8i/WXtF0vSsP8NEv6mBHuA2p1fw2wB/F0dH_x000D__x000A_# sJ3GfZ5c0sPJjklsiYqPw59xJ54kM91IOgiO2OUzjNAljPibjCWfH7UzQ1TPHc4d_x000D__x000A_# weils8GEIrbBRb7IWwiObL12jWT4Yh71NQgvJ9Fn6+UhD9x2uk3dLj84vwt1NuFQ_x000D__x000A_# itKJxIV0fVsRNR3abQVOLqpDugbr0SzNL6o8xzOHL5OXiGGwg6ekiXA1/2XXY7yV_x000D__x000A_# Fc39tledDtZjSjNbex1zzwSXAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE_x000D__x000A_# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUhov4ZyO96axkJdMjpzu2zVXOJcsw_x000D__x000A_# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1_x000D__x000A_# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDU4Mzg1MB8GA1UdIwQYMBaAFEhu_x000D__x000A_# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu_x000D__x000A_# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w_x000D__x000A_# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3_x000D__x000A_# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx_x000D__x000A_# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAixmy_x000D__x000A_# S6E6vprWD9KFNIB9G5zyMuIjZAOuUJ1EK/Vlg6Fb3ZHXjjUwATKIcXbFuFC6Wr4K_x000D__x000A_# NrU4DY/sBVqmab5AC/je3bpUpjtxpEyqUqtPc30wEg/rO9vmKmqKoLPT37svc2NV_x000D__x000A_# BmGNl+85qO4fV/w7Cx7J0Bbqk19KcRNdjt6eKoTnTPHBHlVHQIHZpMxacbFOAkJr_x000D__x000A_# qAVkYZdz7ikNXTxV+GRb36tC4ByMNxE2DF7vFdvaiZP0CVZ5ByJ2gAhXMdK9+usx_x000D__x000A_# zVk913qKde1OAuWdv+rndqkAIm8fUlRnr4saSCg7cIbUwCCf116wUJ7EuJDg0vHe_x000D__x000A_# yhnCeHnBbyH3RZkHEi2ofmfgnFISJZDdMAeVZGVOh20Jp50XBzqokpPzeZ6zc1/g_x000D__x000A_# yILNyiVgE+RPkjnUQshd1f1PMgn3tns2Cz7bJiVUaqEO3n9qRFgy5JuLae6UweGf_x000D__x000A_# AeOo3dgLZxikKzYs3hDMaEtJq8IP71cX7QXe6lnMmXU/Hdfz2p897Zd+kU+vZvKI_x000D__x000A_# 3cwLfuVQgK2RZ2z+Kc3K3dRPz2rXycK5XCuRZmvGab/WbrZiC7wJQapgBodltMI5_x000D__x000A_# GMdFrBg9IeF7/rP4EqVQXeKtevTlZXjpuNhhjuR+2DMt/dWufjXpiW91bo3aH6Ea_x000D__x000A_# jOALXmoxgltCp1K7hrS6gmsvj94cLRf50QQ4U8Qwggd6MIIFYqADAgECAgphDpDS_x000D__x000A_# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK_x000D__x000A_# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0_x000D__x000A_# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0_x000D__x000A_# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla_x000D__x000A_# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS_x000D__x000A_# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT_x000D__x000A_# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB_x000D__x000A_# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG_x000D__x000A_# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S_x000D__x000A_# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz_x000D__x000A_# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7_x000D__x000A_# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u_x000D__x000A_# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33_x000D__x000A_# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl_x000D__x000A_# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP_x000D__x000A_# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB_x000D__x000A_# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF_x000D__x000A_# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM_x000D__x000A_# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ_x000D__x000A_# BdOCqhc3NyK1bajKdQKVMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1Ud_x000D__x000A_# DwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFHItOgIxkEO5FAVO_x000D__x000A_# 4eqnxzHRI4k0MFoGA1UdHwRTMFEwT6BNoEuGSWh0dHA6Ly9jcmwubWljcm9zb2Z0_x000D__x000A_# LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y_x000D__x000A_# Mi5jcmwwXgYIKwYBBQUHAQEEUjBQME4GCCsGAQUFBzAChkJodHRwOi8vd3d3Lm1p_x000D__x000A_# Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y_x000D__x000A_# Mi5jcnQwgZ8GA1UdIASBlzCBlDCBkQYJKwYBBAGCNy4DMIGDMD8GCCsGAQUFBwIB_x000D__x000A_# FjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2RvY3MvcHJpbWFyeWNw_x000D__x000A_# cy5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AcABvAGwAaQBjAHkA_x000D__x000A_# XwBzAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAGfyhqWY_x000D__x000A_# 4FR5Gi7T2HRnIpsLlhHhY5KZQpZ90nkMkMFlXy4sPvjDctFtg/6+P+gKyju/R6mj_x000D__x000A_# 82nbY78iNaWXXWWEkH2LRlBV2AySfNIaSxzzPEKLUtCw/WvjPgcuKZvmPRul1LUd_x000D__x000A_# d5Q54ulkyUQ9eHoj8xN9ppB0g430yyYCRirCihC7pKkFDJvtaPpoLpWgKj8qa1hJ_x000D__x000A_# Yx8JaW5amJbkg/TAj/NGK978O9C9Ne9uJa7lryft0N3zDq+ZKJeYTQ49C/IIidYf_x000D__x000A_# wzIY4vDFLc5bnrRJOQrGCsLGra7lstnbFYhRRVg4MnEnGn+x9Cf43iw6IGmYslmJ_x000D__x000A_# aG5vp7d0w0AFBqYBKig+gj8TTWYLwLNN9eGPfxxvFX1Fp3blQCplo8NdUmKGwx1j_x000D__x000A_# NpeG39rz+PIWoZon4c2ll9DuXWNB41sHnIc+BncG0QaxdR8UvmFhtfDcxhsEvt9B_x000D__x000A_# xw4o7t5lL+yX9qFcltgA1qFGvVnzl6UJS0gQmYAf0AApxbGbpT9Fdx41xtKiop96_x000D__x000A_# eiL6SJUfq/tHI4D1nvi/a7dLl+LrdXga7Oo3mXkYS//WsyNodeav+vyL6wuA6mk7_x000D__x000A_# r/ww7QRMjt/fdW1jkT3RnVZOT7+AVyKheBEyIXrvQQqxP/uozKRdwaGIm1dxVk5I_x000D__x000A_# RcBCyZt2WwqASGv9eZ/BvW1taslScxMNelDNMYIVYzCCFV8CAQEwgZUwfjELMAkG_x000D__x000A_# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx_x000D__x000A_# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z_x000D__x000A_# b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMQITMwAAAYdyF3IVWUDHCQAAAAABhzAN_x000D__x000A_# BglghkgBZQMEAgEFAKCBrjAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor_x000D__x000A_# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQg4iJ1NcPK_x000D__x000A_# RbAUp0xG3/KFHHephKlrRmIbWdN98ylLb3UwQgYKKwYBBAGCNwIBDDE0MDKgFIAS_x000D__x000A_# AE0AaQBjAHIAbwBzAG8AZgB0oRqAGGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbTAN_x000D__x000A_# BgkqhkiG9w0BAQEFAASCAQAZjgFwhG8DH4GzHxzaY7ezCSkTm1TlKguiUmlyn4Yu_x000D__x000A_# DvoKl6lF3Gdc14yvvPzFXed8BAAJkVAkRoZ67PGNKrVopiJVfHEwHgJ1NMPpMApD_x000D__x000A_# JRGNEbvIGCWnftMeZVuprEmmJ3uuo1nRPDK0buU0e9YalCRORjQBtbzjc+MhooGp_x000D__x000A_# WsPzp4/IxPo/LdPfH8l9x2U/Cjdu+v5G6MJMFK2h4s2LBvGpFYzWVzCR5kObo5i1_x000D__x000A_# Fokx8CACFuQaouPacN1wtLJ4p/J6nh7jhab2Z1uRBIGUO0lhdwx539zuAlvso7Le_x000D__x000A_# je5WRK5a6B5U7z6bAtVEZURteXM0cTedlnT7/+vX5kuwoYIS7TCCEukGCisGAQQB_x000D__x000A_# gjcDAwExghLZMIIS1QYJKoZIhvcNAQcCoIISxjCCEsICAQMxDzANBglghkgBZQME_x000D__x000A_# AgEFADCCAVUGCyqGSIb3DQEJEAEEoIIBRASCAUAwggE8AgEBBgorBgEEAYRZCgMB_x000D__x000A_# MDEwDQYJYIZIAWUDBAIBBQAEIMUd8zZFxkha5r8ja04o0hfkzKO0z6Kx9/PBBlx4_x000D__x000A_# vHqXAgZfYPc/4moYEzIwMjAwOTE1MjMyMjQxLjA1NlowBIACAfSggdSkgdEwgc4x_x000D__x000A_# CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt_x000D__x000A_# b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1p_x000D__x000A_# Y3Jvc29mdCBPcGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMg_x000D__x000A_# VFNTIEVTTjo2MEJDLUUzODMtMjYzNTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUt_x000D__x000A_# U3RhbXAgU2VydmljZaCCDkAwggT1MIID3aADAgECAhMzAAABJt+6SyK5goIHAAAA_x000D__x000A_# AAEmMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNo_x000D__x000A_# aW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y_x000D__x000A_# cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEw_x000D__x000A_# MB4XDTE5MTIxOTAxMTQ1OVoXDTIxMDMxNzAxMTQ1OVowgc4xCzAJBgNVBAYTAlVT_x000D__x000A_# MRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQK_x000D__x000A_# ExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVy_x000D__x000A_# YXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo2MEJD_x000D__x000A_# LUUzODMtMjYzNTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj_x000D__x000A_# ZTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAJ4wvoacTvMNlXQTtfF/_x000D__x000A_# Cx5Ol3X0fcjUNMvjLgTmO5+WHYJFbp725P3+qvFKDRQHWEI1Sz0gB24urVDIjXjB_x000D__x000A_# h5NVNJVMQJI2tltv7M4/4IbhZJb3xzQW7LolEoZYUZanBTUuyly9osCg4o5joViT_x000D__x000A_# 2GtmyxK+Fv5kC20l2opeaeptd/E7ceDAFRM87hiNCsK/KHyC+8+swnlg4gTOey6z_x000D__x000A_# QqhzgNsG6HrjLBuDtDs9izAMwS2yWT0T52QA9h3Q+B1C9ps2fMKMe+DHpG+0c61D_x000D__x000A_# 94Yh6cV2XHib4SBCnwIFZAeZE2UJ4qPANSYozI8PH+E5rCT3SVqYvHou97HsXvP2_x000D__x000A_# I3MCAwEAAaOCARswggEXMB0GA1UdDgQWBBRJq6wfF7B+mEKN0VimX8ajNA5hQTAf_x000D__x000A_# BgNVHSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNVHR8ETzBNMEugSaBH_x000D__x000A_# hkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNU_x000D__x000A_# aW1TdGFQQ0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEETjBMMEoGCCsGAQUF_x000D__x000A_# BzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1RpbVN0_x000D__x000A_# YVBDQV8yMDEwLTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQMMAoGCCsG_x000D__x000A_# AQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQBAlvudaOlv9Cfzv56bnX41czF6tLtH_x000D__x000A_# LB46l6XUch+qNN45ZmOTFwLot3JjwSrn4oycQ9qTET1TFDYd1QND0LiXmKz9OqBX_x000D__x000A_# ai6S8XdyCQEZvfL82jIAs9pwsAQ6XvV9jNybPStRgF/sOAM/Deyfmej9Tg9FcRwX_x000D__x000A_# ank2qgzdZZNb8GoEze7f1orcTF0Q89IUXWIlmwEwQFYF1wjn87N4ZxL9Z/xA2m/R_x000D__x000A_# 1zizFylWP/mpamCnVfZZLkafFLNUNVmcvc+9gM7vceJs37d3ydabk4wR6ObR34sW_x000D__x000A_# aLppmyPlsI1Qq5Lu6bJCWoXzYuWpkoK6oEep1gML6SRC3HKVS3UscZhtMIIGcTCC_x000D__x000A_# BFmgAwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC_x000D__x000A_# VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV_x000D__x000A_# BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJv_x000D__x000A_# b3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcN_x000D__x000A_# MjUwNzAxMjE0NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3Rv_x000D__x000A_# bjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0_x000D__x000A_# aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCCASIw_x000D__x000A_# DQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKkdDbx3EYo6IOz8E5f1+n9plGt0_x000D__x000A_# VBDVpQoAgoX77XxoSyxfxcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEwWbEw_x000D__x000A_# RA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq9UeBzb8kYDJYYEbyWEeGMoQe_x000D__x000A_# dGFnkV+BVLHPk0ySwcSmXdFhE24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKx_x000D__x000A_# Xf13Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9buWayrGo8noqCjHw2k4G_x000D__x000A_# kbaICDXoeByw6ZnNPOcvRLqn9NxkvaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEA_x000D__x000A_# AaOCAeYwggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBTVYzpcijGQ80N7_x000D__x000A_# fEYbxTNoWoVtVTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMC_x000D__x000A_# AYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo0T2UkFvX_x000D__x000A_# zpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29mdC5jb20v_x000D__x000A_# cGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmwwWgYI_x000D__x000A_# KwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29mdC5j_x000D__x000A_# b20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYDVR0g_x000D__x000A_# AQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYIKwYBBQUHAgEWMWh0dHA6Ly93_x000D__x000A_# d3cubWljcm9zb2Z0LmNvbS9QS0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYB_x000D__x000A_# BQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBjAHkAXwBTAHQAYQB0AGUA_x000D__x000A_# bQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOh_x000D__x000A_# IW+z66bM9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj+bzta1RXCCtRgkQS_x000D__x000A_# +7lTjMz0YBKKdsxAQEGb3FwX/1z5Xhc1mCRWS3TvQhDIr79/xn/yN31aPxzymXlK_x000D__x000A_# kVIArzgPF/UveYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8tv0E4XCfMkon_x000D__x000A_# /VWvL/625Y4zu2JfmttXQOnxzplmkIz/amJ/3cVKC5Em4jnsGUpxY517IW3DnKOi_x000D__x000A_# PPp/fZZqkHimbdLhnPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl5WTs9/S/_x000D__x000A_# fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5HmoDF0M2n0O99g/DhO3EJ3110mCII_x000D__x000A_# YdqwUB5vvfHhAN/nMQekkzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL2IK0_x000D__x000A_# cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt6o3gMy4SKfXAL1QnIffIrE7a_x000D__x000A_# KLixqduWsqdCosnPGUFN4Ib5KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQ_x000D__x000A_# cdeh0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9YBS7vDaBQNdrvCScc1bN+_x000D__x000A_# NR4Iuto229Nfj950iEkSoYICzjCCAjcCAQEwgfyhgdSkgdEwgc4xCzAJBgNVBAYT_x000D__x000A_# AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYD_x000D__x000A_# VQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBP_x000D__x000A_# cGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNTIEVTTjo2_x000D__x000A_# MEJDLUUzODMtMjYzNTElMCMGA1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vy_x000D__x000A_# dmljZaIjCgEBMAcGBSsOAwIaAxUACmcyOWmZxErpq06B8dy6oMZ6//yggYMwgYCk_x000D__x000A_# fjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH_x000D__x000A_# UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD_x000D__x000A_# Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDANBgkqhkiG9w0BAQUFAAIF_x000D__x000A_# AOMLdbkwIhgPMjAyMDA5MTUyMTE3NDVaGA8yMDIwMDkxNjIxMTc0NVowczA5Bgor_x000D__x000A_# BgEEAYRZCgQBMSswKTAKAgUA4wt1uQIBADAGAgEAAgEBMAcCAQACAhD4MAoCBQDj_x000D__x000A_# DMc5AgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMH_x000D__x000A_# oSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAvPTutORDfmBnUVqI9Lxj_x000D__x000A_# GzNXegAj1b2M57Xxm6nJiU5CqOrgRMBdAw0zLJknJvbVHnGEes/Arg/cY4iJ3dtz_x000D__x000A_# XcpN6+7Uo86cM4NUN1fdsdmRpuOKmPrx3aSpKgdNJ01w5wvPJEL63b3jA0+m7tsI_x000D__x000A_# gus1YCk499Y80mudxcPFYo4xggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzET_x000D__x000A_# MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV_x000D__x000A_# TWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T_x000D__x000A_# dGFtcCBQQ0EgMjAxMAITMwAAASbfuksiuYKCBwAAAAABJjANBglghkgBZQMEAgEF_x000D__x000A_# AKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEi_x000D__x000A_# BCB9rh4T/9amYMjZ63Fsa3CK4+HjhmCY3WXix1HTZs28iTCB+gYLKoZIhvcNAQkQ_x000D__x000A_# Ai8xgeowgecwgeQwgb0EIDb9z++evV5wDO9qk5ZnbEZ8CTOuR+kZyu8xbTsJCXUP_x000D__x000A_# MIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO_x000D__x000A_# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm_x000D__x000A_# MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAEm37pL_x000D__x000A_# IrmCggcAAAAAASYwIgQgqlkl887Ie1OTz84fFig+1osQIqUz3LDax+R0o9k5/icw_x000D__x000A_# DQYJKoZIhvcNAQELBQAEggEAPQoEUo1ys+ZGAhqCR4yzOhRBStAlLCU2WiBDPSqW_x000D__x000A_# 5wTxni3yrzkkxTV9ZBy9enMcwnpdbouI5Pajqaqmub2SnNb5GSE5aOxh+IKaj1mS_x000D__x000A_# hEvCx9arsXREDkA5PLCFicwuq8Ds5svIsdr7I+b9j575b8m5T7U3miw9++/syYJS_x000D__x000A_# Dq6zdJdSaSEK4YEI7FDkDVu/bTLPMmMjjss6mOdS/rYHxvAPepJvcq59a0RhAbDM_x000D__x000A_# +R8zXPj8iE07pYdd9TP4ipzuzTn0aDtszriIa69uHzD/GbFajS5ZqmRWaLcvSBPp_x000D__x000A_# gWs1yJD9wnQWFR4Kb29FzIXUilyv21+hkpBosojLClPuyA==_x000D__x000A_# SIG # End signature block_x000D__x000A_</S>
          <S N="Description">Provides internal commands for PowerShell Editor Services that only work in an editor session.</S>
          <G N="Guid">6064d846-0fa0-4b6d-afc1-11e5bed3c4a9</G>
          <Nil N="HelpInfoUri" />
          <S N="ModuleBase">C:\Users\JGrote\.vscode-insiders\extensions\ms-vscode.powershell-preview-2020.9.0\modules\PowerShellEditorServices\Commands</S>
          <Obj N="PrivateData" RefId="976">
            <TNRef RefId="16" />
            <DCT>
              <En>
                <S N="Key">PSData</S>
                <Obj N="Value" RefId="977">
                  <TNRef RefId="16" />
                  <DCT>
                    <En>
                      <S N="Key">ProjectUri</S>
                      <S N="Value">https://github.com/PowerShell/PowerShellEditorServices</S>
                    </En>
                    <En>
                      <S N="Key">LicenseUri</S>
                      <S N="Value">https://github.com/PowerShell/PowerShellEditorServices/blob/master/LICENSE</S>
                    </En>
                  </DCT>
                </Obj>
              </En>
            </DCT>
          </Obj>
          <Ref N="ExperimentalFeatures" RefId="24" />
          <Obj N="Tags" RefId="978">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <URI N="ProjectUri">https://github.com/PowerShell/PowerShellEditorServices</URI>
          <Nil N="IconUri" />
          <URI N="LicenseUri">https://github.com/PowerShell/PowerShellEditorServices/blob/master/LICENSE</URI>
          <Nil N="ReleaseNotes" />
          <Nil N="RepositorySourceLocation" />
          <Version N="Version">0.2.0</Version>
          <S N="ModuleType">Script</S>
          <S N="Author">Microsoft</S>
          <S N="AccessMode">ReadWrite</S>
          <Nil N="ClrVersion" />
          <S N="CompanyName">Microsoft</S>
          <S N="Copyright">(c) 2017 Microsoft. All rights reserved.</S>
          <Nil N="DotNetFrameworkVersion" />
          <Obj N="ExportedFunctions" RefId="979">
            <TNRef RefId="20" />
            <DCT>
              <En>
                <S N="Key">Clear-Host</S>
                <S N="Value">Clear-Host</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ScriptExtent</S>
                <S N="Value">ConvertFrom-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">ConvertTo-ScriptExtent</S>
                <S N="Value">ConvertTo-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Find-Ast</S>
                <S N="Value">Find-Ast</S>
              </En>
              <En>
                <S N="Key">Get-Token</S>
                <S N="Value">Get-Token</S>
              </En>
              <En>
                <S N="Key">Import-EditorCommand</S>
                <S N="Value">Import-EditorCommand</S>
              </En>
              <En>
                <S N="Key">Join-ScriptExtent</S>
                <S N="Value">Join-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">New-EditorFile</S>
                <S N="Value">New-EditorFile</S>
              </En>
              <En>
                <S N="Key">Open-EditorFile</S>
                <S N="Value">Open-EditorFile</S>
              </En>
              <En>
                <S N="Key">Out-CurrentFile</S>
                <S N="Value">Out-CurrentFile</S>
              </En>
              <En>
                <S N="Key">Register-EditorCommand</S>
                <S N="Value">Register-EditorCommand</S>
              </En>
              <En>
                <S N="Key">Set-ScriptExtent</S>
                <S N="Value">Set-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Test-ScriptExtent</S>
                <S N="Value">Test-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Unregister-EditorCommand</S>
                <S N="Value">Unregister-EditorCommand</S>
              </En>
            </DCT>
          </Obj>
          <S N="Prefix"></S>
          <Obj N="ExportedCmdlets" RefId="980">
            <TNRef RefId="21" />
            <DCT />
          </Obj>
          <Obj N="ExportedCommands" RefId="981">
            <TNRef RefId="22" />
            <DCT>
              <En>
                <S N="Key">Clear-Host</S>
                <S N="Value">Clear-Host</S>
              </En>
              <En>
                <S N="Key">ConvertFrom-ScriptExtent</S>
                <S N="Value">ConvertFrom-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">ConvertTo-ScriptExtent</S>
                <S N="Value">ConvertTo-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Find-Ast</S>
                <S N="Value">Find-Ast</S>
              </En>
              <En>
                <S N="Key">Get-Token</S>
                <S N="Value">Get-Token</S>
              </En>
              <En>
                <S N="Key">Import-EditorCommand</S>
                <S N="Value">Import-EditorCommand</S>
              </En>
              <En>
                <S N="Key">Join-ScriptExtent</S>
                <S N="Value">Join-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">New-EditorFile</S>
                <S N="Value">New-EditorFile</S>
              </En>
              <En>
                <S N="Key">Open-EditorFile</S>
                <S N="Value">Open-EditorFile</S>
              </En>
              <En>
                <S N="Key">Out-CurrentFile</S>
                <S N="Value">Out-CurrentFile</S>
              </En>
              <En>
                <S N="Key">Register-EditorCommand</S>
                <S N="Value">Register-EditorCommand</S>
              </En>
              <En>
                <S N="Key">Set-ScriptExtent</S>
                <S N="Value">Set-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Test-ScriptExtent</S>
                <S N="Value">Test-ScriptExtent</S>
              </En>
              <En>
                <S N="Key">Unregister-EditorCommand</S>
                <S N="Value">Unregister-EditorCommand</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="FileList" RefId="982">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="CompatiblePSEditions" RefId="983">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="ModuleList" RefId="984">
            <TNRef RefId="23" />
            <LST />
          </Obj>
          <Obj N="NestedModules" RefId="985">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <Nil N="PowerShellHostName" />
          <Nil N="PowerShellHostVersion" />
          <Nil N="PowerShellVersion" />
          <S N="ProcessorArchitecture">None</S>
          <Obj N="Scripts" RefId="986">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="RequiredAssemblies" RefId="987">
            <TNRef RefId="25" />
            <LST />
          </Obj>
          <Obj N="RequiredModules" RefId="988">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <S N="RootModule">PowerShellEditorServices.Commands.psm1</S>
          <Obj N="ExportedVariables" RefId="989">
            <TNRef RefId="26" />
            <DCT />
          </Obj>
          <Obj N="ExportedAliases" RefId="990">
            <TNRef RefId="27" />
            <DCT />
          </Obj>
          <Obj N="ExportedDscResources" RefId="991">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <S N="SessionState">System.Management.Automation.SessionState</S>
          <Nil N="OnRemove" />
          <Obj N="ExportedFormatFiles" RefId="992">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <Obj N="ExportedTypeFiles" RefId="993">
            <TNRef RefId="28" />
            <LST>
              <S>C:\Users\JGrote\.vscode-insiders\extensions\ms-vscode.powershell-preview-2020.9.0\modules\PowerShellEditorServices\Commands\PowerShellEditorServices.Commands.types.ps1xml</S>
            </LST>
          </Obj>
        </Props>
      </Obj>
      <Obj N="RemotingCapability" RefId="994">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="995">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="996">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="997">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="998">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Clear-Host</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="999">
    <TNRef RefId="0" />
    <ToString>Close-ExcelPackage</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword","")]_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory=$true, ValueFromPipeline=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [switch]$Show,_x000D__x000A_        [Switch]$NoSave,_x000D__x000A_        $SaveAs,_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$Password,_x000D__x000A_        [switch]$Calculate_x000D__x000A_    )_x000D__x000A_    if ( $NoSave)      {$ExcelPackage.Dispose()}_x000D__x000A_    else {_x000D__x000A_        if ($Calculate) {_x000D__x000A_            try   { [OfficeOpenXml.CalculationExtension]::Calculate($ExcelPackage.Workbook) }_x000D__x000A_            catch { Write-Warning "One or more errors occured while calculating, save will continue, but there may be errors in the workbook."}_x000D__x000A_        }_x000D__x000A_        if ($SaveAs) {_x000D__x000A_            $SaveAs = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($SaveAs)_x000D__x000A_            if ($Password) {$ExcelPackage.SaveAs( $SaveAs, $Password ) }_x000D__x000A_            else           {$ExcelPackage.SaveAs( $SaveAs)}_x000D__x000A_        }_x000D__x000A_        else         {_x000D__x000A_            if ($Password) {$ExcelPackage.Save($Password) }_x000D__x000A_            else           {$ExcelPackage.Save()          }_x000D__x000A_            $SaveAs = $ExcelPackage.File.FullName_x000D__x000A_        }_x000D__x000A_        $ExcelPackage.Dispose()_x000D__x000A_        if ($Show)   {Start-Process -FilePath $SaveAs }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword","")]_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory=$true, ValueFromPipeline=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [switch]$Show,_x000D__x000A_        [Switch]$NoSave,_x000D__x000A_        $SaveAs,_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$Password,_x000D__x000A_        [switch]$Calculate_x000D__x000A_    )_x000D__x000A_    if ( $NoSave)      {$ExcelPackage.Dispose()}_x000D__x000A_    else {_x000D__x000A_        if ($Calculate) {_x000D__x000A_            try   { [OfficeOpenXml.CalculationExtension]::Calculate($ExcelPackage.Workbook) }_x000D__x000A_            catch { Write-Warning "One or more errors occured while calculating, save will continue, but there may be errors in the workbook."}_x000D__x000A_        }_x000D__x000A_        if ($SaveAs) {_x000D__x000A_            $SaveAs = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($SaveAs)_x000D__x000A_            if ($Password) {$ExcelPackage.SaveAs( $SaveAs, $Password ) }_x000D__x000A_            else           {$ExcelPackage.SaveAs( $SaveAs)}_x000D__x000A_        }_x000D__x000A_        else         {_x000D__x000A_            if ($Password) {$ExcelPackage.Save($Password) }_x000D__x000A_            else           {$ExcelPackage.Save()          }_x000D__x000A_            $SaveAs = $ExcelPackage.File.FullName_x000D__x000A_        }_x000D__x000A_        $ExcelPackage.Dispose()_x000D__x000A_        if ($Show)   {Start-Process -FilePath $SaveAs }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1000">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Close</S>
      <S N="Noun">ExcelPackage</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1001">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Close-ExcelPackage</S>
      <Obj N="CommandType" RefId="1002">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1003">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1004">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1005">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="1006">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="1007">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="1008">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1009">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoSave</S>
            <Obj N="Value" RefId="1010">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoSave</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1011">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SaveAs</S>
            <Obj N="Value" RefId="1012">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SaveAs</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1013">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Password</S>
            <Obj N="Value" RefId="1014">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Password</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1015">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Calculate</S>
            <Obj N="Value" RefId="1016">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Calculate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1017">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1018">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1019">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1020">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1021">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1022">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1023">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1024">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1025">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1026">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1027">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1028">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1029">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1030">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1031">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1032">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1033">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1034">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1035">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1036">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1037">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1038">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1039">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1040">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1041">
            <TNRef RefId="8" />
            <ToString>[-ExcelPackage] &lt;ExcelPackage&gt; [[-SaveAs] &lt;Object&gt;] [[-Password] &lt;string&gt;] [-Show] [-NoSave] [-Calculate] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1042">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Close-ExcelPackage</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1043">
    <TNRef RefId="0" />
    <ToString>ColumnChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="ColumnStacked",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="ColumnStacked",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1044">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1045">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ColumnChart</S>
      <Obj N="CommandType" RefId="1046">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1047">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1048">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1049">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="1050">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1051">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">title</S>
            <Obj N="Value" RefId="1052">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1053">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="1054">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="1055">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="1056">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1057">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="1058">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1059">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="1060">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1061">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1062">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1063">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1064">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1065">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1066">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1067">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1068">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1069">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1070">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1071">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1072">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1073">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1074">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1075">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1076">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1077">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1078">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1079">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1080">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1081">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1082">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1083">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1084">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1085">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1086">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ColumnChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1087">
    <TNRef RefId="0" />
    <ToString>Compare-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName)]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '', Justification="Write host used for sub-warning level message to operator which does not form output")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="False positives when initializing variable in begin block")]_x000D__x000A_    param(_x000D__x000A_        [parameter(Mandatory=$true,Position=0)]_x000D__x000A_        $Referencefile ,_x000D__x000A_        [parameter(Mandatory=$true,Position=1)]_x000D__x000A_        $Differencefile   ,_x000D__x000A_        $WorksheetName   = "Sheet1",_x000D__x000A_        $Property        = "*"    ,_x000D__x000A_        $ExcludeProperty ,_x000D__x000A_        [Parameter(ParameterSetName='B', Mandatory)]_x000D__x000A_        [String[]]$Headername,_x000D__x000A_        [Parameter(ParameterSetName='C', Mandatory)]_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [int]$Startrow = 1,_x000D__x000A_        $AllDataBackgroundColor,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        $TabColor,_x000D__x000A_        $Key             = "Name" ,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Show,_x000D__x000A_        [switch]$GridView,_x000D__x000A_        [Switch]$PassThru,_x000D__x000A_        [Switch]$IncludeEqual,_x000D__x000A_        [Switch]$ExcludeDifferent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    #if the filenames don't resolve, give up now._x000D__x000A_    try    { $oneFile = ((Resolve-Path -Path $Referencefile -ErrorAction Stop).path -eq (Resolve-Path -Path $Differencefile  -ErrorAction Stop).path)}_x000D__x000A_    catch  { Write-Warning -Message "Could not Resolve the filenames." ; return }_x000D__x000A__x000D__x000A_    #If we have one file , we must have two different worksheet names. If we have two files we can have a single string or two strings._x000D__x000A_    if     ($onefile -and ( ($WorksheetName.count -ne 2) -or $WorksheetName[0] -eq $WorksheetName[1] ) ) {_x000D__x000A_        Write-Warning -Message "If both the Reference and difference file are the same then worksheet name must provide 2 different names"_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A_    if     ($WorksheetName.count -eq 2)       {$worksheet1 = $WorksheetName[0] ;   $worksheet2 = $WorksheetName[1]}_x000D__x000A_    elseif ($WorksheetName -is [string])      {$worksheet1 = $worksheet2 = $WorksheetName}_x000D__x000A_    else   {Write-Warning -Message "You must provide either a single worksheet name or two names." ; return }_x000D__x000A__x000D__x000A_    $params= @{ ErrorAction = [System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_    foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_    try    {_x000D__x000A_        $sheet1 = Import-Excel -Path $Referencefile  -WorksheetName $worksheet1 @params_x000D__x000A_        $sheet2 = Import-Excel -Path $Differencefile -WorksheetName $worksheet2 @Params_x000D__x000A_    }_x000D__x000A_    catch  {Write-Warning -Message "Could not read the worksheet from $Referencefile and/or $Differencefile." ; return }_x000D__x000A__x000D__x000A_    #Get Column headings and create a hash table of Name to column letter._x000D__x000A_    $headings = $Sheet1[-1].psobject.Properties.name # This preserves the sequence - using Get-member would sort them alphabetically!_x000D__x000A_    $headings | ForEach-Object -Begin {$columns  = @{}  ; $i= 1 } -Process  {$Columns[$_] = [OfficeOpenXml.ExcelAddress]::GetAddress(1,($i ++)) -replace "\d","" }_x000D__x000A__x000D__x000A_    #Make a list of property headings using the Property (default "*") and ExcludeProperty parameters_x000D__x000A_    if ($Key -eq "Name" -and $NoHeader) {$Key  = "p1"}_x000D__x000A_    $propList = @()_x000D__x000A_    foreach ($p in $Property)           {$propList += ($headings.where({$_ -like    $p}) )}_x000D__x000A_    foreach ($p in $ExcludeProperty)    {$propList  =  $propList.where({$_ -notlike $p})  }_x000D__x000A_    if (($headings -contains $Key) -and ($propList -notcontains $Key)) {$propList += $Key}_x000D__x000A_    $propList = $propList | Select-Object -Unique_x000D__x000A_    if ($propList.Count -eq 0)  {Write-Warning -Message "No Columns are selected with -Property = '$Property' and -excludeProperty = '$ExcludeProperty'." ; return}_x000D__x000A__x000D__x000A_    #Add RowNumber, Sheetname and file name to every row_x000D__x000A_    $firstDataRow = $startRow + 1_x000D__x000A_    if ($Headername -or $NoHeader) {$firstDataRow -- }_x000D__x000A_    $i = $firstDataRow ; foreach ($row in $Sheet1) {Add-Member -InputObject $row -MemberType NoteProperty -Name "_Row"   -Value ($i ++)_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_Sheet" -Value  $worksheet1_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_File"  -Value  $Referencefile}_x000D__x000A_    $i = $firstDataRow ; foreach ($row in $Sheet2) {Add-Member -InputObject $row -MemberType NoteProperty -Name "_Row"   -Value ($i ++)_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_Sheet" -Value  $worksheet2_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_File"  -Value  $Differencefile}_x000D__x000A__x000D__x000A_    if ($ExcludeDifferent -and -not $IncludeEqual) {$IncludeEqual = $true}_x000D__x000A_    #Do the comparison and add file,sheet and row to the result - these are prefixed with "_" to show they are added the addition will fail if the sheet has these properties so split the operations_x000D__x000A_    [PSCustomObject[]]$diff = Compare-Object -ReferenceObject $Sheet1 -DifferenceObject $Sheet2 -Property $propList -PassThru -IncludeEqual:$IncludeEqual -ExcludeDifferent:$ExcludeDifferent  |_x000D__x000A_                Sort-Object -Property "_Row","File"_x000D__x000A__x000D__x000A_    #if BackgroundColor was specified, set it on extra or extra or changed rows_x000D__x000A_    if      ($diff -and $BackgroundColor) {_x000D__x000A_        #Differences may only exist in one file. So gather the changes for each file; open the file, update each impacted row in the shee, save the file_x000D__x000A_        $updates = $diff.where({$_.SideIndicator -ne "=="}) | Group-object -Property "_File"_x000D__x000A_        foreach   ($file in $updates) {_x000D__x000A_            try   {$xl  = Open-ExcelPackage -Path $file.name }_x000D__x000A_            catch {Write-warning -Message "Can't open $($file.Name) for writing." ; return}_x000D__x000A_            if  ($PSBoundParameters.ContainsKey("AllDataBackgroundColor")) {_x000D__x000A_                $file.Group._sheet | Sort-Object -Unique | ForEach-Object {_x000D__x000A_                    $ws =  $xl.Workbook.Worksheets[$_]_x000D__x000A_                    if ($headerName) {$range = "A" +  $startrow      + ":" + $ws.dimension.end.address}_x000D__x000A_                    else             {$range = "A" + ($startrow + 1) + ":" + $ws.dimension.end.address}_x000D__x000A_                    Set-ExcelRange -Worksheet $ws -BackgroundColor $AllDataBackgroundColor -Range $Range_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            foreach ($row in $file.group)  {_x000D__x000A_                $ws    = $xl.Workbook.Worksheets[$row._Sheet]_x000D__x000A_                $range = $ws.Dimension -replace "\d+",$row._row_x000D__x000A_                Set-ExcelRange -Worksheet $ws -Range $range -BackgroundColor $BackgroundColor_x000D__x000A_            }_x000D__x000A_            if  ($PSBoundParameters.ContainsKey("TabColor")) {_x000D__x000A_                if ($TabColor -is [string])         {$TabColor = [System.Drawing.Color]::$TabColor }_x000D__x000A_                foreach ($tab in ($file.group._sheet | Select-Object -Unique)) {_x000D__x000A_                    $xl.Workbook.Worksheets[$tab].TabColor = $TabColor_x000D__x000A_                 }_x000D__x000A_            }_x000D__x000A_            $xl.save()  ; $xl.Stream.Close() ; $xl.Dispose()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    #if font color was specified, set it on changed properties where the same key appears in both sheets._x000D__x000A_    if      ($diff -and $FontColor -and (($propList -contains $Key) -or ($Key -is [hashtable]))  ) {_x000D__x000A_        $updates = $diff.where({$_.SideIndicator -ne "=="})  | Group-object -Property $Key | Where-Object {$_.count -eq 2}_x000D__x000A_        if ($updates) {_x000D__x000A_            $XL1 = Open-ExcelPackage -path $Referencefile_x000D__x000A_            if ($oneFile ) {$xl2 = $xl1}_x000D__x000A_            else           {$xl2 = Open-ExcelPackage -path $Differencefile }_x000D__x000A_            foreach ($u in $updates) {_x000D__x000A_                 foreach ($p in $propList) {_x000D__x000A_                    if ($u.group[0]._file -eq $Referencefile) {_x000D__x000A_                        $ws1 =  $xl1.Workbook.Worksheets[$u.Group[0]._sheet]_x000D__x000A_                        $ws2 =  $xl2.Workbook.Worksheets[$u.Group[1]._sheet]_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $ws1 =  $xl2.Workbook.Worksheets[$u.Group[0]._sheet]_x000D__x000A_                        $ws2 =  $xl1.Workbook.Worksheets[$u.Group[1]._sheet]_x000D__x000A_                    }_x000D__x000A_                    if($u.Group[0].$p -ne $u.Group[1].$p ) {_x000D__x000A_                        Set-ExcelRange -Worksheet $ws1 -Range ($Columns[$p] + $u.Group[0]._Row) -FontColor $FontColor_x000D__x000A_                        Set-ExcelRange -Worksheet $ws2 -Range ($Columns[$p] + $u.Group[1]._Row) -FontColor $FontColor_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            $xl1.Save()                     ; $xl1.Stream.Close() ; $xl1.Dispose()_x000D__x000A_            if (-not $oneFile) {$xl2.Save() ; $xl2.Stream.Close() ; $xl2.Dispose()}_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    elseif  ($diff -and $FontColor) {Write-Warning -Message "To match rows to set changed cells, you must specify -Key and it must match one of the included properties." }_x000D__x000A__x000D__x000A_    #if nothing was found write a message which will not be redirected_x000D__x000A_    if (-not $diff) {Write-Host "Comparison of $Referencefile::$worksheet1 and $Differencefile::$worksheet2 returned no results."  }_x000D__x000A__x000D__x000A_    if      ($Show)               {_x000D__x000A_        Start-Process -FilePath $Referencefile_x000D__x000A_        if  (-not $oneFile)  { Start-Process -FilePath $Differencefile }_x000D__x000A_        if  ($GridView)      { Write-Warning -Message "-GridView is ignored when -Show is specified" }_x000D__x000A_    }_x000D__x000A_    elseif  ($GridView -and $propList -contains $Key) {_x000D__x000A__x000D__x000A__x000D__x000A_             if ($IncludeEqual -and -not $ExcludeDifferent) {_x000D__x000A_                $GroupedRows = $diff | Group-Object -Property $Key_x000D__x000A_             }_x000D__x000A_             else { #to get the right now numbers on the grid we need to have all the rows._x000D__x000A_                $GroupedRows = Compare-Object -ReferenceObject $Sheet1 -DifferenceObject $Sheet2 -Property $propList -PassThru -IncludeEqual  |_x000D__x000A_                                        Group-Object -Property $Key_x000D__x000A_             }_x000D__x000A_             #Additions, deletions and unchanged rows will give a group of 1; changes will give a group of 2 ._x000D__x000A__x000D__x000A_             #If one sheet has extra rows we can get a single "==" result from compare, but with the row from the reference sheet_x000D__x000A_             #but the row in the other sheet might so we will look up the row number from the key field build a hash table for that_x000D__x000A_             $Sheet2 | ForEach-Object -Begin {$rowHash = @{} } -Process {$rowHash[$_.$Key] = $_._row }_x000D__x000A__x000D__x000A_             $ExpandedDiff = ForEach ($g in $GroupedRows)  {_x000D__x000A_                #we're going to create a custom object from a hash table. We want the fields to be ordered_x000D__x000A_                $hash = [ordered]@{}_x000D__x000A_                foreach ($result IN $g.Group) {_x000D__x000A_                    # if result indicates equal or "in Reference" set the reference side row. If we did that on a previous result keep it. Otherwise set to "blank"_x000D__x000A_                    if     ($result.sideindicator -ne "=&gt;")      {$hash["&lt;Row"] = $result._Row  }_x000D__x000A_                    elseif (-not $hash["&lt;Row"])                  {$hash["&lt;Row"] = "" }_x000D__x000A_                    #if we have already set the side, this is the second record, so set side to indicate "changed"_x000D__x000A_                    if     ($hash.Side) {$hash.side = "&lt;&gt;"} else {$hash["Side"] = $result.sideindicator}_x000D__x000A_                    #if result is "in reference" and we don't have a matching "in difference" (meaning a change) the lookup will be blank. Which we want._x000D__x000A_                    $hash["&gt;Row"] = $rowHash[$g.Name]_x000D__x000A_                    #position the key as the next field (only appears once)_x000D__x000A_                    $Hash[$Key]    = $g.Name_x000D__x000A_                    #For all the other fields we care about create &lt;=FieldName and/or =&gt;FieldName_x000D__x000A_                    foreach ($p in $propList.Where({$_ -ne $Key})) {_x000D__x000A_                        if  ($result.SideIndicator -eq "==")  {$hash[("=&gt;$P")] = $hash[("&lt;=$P")] =$result.$P}_x000D__x000A_                        else                                  {$hash[($result.SideIndicator+$P)] =$result.$P}_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                [Pscustomobject]$hash_x000D__x000A_             }_x000D__x000A__x000D__x000A_             #Sort by reference row number, and fill in any blanks in the difference-row column_x000D__x000A_             $ExpandedDiff = $ExpandedDiff | Sort-Object -Property "&lt;row"_x000D__x000A_             for ($i = 1; $i -lt $ExpandedDiff.Count; $i++) {if (-not $ExpandedDiff[$i]."&gt;row") {$ExpandedDiff[$i]."&gt;row" = $ExpandedDiff[$i-1]."&gt;row" } }_x000D__x000A_             #Sort by difference row number, and fill in any blanks in the reference-row column_x000D__x000A_             $ExpandedDiff = $ExpandedDiff | Sort-Object -Property "&gt;row"_x000D__x000A_             for ($i = 1; $i -lt $ExpandedDiff.Count; $i++) {if (-not $ExpandedDiff[$i]."&lt;row") {$ExpandedDiff[$i]."&lt;row" = $ExpandedDiff[$i-1]."&lt;row" } }_x000D__x000A__x000D__x000A_             #if we had to put the equal rows back, take them out; sort, make sure all the columns are present in row 1 so the grid puts them in, and output_x000D__x000A_             if ( $ExcludeDifferent) {$ExpandedDiff = $ExpandedDiff.where({$_.side -eq "=="}) | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             elseif ( $IncludeEqual) {$ExpandedDiff = $ExpandedDiff                           | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             else                    {$ExpandedDiff = $ExpandedDiff.where({$_.side -ne "=="}) | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             $ExpandedDiff | Update-FirstObjectProperties | Out-GridView -Title "Comparing $Referencefile::$worksheet1 (&lt;=) with $Differencefile::$worksheet2 (=&gt;)"_x000D__x000A_    }_x000D__x000A_    elseif  ($GridView     )  {Write-Warning -Message "To use -GridView you must specify -Key and it must match one of the included properties."  }_x000D__x000A_    elseif  (-not $PassThru)  {return ($diff | Select-Object -Property (@(@{n="_Side";e={$_.SideIndicator}},"_File" ,"_Sheet","_Row") + $propList))}_x000D__x000A_    if      (     $PassThru)  {return  $diff }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">True</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName)]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidUsingWriteHost', '', Justification="Write host used for sub-warning level message to operator which does not form output")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="False positives when initializing variable in begin block")]_x000D__x000A_    param(_x000D__x000A_        [parameter(Mandatory=$true,Position=0)]_x000D__x000A_        $Referencefile ,_x000D__x000A_        [parameter(Mandatory=$true,Position=1)]_x000D__x000A_        $Differencefile   ,_x000D__x000A_        $WorksheetName   = "Sheet1",_x000D__x000A_        $Property        = "*"    ,_x000D__x000A_        $ExcludeProperty ,_x000D__x000A_        [Parameter(ParameterSetName='B', Mandatory)]_x000D__x000A_        [String[]]$Headername,_x000D__x000A_        [Parameter(ParameterSetName='C', Mandatory)]_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [int]$Startrow = 1,_x000D__x000A_        $AllDataBackgroundColor,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        $TabColor,_x000D__x000A_        $Key             = "Name" ,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Show,_x000D__x000A_        [switch]$GridView,_x000D__x000A_        [Switch]$PassThru,_x000D__x000A_        [Switch]$IncludeEqual,_x000D__x000A_        [Switch]$ExcludeDifferent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    #if the filenames don't resolve, give up now._x000D__x000A_    try    { $oneFile = ((Resolve-Path -Path $Referencefile -ErrorAction Stop).path -eq (Resolve-Path -Path $Differencefile  -ErrorAction Stop).path)}_x000D__x000A_    catch  { Write-Warning -Message "Could not Resolve the filenames." ; return }_x000D__x000A__x000D__x000A_    #If we have one file , we must have two different worksheet names. If we have two files we can have a single string or two strings._x000D__x000A_    if     ($onefile -and ( ($WorksheetName.count -ne 2) -or $WorksheetName[0] -eq $WorksheetName[1] ) ) {_x000D__x000A_        Write-Warning -Message "If both the Reference and difference file are the same then worksheet name must provide 2 different names"_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A_    if     ($WorksheetName.count -eq 2)       {$worksheet1 = $WorksheetName[0] ;   $worksheet2 = $WorksheetName[1]}_x000D__x000A_    elseif ($WorksheetName -is [string])      {$worksheet1 = $worksheet2 = $WorksheetName}_x000D__x000A_    else   {Write-Warning -Message "You must provide either a single worksheet name or two names." ; return }_x000D__x000A__x000D__x000A_    $params= @{ ErrorAction = [System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_    foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_    try    {_x000D__x000A_        $sheet1 = Import-Excel -Path $Referencefile  -WorksheetName $worksheet1 @params_x000D__x000A_        $sheet2 = Import-Excel -Path $Differencefile -WorksheetName $worksheet2 @Params_x000D__x000A_    }_x000D__x000A_    catch  {Write-Warning -Message "Could not read the worksheet from $Referencefile and/or $Differencefile." ; return }_x000D__x000A__x000D__x000A_    #Get Column headings and create a hash table of Name to column letter._x000D__x000A_    $headings = $Sheet1[-1].psobject.Properties.name # This preserves the sequence - using Get-member would sort them alphabetically!_x000D__x000A_    $headings | ForEach-Object -Begin {$columns  = @{}  ; $i= 1 } -Process  {$Columns[$_] = [OfficeOpenXml.ExcelAddress]::GetAddress(1,($i ++)) -replace "\d","" }_x000D__x000A__x000D__x000A_    #Make a list of property headings using the Property (default "*") and ExcludeProperty parameters_x000D__x000A_    if ($Key -eq "Name" -and $NoHeader) {$Key  = "p1"}_x000D__x000A_    $propList = @()_x000D__x000A_    foreach ($p in $Property)           {$propList += ($headings.where({$_ -like    $p}) )}_x000D__x000A_    foreach ($p in $ExcludeProperty)    {$propList  =  $propList.where({$_ -notlike $p})  }_x000D__x000A_    if (($headings -contains $Key) -and ($propList -notcontains $Key)) {$propList += $Key}_x000D__x000A_    $propList = $propList | Select-Object -Unique_x000D__x000A_    if ($propList.Count -eq 0)  {Write-Warning -Message "No Columns are selected with -Property = '$Property' and -excludeProperty = '$ExcludeProperty'." ; return}_x000D__x000A__x000D__x000A_    #Add RowNumber, Sheetname and file name to every row_x000D__x000A_    $firstDataRow = $startRow + 1_x000D__x000A_    if ($Headername -or $NoHeader) {$firstDataRow -- }_x000D__x000A_    $i = $firstDataRow ; foreach ($row in $Sheet1) {Add-Member -InputObject $row -MemberType NoteProperty -Name "_Row"   -Value ($i ++)_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_Sheet" -Value  $worksheet1_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_File"  -Value  $Referencefile}_x000D__x000A_    $i = $firstDataRow ; foreach ($row in $Sheet2) {Add-Member -InputObject $row -MemberType NoteProperty -Name "_Row"   -Value ($i ++)_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_Sheet" -Value  $worksheet2_x000D__x000A_                                                    Add-Member -InputObject $row -MemberType NoteProperty -Name "_File"  -Value  $Differencefile}_x000D__x000A__x000D__x000A_    if ($ExcludeDifferent -and -not $IncludeEqual) {$IncludeEqual = $true}_x000D__x000A_    #Do the comparison and add file,sheet and row to the result - these are prefixed with "_" to show they are added the addition will fail if the sheet has these properties so split the operations_x000D__x000A_    [PSCustomObject[]]$diff = Compare-Object -ReferenceObject $Sheet1 -DifferenceObject $Sheet2 -Property $propList -PassThru -IncludeEqual:$IncludeEqual -ExcludeDifferent:$ExcludeDifferent  |_x000D__x000A_                Sort-Object -Property "_Row","File"_x000D__x000A__x000D__x000A_    #if BackgroundColor was specified, set it on extra or extra or changed rows_x000D__x000A_    if      ($diff -and $BackgroundColor) {_x000D__x000A_        #Differences may only exist in one file. So gather the changes for each file; open the file, update each impacted row in the shee, save the file_x000D__x000A_        $updates = $diff.where({$_.SideIndicator -ne "=="}) | Group-object -Property "_File"_x000D__x000A_        foreach   ($file in $updates) {_x000D__x000A_            try   {$xl  = Open-ExcelPackage -Path $file.name }_x000D__x000A_            catch {Write-warning -Message "Can't open $($file.Name) for writing." ; return}_x000D__x000A_            if  ($PSBoundParameters.ContainsKey("AllDataBackgroundColor")) {_x000D__x000A_                $file.Group._sheet | Sort-Object -Unique | ForEach-Object {_x000D__x000A_                    $ws =  $xl.Workbook.Worksheets[$_]_x000D__x000A_                    if ($headerName) {$range = "A" +  $startrow      + ":" + $ws.dimension.end.address}_x000D__x000A_                    else             {$range = "A" + ($startrow + 1) + ":" + $ws.dimension.end.address}_x000D__x000A_                    Set-ExcelRange -Worksheet $ws -BackgroundColor $AllDataBackgroundColor -Range $Range_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            foreach ($row in $file.group)  {_x000D__x000A_                $ws    = $xl.Workbook.Worksheets[$row._Sheet]_x000D__x000A_                $range = $ws.Dimension -replace "\d+",$row._row_x000D__x000A_                Set-ExcelRange -Worksheet $ws -Range $range -BackgroundColor $BackgroundColor_x000D__x000A_            }_x000D__x000A_            if  ($PSBoundParameters.ContainsKey("TabColor")) {_x000D__x000A_                if ($TabColor -is [string])         {$TabColor = [System.Drawing.Color]::$TabColor }_x000D__x000A_                foreach ($tab in ($file.group._sheet | Select-Object -Unique)) {_x000D__x000A_                    $xl.Workbook.Worksheets[$tab].TabColor = $TabColor_x000D__x000A_                 }_x000D__x000A_            }_x000D__x000A_            $xl.save()  ; $xl.Stream.Close() ; $xl.Dispose()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    #if font color was specified, set it on changed properties where the same key appears in both sheets._x000D__x000A_    if      ($diff -and $FontColor -and (($propList -contains $Key) -or ($Key -is [hashtable]))  ) {_x000D__x000A_        $updates = $diff.where({$_.SideIndicator -ne "=="})  | Group-object -Property $Key | Where-Object {$_.count -eq 2}_x000D__x000A_        if ($updates) {_x000D__x000A_            $XL1 = Open-ExcelPackage -path $Referencefile_x000D__x000A_            if ($oneFile ) {$xl2 = $xl1}_x000D__x000A_            else           {$xl2 = Open-ExcelPackage -path $Differencefile }_x000D__x000A_            foreach ($u in $updates) {_x000D__x000A_                 foreach ($p in $propList) {_x000D__x000A_                    if ($u.group[0]._file -eq $Referencefile) {_x000D__x000A_                        $ws1 =  $xl1.Workbook.Worksheets[$u.Group[0]._sheet]_x000D__x000A_                        $ws2 =  $xl2.Workbook.Worksheets[$u.Group[1]._sheet]_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $ws1 =  $xl2.Workbook.Worksheets[$u.Group[0]._sheet]_x000D__x000A_                        $ws2 =  $xl1.Workbook.Worksheets[$u.Group[1]._sheet]_x000D__x000A_                    }_x000D__x000A_                    if($u.Group[0].$p -ne $u.Group[1].$p ) {_x000D__x000A_                        Set-ExcelRange -Worksheet $ws1 -Range ($Columns[$p] + $u.Group[0]._Row) -FontColor $FontColor_x000D__x000A_                        Set-ExcelRange -Worksheet $ws2 -Range ($Columns[$p] + $u.Group[1]._Row) -FontColor $FontColor_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            $xl1.Save()                     ; $xl1.Stream.Close() ; $xl1.Dispose()_x000D__x000A_            if (-not $oneFile) {$xl2.Save() ; $xl2.Stream.Close() ; $xl2.Dispose()}_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    elseif  ($diff -and $FontColor) {Write-Warning -Message "To match rows to set changed cells, you must specify -Key and it must match one of the included properties." }_x000D__x000A__x000D__x000A_    #if nothing was found write a message which will not be redirected_x000D__x000A_    if (-not $diff) {Write-Host "Comparison of $Referencefile::$worksheet1 and $Differencefile::$worksheet2 returned no results."  }_x000D__x000A__x000D__x000A_    if      ($Show)               {_x000D__x000A_        Start-Process -FilePath $Referencefile_x000D__x000A_        if  (-not $oneFile)  { Start-Process -FilePath $Differencefile }_x000D__x000A_        if  ($GridView)      { Write-Warning -Message "-GridView is ignored when -Show is specified" }_x000D__x000A_    }_x000D__x000A_    elseif  ($GridView -and $propList -contains $Key) {_x000D__x000A__x000D__x000A__x000D__x000A_             if ($IncludeEqual -and -not $ExcludeDifferent) {_x000D__x000A_                $GroupedRows = $diff | Group-Object -Property $Key_x000D__x000A_             }_x000D__x000A_             else { #to get the right now numbers on the grid we need to have all the rows._x000D__x000A_                $GroupedRows = Compare-Object -ReferenceObject $Sheet1 -DifferenceObject $Sheet2 -Property $propList -PassThru -IncludeEqual  |_x000D__x000A_                                        Group-Object -Property $Key_x000D__x000A_             }_x000D__x000A_             #Additions, deletions and unchanged rows will give a group of 1; changes will give a group of 2 ._x000D__x000A__x000D__x000A_             #If one sheet has extra rows we can get a single "==" result from compare, but with the row from the reference sheet_x000D__x000A_             #but the row in the other sheet might so we will look up the row number from the key field build a hash table for that_x000D__x000A_             $Sheet2 | ForEach-Object -Begin {$rowHash = @{} } -Process {$rowHash[$_.$Key] = $_._row }_x000D__x000A__x000D__x000A_             $ExpandedDiff = ForEach ($g in $GroupedRows)  {_x000D__x000A_                #we're going to create a custom object from a hash table. We want the fields to be ordered_x000D__x000A_                $hash = [ordered]@{}_x000D__x000A_                foreach ($result IN $g.Group) {_x000D__x000A_                    # if result indicates equal or "in Reference" set the reference side row. If we did that on a previous result keep it. Otherwise set to "blank"_x000D__x000A_                    if     ($result.sideindicator -ne "=&gt;")      {$hash["&lt;Row"] = $result._Row  }_x000D__x000A_                    elseif (-not $hash["&lt;Row"])                  {$hash["&lt;Row"] = "" }_x000D__x000A_                    #if we have already set the side, this is the second record, so set side to indicate "changed"_x000D__x000A_                    if     ($hash.Side) {$hash.side = "&lt;&gt;"} else {$hash["Side"] = $result.sideindicator}_x000D__x000A_                    #if result is "in reference" and we don't have a matching "in difference" (meaning a change) the lookup will be blank. Which we want._x000D__x000A_                    $hash["&gt;Row"] = $rowHash[$g.Name]_x000D__x000A_                    #position the key as the next field (only appears once)_x000D__x000A_                    $Hash[$Key]    = $g.Name_x000D__x000A_                    #For all the other fields we care about create &lt;=FieldName and/or =&gt;FieldName_x000D__x000A_                    foreach ($p in $propList.Where({$_ -ne $Key})) {_x000D__x000A_                        if  ($result.SideIndicator -eq "==")  {$hash[("=&gt;$P")] = $hash[("&lt;=$P")] =$result.$P}_x000D__x000A_                        else                                  {$hash[($result.SideIndicator+$P)] =$result.$P}_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                [Pscustomobject]$hash_x000D__x000A_             }_x000D__x000A__x000D__x000A_             #Sort by reference row number, and fill in any blanks in the difference-row column_x000D__x000A_             $ExpandedDiff = $ExpandedDiff | Sort-Object -Property "&lt;row"_x000D__x000A_             for ($i = 1; $i -lt $ExpandedDiff.Count; $i++) {if (-not $ExpandedDiff[$i]."&gt;row") {$ExpandedDiff[$i]."&gt;row" = $ExpandedDiff[$i-1]."&gt;row" } }_x000D__x000A_             #Sort by difference row number, and fill in any blanks in the reference-row column_x000D__x000A_             $ExpandedDiff = $ExpandedDiff | Sort-Object -Property "&gt;row"_x000D__x000A_             for ($i = 1; $i -lt $ExpandedDiff.Count; $i++) {if (-not $ExpandedDiff[$i]."&lt;row") {$ExpandedDiff[$i]."&lt;row" = $ExpandedDiff[$i-1]."&lt;row" } }_x000D__x000A__x000D__x000A_             #if we had to put the equal rows back, take them out; sort, make sure all the columns are present in row 1 so the grid puts them in, and output_x000D__x000A_             if ( $ExcludeDifferent) {$ExpandedDiff = $ExpandedDiff.where({$_.side -eq "=="}) | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             elseif ( $IncludeEqual) {$ExpandedDiff = $ExpandedDiff                           | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             else                    {$ExpandedDiff = $ExpandedDiff.where({$_.side -ne "=="}) | Sort-Object -Property "&lt;row" ,"&gt;row"  }_x000D__x000A_             $ExpandedDiff | Update-FirstObjectProperties | Out-GridView -Title "Comparing $Referencefile::$worksheet1 (&lt;=) with $Differencefile::$worksheet2 (=&gt;)"_x000D__x000A_    }_x000D__x000A_    elseif  ($GridView     )  {Write-Warning -Message "To use -GridView you must specify -Key and it must match one of the included properties."  }_x000D__x000A_    elseif  (-not $PassThru)  {return ($diff | Select-Object -Property (@(@{n="_Side";e={$_.SideIndicator}},"_File" ,"_Sheet","_Row") + $propList))}_x000D__x000A_    if      (     $PassThru)  {return  $diff }_x000D__x000A_</S>
      <Obj N="Options" RefId="1088">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Compare</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1089">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Compare-Worksheet</S>
      <Obj N="CommandType" RefId="1090">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1091">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1092">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1093">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Referencefile</S>
            <Obj N="Value" RefId="1094">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Referencefile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1095">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Differencefile</S>
            <Obj N="Value" RefId="1096">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Differencefile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1097">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="1098">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1099">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Property</S>
            <Obj N="Value" RefId="1100">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Property</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1101">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="1102">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1103">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Headername</S>
            <Obj N="Value" RefId="1104">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Headername</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1105">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="1106">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1107">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Startrow</S>
            <Obj N="Value" RefId="1108">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Startrow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1109">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllDataBackgroundColor</S>
            <Obj N="Value" RefId="1110">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllDataBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1111">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="1112">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1113">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TabColor</S>
            <Obj N="Value" RefId="1114">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TabColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1115">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Key</S>
            <Obj N="Value" RefId="1116">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Key</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1117">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontColor</S>
            <Obj N="Value" RefId="1118">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1119">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="1120">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1121">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GridView</S>
            <Obj N="Value" RefId="1122">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GridView</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1123">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="1124">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1125">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeEqual</S>
            <Obj N="Value" RefId="1126">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeEqual</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1127">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeDifferent</S>
            <Obj N="Value" RefId="1128">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeDifferent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1129">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1130">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1131">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1132">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1133">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1134">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1135">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1136">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1137">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1138">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1139">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1140">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1141">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1142">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1143">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1144">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1145">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1146">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1147">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1148">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1149">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1150">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1151">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1152">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1153">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [-WorksheetName &lt;Object&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Startrow &lt;int&gt;] [-AllDataBackgroundColor &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;] [-FontColor &lt;Object&gt;] [-Show] [-GridView] [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">True</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="1154">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1155">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; -Headername &lt;string[]&gt; [-WorksheetName &lt;Object&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Startrow &lt;int&gt;] [-AllDataBackgroundColor &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;] [-FontColor &lt;Object&gt;] [-Show] [-GridView] [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">B</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1156">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1157">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; -NoHeader [-WorksheetName &lt;Object&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Startrow &lt;int&gt;] [-AllDataBackgroundColor &lt;Object&gt;] [-BackgroundColor &lt;Object&gt;] [-TabColor &lt;Object&gt;] [-Key &lt;Object&gt;] [-FontColor &lt;Object&gt;] [-Show] [-GridView] [-PassThru] [-IncludeEqual] [-ExcludeDifferent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">C</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1158">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Compare-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1159">
    <TNRef RefId="0" />
    <ToString>Context</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A_Any Mocks defined inside a Context are removed at the end of the Context scope,_x000D__x000A_as are any files or folders added to the TestDrive during the Context block's_x000D__x000A_execution. Any BeforeEach or AfterEach blocks defined inside a Context also only_x000D__x000A_apply to tests within that Context ._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the Context. This is a phrase describing a set of tests within a describe._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Context blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_Script that is executed. This may include setup specific to the context_x000D__x000A_and one or more It blocks that validate the expected outcomes._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    Context "when root does not exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Context "when root does exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $Foreach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($Fixture -eq $null) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A__x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($invokedInteractively) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        $invokedInteractively = $true_x000D__x000A_        Invoke-Interactively -CommandUsed 'Context' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Provides logical grouping of It blocks within a single Describe block._x000D__x000A_Any Mocks defined inside a Context are removed at the end of the Context scope,_x000D__x000A_as are any files or folders added to the TestDrive during the Context block's_x000D__x000A_execution. Any BeforeEach or AfterEach blocks defined inside a Context also only_x000D__x000A_apply to tests within that Context ._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the Context. This is a phrase describing a set of tests within a describe._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Context blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_Script that is executed. This may include setup specific to the context_x000D__x000A_and one or more It blocks that validate the expected outcomes._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    Context "when root does not exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Context "when root does exist" {_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_        It "..." {_x000D__x000A_            # ..._x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $Foreach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($Fixture -eq $null) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A__x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Context'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($invokedInteractively) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        $invokedInteractively = $true_x000D__x000A_        Invoke-Interactively -CommandUsed 'Context' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1160">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1161">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Context</S>
      <Obj N="CommandType" RefId="1162">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1163">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1164">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1165">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="1166">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1167">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Tag</S>
            <Obj N="Value" RefId="1168">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Tag</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1169">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Tags</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Fixture</S>
            <Obj N="Value" RefId="1170">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Fixture</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="1171">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Skip</S>
            <Obj N="Value" RefId="1172">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Skip</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1173">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Foreach</S>
            <Obj N="Value" RefId="1174">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Foreach</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1175">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1176">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1177">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1178">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1179">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1180">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1181">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1182">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1183">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1184">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1185">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1186">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1187">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1188">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1189">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1190">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1191">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1192">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1193">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1194">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1195">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1196">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1197">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1198">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1199">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Fixture] &lt;scriptblock&gt;] [-Tag &lt;string[]&gt;] [-Skip] [-Foreach &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1200">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Context</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Context</S>
    </MS>
  </Obj>
  <Obj RefId="1201">
    <TNRef RefId="0" />
    <ToString>Convert-ExcelRangeToImage</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [alias("Convert-XlRangeToImage")]_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory=$true)]_x000D__x000A_        $Path,_x000D__x000A_        $WorksheetName = "Sheet1" ,_x000D__x000A_        [parameter(Mandatory=$true)]_x000D__x000A_        $Range,_x000D__x000A_        $Destination = "$pwd\temp.png",_x000D__x000A_        [switch]$Show_x000D__x000A_    )_x000D__x000A_        $extension   = $Destination -replace '^.*\.(\w+)$' ,'$1'_x000D__x000A_        if ($extension -in @('JPEG','BMP','PNG'))  {_x000D__x000A_            $Format = [system.Drawing.Imaging.ImageFormat]$extension_x000D__x000A_        }       #if we don't recognise the extension OR if it is JPG with an E, use JPEG format_x000D__x000A_        else { $Format = [system.Drawing.Imaging.ImageFormat]::Jpeg}_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Starting Excel"_x000D__x000A_        $xlApp  = New-Object -ComObject "Excel.Application"_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Opening Workbook and copying data"_x000D__x000A_        $xlWbk  = $xlApp.Workbooks.Open($Path)_x000D__x000A_        $xlWbk.Worksheets($WorksheetName).Select()_x000D__x000A_        $null = $xlWbk.ActiveSheet.Range($Range).Select()_x000D__x000A_        $null = $xlApp.Selection.Copy()_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Saving copied data"_x000D__x000A_        # Get-Clipboard came in with PS5. Older versions can use [System.Windows.Clipboard] but it is ugly._x000D__x000A_        $image  = Get-Clipboard -Format Image_x000D__x000A_        $image.Save($Destination, $Format)_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Closing Excel"_x000D__x000A_        $null = $xlWbk.ActiveSheet.Range("a1").Select()_x000D__x000A_        $null = $xlApp.Selection.Copy()_x000D__x000A_        $xlApp.Quit()_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Completed_x000D__x000A_        if ($Show) {Start-Process -FilePath $Destination}_x000D__x000A_        else       {Get-Item      -Path     $Destination}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [alias("Convert-XlRangeToImage")]_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory=$true)]_x000D__x000A_        $Path,_x000D__x000A_        $WorksheetName = "Sheet1" ,_x000D__x000A_        [parameter(Mandatory=$true)]_x000D__x000A_        $Range,_x000D__x000A_        $Destination = "$pwd\temp.png",_x000D__x000A_        [switch]$Show_x000D__x000A_    )_x000D__x000A_        $extension   = $Destination -replace '^.*\.(\w+)$' ,'$1'_x000D__x000A_        if ($extension -in @('JPEG','BMP','PNG'))  {_x000D__x000A_            $Format = [system.Drawing.Imaging.ImageFormat]$extension_x000D__x000A_        }       #if we don't recognise the extension OR if it is JPG with an E, use JPEG format_x000D__x000A_        else { $Format = [system.Drawing.Imaging.ImageFormat]::Jpeg}_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Starting Excel"_x000D__x000A_        $xlApp  = New-Object -ComObject "Excel.Application"_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Opening Workbook and copying data"_x000D__x000A_        $xlWbk  = $xlApp.Workbooks.Open($Path)_x000D__x000A_        $xlWbk.Worksheets($WorksheetName).Select()_x000D__x000A_        $null = $xlWbk.ActiveSheet.Range($Range).Select()_x000D__x000A_        $null = $xlApp.Selection.Copy()_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Saving copied data"_x000D__x000A_        # Get-Clipboard came in with PS5. Older versions can use [System.Windows.Clipboard] but it is ugly._x000D__x000A_        $image  = Get-Clipboard -Format Image_x000D__x000A_        $image.Save($Destination, $Format)_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Status "Closing Excel"_x000D__x000A_        $null = $xlWbk.ActiveSheet.Range("a1").Select()_x000D__x000A_        $null = $xlApp.Selection.Copy()_x000D__x000A_        $xlApp.Quit()_x000D__x000A_        Write-Progress -Activity "Exporting $Range of $WorksheetName in $Path" -Completed_x000D__x000A_        if ($Show) {Start-Process -FilePath $Destination}_x000D__x000A_        else       {Get-Item      -Path     $Destination}_x000D__x000A_</S>
      <Obj N="Options" RefId="1202">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Convert</S>
      <S N="Noun">ExcelRangeToImage</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1203">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Convert-ExcelRangeToImage</S>
      <Obj N="CommandType" RefId="1204">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1205">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1206">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1207">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1208">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1209">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="1210">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1211">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="1212">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1213">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Destination</S>
            <Obj N="Value" RefId="1214">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Destination</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1215">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="1216">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1217">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1218">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1219">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1220">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1221">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1222">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1223">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1224">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1225">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1226">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1227">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1228">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1229">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1230">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1231">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1232">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1233">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1234">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1235">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1236">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1237">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1238">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1239">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1240">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1241">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [-Range] &lt;Object&gt; [[-Destination] &lt;Object&gt;] [-Show] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1242">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Convert-ExcelRangeToImage</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1243">
    <TNRef RefId="0" />
    <ToString>ConvertFrom-ExcelData</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [alias("Use-ExcelData")]_x000D__x000A_    param(_x000D__x000A_        [Alias("FullName")]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $true)]_x000D__x000A_        [ValidateScript( { Test-Path $_ -PathType Leaf })]_x000D__x000A_        $Path,_x000D__x000A_        [ScriptBlock]$ScriptBlock,_x000D__x000A_        [Alias("Sheet")]_x000D__x000A_        $WorksheetName = 1,_x000D__x000A_        [int]$HeaderRow = 1,_x000D__x000A_        [string[]]$Header,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [switch]$DataOnly_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $null = $PSBoundParameters.Remove('ScriptBlock')_x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A__x000D__x000A_    $data = Import-Excel @params_x000D__x000A__x000D__x000A_    $PropertyNames = $data[0].psobject.Properties |_x000D__x000A_        Where-Object {$_.membertype -match 'property'} |_x000D__x000A_        Select-Object -ExpandProperty name_x000D__x000A__x000D__x000A_    foreach ($record in $data) {_x000D__x000A_        &amp; $ScriptBlock $PropertyNames $record_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [alias("Use-ExcelData")]_x000D__x000A_    param(_x000D__x000A_        [Alias("FullName")]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $true)]_x000D__x000A_        [ValidateScript( { Test-Path $_ -PathType Leaf })]_x000D__x000A_        $Path,_x000D__x000A_        [ScriptBlock]$ScriptBlock,_x000D__x000A_        [Alias("Sheet")]_x000D__x000A_        $WorksheetName = 1,_x000D__x000A_        [int]$HeaderRow = 1,_x000D__x000A_        [string[]]$Header,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [switch]$DataOnly_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $null = $PSBoundParameters.Remove('ScriptBlock')_x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A__x000D__x000A_    $data = Import-Excel @params_x000D__x000A__x000D__x000A_    $PropertyNames = $data[0].psobject.Properties |_x000D__x000A_        Where-Object {$_.membertype -match 'property'} |_x000D__x000A_        Select-Object -ExpandProperty name_x000D__x000A__x000D__x000A_    foreach ($record in $data) {_x000D__x000A_        &amp; $ScriptBlock $PropertyNames $record_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1244">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertFrom</S>
      <S N="Noun">ExcelData</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1245">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertFrom-ExcelData</S>
      <Obj N="CommandType" RefId="1246">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1247">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1248">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1249">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1250">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1251">
                  <TNRef RefId="25" />
                  <LST>
                    <S>FullName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ScriptBlock</S>
            <Obj N="Value" RefId="1252">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ScriptBlock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="1253">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="1254">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1255">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Sheet</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HeaderRow</S>
            <Obj N="Value" RefId="1256">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HeaderRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1257">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Header</S>
            <Obj N="Value" RefId="1258">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Header</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1259">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="1260">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1261">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataOnly</S>
            <Obj N="Value" RefId="1262">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataOnly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1263">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1264">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1265">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1266">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1267">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1268">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1269">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1270">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1271">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1272">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1273">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1274">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1275">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1276">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1277">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1278">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1279">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1280">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1281">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1282">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1283">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1284">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1285">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1286">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1287">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [[-ScriptBlock] &lt;scriptblock&gt;] [[-WorksheetName] &lt;Object&gt;] [[-HeaderRow] &lt;int&gt;] [[-Header] &lt;string[]&gt;] [-NoHeader] [-DataOnly] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1288">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertFrom-ExcelData</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1289">
    <TNRef RefId="0" />
    <ToString>ConvertFrom-ExcelSheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Export-ExcelSheet")]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]$Path,_x000D__x000A_        [String]$OutputPath = '.\',_x000D__x000A_        [String]$SheetName = "*",_x000D__x000A_        [ValidateSet('ASCII', 'BigEndianUniCode','Default','OEM','UniCode','UTF32','UTF7','UTF8')]_x000D__x000A_        [string]$Encoding = 'UTF8',_x000D__x000A_        [ValidateSet('.txt', '.log','.csv')]_x000D__x000A_        [string]$Extension = '.csv',_x000D__x000A_        [ValidateSet(';', ',')]_x000D__x000A_        [string]$Delimiter ,_x000D__x000A_        $Property = "*",_x000D__x000A_        $ExcludeProperty = @(),_x000D__x000A_        [switch]$Append,_x000D__x000A_        [string[]]$AsText = @(),_x000D__x000A_        [string[]]$AsDate = @()_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Path = (Resolve-Path $Path).Path_x000D__x000A_    $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path_x000D__x000A_    $workbook = $xl.Workbook_x000D__x000A__x000D__x000A_    $targetSheets = $workbook.Worksheets | Where-Object {$_.Name -Like $SheetName}_x000D__x000A__x000D__x000A_    $csvParams = @{NoTypeInformation = $true} + $PSBoundParameters_x000D__x000A_    foreach ($p in 'OutputPath', 'SheetName', 'Extension', 'Property','ExcludeProperty', 'AsText','AsDate') {_x000D__x000A_        $csvParams.Remove($p)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Foreach ($sheet in $targetSheets) {_x000D__x000A_        Write-Verbose "Exporting sheet: $($sheet.Name)"_x000D__x000A__x000D__x000A_        $csvParams.Path = "$OutputPath\$($Sheet.Name)$Extension"_x000D__x000A__x000D__x000A_        Import-Excel -ExcelPackage $xl -Sheet $($sheet.Name) -AsText:$AsText -AsDate:$AsDate |_x000D__x000A_            Select-Object -Property $Property | Export-Csv @csvparams_x000D__x000A_     }_x000D__x000A__x000D__x000A_    $xl.Dispose()_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Export-ExcelSheet")]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]$Path,_x000D__x000A_        [String]$OutputPath = '.\',_x000D__x000A_        [String]$SheetName = "*",_x000D__x000A_        [ValidateSet('ASCII', 'BigEndianUniCode','Default','OEM','UniCode','UTF32','UTF7','UTF8')]_x000D__x000A_        [string]$Encoding = 'UTF8',_x000D__x000A_        [ValidateSet('.txt', '.log','.csv')]_x000D__x000A_        [string]$Extension = '.csv',_x000D__x000A_        [ValidateSet(';', ',')]_x000D__x000A_        [string]$Delimiter ,_x000D__x000A_        $Property = "*",_x000D__x000A_        $ExcludeProperty = @(),_x000D__x000A_        [switch]$Append,_x000D__x000A_        [string[]]$AsText = @(),_x000D__x000A_        [string[]]$AsDate = @()_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Path = (Resolve-Path $Path).Path_x000D__x000A_    $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path_x000D__x000A_    $workbook = $xl.Workbook_x000D__x000A__x000D__x000A_    $targetSheets = $workbook.Worksheets | Where-Object {$_.Name -Like $SheetName}_x000D__x000A__x000D__x000A_    $csvParams = @{NoTypeInformation = $true} + $PSBoundParameters_x000D__x000A_    foreach ($p in 'OutputPath', 'SheetName', 'Extension', 'Property','ExcludeProperty', 'AsText','AsDate') {_x000D__x000A_        $csvParams.Remove($p)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Foreach ($sheet in $targetSheets) {_x000D__x000A_        Write-Verbose "Exporting sheet: $($sheet.Name)"_x000D__x000A__x000D__x000A_        $csvParams.Path = "$OutputPath\$($Sheet.Name)$Extension"_x000D__x000A__x000D__x000A_        Import-Excel -ExcelPackage $xl -Sheet $($sheet.Name) -AsText:$AsText -AsDate:$AsDate |_x000D__x000A_            Select-Object -Property $Property | Export-Csv @csvparams_x000D__x000A_     }_x000D__x000A__x000D__x000A_    $xl.Dispose()_x000D__x000A_</S>
      <Obj N="Options" RefId="1290">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertFrom</S>
      <S N="Noun">ExcelSheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1291">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertFrom-ExcelSheet</S>
      <Obj N="CommandType" RefId="1292">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1293">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1294">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1295">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1296">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1297">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputPath</S>
            <Obj N="Value" RefId="1298">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputPath</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1299">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SheetName</S>
            <Obj N="Value" RefId="1300">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1301">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Encoding</S>
            <Obj N="Value" RefId="1302">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Encoding</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1303">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Extension</S>
            <Obj N="Value" RefId="1304">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extension</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1305">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Delimiter</S>
            <Obj N="Value" RefId="1306">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Delimiter</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1307">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Property</S>
            <Obj N="Value" RefId="1308">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Property</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1309">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="1310">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1311">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Append</S>
            <Obj N="Value" RefId="1312">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Append</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1313">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsText</S>
            <Obj N="Value" RefId="1314">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsText</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1315">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsDate</S>
            <Obj N="Value" RefId="1316">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsDate</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1317">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1318">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1319">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1320">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1321">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1322">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1323">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1324">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1325">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1326">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1327">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1328">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1329">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1330">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1331">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1332">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1333">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1334">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1335">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1336">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1337">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1338">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1339">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1340">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1341">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string&gt; [[-OutputPath] &lt;string&gt;] [[-SheetName] &lt;string&gt;] [[-Encoding] &lt;string&gt;] [[-Extension] &lt;string&gt;] [[-Delimiter] &lt;string&gt;] [[-Property] &lt;Object&gt;] [[-ExcludeProperty] &lt;Object&gt;] [[-AsText] &lt;string[]&gt;] [[-AsDate] &lt;string[]&gt;] [-Append] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1342">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertFrom-ExcelSheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="1343">
    <TNRef RefId="0" />
    <ToString>ConvertFrom-ExcelToSQLInsert</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $TableName,_x000D__x000A_        [Alias("FullName")]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $true)]_x000D__x000A_        [ValidateScript( { Test-Path $_ -PathType Leaf })]_x000D__x000A_        $Path,_x000D__x000A_        [Alias("Sheet")]_x000D__x000A_        $WorksheetName = 1,_x000D__x000A_        [Alias('HeaderRow', 'TopRow')]_x000D__x000A_        [ValidateRange(1, 9999)]_x000D__x000A_        [Int]$StartRow,_x000D__x000A_        [string[]]$Header,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [switch]$DataOnly,_x000D__x000A_        [switch]$ConvertEmptyStringsToNull,_x000D__x000A_        [switch]$UseMsSqlSyntax_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $null = $PSBoundParameters.Remove('TableName')_x000D__x000A_    $null = $PSBoundParameters.Remove('ConvertEmptyStringsToNull')_x000D__x000A_    $null = $PSBoundParameters.Remove('UseMsSqlSyntax')_x000D__x000A__x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A__x000D__x000A_    ConvertFrom-ExcelData @params {_x000D__x000A_        param($propertyNames, $record)_x000D__x000A__x000D__x000A_        $ColumnNames = "'" + ($PropertyNames -join "', '") + "'"_x000D__x000A_        if($UseMsSqlSyntax) {_x000D__x000A_            $ColumnNames = "[" + ($PropertyNames -join "], [") + "]"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $values = foreach ($propertyName in $PropertyNames) {_x000D__x000A_            if ($ConvertEmptyStringsToNull.IsPresent -and [string]::IsNullOrEmpty($record.$propertyName)) {_x000D__x000A_                'NULL'_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "'" + $record.$propertyName + "'"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $targetValues = ($values -join ", ")_x000D__x000A__x000D__x000A_        "INSERT INTO {0} ({1}) Values({2});" -f $TableName, $ColumnNames, $targetValues_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $TableName,_x000D__x000A_        [Alias("FullName")]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName = $true, ValueFromPipeline = $true, Mandatory = $true)]_x000D__x000A_        [ValidateScript( { Test-Path $_ -PathType Leaf })]_x000D__x000A_        $Path,_x000D__x000A_        [Alias("Sheet")]_x000D__x000A_        $WorksheetName = 1,_x000D__x000A_        [Alias('HeaderRow', 'TopRow')]_x000D__x000A_        [ValidateRange(1, 9999)]_x000D__x000A_        [Int]$StartRow,_x000D__x000A_        [string[]]$Header,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [switch]$DataOnly,_x000D__x000A_        [switch]$ConvertEmptyStringsToNull,_x000D__x000A_        [switch]$UseMsSqlSyntax_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $null = $PSBoundParameters.Remove('TableName')_x000D__x000A_    $null = $PSBoundParameters.Remove('ConvertEmptyStringsToNull')_x000D__x000A_    $null = $PSBoundParameters.Remove('UseMsSqlSyntax')_x000D__x000A__x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A__x000D__x000A_    ConvertFrom-ExcelData @params {_x000D__x000A_        param($propertyNames, $record)_x000D__x000A__x000D__x000A_        $ColumnNames = "'" + ($PropertyNames -join "', '") + "'"_x000D__x000A_        if($UseMsSqlSyntax) {_x000D__x000A_            $ColumnNames = "[" + ($PropertyNames -join "], [") + "]"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $values = foreach ($propertyName in $PropertyNames) {_x000D__x000A_            if ($ConvertEmptyStringsToNull.IsPresent -and [string]::IsNullOrEmpty($record.$propertyName)) {_x000D__x000A_                'NULL'_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                "'" + $record.$propertyName + "'"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $targetValues = ($values -join ", ")_x000D__x000A__x000D__x000A_        "INSERT INTO {0} ({1}) Values({2});" -f $TableName, $ColumnNames, $targetValues_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1344">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertFrom</S>
      <S N="Noun">ExcelToSQLInsert</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1345">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertFrom-ExcelToSQLInsert</S>
      <Obj N="CommandType" RefId="1346">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1347">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1348">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1349">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">TableName</S>
            <Obj N="Value" RefId="1350">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1351">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1352">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1353">
                  <TNRef RefId="25" />
                  <LST>
                    <S>FullName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="1354">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1355">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Sheet</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartRow</S>
            <Obj N="Value" RefId="1356">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1357">
                  <TNRef RefId="25" />
                  <LST>
                    <S>HeaderRow</S>
                    <S>TopRow</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Header</S>
            <Obj N="Value" RefId="1358">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Header</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1359">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="1360">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1361">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataOnly</S>
            <Obj N="Value" RefId="1362">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataOnly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1363">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConvertEmptyStringsToNull</S>
            <Obj N="Value" RefId="1364">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConvertEmptyStringsToNull</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1365">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseMsSqlSyntax</S>
            <Obj N="Value" RefId="1366">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseMsSqlSyntax</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1367">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1368">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1369">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1370">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1371">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1372">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1373">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1374">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1375">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1376">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1377">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1378">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1379">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1380">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1381">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1382">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1383">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1384">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1385">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1386">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1387">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1388">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1389">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1390">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1391">
            <TNRef RefId="8" />
            <ToString>[-TableName] &lt;Object&gt; [-Path] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [[-StartRow] &lt;int&gt;] [[-Header] &lt;string[]&gt;] [-NoHeader] [-DataOnly] [-ConvertEmptyStringsToNull] [-UseMsSqlSyntax] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1392">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertFrom-ExcelToSQLInsert</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1393">
    <TNRef RefId="0" />
    <ToString>ConvertFrom-ScriptExtent</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFileRange, Microsoft.PowerShell.EditorServices],    ParameterSetName='BufferRange')]_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices], ParameterSetName='BufferPosition')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent[]]_x000D__x000A_        $Extent,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferRange')]_x000D__x000A_        [switch]_x000D__x000A_        $BufferRange,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $BufferPosition,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $Start,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $End_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        foreach ($aExtent in $Extent) {_x000D__x000A_            switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_                BufferRange {_x000D__x000A_                    # yield_x000D__x000A_                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                        $aExtent.StartLineNumber,_x000D__x000A_                        $aExtent.StartColumnNumber,_x000D__x000A_                        $aExtent.EndLineNumber,_x000D__x000A_                        $aExtent.EndColumnNumber)_x000D__x000A_                }_x000D__x000A_                BufferPosition {_x000D__x000A_                    if ($End) {_x000D__x000A_                        $line   = $aExtent.EndLineNumber_x000D__x000A_                        $column = $aExtent.EndLineNumber_x000D__x000A_                    } else {_x000D__x000A_                        $line   = $aExtent.StartLineNumber_x000D__x000A_                        $column = $aExtent.StartLineNumber_x000D__x000A_                    }_x000D__x000A_                    # yield_x000D__x000A_                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                        $line,_x000D__x000A_                        $column)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFileRange, Microsoft.PowerShell.EditorServices],    ParameterSetName='BufferRange')]_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices], ParameterSetName='BufferPosition')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent[]]_x000D__x000A_        $Extent,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferRange')]_x000D__x000A_        [switch]_x000D__x000A_        $BufferRange,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $BufferPosition,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $Start,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='BufferPosition')]_x000D__x000A_        [switch]_x000D__x000A_        $End_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        foreach ($aExtent in $Extent) {_x000D__x000A_            switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_                BufferRange {_x000D__x000A_                    # yield_x000D__x000A_                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                        $aExtent.StartLineNumber,_x000D__x000A_                        $aExtent.StartColumnNumber,_x000D__x000A_                        $aExtent.EndLineNumber,_x000D__x000A_                        $aExtent.EndColumnNumber)_x000D__x000A_                }_x000D__x000A_                BufferPosition {_x000D__x000A_                    if ($End) {_x000D__x000A_                        $line   = $aExtent.EndLineNumber_x000D__x000A_                        $column = $aExtent.EndLineNumber_x000D__x000A_                    } else {_x000D__x000A_                        $line   = $aExtent.StartLineNumber_x000D__x000A_                        $column = $aExtent.StartLineNumber_x000D__x000A_                    }_x000D__x000A_                    # yield_x000D__x000A_                    [Microsoft.PowerShell.EditorServices.Extensions.FileRange, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                        $line,_x000D__x000A_                        $column)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1394">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertFrom</S>
      <S N="Noun">ScriptExtent</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1395">
        <TNRef RefId="2" />
        <LST>
          <S>Microsoft.PowerShell.EditorServices.Extensions.IFileRange</S>
          <S>Microsoft.PowerShell.EditorServices.Extensions.IFilePosition</S>
        </LST>
      </Obj>
      <S N="Name">ConvertFrom-ScriptExtent</S>
      <Obj N="CommandType" RefId="1396">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="1397">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="1398">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1399">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="1400">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent[]</S>
                <Obj N="Aliases" RefId="1401">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BufferRange</S>
            <Obj N="Value" RefId="1402">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BufferRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1403">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BufferPosition</S>
            <Obj N="Value" RefId="1404">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BufferPosition</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1405">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Start</S>
            <Obj N="Value" RefId="1406">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Start</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1407">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">End</S>
            <Obj N="Value" RefId="1408">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">End</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1409">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1410">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1411">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1412">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1413">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1414">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1415">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1416">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1417">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1418">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1419">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1420">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1421">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1422">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1423">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1424">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1425">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1426">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1427">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1428">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1429">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1430">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1431">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1432">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1433">
            <TNRef RefId="8" />
            <ToString>-Extent &lt;IScriptExtent[]&gt; [-BufferRange] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">BufferRange</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1434">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1435">
            <TNRef RefId="8" />
            <ToString>-Extent &lt;IScriptExtent[]&gt; [-BufferPosition] [-Start] [-End] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">BufferPosition</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1436">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertFrom-ScriptExtent</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/ConvertFrom-ScriptExtent.md</S>
    </MS>
  </Obj>
  <Obj RefId="1437">
    <TNRef RefId="0" />
    <ToString>ConvertTo-ExcelXlsx</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline)]_x000D__x000A_        [string]$Path,_x000D__x000A_        [parameter(Mandatory = $false)]_x000D__x000A_        [switch]$Force_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-Not ($Path | Test-Path) ) {_x000D__x000A_            throw "File not found"_x000D__x000A_        }_x000D__x000A_        if (-Not ($Path | Test-Path -PathType Leaf) ) {_x000D__x000A_            throw "Folder paths are not allowed"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $xlFixedFormat = 51 #Constant for XLSX Workbook_x000D__x000A_        $xlsFile = Get-Item -Path $Path_x000D__x000A_        $xlsxPath = "{0}x" -f $xlsFile.FullName_x000D__x000A__x000D__x000A_        if ($xlsFile.Extension -ne ".xls") {_x000D__x000A_            throw "Expected .xls extension"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (Test-Path -Path $xlsxPath) {_x000D__x000A_            if ($Force) {_x000D__x000A_                try {_x000D__x000A_                    Remove-Item $xlsxPath -Force_x000D__x000A_                }_x000D__x000A_                catch {_x000D__x000A_                    throw "{0} already exists and cannot be removed. The file may be locked by another application." -f $xlsxPath_x000D__x000A_                }_x000D__x000A_                Write-Verbose $("Removed {0}" -f $xlsxPath)_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                throw "{0} already exists!" -f $xlsxPath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            $Excel = New-Object -ComObject "Excel.Application"_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            throw "Could not create Excel.Application ComObject. Please verify that Excel is installed."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Excel.Visible = $false_x000D__x000A_        $null = $Excel.Workbooks.Open($xlsFile.FullName)_x000D__x000A_        $Excel.ActiveWorkbook.SaveAs($xlsxPath, $xlFixedFormat)_x000D__x000A_        $Excel.ActiveWorkbook.Close()_x000D__x000A_        $Excel.Quit()_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param_x000D__x000A_    (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline)]_x000D__x000A_        [string]$Path,_x000D__x000A_        [parameter(Mandatory = $false)]_x000D__x000A_        [switch]$Force_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-Not ($Path | Test-Path) ) {_x000D__x000A_            throw "File not found"_x000D__x000A_        }_x000D__x000A_        if (-Not ($Path | Test-Path -PathType Leaf) ) {_x000D__x000A_            throw "Folder paths are not allowed"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $xlFixedFormat = 51 #Constant for XLSX Workbook_x000D__x000A_        $xlsFile = Get-Item -Path $Path_x000D__x000A_        $xlsxPath = "{0}x" -f $xlsFile.FullName_x000D__x000A__x000D__x000A_        if ($xlsFile.Extension -ne ".xls") {_x000D__x000A_            throw "Expected .xls extension"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (Test-Path -Path $xlsxPath) {_x000D__x000A_            if ($Force) {_x000D__x000A_                try {_x000D__x000A_                    Remove-Item $xlsxPath -Force_x000D__x000A_                }_x000D__x000A_                catch {_x000D__x000A_                    throw "{0} already exists and cannot be removed. The file may be locked by another application." -f $xlsxPath_x000D__x000A_                }_x000D__x000A_                Write-Verbose $("Removed {0}" -f $xlsxPath)_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                throw "{0} already exists!" -f $xlsxPath_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            $Excel = New-Object -ComObject "Excel.Application"_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            throw "Could not create Excel.Application ComObject. Please verify that Excel is installed."_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $Excel.Visible = $false_x000D__x000A_        $null = $Excel.Workbooks.Open($xlsFile.FullName)_x000D__x000A_        $Excel.ActiveWorkbook.SaveAs($xlsxPath, $xlFixedFormat)_x000D__x000A_        $Excel.ActiveWorkbook.Close()_x000D__x000A_        $Excel.Quit()_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1438">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertTo</S>
      <S N="Noun">ExcelXlsx</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1439">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertTo-ExcelXlsx</S>
      <Obj N="CommandType" RefId="1440">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1441">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1442">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1443">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1444">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1445">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Force</S>
            <Obj N="Value" RefId="1446">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Force</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1447">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1448">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1449">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1450">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1451">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1452">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1453">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1454">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1455">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1456">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1457">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1458">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1459">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1460">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1461">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1462">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1463">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1464">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1465">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1466">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1467">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1468">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1469">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1470">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1471">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string&gt; [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1472">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertTo-ExcelXlsx</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1473">
    <TNRef RefId="0" />
    <ToString>ConvertTo-JUnitReport</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an JUnit-compatible XML report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-JUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an JUnit-compatible XML report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-JUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an JUnit 4-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-JUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1474">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertTo</S>
      <S N="Noun">JUnitReport</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1475">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertTo-JUnitReport</S>
      <Obj N="CommandType" RefId="1476">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1477">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1478">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1479">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Result</S>
            <Obj N="Value" RefId="1480">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Result</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1481">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsString</S>
            <Obj N="Value" RefId="1482">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsString</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1483">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1484">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1485">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1486">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1487">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1488">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1489">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1490">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1491">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1492">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1493">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1494">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1495">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1496">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1497">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1498">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1499">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1500">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1501">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1502">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1503">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1504">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1505">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1506">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1507">
            <TNRef RefId="8" />
            <ToString>[-Result] &lt;Object&gt; [-AsString] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1508">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertTo-JUnitReport</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/ConvertTo-JUnitReport</S>
    </MS>
  </Obj>
  <Obj RefId="1509">
    <TNRef RefId="0" />
    <ToString>ConvertTo-NUnitReport</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an NUnit 2.5-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-NUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester result-object to an NUnit 2.5-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This objects can then be converted to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    The function can convert to both XML-object or a string containing the XML._x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER AsString_x000D__x000A_    Returns the XML-report as a string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The report is returned as an XML-object._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | ConvertTo-NUnitReport -AsString_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    converts it to an NUnit 2.5-compatible XML-report. The returned object is a string._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A_        [Switch] $AsString_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $settings = [Xml.XmlWriterSettings] @{_x000D__x000A_        Indent              = $true_x000D__x000A_        NewLineOnAttributes = $false_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $stringWriter = $null_x000D__x000A_    $xmlWriter = $null_x000D__x000A_    try {_x000D__x000A_        $stringWriter = &amp; $SafeCommands["New-Object"] IO.StringWriter_x000D__x000A_        $xmlWriter = [Xml.XmlWriter]::Create($stringWriter, $settings)_x000D__x000A__x000D__x000A_        Write-NUnitReport -XmlWriter $xmlWriter -Result $Result_x000D__x000A__x000D__x000A_        $xmlWriter.Flush()_x000D__x000A_        $stringWriter.Flush()_x000D__x000A_    }_x000D__x000A_    finally {_x000D__x000A_        $xmlWriter.Close()_x000D__x000A_        if (-not $AsString) {_x000D__x000A_            [xml] $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $stringWriter.ToString()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1510">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertTo</S>
      <S N="Noun">NUnitReport</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1511">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertTo-NUnitReport</S>
      <Obj N="CommandType" RefId="1512">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1513">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1514">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1515">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Result</S>
            <Obj N="Value" RefId="1516">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Result</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1517">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsString</S>
            <Obj N="Value" RefId="1518">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsString</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1519">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1520">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1521">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1522">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1523">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1524">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1525">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1526">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1527">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1528">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1529">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1530">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1531">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1532">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1533">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1534">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1535">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1536">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1537">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1538">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1539">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1540">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1541">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1542">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1543">
            <TNRef RefId="8" />
            <ToString>[-Result] &lt;Object&gt; [-AsString] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1544">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertTo-NUnitReport</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/ConvertTo-NUnitReport</S>
    </MS>
  </Obj>
  <Obj RefId="1545">
    <TNRef RefId="0" />
    <ToString>ConvertTo-Pester4Result</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester 5 result-object to an Pester 4-compatible object_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 uses a new format for it's result-object compared to previous_x000D__x000A_    versions of Pester. This function is provided as a way to convert the_x000D__x000A_    result-object into an object using the previous format. This can be_x000D__x000A_    useful as a temporary measure to easier migrate to Pester 5 without_x000D__x000A_    having to redesign compelx CI/CD-pipelines._x000D__x000A__x000D__x000A_    .PARAMETER PesterResult_x000D__x000A_    Result object from a Pester 5-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $pester5Result = Invoke-Pester -Passthru_x000D__x000A_    $pester4Result = $pester5Result | ConvertTo-Pester4Result_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve a result-object_x000D__x000A_    in the Pester 5 format and converts it to a new Pester 4-compatible result-object._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-Pester4Result_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $PesterResult_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $legacyResult = [PSCustomObject] @{_x000D__x000A_            Version = 4.99.0_x000D__x000A_            TagFilter = $null_x000D__x000A_            ExcludeTagFilter = $null_x000D__x000A_            TestNameFilter = $null_x000D__x000A_            ScriptBlockFilter = $null_x000D__x000A_            TotalCount = 0_x000D__x000A_            PassedCount = 0_x000D__x000A_            FailedCount = 0_x000D__x000A_            SkippedCount = 0_x000D__x000A_            PendingCount = 0_x000D__x000A_            InconclusiveCount = 0_x000D__x000A_            Time = [TimeSpan]::Zero_x000D__x000A_            TestResult = [System.Collections.Generic.List[object]]@()_x000D__x000A_        }_x000D__x000A_        $filter = $PesterResult.Configuration.Filter_x000D__x000A_        $legacyResult.TagFilter = if (0 -ne $filter.Tag.Value.Count) { $filter.Tag.Value }_x000D__x000A_        $legacyResult.ExcludeTagFilter = if (0 -ne $filter.ExcludeTag.Value.Count) { $filter.ExcludeTag.Value }_x000D__x000A_        $legacyResult.TestNameFilter = if (0 -ne $filter.TestNameFilter.Value.Count) { $filter.TestNameFilter.Value }_x000D__x000A_        $legacyResult.ScriptBlockFilter = if (0 -ne $filter.ScriptBlockFilter.Value.Count) { $filter.ScriptBlockFilter.Value }_x000D__x000A__x000D__x000A_        $sb = {_x000D__x000A_            param($test)_x000D__x000A__x000D__x000A_            if ("NotRun" -eq $test.Result) {_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $result = [PSCustomObject] @{_x000D__x000A_                Passed = "Passed" -eq $test.Result_x000D__x000A_                Result = $test.Result_x000D__x000A_                Time = $test.Duration_x000D__x000A_                Name = $test.Name_x000D__x000A__x000D__x000A_                # in the legacy result the top block is considered to be a Describe and any blocks inside of it are_x000D__x000A_                # considered to be Context and joined by '\'_x000D__x000A_                Describe = $test.Path[0]_x000D__x000A_                Context = $(if ($test.Path.Count -gt 2) { $test.Path[1..($test.Path.Count-2)] -join '\'})_x000D__x000A__x000D__x000A_                Show = $PesterResult.Configuration.Output.Verbosity.Value_x000D__x000A_                Parameters = $test.Data_x000D__x000A_                ParameterizedSuiteName = $test.DisplayName_x000D__x000A__x000D__x000A_                FailureMessage = $(if (any $test.ErrorRecord -and $null -ne $test.ErrorRecord[-1].Exception) { $test.ErrorRecord[-1].DisplayErrorMessage })_x000D__x000A_                ErrorRecord = $(if (any $test.ErrorRecord) { $test.ErrorRecord[-1] })_x000D__x000A_                StackTrace = $(if (any $test.ErrorRecord) { $test.ErrorRecord[1].DisplayStackTrace })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $null = $legacyResult.TestResult.Add($result)_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A_        Fold-Run $PesterResult -OnTest $sb -OnBlock {_x000D__x000A_            param($b)_x000D__x000A__x000D__x000A_            if (0 -ne $b.ErrorRecord.Count) {_x000D__x000A_                &amp; $sb $b_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # the counts here include failed blocks as tests, that's we don't use_x000D__x000A_        # the normal properties on the reslt to count_x000D__x000A__x000D__x000A_        foreach ($r in $legacyResult.TestResult) {_x000D__x000A_            switch ($r.Result) {_x000D__x000A_                "Passed" {_x000D__x000A_                    $legacyResult.PassedCount++_x000D__x000A_                }_x000D__x000A_                "Failed" {_x000D__x000A_                    $legacyResult.FailedCount++_x000D__x000A_                }_x000D__x000A_                "Skipped" {_x000D__x000A_                    $legacyResult.SkippedCount++_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $legacyResult.TotalCount = $legacyResult.TestResult.Count_x000D__x000A_        $legacyResult.PendingCount = 0_x000D__x000A_        $legacyResult.InconclusiveCount = 0_x000D__x000A_        $legacyResult.Time = $PesterResult.Duration_x000D__x000A__x000D__x000A_        $legacyResult_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Converts a Pester 5 result-object to an Pester 4-compatible object_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 uses a new format for it's result-object compared to previous_x000D__x000A_    versions of Pester. This function is provided as a way to convert the_x000D__x000A_    result-object into an object using the previous format. This can be_x000D__x000A_    useful as a temporary measure to easier migrate to Pester 5 without_x000D__x000A_    having to redesign compelx CI/CD-pipelines._x000D__x000A__x000D__x000A_    .PARAMETER PesterResult_x000D__x000A_    Result object from a Pester 5-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $pester5Result = Invoke-Pester -Passthru_x000D__x000A_    $pester4Result = $pester5Result | ConvertTo-Pester4Result_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve a result-object_x000D__x000A_    in the Pester 5 format and converts it to a new Pester 4-compatible result-object._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/ConvertTo-Pester4Result_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipeline)]_x000D__x000A_        $PesterResult_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $legacyResult = [PSCustomObject] @{_x000D__x000A_            Version = 4.99.0_x000D__x000A_            TagFilter = $null_x000D__x000A_            ExcludeTagFilter = $null_x000D__x000A_            TestNameFilter = $null_x000D__x000A_            ScriptBlockFilter = $null_x000D__x000A_            TotalCount = 0_x000D__x000A_            PassedCount = 0_x000D__x000A_            FailedCount = 0_x000D__x000A_            SkippedCount = 0_x000D__x000A_            PendingCount = 0_x000D__x000A_            InconclusiveCount = 0_x000D__x000A_            Time = [TimeSpan]::Zero_x000D__x000A_            TestResult = [System.Collections.Generic.List[object]]@()_x000D__x000A_        }_x000D__x000A_        $filter = $PesterResult.Configuration.Filter_x000D__x000A_        $legacyResult.TagFilter = if (0 -ne $filter.Tag.Value.Count) { $filter.Tag.Value }_x000D__x000A_        $legacyResult.ExcludeTagFilter = if (0 -ne $filter.ExcludeTag.Value.Count) { $filter.ExcludeTag.Value }_x000D__x000A_        $legacyResult.TestNameFilter = if (0 -ne $filter.TestNameFilter.Value.Count) { $filter.TestNameFilter.Value }_x000D__x000A_        $legacyResult.ScriptBlockFilter = if (0 -ne $filter.ScriptBlockFilter.Value.Count) { $filter.ScriptBlockFilter.Value }_x000D__x000A__x000D__x000A_        $sb = {_x000D__x000A_            param($test)_x000D__x000A__x000D__x000A_            if ("NotRun" -eq $test.Result) {_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $result = [PSCustomObject] @{_x000D__x000A_                Passed = "Passed" -eq $test.Result_x000D__x000A_                Result = $test.Result_x000D__x000A_                Time = $test.Duration_x000D__x000A_                Name = $test.Name_x000D__x000A__x000D__x000A_                # in the legacy result the top block is considered to be a Describe and any blocks inside of it are_x000D__x000A_                # considered to be Context and joined by '\'_x000D__x000A_                Describe = $test.Path[0]_x000D__x000A_                Context = $(if ($test.Path.Count -gt 2) { $test.Path[1..($test.Path.Count-2)] -join '\'})_x000D__x000A__x000D__x000A_                Show = $PesterResult.Configuration.Output.Verbosity.Value_x000D__x000A_                Parameters = $test.Data_x000D__x000A_                ParameterizedSuiteName = $test.DisplayName_x000D__x000A__x000D__x000A_                FailureMessage = $(if (any $test.ErrorRecord -and $null -ne $test.ErrorRecord[-1].Exception) { $test.ErrorRecord[-1].DisplayErrorMessage })_x000D__x000A_                ErrorRecord = $(if (any $test.ErrorRecord) { $test.ErrorRecord[-1] })_x000D__x000A_                StackTrace = $(if (any $test.ErrorRecord) { $test.ErrorRecord[1].DisplayStackTrace })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $null = $legacyResult.TestResult.Add($result)_x000D__x000A_        }_x000D__x000A__x000D__x000A__x000D__x000A_        Fold-Run $PesterResult -OnTest $sb -OnBlock {_x000D__x000A_            param($b)_x000D__x000A__x000D__x000A_            if (0 -ne $b.ErrorRecord.Count) {_x000D__x000A_                &amp; $sb $b_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # the counts here include failed blocks as tests, that's we don't use_x000D__x000A_        # the normal properties on the reslt to count_x000D__x000A__x000D__x000A_        foreach ($r in $legacyResult.TestResult) {_x000D__x000A_            switch ($r.Result) {_x000D__x000A_                "Passed" {_x000D__x000A_                    $legacyResult.PassedCount++_x000D__x000A_                }_x000D__x000A_                "Failed" {_x000D__x000A_                    $legacyResult.FailedCount++_x000D__x000A_                }_x000D__x000A_                "Skipped" {_x000D__x000A_                    $legacyResult.SkippedCount++_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $legacyResult.TotalCount = $legacyResult.TestResult.Count_x000D__x000A_        $legacyResult.PendingCount = 0_x000D__x000A_        $legacyResult.InconclusiveCount = 0_x000D__x000A_        $legacyResult.Time = $PesterResult.Duration_x000D__x000A__x000D__x000A_        $legacyResult_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1546">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertTo</S>
      <S N="Noun">Pester4Result</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1547">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">ConvertTo-Pester4Result</S>
      <Obj N="CommandType" RefId="1548">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1549">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1550">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1551">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">PesterResult</S>
            <Obj N="Value" RefId="1552">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PesterResult</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1553">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1554">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1555">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1556">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1557">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1558">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1559">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1560">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1561">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1562">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1563">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1564">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1565">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1566">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1567">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1568">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1569">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1570">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1571">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1572">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1573">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1574">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1575">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1576">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1577">
            <TNRef RefId="8" />
            <ToString>[-PesterResult] &lt;Object&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1578">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertTo-Pester4Result</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/ConvertTo-Pester4Result</S>
    </MS>
  </Obj>
  <Obj RefId="1579">
    <TNRef RefId="0" />
    <ToString>ConvertTo-ScriptExtent</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Alias('StartOffset', 'Offset')]_x000D__x000A_        [int]_x000D__x000A_        $StartOffsetNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Alias('EndOffset')]_x000D__x000A_        [int]_x000D__x000A_        $EndOffsetNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('StartLine', 'Line')]_x000D__x000A_        [int]_x000D__x000A_        $StartLineNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('StartColumn', 'Column')]_x000D__x000A_        [int]_x000D__x000A_        $StartColumnNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('EndLine')]_x000D__x000A_        [int]_x000D__x000A_        $EndLineNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('EndColumn')]_x000D__x000A_        [int]_x000D__x000A_        $EndColumnNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('File', 'FileName')]_x000D__x000A_        [string]_x000D__x000A_        $FilePath = $psEditor.GetEditorContext().CurrentFile.Path,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('Start')]_x000D__x000A_        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]_x000D__x000A_        $StartBuffer,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('End')]_x000D__x000A_        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]_x000D__x000A_        $EndBuffer,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory,_x000D__x000A_                   ValueFromPipeline,_x000D__x000A_                   ValueFromPipelineByPropertyName,_x000D__x000A_                   ParameterSetName='ByExtent')]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $fileContext = $psEditor.GetEditorContext().CurrentFile_x000D__x000A_        $emptyExtent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::Empty_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        # Already a InternalScriptExtent, FileScriptExtent or is empty._x000D__x000A_        $returnAsIs = $Extent -and_x000D__x000A_                     (0 -ne $Extent.StartOffset   -or_x000D__x000A_                      0 -ne $Extent.EndOffset     -or_x000D__x000A_                      $Extent -eq $emptyExtent)_x000D__x000A__x000D__x000A_        if ($returnAsIs) { return $Extent }_x000D__x000A__x000D__x000A_        if ($StartOffsetNumber) {_x000D__x000A_            $startOffset = $StartOffsetNumber_x000D__x000A_            $endOffset   = $EndOffsetNumber_x000D__x000A__x000D__x000A_            # Allow creating a single position extent with just the offset parameter._x000D__x000A_            if (-not $EndOffsetNumber) {_x000D__x000A_                $endOffset = $startOffset_x000D__x000A_            }_x000D__x000A__x000D__x000A_            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(_x000D__x000A_                $fileContext,_x000D__x000A_                $startOffset,_x000D__x000A_                $endOffset)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($StartBuffer) {_x000D__x000A_            if (-not $EndBuffer)_x000D__x000A_            {_x000D__x000A_                $EndBuffer = $StartBuffer_x000D__x000A_            }_x000D__x000A__x000D__x000A_            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(_x000D__x000A_                $fileContext,_x000D__x000A_                $StartBuffer.Line,_x000D__x000A_                $StartBuffer.Column,_x000D__x000A_                $EndBuffer.Line,_x000D__x000A_                $EndBuffer.Column)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $StartColumnNumber) { $StartColumnNumber = 1 }_x000D__x000A_        if (-not $StartLineNumber)   { $StartLineNumber   = 1 }_x000D__x000A_        if (-not $EndLineNumber)     { $EndLineNumber     = 1 }_x000D__x000A_        if (-not $EndColumnNumber)   { $EndColumnNumber   = 1 }_x000D__x000A__x000D__x000A_        return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(_x000D__x000A_            $StartLineNumber,_x000D__x000A_            $StartColumnNumber,_x000D__x000A_            $EndLineNumber,_x000D__x000A_            $EndColumnNumber)_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Alias('StartOffset', 'Offset')]_x000D__x000A_        [int]_x000D__x000A_        $StartOffsetNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Alias('EndOffset')]_x000D__x000A_        [int]_x000D__x000A_        $EndOffsetNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('StartLine', 'Line')]_x000D__x000A_        [int]_x000D__x000A_        $StartLineNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('StartColumn', 'Column')]_x000D__x000A_        [int]_x000D__x000A_        $StartColumnNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('EndLine')]_x000D__x000A_        [int]_x000D__x000A_        $EndLineNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Alias('EndColumn')]_x000D__x000A_        [int]_x000D__x000A_        $EndColumnNumber,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByPosition')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByOffset')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('File', 'FileName')]_x000D__x000A_        [string]_x000D__x000A_        $FilePath = $psEditor.GetEditorContext().CurrentFile.Path,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('Start')]_x000D__x000A_        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]_x000D__x000A_        $StartBuffer,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName, ParameterSetName='ByBuffer')]_x000D__x000A_        [Alias('End')]_x000D__x000A_        [Microsoft.PowerShell.EditorServices.Extensions.IFilePosition, Microsoft.PowerShell.EditorServices]_x000D__x000A_        $EndBuffer,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory,_x000D__x000A_                   ValueFromPipeline,_x000D__x000A_                   ValueFromPipelineByPropertyName,_x000D__x000A_                   ParameterSetName='ByExtent')]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $fileContext = $psEditor.GetEditorContext().CurrentFile_x000D__x000A_        $emptyExtent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::Empty_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        # Already a InternalScriptExtent, FileScriptExtent or is empty._x000D__x000A_        $returnAsIs = $Extent -and_x000D__x000A_                     (0 -ne $Extent.StartOffset   -or_x000D__x000A_                      0 -ne $Extent.EndOffset     -or_x000D__x000A_                      $Extent -eq $emptyExtent)_x000D__x000A__x000D__x000A_        if ($returnAsIs) { return $Extent }_x000D__x000A__x000D__x000A_        if ($StartOffsetNumber) {_x000D__x000A_            $startOffset = $StartOffsetNumber_x000D__x000A_            $endOffset   = $EndOffsetNumber_x000D__x000A__x000D__x000A_            # Allow creating a single position extent with just the offset parameter._x000D__x000A_            if (-not $EndOffsetNumber) {_x000D__x000A_                $endOffset = $startOffset_x000D__x000A_            }_x000D__x000A__x000D__x000A_            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(_x000D__x000A_                $fileContext,_x000D__x000A_                $startOffset,_x000D__x000A_                $endOffset)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($StartBuffer) {_x000D__x000A_            if (-not $EndBuffer)_x000D__x000A_            {_x000D__x000A_                $EndBuffer = $StartBuffer_x000D__x000A_            }_x000D__x000A__x000D__x000A_            return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(_x000D__x000A_                $fileContext,_x000D__x000A_                $StartBuffer.Line,_x000D__x000A_                $StartBuffer.Column,_x000D__x000A_                $EndBuffer.Line,_x000D__x000A_                $EndBuffer.Column)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $StartColumnNumber) { $StartColumnNumber = 1 }_x000D__x000A_        if (-not $StartLineNumber)   { $StartLineNumber   = 1 }_x000D__x000A_        if (-not $EndLineNumber)     { $EndLineNumber     = 1 }_x000D__x000A_        if (-not $EndColumnNumber)   { $EndColumnNumber   = 1 }_x000D__x000A__x000D__x000A_        return [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromPositions(_x000D__x000A_            $StartLineNumber,_x000D__x000A_            $StartColumnNumber,_x000D__x000A_            $EndLineNumber,_x000D__x000A_            $EndColumnNumber)_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1580">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">ConvertTo</S>
      <S N="Noun">ScriptExtent</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1581">
        <TNRef RefId="2" />
        <LST>
          <S>System.Management.Automation.Language.IScriptExtent</S>
        </LST>
      </Obj>
      <S N="Name">ConvertTo-ScriptExtent</S>
      <Obj N="CommandType" RefId="1582">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="1583">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="1584">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1585">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">StartOffsetNumber</S>
            <Obj N="Value" RefId="1586">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartOffsetNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1587">
                  <TNRef RefId="25" />
                  <LST>
                    <S>StartOffset</S>
                    <S>Offset</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndOffsetNumber</S>
            <Obj N="Value" RefId="1588">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndOffsetNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1589">
                  <TNRef RefId="25" />
                  <LST>
                    <S>EndOffset</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartLineNumber</S>
            <Obj N="Value" RefId="1590">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartLineNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1591">
                  <TNRef RefId="25" />
                  <LST>
                    <S>StartLine</S>
                    <S>Line</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartColumnNumber</S>
            <Obj N="Value" RefId="1592">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartColumnNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1593">
                  <TNRef RefId="25" />
                  <LST>
                    <S>StartColumn</S>
                    <S>Column</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndLineNumber</S>
            <Obj N="Value" RefId="1594">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndLineNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1595">
                  <TNRef RefId="25" />
                  <LST>
                    <S>EndLine</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndColumnNumber</S>
            <Obj N="Value" RefId="1596">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndColumnNumber</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1597">
                  <TNRef RefId="25" />
                  <LST>
                    <S>EndColumn</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FilePath</S>
            <Obj N="Value" RefId="1598">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FilePath</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1599">
                  <TNRef RefId="25" />
                  <LST>
                    <S>File</S>
                    <S>FileName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartBuffer</S>
            <Obj N="Value" RefId="1600">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartBuffer</S>
                <S N="ParameterType">Microsoft.PowerShell.EditorServices.Extensions.IFilePosition</S>
                <Obj N="Aliases" RefId="1601">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Start</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndBuffer</S>
            <Obj N="Value" RefId="1602">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndBuffer</S>
                <S N="ParameterType">Microsoft.PowerShell.EditorServices.Extensions.IFilePosition</S>
                <Obj N="Aliases" RefId="1603">
                  <TNRef RefId="25" />
                  <LST>
                    <S>End</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="1604">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="1605">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1606">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1607">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1608">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1609">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1610">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1611">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1612">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1613">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1614">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1615">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1616">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1617">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1618">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1619">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1620">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1621">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1622">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1623">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1624">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1625">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1626">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1627">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1628">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1629">
            <TNRef RefId="8" />
            <ToString>-StartOffsetNumber &lt;int&gt; [-EndOffsetNumber &lt;int&gt;] [-FilePath &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByOffset</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1630">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1631">
            <TNRef RefId="8" />
            <ToString>[-StartLineNumber &lt;int&gt;] [-StartColumnNumber &lt;int&gt;] [-EndLineNumber &lt;int&gt;] [-EndColumnNumber &lt;int&gt;] [-FilePath &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByPosition</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1632">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1633">
            <TNRef RefId="8" />
            <ToString>[-FilePath &lt;string&gt;] [-StartBuffer &lt;IFilePosition&gt;] [-EndBuffer &lt;IFilePosition&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByBuffer</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1634">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1635">
            <TNRef RefId="8" />
            <ToString>-Extent &lt;IScriptExtent&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByExtent</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1636">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::ConvertTo-ScriptExtent</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/ConvertTo-ScriptExtent.md</S>
    </MS>
  </Obj>
  <Obj RefId="1637">
    <TNRef RefId="0" />
    <ToString>Copy-ExcelWorksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true,ValueFromPipeline=$true)]_x000D__x000A_        [Alias('SourceWorkbook')]_x000D__x000A_        $SourceObject,_x000D__x000A_        $SourceWorksheet = 1 ,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $DestinationWorkbook,_x000D__x000A_        $DestinationWorksheet,_x000D__x000A_        [Switch]$Show_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        #For the case where we are piped multiple sheets, we want to open the destination in the begin and close it in the end._x000D__x000A_        if ($DestinationWorkbook -is [OfficeOpenXml.ExcelPackage] ) {_x000D__x000A_            if ($Show) {$package2 = $DestinationWorkbook}_x000D__x000A_            $DestinationWorkbook  = $DestinationWorkbook.Workbook_x000D__x000A_        }_x000D__x000A_        elseif ($DestinationWorkbook -is [string] -and ($DestinationWorkbook -ne $SourceObject)) {_x000D__x000A_            $package2 = Open-ExcelPackage -Create  -Path $DestinationWorkbook_x000D__x000A_            $DestinationWorkbook = $package2.Workbook_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        #Special case - given the same path for source and destination worksheet_x000D__x000A_        if ($SourceObject -is [System.String] -and $SourceObject -eq $DestinationWorkbook) {_x000D__x000A_            if (-not $DestinationWorksheet) {Write-Warning -Message "You must specify a destination worksheet name if copying within the same workbook."; return}_x000D__x000A_            else {_x000D__x000A_                Write-Verbose -Message "Copying "_x000D__x000A_                $excel = Open-ExcelPackage -Path $SourceObject_x000D__x000A_                if (-not $excel.Workbook.Worksheets[$Sourceworksheet]) {_x000D__x000A_                    Write-Warning -Message "Could not find Worksheet $sourceWorksheet in $SourceObject"_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -NoSave_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_                elseif ($excel.Workbook.Worksheets[$Sourceworksheet].name -eq $DestinationWorksheet) {_x000D__x000A_                    Write-Warning -Message "The destination worksheet name is the same as the source. "_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -NoSave_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $null = Add-Worksheet -ExcelPackage $excel -WorksheetName $DestinationWorksheet -CopySource ($excel.Workbook.Worksheets[$SourceWorksheet])_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -Show:$Show_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if     ($SourceObject -is [OfficeOpenXml.ExcelWorksheet]) {$sourceWs = $SourceObject}_x000D__x000A_            elseif ($SourceObject -is [OfficeOpenXml.ExcelWorkbook])  {$sourceWs = $SourceObject.Worksheets[$SourceWorksheet]}_x000D__x000A_            elseif ($SourceObject -is [OfficeOpenXml.ExcelPackage] )  {$sourceWs = $SourceObject.Workbook.Worksheets[$SourceWorksheet]}_x000D__x000A_            else {_x000D__x000A_                $SourceObject = (Resolve-Path $SourceObject).ProviderPath_x000D__x000A_                try {_x000D__x000A_                    Write-Verbose "Opening worksheet '$WorksheetName' in Excel workbook '$SourceObject'."_x000D__x000A_                    $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $SourceObject, 'Open', 'Read' , 'ReadWrite'_x000D__x000A_                    $package1 = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_                    $sourceWs = $Package1.Workbook.Worksheets[$SourceWorksheet]_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Could not open $SourceObject - the error was '$($_.exception.message)' " ; return}_x000D__x000A_            }_x000D__x000A_            if (-not $sourceWs) {Write-Warning -Message "Could not find worksheet '$Sourceworksheet' in the source workbook." ; return}_x000D__x000A_            else {_x000D__x000A_                try {_x000D__x000A_                    if ($DestinationWorkbook -isnot [OfficeOpenXml.ExcelWorkbook]) {_x000D__x000A_                        Write-Warning "Not a valid workbook" ; return_x000D__x000A_                    }_x000D__x000A_                    #check if we have a destination sheet name and set one if not. Because we might loop round check $psBoundParameters, not the variable._x000D__x000A_                    if (-not $PSBoundParameters['DestinationWorksheet']) {_x000D__x000A_                        #if we are piped files, use the file name without the extension as the destination sheet name, Otherwise use the source sheet name_x000D__x000A_                        if ($_ -is [System.IO.FileInfo]) {$DestinationWorksheet = $_.name -replace '\.xlsx$', '' }_x000D__x000A_                        else { $DestinationWorksheet = $sourceWs.Name}_x000D__x000A_                    }_x000D__x000A_                    if ($DestinationWorkbook.Worksheets[$DestinationWorksheet]) {_x000D__x000A_                        Write-Verbose "Destination workbook already has a sheet named '$DestinationWorksheet', deleting it."_x000D__x000A_                        $DestinationWorkbook.Worksheets.Delete($DestinationWorksheet)_x000D__x000A_                    }_x000D__x000A_                    Write-Verbose "Copying '$($sourcews.name)' from $($SourceObject) to '$($DestinationWorksheet)' in $($PSBoundParameters['DestinationWorkbook'])"_x000D__x000A_                    $null = Add-Worksheet -ExcelWorkbook $DestinationWorkbook -WorksheetName $DestinationWorksheet -CopySource  $sourceWs_x000D__x000A_                    #Leave the destination open but close the source - if we're copying more than one sheet we'll re-open it and live with the inefficiency_x000D__x000A_                    if ($stream)   {$stream.Close()                                        }_x000D__x000A_                    if ($package1) {Close-ExcelPackage -ExcelPackage $package1 -NoSave     }_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Could not write to sheet '$DestinationWorksheet' in the destination workbook. Error was '$($_.exception.message)'" ; return}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    end {_x000D__x000A_        #OK Now we can close the destination package_x000D__x000A_        if ($package2) {Close-ExcelPackage -ExcelPackage $package2 -Show:$Show }_x000D__x000A_        if ($Show -and -not $package2) {_x000D__x000A_            Write-Warning -Message "-Show only works if the Destination workbook is given as a file path or an ExcelPackage object."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true,ValueFromPipeline=$true)]_x000D__x000A_        [Alias('SourceWorkbook')]_x000D__x000A_        $SourceObject,_x000D__x000A_        $SourceWorksheet = 1 ,_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        $DestinationWorkbook,_x000D__x000A_        $DestinationWorksheet,_x000D__x000A_        [Switch]$Show_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        #For the case where we are piped multiple sheets, we want to open the destination in the begin and close it in the end._x000D__x000A_        if ($DestinationWorkbook -is [OfficeOpenXml.ExcelPackage] ) {_x000D__x000A_            if ($Show) {$package2 = $DestinationWorkbook}_x000D__x000A_            $DestinationWorkbook  = $DestinationWorkbook.Workbook_x000D__x000A_        }_x000D__x000A_        elseif ($DestinationWorkbook -is [string] -and ($DestinationWorkbook -ne $SourceObject)) {_x000D__x000A_            $package2 = Open-ExcelPackage -Create  -Path $DestinationWorkbook_x000D__x000A_            $DestinationWorkbook = $package2.Workbook_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        #Special case - given the same path for source and destination worksheet_x000D__x000A_        if ($SourceObject -is [System.String] -and $SourceObject -eq $DestinationWorkbook) {_x000D__x000A_            if (-not $DestinationWorksheet) {Write-Warning -Message "You must specify a destination worksheet name if copying within the same workbook."; return}_x000D__x000A_            else {_x000D__x000A_                Write-Verbose -Message "Copying "_x000D__x000A_                $excel = Open-ExcelPackage -Path $SourceObject_x000D__x000A_                if (-not $excel.Workbook.Worksheets[$Sourceworksheet]) {_x000D__x000A_                    Write-Warning -Message "Could not find Worksheet $sourceWorksheet in $SourceObject"_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -NoSave_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_                elseif ($excel.Workbook.Worksheets[$Sourceworksheet].name -eq $DestinationWorksheet) {_x000D__x000A_                    Write-Warning -Message "The destination worksheet name is the same as the source. "_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -NoSave_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $null = Add-Worksheet -ExcelPackage $excel -WorksheetName $DestinationWorksheet -CopySource ($excel.Workbook.Worksheets[$SourceWorksheet])_x000D__x000A_                    Close-ExcelPackage -ExcelPackage $excel -Show:$Show_x000D__x000A_                    return_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            if     ($SourceObject -is [OfficeOpenXml.ExcelWorksheet]) {$sourceWs = $SourceObject}_x000D__x000A_            elseif ($SourceObject -is [OfficeOpenXml.ExcelWorkbook])  {$sourceWs = $SourceObject.Worksheets[$SourceWorksheet]}_x000D__x000A_            elseif ($SourceObject -is [OfficeOpenXml.ExcelPackage] )  {$sourceWs = $SourceObject.Workbook.Worksheets[$SourceWorksheet]}_x000D__x000A_            else {_x000D__x000A_                $SourceObject = (Resolve-Path $SourceObject).ProviderPath_x000D__x000A_                try {_x000D__x000A_                    Write-Verbose "Opening worksheet '$WorksheetName' in Excel workbook '$SourceObject'."_x000D__x000A_                    $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $SourceObject, 'Open', 'Read' , 'ReadWrite'_x000D__x000A_                    $package1 = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_                    $sourceWs = $Package1.Workbook.Worksheets[$SourceWorksheet]_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Could not open $SourceObject - the error was '$($_.exception.message)' " ; return}_x000D__x000A_            }_x000D__x000A_            if (-not $sourceWs) {Write-Warning -Message "Could not find worksheet '$Sourceworksheet' in the source workbook." ; return}_x000D__x000A_            else {_x000D__x000A_                try {_x000D__x000A_                    if ($DestinationWorkbook -isnot [OfficeOpenXml.ExcelWorkbook]) {_x000D__x000A_                        Write-Warning "Not a valid workbook" ; return_x000D__x000A_                    }_x000D__x000A_                    #check if we have a destination sheet name and set one if not. Because we might loop round check $psBoundParameters, not the variable._x000D__x000A_                    if (-not $PSBoundParameters['DestinationWorksheet']) {_x000D__x000A_                        #if we are piped files, use the file name without the extension as the destination sheet name, Otherwise use the source sheet name_x000D__x000A_                        if ($_ -is [System.IO.FileInfo]) {$DestinationWorksheet = $_.name -replace '\.xlsx$', '' }_x000D__x000A_                        else { $DestinationWorksheet = $sourceWs.Name}_x000D__x000A_                    }_x000D__x000A_                    if ($DestinationWorkbook.Worksheets[$DestinationWorksheet]) {_x000D__x000A_                        Write-Verbose "Destination workbook already has a sheet named '$DestinationWorksheet', deleting it."_x000D__x000A_                        $DestinationWorkbook.Worksheets.Delete($DestinationWorksheet)_x000D__x000A_                    }_x000D__x000A_                    Write-Verbose "Copying '$($sourcews.name)' from $($SourceObject) to '$($DestinationWorksheet)' in $($PSBoundParameters['DestinationWorkbook'])"_x000D__x000A_                    $null = Add-Worksheet -ExcelWorkbook $DestinationWorkbook -WorksheetName $DestinationWorksheet -CopySource  $sourceWs_x000D__x000A_                    #Leave the destination open but close the source - if we're copying more than one sheet we'll re-open it and live with the inefficiency_x000D__x000A_                    if ($stream)   {$stream.Close()                                        }_x000D__x000A_                    if ($package1) {Close-ExcelPackage -ExcelPackage $package1 -NoSave     }_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Could not write to sheet '$DestinationWorksheet' in the destination workbook. Error was '$($_.exception.message)'" ; return}_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    end {_x000D__x000A_        #OK Now we can close the destination package_x000D__x000A_        if ($package2) {Close-ExcelPackage -ExcelPackage $package2 -Show:$Show }_x000D__x000A_        if ($Show -and -not $package2) {_x000D__x000A_            Write-Warning -Message "-Show only works if the Destination workbook is given as a file path or an ExcelPackage object."_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1638">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Copy</S>
      <S N="Noun">ExcelWorksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1639">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Copy-ExcelWorksheet</S>
      <Obj N="CommandType" RefId="1640">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1641">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1642">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1643">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">SourceObject</S>
            <Obj N="Value" RefId="1644">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1645">
                  <TNRef RefId="25" />
                  <LST>
                    <S>SourceWorkbook</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SourceWorksheet</S>
            <Obj N="Value" RefId="1646">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceWorksheet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1647">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DestinationWorkbook</S>
            <Obj N="Value" RefId="1648">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DestinationWorkbook</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1649">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DestinationWorksheet</S>
            <Obj N="Value" RefId="1650">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DestinationWorksheet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1651">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="1652">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1653">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1654">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1655">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1656">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1657">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1658">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1659">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1660">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1661">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1662">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1663">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1664">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1665">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1666">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1667">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1668">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1669">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1670">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1671">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1672">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1673">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1674">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1675">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1676">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1677">
            <TNRef RefId="8" />
            <ToString>[-SourceObject] &lt;Object&gt; [[-SourceWorksheet] &lt;Object&gt;] [-DestinationWorkbook] &lt;Object&gt; [[-DestinationWorksheet] &lt;Object&gt;] [-Show] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1678">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Copy-ExcelWorksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1679">
    <TNRef RefId="0" />
    <ToString>D:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="1680">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1681">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">D:</S>
      <Obj N="CommandType" RefId="1682">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="1683">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="1684">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1685">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="1686">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1687">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1688">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::D:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1689">
    <TNRef RefId="0" />
    <ToString>debugOn</ToString>
    <Props>
      <SBK N="ScriptBlock"> $GLOBAL:VerbosePreference = 'Continue';$GLOBAL:DebugPreference = 'Continue' </SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition"> $GLOBAL:VerbosePreference = 'Continue';$GLOBAL:DebugPreference = 'Continue' </S>
      <Obj N="Options" RefId="1690">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1691">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">debugOn</S>
      <Obj N="CommandType" RefId="1692">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="1693">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="1694">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1695">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="1696">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1697">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1698">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::debugOn</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1699">
    <TNRef RefId="0" />
    <ToString>Describe</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Creates a logical group of tests._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Creates a logical group of tests. All Mocks, TestDrive and TestRegistry contents_x000D__x000A_defined within a Describe block are scoped to that Describe; they_x000D__x000A_will no longer be present when the Describe block exits.  A Describe_x000D__x000A_block may contain any number of Context and It blocks._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the test group. This is often an expressive phrase describing_x000D__x000A_the scenario being tested._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_The actual test script. If you are following the AAA pattern (Arrange-Act-Assert),_x000D__x000A_this typically holds the arrange and act sections. The Asserts will also lie_x000D__x000A_in this block but are typically nested each in its own It block. Assertions are_x000D__x000A_typically performed by the Should command within the It blocks._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Describe blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Should_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_TestDrive_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $ForEach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($null -eq $Fixture) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Invoke-Interactively -CommandUsed 'Describe' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Creates a logical group of tests._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Creates a logical group of tests. All Mocks, TestDrive and TestRegistry contents_x000D__x000A_defined within a Describe block are scoped to that Describe; they_x000D__x000A_will no longer be present when the Describe block exits.  A Describe_x000D__x000A_block may contain any number of Context and It blocks._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_The name of the test group. This is often an expressive phrase describing_x000D__x000A_the scenario being tested._x000D__x000A__x000D__x000A_.PARAMETER Fixture_x000D__x000A_The actual test script. If you are following the AAA pattern (Arrange-Act-Assert),_x000D__x000A_this typically holds the arrange and act sections. The Asserts will also lie_x000D__x000A_in this block but are typically nested each in its own It block. Assertions are_x000D__x000A_typically performed by the Should command within the It blocks._x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to specify a -Tag parameter which will only execute Describe blocks_x000D__x000A_containing the same Tag._x000D__x000A__x000D__x000A_.PARAMETER ForEach_x000D__x000A_Allows data driven tests to be written._x000D__x000A_Takes an array of data and generates one block for each item in the array, and makes the item_x000D__x000A_available as $_ in all child blocks. When the array is an array of hashtables, it additionally_x000D__x000A_defines each key in the hashatble as variable._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/test-file-structure_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Should_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_Mocking_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_about_TestDrive_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/testdrive_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Alias('Tags')]_x000D__x000A_        [string[]] $Tag = @(),_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNull()]_x000D__x000A_        [ScriptBlock] $Fixture,_x000D__x000A__x000D__x000A_        # [Switch] $Focus,_x000D__x000A_        [Switch] $Skip,_x000D__x000A__x000D__x000A_        $ForEach_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($null -eq $Fixture) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test fixture name has multiple lines and no test fixture is provided. (Have you provided a name for the test group?)"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw 'No test fixture is provided. (Have you put the open curly brace on the next line?)'_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A__x000D__x000A_    if ($ExecutionContext.SessionState.PSVariable.Get('invokedViaInvokePester')) {_x000D__x000A_        if ($PSBoundParameters.ContainsKey('ForEach')) {_x000D__x000A_            if ($null -ne  $ForEach -and 0 -lt @($ForEach).Count) {_x000D__x000A_                New-ParametrizedBlock -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip -Data $ForEach_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # @() or $null is provided do nothing_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            New-Block -Name $Name -ScriptBlock $Fixture -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -FrameworkData @{ CommandUsed = 'Describe'; WrittenToScreen = $false } -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Invoke-Interactively -CommandUsed 'Describe' -ScriptName $PSCmdlet.MyInvocation.ScriptName -SessionState $PSCmdlet.SessionState -BoundParameters $PSCmdlet.MyInvocation.BoundParameters_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1700">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1701">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Describe</S>
      <Obj N="CommandType" RefId="1702">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1703">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1704">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1705">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="1706">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1707">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Tag</S>
            <Obj N="Value" RefId="1708">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Tag</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1709">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Tags</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Fixture</S>
            <Obj N="Value" RefId="1710">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Fixture</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="1711">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Skip</S>
            <Obj N="Value" RefId="1712">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Skip</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1713">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ForEach</S>
            <Obj N="Value" RefId="1714">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ForEach</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1715">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1716">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1717">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1718">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1719">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1720">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1721">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1722">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1723">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1724">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1725">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1726">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1727">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1728">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1729">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1730">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1731">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1732">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1733">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1734">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1735">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1736">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1737">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1738">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1739">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Fixture] &lt;scriptblock&gt;] [-Tag &lt;string[]&gt;] [-Skip] [-ForEach &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1740">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Describe</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Describe</S>
    </MS>
  </Obj>
  <Obj RefId="1741">
    <TNRef RefId="0" />
    <ToString>DoChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_     )_x000D__x000A__x000D__x000A_     if($targetData[0] -is [System.ValueType]) {_x000D__x000A_         $chart = New-ExcelChartDefinition -YRange "A1:A$($targetData.count)" -Title $title -ChartType $ChartType_x000D__x000A_     } else {_x000D__x000A_         $xyRange = Get-XYRange $targetData_x000D__x000A__x000D__x000A_         $X = $xyRange.XRange.ExcelColumn_x000D__x000A_         $XRange = "{0}2:{0}{1}" -f $X,($targetData.count+1)_x000D__x000A__x000D__x000A_         $Y = $xyRange.YRange.ExcelColumn_x000D__x000A_         $YRange = "{0}2:{0}{1}" -f $Y,($targetData.count+1)_x000D__x000A__x000D__x000A_         $chart = New-ExcelChartDefinition -XRange $xRange -YRange $yRange -Title $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_     }_x000D__x000A__x000D__x000A_     $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_     $targetData | Export-Excel $xlFile -ExcelChartDefinition $chart -Show -AutoSize_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_     )_x000D__x000A__x000D__x000A_     if($targetData[0] -is [System.ValueType]) {_x000D__x000A_         $chart = New-ExcelChartDefinition -YRange "A1:A$($targetData.count)" -Title $title -ChartType $ChartType_x000D__x000A_     } else {_x000D__x000A_         $xyRange = Get-XYRange $targetData_x000D__x000A__x000D__x000A_         $X = $xyRange.XRange.ExcelColumn_x000D__x000A_         $XRange = "{0}2:{0}{1}" -f $X,($targetData.count+1)_x000D__x000A__x000D__x000A_         $Y = $xyRange.YRange.ExcelColumn_x000D__x000A_         $YRange = "{0}2:{0}{1}" -f $Y,($targetData.count+1)_x000D__x000A__x000D__x000A_         $chart = New-ExcelChartDefinition -XRange $xRange -YRange $yRange -Title $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_     }_x000D__x000A__x000D__x000A_     $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_     $targetData | Export-Excel $xlFile -ExcelChartDefinition $chart -Show -AutoSize_x000D__x000A_</S>
      <Obj N="Options" RefId="1742">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1743">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">DoChart</S>
      <Obj N="CommandType" RefId="1744">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1745">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1746">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1747">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="1748">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1749">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">title</S>
            <Obj N="Value" RefId="1750">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1751">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="1752">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="1753">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="1754">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1755">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="1756">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1757">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="1758">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1759">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1760">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1761">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1762">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::DoChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1763">
    <TNRef RefId="0" />
    <ToString>E:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="1764">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1765">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">E:</S>
      <Obj N="CommandType" RefId="1766">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="1767">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="1768">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1769">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="1770">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1771">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1772">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::E:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1773">
    <TNRef RefId="0" />
    <ToString>Expand-NumberFormat</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([String])]_x000D__x000A_    param  (_x000D__x000A_        #the format string to Expand_x000D__x000A_        $NumberFormat_x000D__x000A_    )_x000D__x000A_    switch ($NumberFormat) {_x000D__x000A_        "Currency"      {_x000D__x000A_            #https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencynegativepattern(v=vs.110).aspx_x000D__x000A_            $sign = [cultureinfo]::CurrentCulture.NumberFormat.CurrencySymbol_x000D__x000A_            switch ([cultureinfo]::CurrentCulture.NumberFormat.CurrencyPositivePattern) {_x000D__x000A_                0  {$pos = "$Sign#,##0.00"  ; break }_x000D__x000A_                1  {$pos = "#,##0.00$Sign"  ; break }_x000D__x000A_                2  {$pos = "$Sign #,##0.00" ; break }_x000D__x000A_                3  {$pos = "#,##0.00 $Sign" ; break }_x000D__x000A_            }_x000D__x000A_            switch ([cultureinfo]::CurrentCulture.NumberFormat.CurrencyPositivePattern) {_x000D__x000A_                0  {return "$pos;($Sign#,##0.00)"  }_x000D__x000A_                1  {return "$pos;-$Sign#,##0.00"   }_x000D__x000A_                2  {return "$pos;$Sign-#,##0.00"   }_x000D__x000A_                3  {return "$pos;$Sign#,##0.00-"   }_x000D__x000A_                4  {return "$pos;(#,##0.00$Sign)"  }_x000D__x000A_                5  {return "$pos;-#,##0.00$Sign"   }_x000D__x000A_                6  {return "$pos;#,##0.00-$Sign"   }_x000D__x000A_                7  {return "$pos;#,##0.00$Sign-"   }_x000D__x000A_                8  {return "$pos;-#,##0.00 $Sign"  }_x000D__x000A_                9  {return "$pos;-$Sign #,##0.00"  }_x000D__x000A_               10  {return "$pos;#,##0.00 $Sign-"  }_x000D__x000A_               11  {return "$pos;$Sign #,##0.00-"  }_x000D__x000A_               12  {return "$pos;$Sign -#,##0.00"  }_x000D__x000A_               13  {return "$pos;#,##0.00- $Sign"  }_x000D__x000A_               14  {return "$pos;($Sign #,##0.00)" }_x000D__x000A_               15  {return "$pos;(#,##0.00 $Sign)" }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        "Number"        {return  "0.00"       } # format id  2_x000D__x000A_        "Percentage"    {return  "0.00%"      } # format id 10_x000D__x000A_        "Scientific"    {return  "0.00E+00"   } # format id 11_x000D__x000A_        "Fraction"      {return  "# ?/?"      } # format id 12_x000D__x000A_        "Short Date"    {return  "mm-dd-yy"   } # format id 14 localized on load by Excel._x000D__x000A_        "Short Time"    {return  "h:mm"       } # format id 20 localized on load by Excel._x000D__x000A_        "Long Time"     {return  "h:mm:ss"    } # format id 21 localized on load by Excel._x000D__x000A_        "Date-Time"     {return  "m/d/yy h:mm"} # format id 22 localized on load by Excel._x000D__x000A_        "Text"          {return  "@"          } # format ID 49_x000D__x000A_        Default         {return  $NumberFormat}_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([String])]_x000D__x000A_    param  (_x000D__x000A_        #the format string to Expand_x000D__x000A_        $NumberFormat_x000D__x000A_    )_x000D__x000A_    switch ($NumberFormat) {_x000D__x000A_        "Currency"      {_x000D__x000A_            #https://msdn.microsoft.com/en-us/library/system.globalization.numberformatinfo.currencynegativepattern(v=vs.110).aspx_x000D__x000A_            $sign = [cultureinfo]::CurrentCulture.NumberFormat.CurrencySymbol_x000D__x000A_            switch ([cultureinfo]::CurrentCulture.NumberFormat.CurrencyPositivePattern) {_x000D__x000A_                0  {$pos = "$Sign#,##0.00"  ; break }_x000D__x000A_                1  {$pos = "#,##0.00$Sign"  ; break }_x000D__x000A_                2  {$pos = "$Sign #,##0.00" ; break }_x000D__x000A_                3  {$pos = "#,##0.00 $Sign" ; break }_x000D__x000A_            }_x000D__x000A_            switch ([cultureinfo]::CurrentCulture.NumberFormat.CurrencyPositivePattern) {_x000D__x000A_                0  {return "$pos;($Sign#,##0.00)"  }_x000D__x000A_                1  {return "$pos;-$Sign#,##0.00"   }_x000D__x000A_                2  {return "$pos;$Sign-#,##0.00"   }_x000D__x000A_                3  {return "$pos;$Sign#,##0.00-"   }_x000D__x000A_                4  {return "$pos;(#,##0.00$Sign)"  }_x000D__x000A_                5  {return "$pos;-#,##0.00$Sign"   }_x000D__x000A_                6  {return "$pos;#,##0.00-$Sign"   }_x000D__x000A_                7  {return "$pos;#,##0.00$Sign-"   }_x000D__x000A_                8  {return "$pos;-#,##0.00 $Sign"  }_x000D__x000A_                9  {return "$pos;-$Sign #,##0.00"  }_x000D__x000A_               10  {return "$pos;#,##0.00 $Sign-"  }_x000D__x000A_               11  {return "$pos;$Sign #,##0.00-"  }_x000D__x000A_               12  {return "$pos;$Sign -#,##0.00"  }_x000D__x000A_               13  {return "$pos;#,##0.00- $Sign"  }_x000D__x000A_               14  {return "$pos;($Sign #,##0.00)" }_x000D__x000A_               15  {return "$pos;(#,##0.00 $Sign)" }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        "Number"        {return  "0.00"       } # format id  2_x000D__x000A_        "Percentage"    {return  "0.00%"      } # format id 10_x000D__x000A_        "Scientific"    {return  "0.00E+00"   } # format id 11_x000D__x000A_        "Fraction"      {return  "# ?/?"      } # format id 12_x000D__x000A_        "Short Date"    {return  "mm-dd-yy"   } # format id 14 localized on load by Excel._x000D__x000A_        "Short Time"    {return  "h:mm"       } # format id 20 localized on load by Excel._x000D__x000A_        "Long Time"     {return  "h:mm:ss"    } # format id 21 localized on load by Excel._x000D__x000A_        "Date-Time"     {return  "m/d/yy h:mm"} # format id 22 localized on load by Excel._x000D__x000A_        "Text"          {return  "@"          } # format ID 49_x000D__x000A_        Default         {return  $NumberFormat}_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1774">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Expand</S>
      <S N="Noun">NumberFormat</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1775">
        <TNRef RefId="2" />
        <LST>
          <S>System.String</S>
        </LST>
      </Obj>
      <S N="Name">Expand-NumberFormat</S>
      <Obj N="CommandType" RefId="1776">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1777">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1778">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1779">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="1780">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1781">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1782">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1783">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1784">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1785">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1786">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1787">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1788">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1789">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1790">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1791">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1792">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1793">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1794">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1795">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1796">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1797">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1798">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1799">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1800">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1801">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1802">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1803">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1804">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1805">
            <TNRef RefId="8" />
            <ToString>[[-NumberFormat] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1806">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Expand-NumberFormat</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="1807">
    <TNRef RefId="0" />
    <ToString>Export-Excel</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Default')]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelPackage])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword", "")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName = 'Default', Position = 0)]_x000D__x000A_        [String]$Path,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "Package")]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        [Alias('TargetData')]_x000D__x000A_        $InputObject,_x000D__x000A_        [Switch]$Calculate,_x000D__x000A_        [Switch]$Show,_x000D__x000A_        [String]$WorksheetName = 'Sheet1',_x000D__x000A_        [Alias("PW")]_x000D__x000A_        [String]$Password,_x000D__x000A_        [switch]$ClearSheet,_x000D__x000A_        [switch]$Append,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$TitleFillPattern = 'Solid',_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize = 22,_x000D__x000A_        $TitleBackgroundColor,_x000D__x000A_        [parameter(DontShow=$true)]_x000D__x000A_        [Switch]$IncludePivotTable,_x000D__x000A_        [String]$PivotTableName,_x000D__x000A_        [String[]]$PivotRows,_x000D__x000A_        [String[]]$PivotColumns,_x000D__x000A_        $PivotData,_x000D__x000A_        [String[]]$PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [Hashtable]$PivotTableDefinition,_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Alias('ChartType')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$PivotChartType = 'Pie',_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        $MaxAutoSizeRows = 1000,_x000D__x000A_        [Switch]$NoClobber,_x000D__x000A_        [Switch]$FreezeTopRow,_x000D__x000A_        [Switch]$FreezeFirstColumn,_x000D__x000A_        [Switch]$FreezeTopRowFirstColumn,_x000D__x000A_        [Int[]]$FreezePane,_x000D__x000A_        [Switch]$AutoFilter,_x000D__x000A_        [Switch]$BoldTopRow,_x000D__x000A_        [Switch]$NoHeader,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'RangeName is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'RangeName starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [String]$RangeName,_x000D__x000A_        [Alias('Table')]_x000D__x000A_        $TableName,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle =  [OfficeOpenXml.Table.TableStyles]::Medium6,_x000D__x000A_        [Switch]$Barchart,_x000D__x000A_        [Switch]$PieChart,_x000D__x000A_        [Switch]$LineChart ,_x000D__x000A_        [Switch]$ColumnChart ,_x000D__x000A_        [Object[]]$ExcelChartDefinition,_x000D__x000A_        [String[]]$HideSheet,_x000D__x000A_        [String[]]$UnHideSheet,_x000D__x000A_        [Switch]$MoveToStart,_x000D__x000A_        [Switch]$MoveToEnd,_x000D__x000A_        $MoveBefore ,_x000D__x000A_        $MoveAfter ,_x000D__x000A_        [Switch]$KillExcel,_x000D__x000A_        [Switch]$AutoNameRange,_x000D__x000A_        [Int]$StartRow = 1,_x000D__x000A_        [Int]$StartColumn = 1,_x000D__x000A_        [alias('PT')]_x000D__x000A_        [Switch]$PassThru,_x000D__x000A_        [String]$Numberformat = 'General',_x000D__x000A_        [string[]]$ExcludeProperty,_x000D__x000A_        [Switch]$NoAliasOrScriptPropeties,_x000D__x000A_        [Switch]$DisplayPropertySet,_x000D__x000A_        [String[]]$NoNumberConversion,_x000D__x000A_        [Object[]]$ConditionalFormat,_x000D__x000A_        [Object[]]$ConditionalText,_x000D__x000A_        [Object[]]$Style,_x000D__x000A_        [ScriptBlock]$CellStyleSB,_x000D__x000A_        #If there is already content in the workbook the sheet with the PivotTable will not be active UNLESS Activate is specified_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [Parameter(ParameterSetName = 'Default')]_x000D__x000A_        [Switch]$Now,_x000D__x000A_        [Switch]$ReturnRange,_x000D__x000A_        #By default PivotTables have Totals for each Row (on the right) and for each column at the bottom. This allows just one or neither to be selected._x000D__x000A_        [ValidateSet("Both","Columns","Rows","None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        #Included for compatibility - equivalent to -PivotTotals "None"_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [Switch]$ReZip_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $numberRegex = [Regex]'\d'_x000D__x000A_        $isDataTypeValueType = $false_x000D__x000A_        if ($NoClobber) {Write-Warning -Message "-NoClobber parameter is no longer used" }_x000D__x000A_        #Open the file, get the worksheet, and decide where in the sheet we are writing, and if there is a number format to apply._x000D__x000A_        try   {_x000D__x000A_            $script:Header = $null_x000D__x000A_            if ($Append -and $ClearSheet) {throw "You can't use -Append AND -ClearSheet." ; return}_x000D__x000A_            #To force -Now not to format as a table, allow $false in -TableName to be "No table"_x000D__x000A_            $TableName = if ($null -eq $TableName -or ($TableName -is [bool] -and $false -eq $TableName)) { $null } else {[String]$TableName}_x000D__x000A_            if ($Now -or (-not $Path -and -not $ExcelPackage) ) {_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("Path")) { $Path = [System.IO.Path]::GetTempFileName() -replace '\.tmp', '.xlsx' }_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("Show")) { $Show = $true }_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("AutoSize")) { $AutoSize = $true }_x000D__x000A_                #"Now" option will create a table, unless something passed in TableName/Table Style. False in TableName will block autocreation_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("TableName") -and_x000D__x000A_                    -not $PSBoundParameters.ContainsKey("TableStyle") -and_x000D__x000A_                    -not $AutoFilter) {_x000D__x000A_                    $TableName = '' # later rely on distinction between NULL and ""_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($ExcelPackage) {_x000D__x000A_                $pkg = $ExcelPackage_x000D__x000A_                $Path = $pkg.File_x000D__x000A_            }_x000D__x000A_            Else { $pkg = Open-ExcelPackage -Path $Path -Create -KillExcel:$KillExcel -Password:$Password}_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not open Excel Package $path"}_x000D__x000A_        try   {_x000D__x000A_            $params = @{WorksheetName=$WorksheetName}_x000D__x000A_            foreach ($p in @("ClearSheet", "MoveToStart", "MoveToEnd", "MoveBefore", "MoveAfter", "Activate")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_            $ws = $pkg | Add-Worksheet @params_x000D__x000A_            if ($ws.Name -ne $WorksheetName) {_x000D__x000A_                Write-Warning -Message "The Worksheet name has been changed from $WorksheetName to $($ws.Name), this may cause errors later."_x000D__x000A_                $WorksheetName = $ws.Name_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not get worksheet $WorksheetName"}_x000D__x000A_        try   {_x000D__x000A_            if ($Append -and $ws.Dimension) {_x000D__x000A_                #if there is a title or anything else above the header row, append needs to be combined wih a suitable startrow parameter_x000D__x000A_                $headerRange = $ws.Dimension.Address -replace "\d+$", $StartRow_x000D__x000A_                #using a slightly odd syntax otherwise header ends up as a 2D array_x000D__x000A_                $ws.Cells[$headerRange].Value | ForEach-Object -Begin {$Script:header = @()} -Process {$Script:header += $_ }_x000D__x000A_                $NoHeader = $true_x000D__x000A_                #if we did not get AutoNameRange, but headers have ranges of the same name make autoNameRange True, otherwise make it false_x000D__x000A_                if (-not $AutoNameRange) {_x000D__x000A_                    $AutoNameRange  = $true ; foreach ($h in $header) {if ($ws.names.name -notcontains $h) {$AutoNameRange = $false} }_x000D__x000A_                }_x000D__x000A_                #if we did not get a Rangename but there is a Range which covers the active part of the sheet, set Rangename to that._x000D__x000A_                if (-not $RangeName -and $ws.names.where({$_.name[0] -match '[a-z]'})) {_x000D__x000A_                    $theRange = $ws.names.where({_x000D__x000A_                         ($_.Name[0]   -match '[a-z]' )              -and_x000D__x000A_                         ($_.Start.Row    -eq $StartRow)             -and_x000D__x000A_                         ($_.Start.Column -eq $StartColumn)          -and_x000D__x000A_                         ($_.End.Row      -eq $ws.Dimension.End.Row) -and_x000D__x000A_                         ($_.End.Column   -eq $ws.Dimension.End.column) } , 'First', 1)_x000D__x000A_                    if ($theRange) {$rangename = $theRange.name}_x000D__x000A_                }_x000D__x000A__x000D__x000A_                #if we did not get a table name but there is a table which covers the active part of the sheet, set table name to that, and don't do anything with autofilter_x000D__x000A_                $existingTable = $ws.Tables.Where({$_.address.address -eq $ws.dimension.address},'First', 1)_x000D__x000A_                if ($null -eq $TableName -and $existingTable) {_x000D__x000A_                    $TableName  = $existingTable.Name_x000D__x000A_                    $TableStyle = $existingTable.StyleName -replace "^TableStyle",""_x000D__x000A_                    $AutoFilter = $false_x000D__x000A_                }_x000D__x000A_                #if we did not get $autofilter but a filter range is set and it covers the right area, set autofilter to true_x000D__x000A_                elseif (-not $AutoFilter -and $ws.Names['_x005F_xlnm._FilterDatabase']) {_x000D__x000A_                    if ( ($ws.Names['_x005F_xlnm._FilterDatabase'].Start.Row    -eq $StartRow)    -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].Start.Column -eq $StartColumn) -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].End.Row      -eq $ws.Dimension.End.Row) -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].End.Column   -eq $ws.Dimension.End.Column) ) {$AutoFilter = $true}_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $row = $ws.Dimension.End.Row_x000D__x000A_                Write-Debug -Message ("Appending: headers are " + ($script:Header -join ", ") + " Start row is $row")_x000D__x000A_                if ($Title) {Write-Warning -Message "-Title Parameter is ignored when appending."}_x000D__x000A_            }_x000D__x000A_            elseif ($Title) {_x000D__x000A_                #Can only add a title if not appending!_x000D__x000A_                $row = $StartRow_x000D__x000A_                $ws.Cells[$row, $StartColumn].Value = $Title_x000D__x000A_                $ws.Cells[$row, $StartColumn].Style.Font.Size = $TitleSize_x000D__x000A__x000D__x000A_                if  ($PSBoundParameters.ContainsKey("TitleBold")) {_x000D__x000A_                    #Set title to Bold face font if -TitleBold was specified._x000D__x000A_                    #Otherwise the default will be unbolded._x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Font.Bold = [boolean]$TitleBold_x000D__x000A_                }_x000D__x000A_                if ($TitleBackgroundColor ) {_x000D__x000A_                    if ($TitleBackgroundColor -is [string])         {$TitleBackgroundColor = [System.Drawing.Color]::$TitleBackgroundColor }_x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Fill.PatternType = $TitleFillPattern_x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Fill.BackgroundColor.SetColor($TitleBackgroundColor)_x000D__x000A_                }_x000D__x000A_                $row ++ ; $startRow ++_x000D__x000A_            }_x000D__x000A_            else {  $row = $StartRow }_x000D__x000A_            $ColumnIndex = $StartColumn_x000D__x000A_            $Numberformat = Expand-NumberFormat -NumberFormat $Numberformat_x000D__x000A_            if ((-not $ws.Dimension) -and ($Numberformat -ne $ws.Cells.Style.Numberformat.Format)) {_x000D__x000A_                    $ws.Cells.Style.Numberformat.Format = $Numberformat_x000D__x000A_                    $setNumformat = $false_x000D__x000A_            }_x000D__x000A_            else {  $setNumformat = ($Numberformat -ne $ws.Cells.Style.Numberformat.Format) }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed preparing to export to worksheet '$WorksheetName' to '$Path': $_"}_x000D__x000A_        #region Special case -inputobject passed a dataTable object_x000D__x000A_        &lt;# If inputObject was passed via the pipeline it won't be visible until the process block, we will only see it here if it was passed as a parameter_x000D__x000A_          if it is a data table don't do foreach on it (slow) - put the whole table in and set dates on date columns,_x000D__x000A_          set things up for the end block, and skip the process block #&gt;_x000D__x000A_        if ($InputObject -is  [System.Data.DataTable])  {_x000D__x000A_            if ($Append -and $ws.dimension) {_x000D__x000A_                $row ++_x000D__x000A_                $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, $false )_x000D__x000A_                if ($TableName -or  $PSBoundParameters.ContainsKey('TableStyle')) {_x000D__x000A_                    Add-ExcelTable -Range $ws.Cells[$ws.Dimension] -TableName $TableName -TableStyle $TableStyle_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else  {_x000D__x000A_                #Change TableName if $TableName is non-empty; don't leave caller with a renamed table!_x000D__x000A_                $orginalTableName = $InputObject.TableName_x000D__x000A_                if ($PSBoundParameters.ContainsKey("TableName")) {_x000D__x000A_                    $InputObject.TableName = $TableName_x000D__x000A_                }_x000D__x000A_                while ($InputObject.TableName -in $pkg.Workbook.Worksheets.Tables.name) {_x000D__x000A_                    Write-Warning "Table name $($InputObject.TableName) is not unique, adding '_' to it "_x000D__x000A_                    $InputObject.TableName += "_"_x000D__x000A_                }_x000D__x000A_                #Insert as a table, if Tablestyle didn't arrive as a default, or $TableName non-null - even if empty_x000D__x000A_                if ($null -ne $TableName -or $PSBoundParameters.ContainsKey("TableStyle")) {_x000D__x000A_                    $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, (-not $noHeader),$TableStyle )_x000D__x000A_                    # Workaround for EPPlus not marking the empty row on an empty table as dummy row._x000D__x000A_                    if ($InputObject.Rows.Count -eq 0) {_x000D__x000A_                        ($ws.Tables | Select-Object -Last 1).TableXml.table.SetAttribute('insertRow', 1)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, (-not $noHeader) )_x000D__x000A_                }_x000D__x000A_                $InputObject.TableName = $orginalTableName_x000D__x000A_            }_x000D__x000A_            foreach ($c in $InputObject.Columns.where({$_.datatype -eq [datetime]})) {_x000D__x000A_                Set-ExcelColumn -Worksheet $ws -Column ($c.Ordinal + $StartColumn) -NumberFormat 'Date-Time'_x000D__x000A_            }_x000D__x000A_            foreach ($c in $InputObject.Columns.where({$_.datatype -eq [timespan]})) {_x000D__x000A_                Set-ExcelColumn -Worksheet $ws -Column ($c.Ordinal + $StartColumn) -NumberFormat '[h]:mm:ss'_x000D__x000A_            }_x000D__x000A_            $ColumnIndex         += $InputObject.Columns.Count - 1_x000D__x000A_            if ($noHeader) {$row += $InputObject.Rows.Count -1 }_x000D__x000A_            else           {$row += $InputObject.Rows.Count    }_x000D__x000A_            $null = $PSBoundParameters.Remove('InputObject')_x000D__x000A_            $firstTimeThru = $false_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        else  {$firstTimeThru = $true}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process { if ($PSBoundParameters.ContainsKey("InputObject")) {_x000D__x000A_        try {_x000D__x000A_            if ($null -eq $InputObject) {$row += 1}_x000D__x000A_            foreach ($TargetData in $InputObject) {_x000D__x000A_                if ($firstTimeThru) {_x000D__x000A_                    $firstTimeThru = $false_x000D__x000A_                    $isDataTypeValueType = ($null -eq $TargetData) -or ($TargetData.GetType().name -match 'string|timespan|datetime|bool|byte|char|decimal|double|float|int|long|sbyte|short|uint|ulong|ushort|URI|ExcelHyperLink')_x000D__x000A_                    if ($isDataTypeValueType ) {_x000D__x000A_                        $script:Header = @(".")       # dummy value to make sure we go through the "for each name in $header"_x000D__x000A_                        if (-not $Append) {$row -= 1} # By default row will be 1, it is incremented before inserting values (so it ends pointing at final row.);  si first data row is 2 - move back up 1 if there is no header ._x000D__x000A_                    }_x000D__x000A_                    if ($null -ne $TargetData) {Write-Debug "DataTypeName is '$($TargetData.GetType().name)' isDataTypeValueType '$isDataTypeValueType'" }_x000D__x000A_                }_x000D__x000A_                #region Add headers - if we are appending, or we have been through here once already we will have the headers_x000D__x000A_                if (-not $script:Header) {_x000D__x000A_                    if ($DisplayPropertySet -and $TargetData.psStandardmembers.DefaultDisplayPropertySet.ReferencedPropertyNames) {_x000D__x000A_                        $script:Header = $TargetData.psStandardmembers.DefaultDisplayPropertySet.ReferencedPropertyNames.Where( {$_ -notin $ExcludeProperty})_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($NoAliasOrScriptPropeties) {$propType = "Property"} else {$propType = "*"}_x000D__x000A_                        $script:Header = $TargetData.PSObject.Properties.where( {$_.MemberType -like $propType}).Name_x000D__x000A_                    }_x000D__x000A_                    foreach ($exclusion in $ExcludeProperty) {$script:Header = $script:Header -notlike $exclusion}_x000D__x000A_                    if ($NoHeader) {_x000D__x000A_                        # Don't push the headers to the spreadsheet_x000D__x000A_                        $row -= 1_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $ColumnIndex = $StartColumn_x000D__x000A_                        foreach ($Name in $script:Header) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $Name_x000D__x000A_                            Write-Verbose "Cell '$row`:$ColumnIndex' add header '$Name'"_x000D__x000A_                            $ColumnIndex += 1_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                #region Add non header values_x000D__x000A_                $row += 1_x000D__x000A_                $ColumnIndex = $StartColumn_x000D__x000A_                &lt;#_x000D__x000A_                 For each item in the header OR for the Data item if this is a simple Type or data table :_x000D__x000A_                   If it is a date insert with one of Excel's built in formats - recognized as "Date and time to be localized"_x000D__x000A_                   if it is a timespan insert with a built in format for elapsed hours, minutes and seconds_x000D__x000A_                   if its  any other numeric insert as is , setting format if need be._x000D__x000A_                   Preserve URI, Insert a data table, convert non string objects to string._x000D__x000A_                   For strings, check for fomula, URI or Number, before inserting as a string  (ignore nulls) #&gt;_x000D__x000A_                foreach ($Name in $script:Header) {_x000D__x000A_                    if   ($isDataTypeValueType) {$v = $TargetData}_x000D__x000A_                    else {$v = $TargetData.$Name}_x000D__x000A_                    try   {_x000D__x000A_                        if     ($v -is    [DateTime]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = 'm/d/yy h:mm' # This is not a custom format, but a preset recognized as date and localized._x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [TimeSpan]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = '[h]:mm:ss'_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [System.ValueType]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [uri] ) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].HyperLink = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.UnderLine = $true_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -isnot [String] ) { #Other objects or null._x000D__x000A_                            if ($null -ne $v) { $ws.Cells[$row, $ColumnIndex].Value = $v.toString()}_x000D__x000A_                        }_x000D__x000A_                        elseif ($v[0] -eq '=') {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Formula = ($v -replace '^=','')_x000D__x000A_                            if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                        }_x000D__x000A_                        elseif ( [System.Uri]::IsWellFormedUriString($v , [System.UriKind]::Absolute) ) {_x000D__x000A_                            if ($v -match "^xl://internal/") {_x000D__x000A_                                  $referenceAddress = $v -replace "^xl://internal/" , ""_x000D__x000A_                                  $display          = $referenceAddress -replace "!A1$"   , ""_x000D__x000A_                                  $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                                  $ws.Cells[$row, $ColumnIndex].HyperLink = $h_x000D__x000A_                            }_x000D__x000A_                            else {$ws.Cells[$row, $ColumnIndex].HyperLink = $v }   #$ws.Cells[$row, $ColumnIndex].Value = $v.AbsoluteUri_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.UnderLine = $true_x000D__x000A_                        }_x000D__x000A_                        else {_x000D__x000A_                            $number = $null_x000D__x000A_                            if ( $numberRegex.IsMatch($v)     -and  # if it contains digit(s) - this syntax is quicker than -match for many items and cuts out slow checks for non numbers_x000D__x000A_                                 $NoNumberConversion -ne '*'  -and  # and NoNumberConversion isn't specified_x000D__x000A_                                 $NoNumberConversion -notcontains $Name -and_x000D__x000A_                                 [Double]::TryParse($v, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number)_x000D__x000A_                               ) {_x000D__x000A_                                 $ws.Cells[$row, $ColumnIndex].Value = $number_x000D__x000A_                                 if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                            }_x000D__x000A_                            else {_x000D__x000A_                                $ws.Cells[$row, $ColumnIndex].Value  = $v_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -Message "Could not insert the '$Name' property at Row $row, Column $ColumnIndex"}_x000D__x000A_                    $ColumnIndex += 1_x000D__x000A_                }_x000D__x000A_                $ColumnIndex -= 1 # column index will be the last column whether isDataTypeValueType was true or false_x000D__x000A_                #endregion_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed exporting data to worksheet '$WorksheetName' to '$Path': $_" }_x000D__x000A_    }}_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        if ($firstTimeThru -and $ws.Dimension) {_x000D__x000A_              $LastRow        = $ws.Dimension.End.Row_x000D__x000A_              $LastCol        = $ws.Dimension.End.Column_x000D__x000A_              $endAddress     = $ws.Dimension.End.Address_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_              $LastRow        = $row_x000D__x000A_              $LastCol        = $ColumnIndex_x000D__x000A_              $endAddress     = [OfficeOpenXml.ExcelAddress]::GetAddress($LastRow , $LastCol)_x000D__x000A_        }_x000D__x000A_        $startAddress         = [OfficeOpenXml.ExcelAddress]::GetAddress($StartRow, $StartColumn)_x000D__x000A_        $dataRange            = "{0}:{1}" -f $startAddress, $endAddress_x000D__x000A__x000D__x000A_        Write-Debug "Data Range '$dataRange'"_x000D__x000A_        if ($AutoNameRange) {_x000D__x000A_            try {_x000D__x000A_                if (-not $script:header) {_x000D__x000A_                    # if there aren't any headers, use the the first row of data to name the ranges: this is the last point that headers will be used._x000D__x000A_                    $headerRange = $ws.Dimension.Address -replace "\d+$", $StartRow_x000D__x000A_                    #using a slightly odd syntax otherwise header ends up as a 2D array_x000D__x000A_                    $ws.Cells[$headerRange].Value | ForEach-Object -Begin {$Script:header = @()} -Process {$Script:header += $_ }_x000D__x000A_                    if   ($PSBoundParameters.ContainsKey($TargetData)) {  #if Export was called with data that writes no header start the range at $startRow ($startRow is data)_x000D__x000A_                           $targetRow = $StartRow_x000D__x000A_                    }_x000D__x000A_                    else { $targetRow = $StartRow + 1 }                   #if Export was called without data to add names (assume $startRow is a header) or..._x000D__x000A_                }                                                         #          ... called with data that writes a header, then start the range at $startRow + 1_x000D__x000A_                else {     $targetRow = $StartRow + 1 }_x000D__x000A__x000D__x000A_                #Dimension.start.row always seems to be one so we work out the target row_x000D__x000A_                #, but start.column is the first populated one and .Columns is the count of populated ones._x000D__x000A_                # if we have 5 columns from 3 to 8, headers are numbered 0..4, so that is in the for loop and used for getting the name..._x000D__x000A_                # but we have to add the start column on when referencing positions_x000D__x000A_                foreach ($c in 0..($LastCol - $StartColumn)) {_x000D__x000A_                    $targetRangeName = @($script:Header)[$c]  #Let Add-ExcelName fix (and warn about) bad names_x000D__x000A_                    Add-ExcelName  -RangeName $targetRangeName -Range $ws.Cells[$targetRow, ($StartColumn + $c ), $LastRow, ($StartColumn + $c )]_x000D__x000A_                    try {#this test can throw with some names, surpress any error_x000D__x000A_                        if ([OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressUtil]::IsValidAddress(($targetRangeName -replace '\W' , '_' ))) {_x000D__x000A_                            Write-Warning -Message "AutoNameRange: Property name '$targetRangeName' is also a valid Excel address and may cause issues. Consider renaming the property."_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    catch {_x000D__x000A_                        Write-Warning -Message "AutoNameRange: Testing '$targetRangeName' caused an error. This should be harmless, but a change of property name may be needed.."_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed adding named ranges to worksheet '$WorksheetName': $_"  }_x000D__x000A_        }_x000D__x000A_        #Empty string is not allowed as a name for ranges or tables._x000D__x000A_        if ($RangeName) { Add-ExcelName  -Range $ws.Cells[$dataRange] -RangeName $RangeName}_x000D__x000A__x000D__x000A_        #Allow table to be inserted by specifying Name, or Style or both; only process autoFilter if there is no table (they clash)._x000D__x000A_        if     ($null -ne $TableName -or $PSBoundParameters.ContainsKey('TableStyle')) {_x000D__x000A_            #Already inserted Excel table if input was a DataTable_x000D__x000A_            if ($InputObject -isnot [System.Data.DataTable]) {_x000D__x000A_                Add-ExcelTable -Range $ws.Cells[$dataRange] -TableName $TableName -TableStyle $TableStyle_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($AutoFilter) {_x000D__x000A_            try {_x000D__x000A_                $ws.Cells[$dataRange].AutoFilter = $true_x000D__x000A_                Write-Verbose -Message "Enabled autofilter. "_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed adding autofilter to worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PivotTableDefinition) {_x000D__x000A_            foreach ($item in $PivotTableDefinition.GetEnumerator()) {_x000D__x000A_                $params = $item.value_x000D__x000A_                if ($Activate) {$params.Activate = $true   }_x000D__x000A_                if ($params.keys -notcontains 'SourceRange' -and_x000D__x000A_                   ($params.Keys -notcontains 'SourceWorksheet'   -or  $params.SourceWorksheet -eq $WorksheetName)) {$params.SourceRange = $dataRange}_x000D__x000A_                if ($params.Keys -notcontains 'SourceWorksheet')      {$params.SourceWorksheet = $ws }_x000D__x000A_                if ($params.Keys -notcontains 'NoTotalsInPivot'   -and $NoTotalsInPivot  ) {$params.PivotTotals       = 'None'}_x000D__x000A_                if ($params.Keys -notcontains 'PivotTotals'       -and $PivotTotals      ) {$params.PivotTotals       = $PivotTotals}_x000D__x000A_                if ($params.Keys -notcontains 'PivotDataToColumn' -and $PivotDataToColumn) {$params.PivotDataToColumn = $true}_x000D__x000A__x000D__x000A_                Add-PivotTable -ExcelPackage $pkg -PivotTableName $item.key @Params_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($IncludePivotTable -or $IncludePivotChart -or $PivotData) {_x000D__x000A_            $params = @{_x000D__x000A_                'SourceRange' = $dataRange_x000D__x000A_            }_x000D__x000A_            if ($PivotTableName -and ($pkg.workbook.worksheets.tables.name -contains $PivotTableName)) {_x000D__x000A_                Write-Warning -Message "The selected PivotTable name '$PivotTableName' is already used as a table name. Adding a suffix of 'Pivot'."_x000D__x000A_                $PivotTableName += 'Pivot'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if   ($PivotTableName)  {$params.PivotTableName    = $PivotTableName}_x000D__x000A_            else                    {$params.PivotTableName    = $WorksheetName + 'PivotTable'}_x000D__x000A_            if          ($Activate) {$params.Activate          = $true   }_x000D__x000A_            if       ($PivotFilter) {$params.PivotFilter       = $PivotFilter}_x000D__x000A_            if         ($PivotRows) {$params.PivotRows         = $PivotRows}_x000D__x000A_            if      ($PivotColumns) {$Params.PivotColumns      = $PivotColumns}_x000D__x000A_            if         ($PivotData) {$Params.PivotData         = $PivotData}_x000D__x000A_            if   ($NoTotalsInPivot) {$params.PivotTotals       = "None"    }_x000D__x000A_            Elseif   ($PivotTotals) {$params.PivotTotals       = $PivotTotals}_x000D__x000A_            if ($PivotDataToColumn) {$params.PivotDataToColumn = $true}_x000D__x000A_            if ($IncludePivotChart -or_x000D__x000A_                $PSBoundParameters.ContainsKey('PivotChartType')) {_x000D__x000A_                                     $params.IncludePivotChart = $true_x000D__x000A_                                     $Params.ChartType         = $PivotChartType_x000D__x000A_                if ($ShowCategory)  {$params.ShowCategory      = $true}_x000D__x000A_                if ($ShowPercent)   {$params.ShowPercent       = $true}_x000D__x000A_                if ($NoLegend)      {$params.NoLegend          = $true}_x000D__x000A_            }_x000D__x000A_            Add-PivotTable -ExcelPackage $pkg -SourceWorksheet $ws   @params_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            #Allow single switch or two seperate ones._x000D__x000A_            if ($FreezeTopRowFirstColumn -or ($FreezeTopRow -and $FreezeFirstColumn)) {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $ws.View.FreezePanes(3, 2)_x000D__x000A_                    Write-Verbose -Message "Froze title and header rows and first column"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $ws.View.FreezePanes(2, 2)_x000D__x000A_                    Write-Verbose -Message "Froze top row and first column"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            elseif ($FreezeTopRow) {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $ws.View.FreezePanes(2, 1)_x000D__x000A_                    Write-Verbose -Message "Froze title and header rows"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $ws.View.FreezePanes(2, 1)_x000D__x000A_                    Write-Verbose -Message "Froze top row"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            elseif ($FreezeFirstColumn) {_x000D__x000A_                $ws.View.FreezePanes(1, 2)_x000D__x000A_                Write-Verbose -Message "Froze first column"_x000D__x000A_            }_x000D__x000A_            #Must be 1..maxrows or and array of 1..maxRows,1..MaxCols_x000D__x000A_            if ($FreezePane) {_x000D__x000A_                $freezeRow, $freezeColumn = $FreezePane_x000D__x000A_                if (-not $freezeColumn -or $freezeColumn -eq 0) {_x000D__x000A_                    $freezeColumn = 1_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($freezeRow -ge 1) {_x000D__x000A_                    $ws.View.FreezePanes($freezeRow, $freezeColumn)_x000D__x000A_                    Write-Verbose -Message "Froze panes at row $freezeRow and column $FreezeColumn"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {Write-Warning -Message "Failed adding Freezing the panes in worksheet '$WorksheetName': $_"}_x000D__x000A__x000D__x000A_        if ($PSBoundParameters.ContainsKey("BoldTopRow")) { #it sets bold as far as there are populated cells: for whole row could do $ws.row($x).style.font.bold = $true_x000D__x000A_            try {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $range = $ws.Dimension.Address -replace '\d+', ($StartRow + 1)_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $range = $ws.Dimension.Address -replace '\d+', $StartRow_x000D__x000A_                }_x000D__x000A_                $ws.Cells[$range].Style.Font.Bold = [boolean]$BoldTopRow_x000D__x000A_                Write-Verbose -Message "Set $range font style to bold."_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed setting the top row to bold in worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A_        if ($AutoSize -and -not $env:NoAutoSize) {_x000D__x000A_            try {_x000D__x000A_                #Don't fit the all the columns in the sheet; if we are adding cells beside things with hidden columns, that unhides them_x000D__x000A_                if ($MaxAutoSizeRows -and $MaxAutoSizeRows -lt $LastRow ) {_x000D__x000A_                    $AutosizeRange = [OfficeOpenXml.ExcelAddress]::GetAddress($startRow,$StartColumn,   $MaxAutoSizeRows , $LastCol)_x000D__x000A_                    $ws.Cells[$AutosizeRange].AutoFitColumns()_x000D__x000A_                }_x000D__x000A_                else {$ws.Cells[$dataRange].AutoFitColumns()  }_x000D__x000A_                Write-Verbose -Message "Auto-sized columns"_x000D__x000A_            }_x000D__x000A_            catch {  Write-Warning -Message "Failed autosizing columns of worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A_        elseif ($AutoSize) {Write-Warning -Message "Auto-fitting columns is not available with this OS configuration." }_x000D__x000A__x000D__x000A_        foreach ($Sheet in $HideSheet) {_x000D__x000A_            try {_x000D__x000A_                $pkg.Workbook.Worksheets.Where({$_.Name -like $sheet}) | ForEach-Object {_x000D__x000A_                    $_.Hidden = 'Hidden'_x000D__x000A_                    Write-verbose -Message "Sheet '$($_.Name)' Hidden."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message  "Failed hiding worksheet '$sheet': $_"}_x000D__x000A_        }_x000D__x000A_        foreach ($Sheet in $UnHideSheet) {_x000D__x000A_            try {_x000D__x000A_                $pkg.Workbook.Worksheets.Where({$_.Name -like $sheet}) | ForEach-Object {_x000D__x000A_                    $_.Hidden = 'Visible'_x000D__x000A_                    Write-verbose -Message "Sheet '$($_.Name)' shown"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message  "Failed showing worksheet '$sheet': $_"}_x000D__x000A_        }_x000D__x000A_        if (-not $pkg.Workbook.Worksheets.Where({$_.Hidden -eq 'visible'})) {_x000D__x000A_            Write-Verbose -Message "No Sheets were left visible, making $WorksheetName visible"_x000D__x000A_            $ws.Hidden = 'Visible'_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($chartDef in $ExcelChartDefinition) {_x000D__x000A_            if ($chartDef -is [System.Management.Automation.PSCustomObject]) {_x000D__x000A_                $params = @{}_x000D__x000A_                $chartDef.PSObject.Properties | ForEach-Object {if ( $null -ne $_.value) {$params[$_.name] = $_.value}}_x000D__x000A_                Add-ExcelChart -Worksheet $ws @params_x000D__x000A_            }_x000D__x000A_            elseif ($chartDef -is [hashtable] -or  $chartDef -is[System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                Add-ExcelChart -Worksheet $ws @chartDef_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Calculate) {_x000D__x000A_            try   { [OfficeOpenXml.CalculationExtension]::Calculate($ws) }_x000D__x000A_            catch { Write-Warning "One or more errors occured while calculating, save will continue, but there may be errors in the workbook. $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Barchart -or $PieChart -or $LineChart -or $ColumnChart) {_x000D__x000A_            if ($NoHeader) {$FirstDataRow = $startRow}_x000D__x000A_            else           {$FirstDataRow = $startRow + 1 }_x000D__x000A_            $range = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $startColumn, $FirstDataRow, $lastCol )_x000D__x000A_            $xCol  = $ws.cells[$range] | Where-Object {$_.value -is [string]    } | ForEach-Object {$_.start.column} | Sort-Object | Select-Object -first 1_x000D__x000A_            if (-not $xcol) {_x000D__x000A_                $xcol  = $StartColumn_x000D__x000A_                $range = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, ($startColumn +1), $FirstDataRow, $lastCol )_x000D__x000A_            }_x000D__x000A_            $yCol  = $ws.cells[$range] | Where-Object {$_.value -is [valueType] -or $_.Formula } | ForEach-Object {$_.start.column} | Sort-Object | Select-Object -first 1_x000D__x000A_            if (-not ($xCol -and $ycol)) { Write-Warning -Message "Can't identify a string column and a number column to use as chart labels and data. "}_x000D__x000A_            else {_x000D__x000A_                $params = @{_x000D__x000A_                XRange = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $xcol , $lastrow, $xcol)_x000D__x000A_                YRange = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $ycol , $lastrow, $ycol)_x000D__x000A_                Title  =  ''_x000D__x000A_                Column = ($lastCol +1)_x000D__x000A_                Width  = 800_x000D__x000A_                }_x000D__x000A_                if   ($ShowPercent) {$params["ShowPercent"]  = $true}_x000D__x000A_                if  ($ShowCategory) {$params["ShowCategory"] = $true}_x000D__x000A_                if      ($NoLegend) {$params["NoLegend"]     = $true}_x000D__x000A_                if (-not $NoHeader) {$params["SeriesHeader"] = $ws.Cells[$startRow, $YCol].Value}_x000D__x000A_                if   ($ColumnChart) {$Params["chartType"]    = "ColumnStacked" }_x000D__x000A_                elseif  ($Barchart) {$Params["chartType"]    = "BarStacked"    }_x000D__x000A_                elseif  ($PieChart) {$Params["chartType"]    = "PieExploded3D" }_x000D__x000A_                elseif ($LineChart) {$Params["chartType"]    = "Line"          }_x000D__x000A__x000D__x000A_                Add-ExcelChart -Worksheet $ws @params_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # It now doesn't matter if the conditional formating rules are passed in $conditionalText or $conditional format._x000D__x000A_        # Just one with an alias for compatiblity it will break things for people who are using both at once_x000D__x000A_        foreach ($c in  (@() + $ConditionalText  +  $ConditionalFormat) ) {_x000D__x000A_            try {_x000D__x000A_                #we can take an object with a .ConditionalType property made by New-ConditionalText or with a .Formatter Property made by New-ConditionalFormattingIconSet or a hash table_x000D__x000A_                if ($c.ConditionalType) {_x000D__x000A_                    $cfParams = @{RuleType = $c.ConditionalType;    ConditionValue = $c.Text ;_x000D__x000A_                           BackgroundColor = $c.BackgroundColor; BackgroundPattern = $c.PatternType  ;_x000D__x000A_                           ForeGroundColor = $c.ConditionalTextColor}_x000D__x000A_                    if ($c.Range) {$cfParams.Range = $c.Range}_x000D__x000A_                    else          {$cfParams.Range = $ws.Dimension.Address }_x000D__x000A_                    Add-ConditionalFormatting -Worksheet $ws @cfParams_x000D__x000A_                    Write-Verbose -Message "Added conditional formatting to range $($c.range)"_x000D__x000A_                }_x000D__x000A_                elseif ($c.formatter)  {_x000D__x000A_                    switch ($c.formatter) {_x000D__x000A_                        "ThreeIconSet" {Add-ConditionalFormatting -Worksheet $ws -ThreeIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                        "FourIconSet"  {Add-ConditionalFormatting -Worksheet $ws  -FourIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                        "FiveIconSet"  {Add-ConditionalFormatting -Worksheet $ws  -FiveIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                    }_x000D__x000A_                    Write-Verbose -Message "Added conditional formatting to range $($c.range)"_x000D__x000A_                }_x000D__x000A_                elseif ($c -is [hashtable] -or  $c -is[System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                    if (-not $c.Range -or $c.Address) {$c.Address = $ws.Dimension.Address }_x000D__x000A_                    Add-ConditionalFormatting -Worksheet $ws @c_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {throw "Error applying conditional formatting to worksheet $_"}_x000D__x000A_        }_x000D__x000A_        foreach ($s in $Style) {_x000D__x000A_            if (-not $s.Range) {$s["Range"] = $ws.Dimension.Address }_x000D__x000A_            Set-ExcelRange -Worksheet $ws @s_x000D__x000A_        }_x000D__x000A_        if ($CellStyleSB) {_x000D__x000A_            try {_x000D__x000A_                $TotalRows = $ws.Dimension.Rows_x000D__x000A_                $LastColumn = $ws.Dimension.Address -replace "^.*:(\w*)\d+$" , '$1'_x000D__x000A_                &amp; $CellStyleSB $ws $TotalRows $LastColumn_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed processing CellStyleSB in worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #Can only add password, may want to support -password $Null removing password._x000D__x000A_        if ($Password) {_x000D__x000A_            try {_x000D__x000A_                $ws.Protection.SetPassword($Password)_x000D__x000A_                Write-Verbose -Message 'Set password on workbook'_x000D__x000A_            }_x000D__x000A_            catch {throw "Failed setting password for worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PassThru) {       $pkg   }_x000D__x000A_        else {_x000D__x000A_            if ($ReturnRange) {$dataRange }_x000D__x000A__x000D__x000A_            if ($Password) {   $pkg.Save($Password) }_x000D__x000A_            else           {   $pkg.Save() }_x000D__x000A_            Write-Verbose -Message "Saved workbook $($pkg.File)"_x000D__x000A_            if ($ReZip) {_x000D__x000A_                Write-Verbose -Message "Re-Zipping $($pkg.file) using .NET ZIP library"_x000D__x000A_                try {_x000D__x000A_                    Add-Type -AssemblyName 'System.IO.Compression.Filesystem' -ErrorAction stop_x000D__x000A_                }_x000D__x000A_                catch {_x000D__x000A_                    Write-Error "The -ReZip parameter requires .NET Framework 4.5 or later to be installed. Recommend to install Powershell v4+"_x000D__x000A_                    continue_x000D__x000A_                }_x000D__x000A_                try {_x000D__x000A_                    $TempZipPath = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ([System.IO.Path]::GetRandomFileName())_x000D__x000A_                    $null = [io.compression.zipfile]::ExtractToDirectory($pkg.File, $TempZipPath)_x000D__x000A_                    Remove-Item $pkg.File -Force_x000D__x000A_                    $null = [io.compression.zipfile]::CreateFromDirectory($TempZipPath, $pkg.File)_x000D__x000A_                }_x000D__x000A_                catch {throw "Error resizipping $path : $_"}_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $pkg.Dispose()_x000D__x000A__x000D__x000A_            if ($Show) { Invoke-Item $Path }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Default</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Default')]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelPackage])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword", "")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName = 'Default', Position = 0)]_x000D__x000A_        [String]$Path,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "Package")]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        [Alias('TargetData')]_x000D__x000A_        $InputObject,_x000D__x000A_        [Switch]$Calculate,_x000D__x000A_        [Switch]$Show,_x000D__x000A_        [String]$WorksheetName = 'Sheet1',_x000D__x000A_        [Alias("PW")]_x000D__x000A_        [String]$Password,_x000D__x000A_        [switch]$ClearSheet,_x000D__x000A_        [switch]$Append,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$TitleFillPattern = 'Solid',_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize = 22,_x000D__x000A_        $TitleBackgroundColor,_x000D__x000A_        [parameter(DontShow=$true)]_x000D__x000A_        [Switch]$IncludePivotTable,_x000D__x000A_        [String]$PivotTableName,_x000D__x000A_        [String[]]$PivotRows,_x000D__x000A_        [String[]]$PivotColumns,_x000D__x000A_        $PivotData,_x000D__x000A_        [String[]]$PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [Hashtable]$PivotTableDefinition,_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Alias('ChartType')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$PivotChartType = 'Pie',_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        $MaxAutoSizeRows = 1000,_x000D__x000A_        [Switch]$NoClobber,_x000D__x000A_        [Switch]$FreezeTopRow,_x000D__x000A_        [Switch]$FreezeFirstColumn,_x000D__x000A_        [Switch]$FreezeTopRowFirstColumn,_x000D__x000A_        [Int[]]$FreezePane,_x000D__x000A_        [Switch]$AutoFilter,_x000D__x000A_        [Switch]$BoldTopRow,_x000D__x000A_        [Switch]$NoHeader,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'RangeName is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'RangeName starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [String]$RangeName,_x000D__x000A_        [Alias('Table')]_x000D__x000A_        $TableName,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle =  [OfficeOpenXml.Table.TableStyles]::Medium6,_x000D__x000A_        [Switch]$Barchart,_x000D__x000A_        [Switch]$PieChart,_x000D__x000A_        [Switch]$LineChart ,_x000D__x000A_        [Switch]$ColumnChart ,_x000D__x000A_        [Object[]]$ExcelChartDefinition,_x000D__x000A_        [String[]]$HideSheet,_x000D__x000A_        [String[]]$UnHideSheet,_x000D__x000A_        [Switch]$MoveToStart,_x000D__x000A_        [Switch]$MoveToEnd,_x000D__x000A_        $MoveBefore ,_x000D__x000A_        $MoveAfter ,_x000D__x000A_        [Switch]$KillExcel,_x000D__x000A_        [Switch]$AutoNameRange,_x000D__x000A_        [Int]$StartRow = 1,_x000D__x000A_        [Int]$StartColumn = 1,_x000D__x000A_        [alias('PT')]_x000D__x000A_        [Switch]$PassThru,_x000D__x000A_        [String]$Numberformat = 'General',_x000D__x000A_        [string[]]$ExcludeProperty,_x000D__x000A_        [Switch]$NoAliasOrScriptPropeties,_x000D__x000A_        [Switch]$DisplayPropertySet,_x000D__x000A_        [String[]]$NoNumberConversion,_x000D__x000A_        [Object[]]$ConditionalFormat,_x000D__x000A_        [Object[]]$ConditionalText,_x000D__x000A_        [Object[]]$Style,_x000D__x000A_        [ScriptBlock]$CellStyleSB,_x000D__x000A_        #If there is already content in the workbook the sheet with the PivotTable will not be active UNLESS Activate is specified_x000D__x000A_        [switch]$Activate,_x000D__x000A_        [Parameter(ParameterSetName = 'Default')]_x000D__x000A_        [Switch]$Now,_x000D__x000A_        [Switch]$ReturnRange,_x000D__x000A_        #By default PivotTables have Totals for each Row (on the right) and for each column at the bottom. This allows just one or neither to be selected._x000D__x000A_        [ValidateSet("Both","Columns","Rows","None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        #Included for compatibility - equivalent to -PivotTotals "None"_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [Switch]$ReZip_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $numberRegex = [Regex]'\d'_x000D__x000A_        $isDataTypeValueType = $false_x000D__x000A_        if ($NoClobber) {Write-Warning -Message "-NoClobber parameter is no longer used" }_x000D__x000A_        #Open the file, get the worksheet, and decide where in the sheet we are writing, and if there is a number format to apply._x000D__x000A_        try   {_x000D__x000A_            $script:Header = $null_x000D__x000A_            if ($Append -and $ClearSheet) {throw "You can't use -Append AND -ClearSheet." ; return}_x000D__x000A_            #To force -Now not to format as a table, allow $false in -TableName to be "No table"_x000D__x000A_            $TableName = if ($null -eq $TableName -or ($TableName -is [bool] -and $false -eq $TableName)) { $null } else {[String]$TableName}_x000D__x000A_            if ($Now -or (-not $Path -and -not $ExcelPackage) ) {_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("Path")) { $Path = [System.IO.Path]::GetTempFileName() -replace '\.tmp', '.xlsx' }_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("Show")) { $Show = $true }_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("AutoSize")) { $AutoSize = $true }_x000D__x000A_                #"Now" option will create a table, unless something passed in TableName/Table Style. False in TableName will block autocreation_x000D__x000A_                if (-not $PSBoundParameters.ContainsKey("TableName") -and_x000D__x000A_                    -not $PSBoundParameters.ContainsKey("TableStyle") -and_x000D__x000A_                    -not $AutoFilter) {_x000D__x000A_                    $TableName = '' # later rely on distinction between NULL and ""_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($ExcelPackage) {_x000D__x000A_                $pkg = $ExcelPackage_x000D__x000A_                $Path = $pkg.File_x000D__x000A_            }_x000D__x000A_            Else { $pkg = Open-ExcelPackage -Path $Path -Create -KillExcel:$KillExcel -Password:$Password}_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not open Excel Package $path"}_x000D__x000A_        try   {_x000D__x000A_            $params = @{WorksheetName=$WorksheetName}_x000D__x000A_            foreach ($p in @("ClearSheet", "MoveToStart", "MoveToEnd", "MoveBefore", "MoveAfter", "Activate")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_            $ws = $pkg | Add-Worksheet @params_x000D__x000A_            if ($ws.Name -ne $WorksheetName) {_x000D__x000A_                Write-Warning -Message "The Worksheet name has been changed from $WorksheetName to $($ws.Name), this may cause errors later."_x000D__x000A_                $WorksheetName = $ws.Name_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Could not get worksheet $WorksheetName"}_x000D__x000A_        try   {_x000D__x000A_            if ($Append -and $ws.Dimension) {_x000D__x000A_                #if there is a title or anything else above the header row, append needs to be combined wih a suitable startrow parameter_x000D__x000A_                $headerRange = $ws.Dimension.Address -replace "\d+$", $StartRow_x000D__x000A_                #using a slightly odd syntax otherwise header ends up as a 2D array_x000D__x000A_                $ws.Cells[$headerRange].Value | ForEach-Object -Begin {$Script:header = @()} -Process {$Script:header += $_ }_x000D__x000A_                $NoHeader = $true_x000D__x000A_                #if we did not get AutoNameRange, but headers have ranges of the same name make autoNameRange True, otherwise make it false_x000D__x000A_                if (-not $AutoNameRange) {_x000D__x000A_                    $AutoNameRange  = $true ; foreach ($h in $header) {if ($ws.names.name -notcontains $h) {$AutoNameRange = $false} }_x000D__x000A_                }_x000D__x000A_                #if we did not get a Rangename but there is a Range which covers the active part of the sheet, set Rangename to that._x000D__x000A_                if (-not $RangeName -and $ws.names.where({$_.name[0] -match '[a-z]'})) {_x000D__x000A_                    $theRange = $ws.names.where({_x000D__x000A_                         ($_.Name[0]   -match '[a-z]' )              -and_x000D__x000A_                         ($_.Start.Row    -eq $StartRow)             -and_x000D__x000A_                         ($_.Start.Column -eq $StartColumn)          -and_x000D__x000A_                         ($_.End.Row      -eq $ws.Dimension.End.Row) -and_x000D__x000A_                         ($_.End.Column   -eq $ws.Dimension.End.column) } , 'First', 1)_x000D__x000A_                    if ($theRange) {$rangename = $theRange.name}_x000D__x000A_                }_x000D__x000A__x000D__x000A_                #if we did not get a table name but there is a table which covers the active part of the sheet, set table name to that, and don't do anything with autofilter_x000D__x000A_                $existingTable = $ws.Tables.Where({$_.address.address -eq $ws.dimension.address},'First', 1)_x000D__x000A_                if ($null -eq $TableName -and $existingTable) {_x000D__x000A_                    $TableName  = $existingTable.Name_x000D__x000A_                    $TableStyle = $existingTable.StyleName -replace "^TableStyle",""_x000D__x000A_                    $AutoFilter = $false_x000D__x000A_                }_x000D__x000A_                #if we did not get $autofilter but a filter range is set and it covers the right area, set autofilter to true_x000D__x000A_                elseif (-not $AutoFilter -and $ws.Names['_x005F_xlnm._FilterDatabase']) {_x000D__x000A_                    if ( ($ws.Names['_x005F_xlnm._FilterDatabase'].Start.Row    -eq $StartRow)    -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].Start.Column -eq $StartColumn) -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].End.Row      -eq $ws.Dimension.End.Row) -and_x000D__x000A_                         ($ws.Names['_x005F_xlnm._FilterDatabase'].End.Column   -eq $ws.Dimension.End.Column) ) {$AutoFilter = $true}_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $row = $ws.Dimension.End.Row_x000D__x000A_                Write-Debug -Message ("Appending: headers are " + ($script:Header -join ", ") + " Start row is $row")_x000D__x000A_                if ($Title) {Write-Warning -Message "-Title Parameter is ignored when appending."}_x000D__x000A_            }_x000D__x000A_            elseif ($Title) {_x000D__x000A_                #Can only add a title if not appending!_x000D__x000A_                $row = $StartRow_x000D__x000A_                $ws.Cells[$row, $StartColumn].Value = $Title_x000D__x000A_                $ws.Cells[$row, $StartColumn].Style.Font.Size = $TitleSize_x000D__x000A__x000D__x000A_                if  ($PSBoundParameters.ContainsKey("TitleBold")) {_x000D__x000A_                    #Set title to Bold face font if -TitleBold was specified._x000D__x000A_                    #Otherwise the default will be unbolded._x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Font.Bold = [boolean]$TitleBold_x000D__x000A_                }_x000D__x000A_                if ($TitleBackgroundColor ) {_x000D__x000A_                    if ($TitleBackgroundColor -is [string])         {$TitleBackgroundColor = [System.Drawing.Color]::$TitleBackgroundColor }_x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Fill.PatternType = $TitleFillPattern_x000D__x000A_                    $ws.Cells[$row, $StartColumn].Style.Fill.BackgroundColor.SetColor($TitleBackgroundColor)_x000D__x000A_                }_x000D__x000A_                $row ++ ; $startRow ++_x000D__x000A_            }_x000D__x000A_            else {  $row = $StartRow }_x000D__x000A_            $ColumnIndex = $StartColumn_x000D__x000A_            $Numberformat = Expand-NumberFormat -NumberFormat $Numberformat_x000D__x000A_            if ((-not $ws.Dimension) -and ($Numberformat -ne $ws.Cells.Style.Numberformat.Format)) {_x000D__x000A_                    $ws.Cells.Style.Numberformat.Format = $Numberformat_x000D__x000A_                    $setNumformat = $false_x000D__x000A_            }_x000D__x000A_            else {  $setNumformat = ($Numberformat -ne $ws.Cells.Style.Numberformat.Format) }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed preparing to export to worksheet '$WorksheetName' to '$Path': $_"}_x000D__x000A_        #region Special case -inputobject passed a dataTable object_x000D__x000A_        &lt;# If inputObject was passed via the pipeline it won't be visible until the process block, we will only see it here if it was passed as a parameter_x000D__x000A_          if it is a data table don't do foreach on it (slow) - put the whole table in and set dates on date columns,_x000D__x000A_          set things up for the end block, and skip the process block #&gt;_x000D__x000A_        if ($InputObject -is  [System.Data.DataTable])  {_x000D__x000A_            if ($Append -and $ws.dimension) {_x000D__x000A_                $row ++_x000D__x000A_                $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, $false )_x000D__x000A_                if ($TableName -or  $PSBoundParameters.ContainsKey('TableStyle')) {_x000D__x000A_                    Add-ExcelTable -Range $ws.Cells[$ws.Dimension] -TableName $TableName -TableStyle $TableStyle_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            else  {_x000D__x000A_                #Change TableName if $TableName is non-empty; don't leave caller with a renamed table!_x000D__x000A_                $orginalTableName = $InputObject.TableName_x000D__x000A_                if ($PSBoundParameters.ContainsKey("TableName")) {_x000D__x000A_                    $InputObject.TableName = $TableName_x000D__x000A_                }_x000D__x000A_                while ($InputObject.TableName -in $pkg.Workbook.Worksheets.Tables.name) {_x000D__x000A_                    Write-Warning "Table name $($InputObject.TableName) is not unique, adding '_' to it "_x000D__x000A_                    $InputObject.TableName += "_"_x000D__x000A_                }_x000D__x000A_                #Insert as a table, if Tablestyle didn't arrive as a default, or $TableName non-null - even if empty_x000D__x000A_                if ($null -ne $TableName -or $PSBoundParameters.ContainsKey("TableStyle")) {_x000D__x000A_                    $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, (-not $noHeader),$TableStyle )_x000D__x000A_                    # Workaround for EPPlus not marking the empty row on an empty table as dummy row._x000D__x000A_                    if ($InputObject.Rows.Count -eq 0) {_x000D__x000A_                        ($ws.Tables | Select-Object -Last 1).TableXml.table.SetAttribute('insertRow', 1)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $null = $ws.Cells[$row,$StartColumn].LoadFromDataTable($InputObject, (-not $noHeader) )_x000D__x000A_                }_x000D__x000A_                $InputObject.TableName = $orginalTableName_x000D__x000A_            }_x000D__x000A_            foreach ($c in $InputObject.Columns.where({$_.datatype -eq [datetime]})) {_x000D__x000A_                Set-ExcelColumn -Worksheet $ws -Column ($c.Ordinal + $StartColumn) -NumberFormat 'Date-Time'_x000D__x000A_            }_x000D__x000A_            foreach ($c in $InputObject.Columns.where({$_.datatype -eq [timespan]})) {_x000D__x000A_                Set-ExcelColumn -Worksheet $ws -Column ($c.Ordinal + $StartColumn) -NumberFormat '[h]:mm:ss'_x000D__x000A_            }_x000D__x000A_            $ColumnIndex         += $InputObject.Columns.Count - 1_x000D__x000A_            if ($noHeader) {$row += $InputObject.Rows.Count -1 }_x000D__x000A_            else           {$row += $InputObject.Rows.Count    }_x000D__x000A_            $null = $PSBoundParameters.Remove('InputObject')_x000D__x000A_            $firstTimeThru = $false_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        else  {$firstTimeThru = $true}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process { if ($PSBoundParameters.ContainsKey("InputObject")) {_x000D__x000A_        try {_x000D__x000A_            if ($null -eq $InputObject) {$row += 1}_x000D__x000A_            foreach ($TargetData in $InputObject) {_x000D__x000A_                if ($firstTimeThru) {_x000D__x000A_                    $firstTimeThru = $false_x000D__x000A_                    $isDataTypeValueType = ($null -eq $TargetData) -or ($TargetData.GetType().name -match 'string|timespan|datetime|bool|byte|char|decimal|double|float|int|long|sbyte|short|uint|ulong|ushort|URI|ExcelHyperLink')_x000D__x000A_                    if ($isDataTypeValueType ) {_x000D__x000A_                        $script:Header = @(".")       # dummy value to make sure we go through the "for each name in $header"_x000D__x000A_                        if (-not $Append) {$row -= 1} # By default row will be 1, it is incremented before inserting values (so it ends pointing at final row.);  si first data row is 2 - move back up 1 if there is no header ._x000D__x000A_                    }_x000D__x000A_                    if ($null -ne $TargetData) {Write-Debug "DataTypeName is '$($TargetData.GetType().name)' isDataTypeValueType '$isDataTypeValueType'" }_x000D__x000A_                }_x000D__x000A_                #region Add headers - if we are appending, or we have been through here once already we will have the headers_x000D__x000A_                if (-not $script:Header) {_x000D__x000A_                    if ($DisplayPropertySet -and $TargetData.psStandardmembers.DefaultDisplayPropertySet.ReferencedPropertyNames) {_x000D__x000A_                        $script:Header = $TargetData.psStandardmembers.DefaultDisplayPropertySet.ReferencedPropertyNames.Where( {$_ -notin $ExcludeProperty})_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        if ($NoAliasOrScriptPropeties) {$propType = "Property"} else {$propType = "*"}_x000D__x000A_                        $script:Header = $TargetData.PSObject.Properties.where( {$_.MemberType -like $propType}).Name_x000D__x000A_                    }_x000D__x000A_                    foreach ($exclusion in $ExcludeProperty) {$script:Header = $script:Header -notlike $exclusion}_x000D__x000A_                    if ($NoHeader) {_x000D__x000A_                        # Don't push the headers to the spreadsheet_x000D__x000A_                        $row -= 1_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        $ColumnIndex = $StartColumn_x000D__x000A_                        foreach ($Name in $script:Header) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $Name_x000D__x000A_                            Write-Verbose "Cell '$row`:$ColumnIndex' add header '$Name'"_x000D__x000A_                            $ColumnIndex += 1_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                #region Add non header values_x000D__x000A_                $row += 1_x000D__x000A_                $ColumnIndex = $StartColumn_x000D__x000A_                &lt;#_x000D__x000A_                 For each item in the header OR for the Data item if this is a simple Type or data table :_x000D__x000A_                   If it is a date insert with one of Excel's built in formats - recognized as "Date and time to be localized"_x000D__x000A_                   if it is a timespan insert with a built in format for elapsed hours, minutes and seconds_x000D__x000A_                   if its  any other numeric insert as is , setting format if need be._x000D__x000A_                   Preserve URI, Insert a data table, convert non string objects to string._x000D__x000A_                   For strings, check for fomula, URI or Number, before inserting as a string  (ignore nulls) #&gt;_x000D__x000A_                foreach ($Name in $script:Header) {_x000D__x000A_                    if   ($isDataTypeValueType) {$v = $TargetData}_x000D__x000A_                    else {$v = $TargetData.$Name}_x000D__x000A_                    try   {_x000D__x000A_                        if     ($v -is    [DateTime]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = 'm/d/yy h:mm' # This is not a custom format, but a preset recognized as date and localized._x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [TimeSpan]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = '[h]:mm:ss'_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [System.ValueType]) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Value = $v_x000D__x000A_                            if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -is    [uri] ) {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].HyperLink = $v_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.UnderLine = $true_x000D__x000A_                        }_x000D__x000A_                        elseif ($v -isnot [String] ) { #Other objects or null._x000D__x000A_                            if ($null -ne $v) { $ws.Cells[$row, $ColumnIndex].Value = $v.toString()}_x000D__x000A_                        }_x000D__x000A_                        elseif ($v[0] -eq '=') {_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Formula = ($v -replace '^=','')_x000D__x000A_                            if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                        }_x000D__x000A_                        elseif ( [System.Uri]::IsWellFormedUriString($v , [System.UriKind]::Absolute) ) {_x000D__x000A_                            if ($v -match "^xl://internal/") {_x000D__x000A_                                  $referenceAddress = $v -replace "^xl://internal/" , ""_x000D__x000A_                                  $display          = $referenceAddress -replace "!A1$"   , ""_x000D__x000A_                                  $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                                  $ws.Cells[$row, $ColumnIndex].HyperLink = $h_x000D__x000A_                            }_x000D__x000A_                            else {$ws.Cells[$row, $ColumnIndex].HyperLink = $v }   #$ws.Cells[$row, $ColumnIndex].Value = $v.AbsoluteUri_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                            $ws.Cells[$row, $ColumnIndex].Style.Font.UnderLine = $true_x000D__x000A_                        }_x000D__x000A_                        else {_x000D__x000A_                            $number = $null_x000D__x000A_                            if ( $numberRegex.IsMatch($v)     -and  # if it contains digit(s) - this syntax is quicker than -match for many items and cuts out slow checks for non numbers_x000D__x000A_                                 $NoNumberConversion -ne '*'  -and  # and NoNumberConversion isn't specified_x000D__x000A_                                 $NoNumberConversion -notcontains $Name -and_x000D__x000A_                                 [Double]::TryParse($v, [System.Globalization.NumberStyles]::Any, [System.Globalization.NumberFormatInfo]::CurrentInfo, [Ref]$number)_x000D__x000A_                               ) {_x000D__x000A_                                 $ws.Cells[$row, $ColumnIndex].Value = $number_x000D__x000A_                                 if ($setNumformat) {$ws.Cells[$row, $ColumnIndex].Style.Numberformat.Format = $Numberformat }_x000D__x000A_                            }_x000D__x000A_                            else {_x000D__x000A_                                $ws.Cells[$row, $ColumnIndex].Value  = $v_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    catch {Write-Warning -Message "Could not insert the '$Name' property at Row $row, Column $ColumnIndex"}_x000D__x000A_                    $ColumnIndex += 1_x000D__x000A_                }_x000D__x000A_                $ColumnIndex -= 1 # column index will be the last column whether isDataTypeValueType was true or false_x000D__x000A_                #endregion_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed exporting data to worksheet '$WorksheetName' to '$Path': $_" }_x000D__x000A_    }}_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        if ($firstTimeThru -and $ws.Dimension) {_x000D__x000A_              $LastRow        = $ws.Dimension.End.Row_x000D__x000A_              $LastCol        = $ws.Dimension.End.Column_x000D__x000A_              $endAddress     = $ws.Dimension.End.Address_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_              $LastRow        = $row_x000D__x000A_              $LastCol        = $ColumnIndex_x000D__x000A_              $endAddress     = [OfficeOpenXml.ExcelAddress]::GetAddress($LastRow , $LastCol)_x000D__x000A_        }_x000D__x000A_        $startAddress         = [OfficeOpenXml.ExcelAddress]::GetAddress($StartRow, $StartColumn)_x000D__x000A_        $dataRange            = "{0}:{1}" -f $startAddress, $endAddress_x000D__x000A__x000D__x000A_        Write-Debug "Data Range '$dataRange'"_x000D__x000A_        if ($AutoNameRange) {_x000D__x000A_            try {_x000D__x000A_                if (-not $script:header) {_x000D__x000A_                    # if there aren't any headers, use the the first row of data to name the ranges: this is the last point that headers will be used._x000D__x000A_                    $headerRange = $ws.Dimension.Address -replace "\d+$", $StartRow_x000D__x000A_                    #using a slightly odd syntax otherwise header ends up as a 2D array_x000D__x000A_                    $ws.Cells[$headerRange].Value | ForEach-Object -Begin {$Script:header = @()} -Process {$Script:header += $_ }_x000D__x000A_                    if   ($PSBoundParameters.ContainsKey($TargetData)) {  #if Export was called with data that writes no header start the range at $startRow ($startRow is data)_x000D__x000A_                           $targetRow = $StartRow_x000D__x000A_                    }_x000D__x000A_                    else { $targetRow = $StartRow + 1 }                   #if Export was called without data to add names (assume $startRow is a header) or..._x000D__x000A_                }                                                         #          ... called with data that writes a header, then start the range at $startRow + 1_x000D__x000A_                else {     $targetRow = $StartRow + 1 }_x000D__x000A__x000D__x000A_                #Dimension.start.row always seems to be one so we work out the target row_x000D__x000A_                #, but start.column is the first populated one and .Columns is the count of populated ones._x000D__x000A_                # if we have 5 columns from 3 to 8, headers are numbered 0..4, so that is in the for loop and used for getting the name..._x000D__x000A_                # but we have to add the start column on when referencing positions_x000D__x000A_                foreach ($c in 0..($LastCol - $StartColumn)) {_x000D__x000A_                    $targetRangeName = @($script:Header)[$c]  #Let Add-ExcelName fix (and warn about) bad names_x000D__x000A_                    Add-ExcelName  -RangeName $targetRangeName -Range $ws.Cells[$targetRow, ($StartColumn + $c ), $LastRow, ($StartColumn + $c )]_x000D__x000A_                    try {#this test can throw with some names, surpress any error_x000D__x000A_                        if ([OfficeOpenXml.FormulaParsing.ExcelUtilities.ExcelAddressUtil]::IsValidAddress(($targetRangeName -replace '\W' , '_' ))) {_x000D__x000A_                            Write-Warning -Message "AutoNameRange: Property name '$targetRangeName' is also a valid Excel address and may cause issues. Consider renaming the property."_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    catch {_x000D__x000A_                        Write-Warning -Message "AutoNameRange: Testing '$targetRangeName' caused an error. This should be harmless, but a change of property name may be needed.."_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed adding named ranges to worksheet '$WorksheetName': $_"  }_x000D__x000A_        }_x000D__x000A_        #Empty string is not allowed as a name for ranges or tables._x000D__x000A_        if ($RangeName) { Add-ExcelName  -Range $ws.Cells[$dataRange] -RangeName $RangeName}_x000D__x000A__x000D__x000A_        #Allow table to be inserted by specifying Name, or Style or both; only process autoFilter if there is no table (they clash)._x000D__x000A_        if     ($null -ne $TableName -or $PSBoundParameters.ContainsKey('TableStyle')) {_x000D__x000A_            #Already inserted Excel table if input was a DataTable_x000D__x000A_            if ($InputObject -isnot [System.Data.DataTable]) {_x000D__x000A_                Add-ExcelTable -Range $ws.Cells[$dataRange] -TableName $TableName -TableStyle $TableStyle_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        elseif ($AutoFilter) {_x000D__x000A_            try {_x000D__x000A_                $ws.Cells[$dataRange].AutoFilter = $true_x000D__x000A_                Write-Verbose -Message "Enabled autofilter. "_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed adding autofilter to worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PivotTableDefinition) {_x000D__x000A_            foreach ($item in $PivotTableDefinition.GetEnumerator()) {_x000D__x000A_                $params = $item.value_x000D__x000A_                if ($Activate) {$params.Activate = $true   }_x000D__x000A_                if ($params.keys -notcontains 'SourceRange' -and_x000D__x000A_                   ($params.Keys -notcontains 'SourceWorksheet'   -or  $params.SourceWorksheet -eq $WorksheetName)) {$params.SourceRange = $dataRange}_x000D__x000A_                if ($params.Keys -notcontains 'SourceWorksheet')      {$params.SourceWorksheet = $ws }_x000D__x000A_                if ($params.Keys -notcontains 'NoTotalsInPivot'   -and $NoTotalsInPivot  ) {$params.PivotTotals       = 'None'}_x000D__x000A_                if ($params.Keys -notcontains 'PivotTotals'       -and $PivotTotals      ) {$params.PivotTotals       = $PivotTotals}_x000D__x000A_                if ($params.Keys -notcontains 'PivotDataToColumn' -and $PivotDataToColumn) {$params.PivotDataToColumn = $true}_x000D__x000A__x000D__x000A_                Add-PivotTable -ExcelPackage $pkg -PivotTableName $item.key @Params_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        if ($IncludePivotTable -or $IncludePivotChart -or $PivotData) {_x000D__x000A_            $params = @{_x000D__x000A_                'SourceRange' = $dataRange_x000D__x000A_            }_x000D__x000A_            if ($PivotTableName -and ($pkg.workbook.worksheets.tables.name -contains $PivotTableName)) {_x000D__x000A_                Write-Warning -Message "The selected PivotTable name '$PivotTableName' is already used as a table name. Adding a suffix of 'Pivot'."_x000D__x000A_                $PivotTableName += 'Pivot'_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if   ($PivotTableName)  {$params.PivotTableName    = $PivotTableName}_x000D__x000A_            else                    {$params.PivotTableName    = $WorksheetName + 'PivotTable'}_x000D__x000A_            if          ($Activate) {$params.Activate          = $true   }_x000D__x000A_            if       ($PivotFilter) {$params.PivotFilter       = $PivotFilter}_x000D__x000A_            if         ($PivotRows) {$params.PivotRows         = $PivotRows}_x000D__x000A_            if      ($PivotColumns) {$Params.PivotColumns      = $PivotColumns}_x000D__x000A_            if         ($PivotData) {$Params.PivotData         = $PivotData}_x000D__x000A_            if   ($NoTotalsInPivot) {$params.PivotTotals       = "None"    }_x000D__x000A_            Elseif   ($PivotTotals) {$params.PivotTotals       = $PivotTotals}_x000D__x000A_            if ($PivotDataToColumn) {$params.PivotDataToColumn = $true}_x000D__x000A_            if ($IncludePivotChart -or_x000D__x000A_                $PSBoundParameters.ContainsKey('PivotChartType')) {_x000D__x000A_                                     $params.IncludePivotChart = $true_x000D__x000A_                                     $Params.ChartType         = $PivotChartType_x000D__x000A_                if ($ShowCategory)  {$params.ShowCategory      = $true}_x000D__x000A_                if ($ShowPercent)   {$params.ShowPercent       = $true}_x000D__x000A_                if ($NoLegend)      {$params.NoLegend          = $true}_x000D__x000A_            }_x000D__x000A_            Add-PivotTable -ExcelPackage $pkg -SourceWorksheet $ws   @params_x000D__x000A_        }_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            #Allow single switch or two seperate ones._x000D__x000A_            if ($FreezeTopRowFirstColumn -or ($FreezeTopRow -and $FreezeFirstColumn)) {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $ws.View.FreezePanes(3, 2)_x000D__x000A_                    Write-Verbose -Message "Froze title and header rows and first column"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $ws.View.FreezePanes(2, 2)_x000D__x000A_                    Write-Verbose -Message "Froze top row and first column"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            elseif ($FreezeTopRow) {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $ws.View.FreezePanes(2, 1)_x000D__x000A_                    Write-Verbose -Message "Froze title and header rows"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $ws.View.FreezePanes(2, 1)_x000D__x000A_                    Write-Verbose -Message "Froze top row"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            elseif ($FreezeFirstColumn) {_x000D__x000A_                $ws.View.FreezePanes(1, 2)_x000D__x000A_                Write-Verbose -Message "Froze first column"_x000D__x000A_            }_x000D__x000A_            #Must be 1..maxrows or and array of 1..maxRows,1..MaxCols_x000D__x000A_            if ($FreezePane) {_x000D__x000A_                $freezeRow, $freezeColumn = $FreezePane_x000D__x000A_                if (-not $freezeColumn -or $freezeColumn -eq 0) {_x000D__x000A_                    $freezeColumn = 1_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($freezeRow -ge 1) {_x000D__x000A_                    $ws.View.FreezePanes($freezeRow, $freezeColumn)_x000D__x000A_                    Write-Verbose -Message "Froze panes at row $freezeRow and column $FreezeColumn"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {Write-Warning -Message "Failed adding Freezing the panes in worksheet '$WorksheetName': $_"}_x000D__x000A__x000D__x000A_        if ($PSBoundParameters.ContainsKey("BoldTopRow")) { #it sets bold as far as there are populated cells: for whole row could do $ws.row($x).style.font.bold = $true_x000D__x000A_            try {_x000D__x000A_                if ($Title) {_x000D__x000A_                    $range = $ws.Dimension.Address -replace '\d+', ($StartRow + 1)_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $range = $ws.Dimension.Address -replace '\d+', $StartRow_x000D__x000A_                }_x000D__x000A_                $ws.Cells[$range].Style.Font.Bold = [boolean]$BoldTopRow_x000D__x000A_                Write-Verbose -Message "Set $range font style to bold."_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed setting the top row to bold in worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A_        if ($AutoSize -and -not $env:NoAutoSize) {_x000D__x000A_            try {_x000D__x000A_                #Don't fit the all the columns in the sheet; if we are adding cells beside things with hidden columns, that unhides them_x000D__x000A_                if ($MaxAutoSizeRows -and $MaxAutoSizeRows -lt $LastRow ) {_x000D__x000A_                    $AutosizeRange = [OfficeOpenXml.ExcelAddress]::GetAddress($startRow,$StartColumn,   $MaxAutoSizeRows , $LastCol)_x000D__x000A_                    $ws.Cells[$AutosizeRange].AutoFitColumns()_x000D__x000A_                }_x000D__x000A_                else {$ws.Cells[$dataRange].AutoFitColumns()  }_x000D__x000A_                Write-Verbose -Message "Auto-sized columns"_x000D__x000A_            }_x000D__x000A_            catch {  Write-Warning -Message "Failed autosizing columns of worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A_        elseif ($AutoSize) {Write-Warning -Message "Auto-fitting columns is not available with this OS configuration." }_x000D__x000A__x000D__x000A_        foreach ($Sheet in $HideSheet) {_x000D__x000A_            try {_x000D__x000A_                $pkg.Workbook.Worksheets.Where({$_.Name -like $sheet}) | ForEach-Object {_x000D__x000A_                    $_.Hidden = 'Hidden'_x000D__x000A_                    Write-verbose -Message "Sheet '$($_.Name)' Hidden."_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message  "Failed hiding worksheet '$sheet': $_"}_x000D__x000A_        }_x000D__x000A_        foreach ($Sheet in $UnHideSheet) {_x000D__x000A_            try {_x000D__x000A_                $pkg.Workbook.Worksheets.Where({$_.Name -like $sheet}) | ForEach-Object {_x000D__x000A_                    $_.Hidden = 'Visible'_x000D__x000A_                    Write-verbose -Message "Sheet '$($_.Name)' shown"_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message  "Failed showing worksheet '$sheet': $_"}_x000D__x000A_        }_x000D__x000A_        if (-not $pkg.Workbook.Worksheets.Where({$_.Hidden -eq 'visible'})) {_x000D__x000A_            Write-Verbose -Message "No Sheets were left visible, making $WorksheetName visible"_x000D__x000A_            $ws.Hidden = 'Visible'_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($chartDef in $ExcelChartDefinition) {_x000D__x000A_            if ($chartDef -is [System.Management.Automation.PSCustomObject]) {_x000D__x000A_                $params = @{}_x000D__x000A_                $chartDef.PSObject.Properties | ForEach-Object {if ( $null -ne $_.value) {$params[$_.name] = $_.value}}_x000D__x000A_                Add-ExcelChart -Worksheet $ws @params_x000D__x000A_            }_x000D__x000A_            elseif ($chartDef -is [hashtable] -or  $chartDef -is[System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                Add-ExcelChart -Worksheet $ws @chartDef_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Calculate) {_x000D__x000A_            try   { [OfficeOpenXml.CalculationExtension]::Calculate($ws) }_x000D__x000A_            catch { Write-Warning "One or more errors occured while calculating, save will continue, but there may be errors in the workbook. $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Barchart -or $PieChart -or $LineChart -or $ColumnChart) {_x000D__x000A_            if ($NoHeader) {$FirstDataRow = $startRow}_x000D__x000A_            else           {$FirstDataRow = $startRow + 1 }_x000D__x000A_            $range = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $startColumn, $FirstDataRow, $lastCol )_x000D__x000A_            $xCol  = $ws.cells[$range] | Where-Object {$_.value -is [string]    } | ForEach-Object {$_.start.column} | Sort-Object | Select-Object -first 1_x000D__x000A_            if (-not $xcol) {_x000D__x000A_                $xcol  = $StartColumn_x000D__x000A_                $range = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, ($startColumn +1), $FirstDataRow, $lastCol )_x000D__x000A_            }_x000D__x000A_            $yCol  = $ws.cells[$range] | Where-Object {$_.value -is [valueType] -or $_.Formula } | ForEach-Object {$_.start.column} | Sort-Object | Select-Object -first 1_x000D__x000A_            if (-not ($xCol -and $ycol)) { Write-Warning -Message "Can't identify a string column and a number column to use as chart labels and data. "}_x000D__x000A_            else {_x000D__x000A_                $params = @{_x000D__x000A_                XRange = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $xcol , $lastrow, $xcol)_x000D__x000A_                YRange = [OfficeOpenXml.ExcelAddress]::GetAddress($FirstDataRow, $ycol , $lastrow, $ycol)_x000D__x000A_                Title  =  ''_x000D__x000A_                Column = ($lastCol +1)_x000D__x000A_                Width  = 800_x000D__x000A_                }_x000D__x000A_                if   ($ShowPercent) {$params["ShowPercent"]  = $true}_x000D__x000A_                if  ($ShowCategory) {$params["ShowCategory"] = $true}_x000D__x000A_                if      ($NoLegend) {$params["NoLegend"]     = $true}_x000D__x000A_                if (-not $NoHeader) {$params["SeriesHeader"] = $ws.Cells[$startRow, $YCol].Value}_x000D__x000A_                if   ($ColumnChart) {$Params["chartType"]    = "ColumnStacked" }_x000D__x000A_                elseif  ($Barchart) {$Params["chartType"]    = "BarStacked"    }_x000D__x000A_                elseif  ($PieChart) {$Params["chartType"]    = "PieExploded3D" }_x000D__x000A_                elseif ($LineChart) {$Params["chartType"]    = "Line"          }_x000D__x000A__x000D__x000A_                Add-ExcelChart -Worksheet $ws @params_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # It now doesn't matter if the conditional formating rules are passed in $conditionalText or $conditional format._x000D__x000A_        # Just one with an alias for compatiblity it will break things for people who are using both at once_x000D__x000A_        foreach ($c in  (@() + $ConditionalText  +  $ConditionalFormat) ) {_x000D__x000A_            try {_x000D__x000A_                #we can take an object with a .ConditionalType property made by New-ConditionalText or with a .Formatter Property made by New-ConditionalFormattingIconSet or a hash table_x000D__x000A_                if ($c.ConditionalType) {_x000D__x000A_                    $cfParams = @{RuleType = $c.ConditionalType;    ConditionValue = $c.Text ;_x000D__x000A_                           BackgroundColor = $c.BackgroundColor; BackgroundPattern = $c.PatternType  ;_x000D__x000A_                           ForeGroundColor = $c.ConditionalTextColor}_x000D__x000A_                    if ($c.Range) {$cfParams.Range = $c.Range}_x000D__x000A_                    else          {$cfParams.Range = $ws.Dimension.Address }_x000D__x000A_                    Add-ConditionalFormatting -Worksheet $ws @cfParams_x000D__x000A_                    Write-Verbose -Message "Added conditional formatting to range $($c.range)"_x000D__x000A_                }_x000D__x000A_                elseif ($c.formatter)  {_x000D__x000A_                    switch ($c.formatter) {_x000D__x000A_                        "ThreeIconSet" {Add-ConditionalFormatting -Worksheet $ws -ThreeIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                        "FourIconSet"  {Add-ConditionalFormatting -Worksheet $ws  -FourIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                        "FiveIconSet"  {Add-ConditionalFormatting -Worksheet $ws  -FiveIconsSet $c.IconType -range $c.range -reverse:$c.reverse  }_x000D__x000A_                    }_x000D__x000A_                    Write-Verbose -Message "Added conditional formatting to range $($c.range)"_x000D__x000A_                }_x000D__x000A_                elseif ($c -is [hashtable] -or  $c -is[System.Collections.Specialized.OrderedDictionary]) {_x000D__x000A_                    if (-not $c.Range -or $c.Address) {$c.Address = $ws.Dimension.Address }_x000D__x000A_                    Add-ConditionalFormatting -Worksheet $ws @c_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {throw "Error applying conditional formatting to worksheet $_"}_x000D__x000A_        }_x000D__x000A_        foreach ($s in $Style) {_x000D__x000A_            if (-not $s.Range) {$s["Range"] = $ws.Dimension.Address }_x000D__x000A_            Set-ExcelRange -Worksheet $ws @s_x000D__x000A_        }_x000D__x000A_        if ($CellStyleSB) {_x000D__x000A_            try {_x000D__x000A_                $TotalRows = $ws.Dimension.Rows_x000D__x000A_                $LastColumn = $ws.Dimension.Address -replace "^.*:(\w*)\d+$" , '$1'_x000D__x000A_                &amp; $CellStyleSB $ws $TotalRows $LastColumn_x000D__x000A_            }_x000D__x000A_            catch {Write-Warning -Message "Failed processing CellStyleSB in worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #Can only add password, may want to support -password $Null removing password._x000D__x000A_        if ($Password) {_x000D__x000A_            try {_x000D__x000A_                $ws.Protection.SetPassword($Password)_x000D__x000A_                Write-Verbose -Message 'Set password on workbook'_x000D__x000A_            }_x000D__x000A_            catch {throw "Failed setting password for worksheet '$WorksheetName': $_"}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($PassThru) {       $pkg   }_x000D__x000A_        else {_x000D__x000A_            if ($ReturnRange) {$dataRange }_x000D__x000A__x000D__x000A_            if ($Password) {   $pkg.Save($Password) }_x000D__x000A_            else           {   $pkg.Save() }_x000D__x000A_            Write-Verbose -Message "Saved workbook $($pkg.File)"_x000D__x000A_            if ($ReZip) {_x000D__x000A_                Write-Verbose -Message "Re-Zipping $($pkg.file) using .NET ZIP library"_x000D__x000A_                try {_x000D__x000A_                    Add-Type -AssemblyName 'System.IO.Compression.Filesystem' -ErrorAction stop_x000D__x000A_                }_x000D__x000A_                catch {_x000D__x000A_                    Write-Error "The -ReZip parameter requires .NET Framework 4.5 or later to be installed. Recommend to install Powershell v4+"_x000D__x000A_                    continue_x000D__x000A_                }_x000D__x000A_                try {_x000D__x000A_                    $TempZipPath = Join-Path -Path ([System.IO.Path]::GetTempPath()) -ChildPath ([System.IO.Path]::GetRandomFileName())_x000D__x000A_                    $null = [io.compression.zipfile]::ExtractToDirectory($pkg.File, $TempZipPath)_x000D__x000A_                    Remove-Item $pkg.File -Force_x000D__x000A_                    $null = [io.compression.zipfile]::CreateFromDirectory($TempZipPath, $pkg.File)_x000D__x000A_                }_x000D__x000A_                catch {throw "Error resizipping $path : $_"}_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $pkg.Dispose()_x000D__x000A__x000D__x000A_            if ($Show) { Invoke-Item $Path }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="1808">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Export</S>
      <S N="Noun">Excel</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1809">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.ExcelPackage</S>
        </LST>
      </Obj>
      <S N="Name">Export-Excel</S>
      <Obj N="CommandType" RefId="1810">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="1811">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="1812">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1813">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1814">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1815">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="1816">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="1817">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InputObject</S>
            <Obj N="Value" RefId="1818">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InputObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1819">
                  <TNRef RefId="25" />
                  <LST>
                    <S>TargetData</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Calculate</S>
            <Obj N="Value" RefId="1820">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Calculate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1821">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="1822">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1823">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="1824">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1825">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Password</S>
            <Obj N="Value" RefId="1826">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Password</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1827">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PW</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ClearSheet</S>
            <Obj N="Value" RefId="1828">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ClearSheet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1829">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Append</S>
            <Obj N="Value" RefId="1830">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Append</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1831">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Title</S>
            <Obj N="Value" RefId="1832">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Title</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1833">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleFillPattern</S>
            <Obj N="Value" RefId="1834">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleFillPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="1835">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBold</S>
            <Obj N="Value" RefId="1836">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1837">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleSize</S>
            <Obj N="Value" RefId="1838">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1839">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBackgroundColor</S>
            <Obj N="Value" RefId="1840">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1841">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotTable</S>
            <Obj N="Value" RefId="1842">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotTable</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1843">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableName</S>
            <Obj N="Value" RefId="1844">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1845">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotRows</S>
            <Obj N="Value" RefId="1846">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotRows</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1847">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotColumns</S>
            <Obj N="Value" RefId="1848">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotColumns</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1849">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotData</S>
            <Obj N="Value" RefId="1850">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1851">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotFilter</S>
            <Obj N="Value" RefId="1852">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotFilter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1853">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotDataToColumn</S>
            <Obj N="Value" RefId="1854">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotDataToColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1855">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableDefinition</S>
            <Obj N="Value" RefId="1856">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableDefinition</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="1857">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotChart</S>
            <Obj N="Value" RefId="1858">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1859">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotChartType</S>
            <Obj N="Value" RefId="1860">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="1861">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ChartType</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="1862">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1863">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="1864">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1865">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="1866">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1867">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="1868">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1869">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MaxAutoSizeRows</S>
            <Obj N="Value" RefId="1870">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MaxAutoSizeRows</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1871">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoClobber</S>
            <Obj N="Value" RefId="1872">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoClobber</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1873">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRow</S>
            <Obj N="Value" RefId="1874">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1875">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeFirstColumn</S>
            <Obj N="Value" RefId="1876">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1877">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRowFirstColumn</S>
            <Obj N="Value" RefId="1878">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRowFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1879">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezePane</S>
            <Obj N="Value" RefId="1880">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezePane</S>
                <S N="ParameterType">System.Int32[]</S>
                <Obj N="Aliases" RefId="1881">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoFilter</S>
            <Obj N="Value" RefId="1882">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoFilter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1883">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BoldTopRow</S>
            <Obj N="Value" RefId="1884">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BoldTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1885">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="1886">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1887">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RangeName</S>
            <Obj N="Value" RefId="1888">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RangeName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1889">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableName</S>
            <Obj N="Value" RefId="1890">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1891">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Table</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableStyle</S>
            <Obj N="Value" RefId="1892">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="1893">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Barchart</S>
            <Obj N="Value" RefId="1894">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Barchart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1895">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PieChart</S>
            <Obj N="Value" RefId="1896">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PieChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1897">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LineChart</S>
            <Obj N="Value" RefId="1898">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LineChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1899">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ColumnChart</S>
            <Obj N="Value" RefId="1900">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ColumnChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1901">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelChartDefinition</S>
            <Obj N="Value" RefId="1902">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelChartDefinition</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="1903">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HideSheet</S>
            <Obj N="Value" RefId="1904">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HideSheet</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1905">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnHideSheet</S>
            <Obj N="Value" RefId="1906">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnHideSheet</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1907">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToStart</S>
            <Obj N="Value" RefId="1908">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToStart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1909">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToEnd</S>
            <Obj N="Value" RefId="1910">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToEnd</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1911">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveBefore</S>
            <Obj N="Value" RefId="1912">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveBefore</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1913">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveAfter</S>
            <Obj N="Value" RefId="1914">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveAfter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1915">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">KillExcel</S>
            <Obj N="Value" RefId="1916">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">KillExcel</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1917">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoNameRange</S>
            <Obj N="Value" RefId="1918">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoNameRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1919">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartRow</S>
            <Obj N="Value" RefId="1920">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1921">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartColumn</S>
            <Obj N="Value" RefId="1922">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1923">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="1924">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1925">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PT</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Numberformat</S>
            <Obj N="Value" RefId="1926">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Numberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1927">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="1928">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1929">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoAliasOrScriptPropeties</S>
            <Obj N="Value" RefId="1930">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoAliasOrScriptPropeties</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1931">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DisplayPropertySet</S>
            <Obj N="Value" RefId="1932">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DisplayPropertySet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1933">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoNumberConversion</S>
            <Obj N="Value" RefId="1934">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoNumberConversion</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="1935">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalFormat</S>
            <Obj N="Value" RefId="1936">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalFormat</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="1937">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalText</S>
            <Obj N="Value" RefId="1938">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalText</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="1939">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Style</S>
            <Obj N="Value" RefId="1940">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Style</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="1941">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CellStyleSB</S>
            <Obj N="Value" RefId="1942">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CellStyleSB</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="1943">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Activate</S>
            <Obj N="Value" RefId="1944">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Activate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1945">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Now</S>
            <Obj N="Value" RefId="1946">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Now</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1947">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReturnRange</S>
            <Obj N="Value" RefId="1948">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReturnRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1949">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTotals</S>
            <Obj N="Value" RefId="1950">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTotals</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1951">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoTotalsInPivot</S>
            <Obj N="Value" RefId="1952">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoTotalsInPivot</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1953">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReZip</S>
            <Obj N="Value" RefId="1954">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReZip</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1955">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1956">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1957">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1958">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1959">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1960">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1961">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="1962">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1963">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="1964">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1965">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="1966">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1967">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="1968">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1969">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="1970">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1971">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="1972">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1973">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="1974">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="1975">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="1976">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1977">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="1978">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="1979">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string&gt;] [-InputObject &lt;Object&gt;] [-Calculate] [-Show] [-WorksheetName &lt;string&gt;] [-Password &lt;string&gt;] [-ClearSheet] [-Append] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-IncludePivotTable] [-PivotTableName &lt;string&gt;] [-PivotRows &lt;string[]&gt;] [-PivotColumns &lt;string[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;string[]&gt;] [-PivotDataToColumn] [-PivotTableDefinition &lt;hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-AutoFilter] [-BoldTopRow] [-NoHeader] [-RangeName &lt;string&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;] [-Barchart] [-PieChart] [-LineChart] [-ColumnChart] [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;string[]&gt;] [-UnHideSheet &lt;string[]&gt;] [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-PassThru] [-Numberformat &lt;string&gt;] [-ExcludeProperty &lt;string[]&gt;] [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;string[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;scriptblock&gt;] [-Activate] [-Now] [-ReturnRange] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Default</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="1980">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="1981">
            <TNRef RefId="8" />
            <ToString>-ExcelPackage &lt;ExcelPackage&gt; [-InputObject &lt;Object&gt;] [-Calculate] [-Show] [-WorksheetName &lt;string&gt;] [-Password &lt;string&gt;] [-ClearSheet] [-Append] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-IncludePivotTable] [-PivotTableName &lt;string&gt;] [-PivotRows &lt;string[]&gt;] [-PivotColumns &lt;string[]&gt;] [-PivotData &lt;Object&gt;] [-PivotFilter &lt;string[]&gt;] [-PivotDataToColumn] [-PivotTableDefinition &lt;hashtable&gt;] [-IncludePivotChart] [-PivotChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-AutoSize] [-MaxAutoSizeRows &lt;Object&gt;] [-NoClobber] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-AutoFilter] [-BoldTopRow] [-NoHeader] [-RangeName &lt;string&gt;] [-TableName &lt;Object&gt;] [-TableStyle &lt;TableStyles&gt;] [-Barchart] [-PieChart] [-LineChart] [-ColumnChart] [-ExcelChartDefinition &lt;Object[]&gt;] [-HideSheet &lt;string[]&gt;] [-UnHideSheet &lt;string[]&gt;] [-MoveToStart] [-MoveToEnd] [-MoveBefore &lt;Object&gt;] [-MoveAfter &lt;Object&gt;] [-KillExcel] [-AutoNameRange] [-StartRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-PassThru] [-Numberformat &lt;string&gt;] [-ExcludeProperty &lt;string[]&gt;] [-NoAliasOrScriptPropeties] [-DisplayPropertySet] [-NoNumberConversion &lt;string[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-Style &lt;Object[]&gt;] [-CellStyleSB &lt;scriptblock&gt;] [-Activate] [-ReturnRange] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-ReZip] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Package</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="1982">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Export-Excel</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="1983">
    <TNRef RefId="0" />
    <ToString>Export-JUnitReport</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an JUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    JUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-JUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an JUnit 4-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format JUnitXml_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an JUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    JUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the JUnit 4-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-JUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an JUnit 4-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-JUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format JUnitXml_x000D__x000A_</S>
      <Obj N="Options" RefId="1984">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Export</S>
      <S N="Noun">JUnitReport</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="1985">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Export-JUnitReport</S>
      <Obj N="CommandType" RefId="1986">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="1987">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="1988">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="1989">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Result</S>
            <Obj N="Value" RefId="1990">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Result</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="1991">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="1992">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="1993">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="1994">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1995">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="1996">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="1997">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="1998">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="1999">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2000">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2001">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2002">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2003">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2004">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2005">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2006">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2007">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2008">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2009">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2010">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2011">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2012">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2013">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2014">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2015">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2016">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2017">
            <TNRef RefId="8" />
            <ToString>[-Result] &lt;Object&gt; [-Path] &lt;string&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2018">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Export-JUnitReport</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Export-JUnitReport</S>
    </MS>
  </Obj>
  <Obj RefId="2019">
    <TNRef RefId="0" />
    <ToString>Export-NUnitReport</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an NUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-NUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an NUnit 2.5-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format NUnitXml_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Exports a Pester result-object to an NUnit-compatible XML-report_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester can generate a result-object containing information about all_x000D__x000A_    tests that are processed in a run. This object can then be exported to an_x000D__x000A_    NUnit-compatible XML-report using this function. The report is generated_x000D__x000A_    using the NUnit 2.5-schema._x000D__x000A__x000D__x000A_    This can be useful for further processing or publishing of test results,_x000D__x000A_    e.g. as part of a CI/CD pipeline._x000D__x000A__x000D__x000A_    .PARAMETER Result_x000D__x000A_    Result object from a Pester-run. This can be retrieved using Invoke-Pester_x000D__x000A_    -Passthru or by using the Run.PassThru configuration-option._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    The path where the XML-report should  to the ou the XML report as string._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $p = Invoke-Pester -Passthru_x000D__x000A_    $p | Export-NUnitReport -Path TestResults.xml_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using the Passthru option to retrieve the result-object and_x000D__x000A_    exports it as an NUnit 2.5-compatible XML-report._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Export-NUnitReport_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [parameter(Mandatory = $true, ValueFromPipeline = $true)]_x000D__x000A_        $Result,_x000D__x000A__x000D__x000A_        [parameter(Mandatory = $true)]_x000D__x000A_        [String] $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Export-XmlReport -Result $Result -Path $Path -Format NUnitXml_x000D__x000A_</S>
      <Obj N="Options" RefId="2020">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Export</S>
      <S N="Noun">NUnitReport</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2021">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Export-NUnitReport</S>
      <Obj N="CommandType" RefId="2022">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="2023">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="2024">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2025">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Result</S>
            <Obj N="Value" RefId="2026">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Result</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2027">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2028">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2029">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2030">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2031">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2032">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2033">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2034">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2035">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2036">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2037">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2038">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2039">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2040">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2041">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2042">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2043">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2044">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2045">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2046">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2047">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2048">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2049">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2050">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2051">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2052">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2053">
            <TNRef RefId="8" />
            <ToString>[-Result] &lt;Object&gt; [-Path] &lt;string&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2054">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Export-NUnitReport</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Export-NUnitReport</S>
    </MS>
  </Obj>
  <Obj RefId="2055">
    <TNRef RefId="0" />
    <ToString>F:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="2056">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2057">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">F:</S>
      <Obj N="CommandType" RefId="2058">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2059">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2060">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2061">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2062">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2063">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2064">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::F:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2065">
    <TNRef RefId="0" />
    <ToString>Find-Ast</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='FilterScript')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ParameterSetName='FilterScript')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [scriptblock]_x000D__x000A_        $FilterScript = { $true },_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, ParameterSetName='FilterScript')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.Ast]_x000D__x000A_        $Ast,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $Before,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $Family,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Closest', 'F')]_x000D__x000A_        [switch]_x000D__x000A_        $First,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Furthest')]_x000D__x000A_        [switch]_x000D__x000A_        $Last,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Parent')]_x000D__x000A_        [switch]_x000D__x000A_        $Ancestor,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $IncludeStartingAst,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='AtCursor')]_x000D__x000A_        [switch]_x000D__x000A_        $AtCursor_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        # InvokeWithContext method is PS4+, but it's significantly faster for large files._x000D__x000A_        if ($PSVersionTable.PSVersion.Major -ge 4) {_x000D__x000A__x000D__x000A_            $variableType = [System.Management.Automation.PSVariable]_x000D__x000A_            function InvokeWithContext {_x000D__x000A_                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)_x000D__x000A__x000D__x000A_                return $Filter.InvokeWithContext(_x000D__x000A_                        &lt;# functionsToDefine: #&gt; $null,_x000D__x000A_                        &lt;# variablesToDefine: #&gt; [Activator]::CreateInstance($variableType, @('_', $DollarUnder)),_x000D__x000A_                        &lt;# args:              #&gt; $aAst)_x000D__x000A_            }_x000D__x000A_        } else {_x000D__x000A_            $FilterScript = [scriptblock]::Create($FilterScript.ToString())_x000D__x000A_            function InvokeWithContext {_x000D__x000A_                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)_x000D__x000A__x000D__x000A_                return $DollarUnder | &amp; { process { $Filter.InvokeReturnAsIs($DollarUnder) } }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        # Get all children or ancestors._x000D__x000A_        function GetAllFamily {_x000D__x000A_            param($Start)_x000D__x000A__x000D__x000A_            if ($Before.IsPresent) {_x000D__x000A_                $parent = $Start_x000D__x000A_                for ($parent; $parent = $parent.Parent) { $parent }_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            return $Start.FindAll({ $true }, $true)_x000D__x000A_        }_x000D__x000A_        # Get all asts regardless of structure, in either direction from the starting ast._x000D__x000A_        function GetAllAsts {_x000D__x000A_            param($Start)_x000D__x000A__x000D__x000A_            $predicate = [Func[System.Management.Automation.Language.Ast,bool]]{_x000D__x000A_                $args[0] -ne $Ast_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $topParent = Find-Ast -Ast $Start -Ancestor -Last -IncludeStartingAst_x000D__x000A_            if (-not $topParent) { $topParent = $Start }_x000D__x000A__x000D__x000A_            if ($Before.IsPresent) {_x000D__x000A_                # Need to store so we can reverse the collection._x000D__x000A_                $result = [Linq.Enumerable]::TakeWhile(_x000D__x000A_                    $topParent.FindAll({ $true }, $true),_x000D__x000A_                    $predicate) -as [System.Management.Automation.Language.Ast[]]_x000D__x000A__x000D__x000A_                [array]::Reverse($result)_x000D__x000A_                return $result_x000D__x000A_            }_x000D__x000A_            return [Linq.Enumerable]::SkipWhile(_x000D__x000A_                $topParent.FindAll({ $true }, $true),_x000D__x000A_                $predicate)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Ancestor.IsPresent) {_x000D__x000A_            $Family = $Before = $true_x000D__x000A_        }_x000D__x000A_        $context = $psEditor.GetEditorContext()_x000D__x000A__x000D__x000A_        if (-not $Ast -and $context) {_x000D__x000A_            $Ast = $context.CurrentFile.Ast_x000D__x000A_        }_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            AtCursor {_x000D__x000A_                $cursorLine     = $context.CursorPosition.Line - 1_x000D__x000A_                $cursorColumn   = $context.CursorPosition.Column - 1_x000D__x000A_                $cursorOffset   = $Ast.Extent.Text |_x000D__x000A_                    Select-String "(.*\r?\n){$cursorLine}.{$cursorColumn}" |_x000D__x000A_                    ForEach-Object { $PSItem.Matches.Value.Length }_x000D__x000A__x000D__x000A_                # yield_x000D__x000A_                Find-Ast -Last {_x000D__x000A_                    $cursorOffset -ge $PSItem.Extent.StartOffset -and_x000D__x000A_                    $cursorOffset -le $PSItem.Extent.EndOffset_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            FilterScript {_x000D__x000A_                if (-not $Ast) { return }_x000D__x000A__x000D__x000A_                # Check if we're trying to get the top level ancestor when we're already there._x000D__x000A_                if ($Before.IsPresent -and_x000D__x000A_                    $Family.IsPresent -and_x000D__x000A_                    $Last.IsPresent   -and -not_x000D__x000A_                    $Ast.Parent       -and_x000D__x000A_                    $Ast -is [System.Management.Automation.Language.ScriptBlockAst])_x000D__x000A_                    { return $Ast }_x000D__x000A__x000D__x000A_                if ($Family.IsPresent) {_x000D__x000A_                    $asts = GetAllFamily $Ast_x000D__x000A_                } else {_x000D__x000A_                    $asts = GetAllAsts $Ast_x000D__x000A_                }_x000D__x000A_                # Check the first ast to see if it's our starting ast, unless_x000D__x000A_                $checkFirstAst = -not $IncludeStartingAst_x000D__x000A_                foreach ($aAst in $asts) {_x000D__x000A_                    if ($checkFirstAst) {_x000D__x000A_                        if ($aAst -eq $Ast) {_x000D__x000A_                            $checkFirstAst = $false_x000D__x000A_                            continue_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    $shouldReturn = InvokeWithContext $FilterScript $aAst_x000D__x000A__x000D__x000A_                    if (-not $shouldReturn) { continue }_x000D__x000A__x000D__x000A_                    # Return first, last, both, or all depending on the combination of switches._x000D__x000A_                    if (-not $Last.IsPresent) {_x000D__x000A_                        $aAst # yield_x000D__x000A_                        if ($First.IsPresent) { break }_x000D__x000A_                    } else {_x000D__x000A_                        $lastMatch = $aAst_x000D__x000A_                        if ($First.IsPresent) {_x000D__x000A_                            $aAst # yield_x000D__x000A_                            $First = $false_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                # yield_x000D__x000A_                if ($Last.IsPresent) { return $lastMatch }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">FilterScript</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='FilterScript')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ParameterSetName='FilterScript')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [scriptblock]_x000D__x000A_        $FilterScript = { $true },_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName, ParameterSetName='FilterScript')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.Ast]_x000D__x000A_        $Ast,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $Before,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $Family,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Closest', 'F')]_x000D__x000A_        [switch]_x000D__x000A_        $First,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Furthest')]_x000D__x000A_        [switch]_x000D__x000A_        $Last,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [Alias('Parent')]_x000D__x000A_        [switch]_x000D__x000A_        $Ancestor,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='FilterScript')]_x000D__x000A_        [switch]_x000D__x000A_        $IncludeStartingAst,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='AtCursor')]_x000D__x000A_        [switch]_x000D__x000A_        $AtCursor_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        # InvokeWithContext method is PS4+, but it's significantly faster for large files._x000D__x000A_        if ($PSVersionTable.PSVersion.Major -ge 4) {_x000D__x000A__x000D__x000A_            $variableType = [System.Management.Automation.PSVariable]_x000D__x000A_            function InvokeWithContext {_x000D__x000A_                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)_x000D__x000A__x000D__x000A_                return $Filter.InvokeWithContext(_x000D__x000A_                        &lt;# functionsToDefine: #&gt; $null,_x000D__x000A_                        &lt;# variablesToDefine: #&gt; [Activator]::CreateInstance($variableType, @('_', $DollarUnder)),_x000D__x000A_                        &lt;# args:              #&gt; $aAst)_x000D__x000A_            }_x000D__x000A_        } else {_x000D__x000A_            $FilterScript = [scriptblock]::Create($FilterScript.ToString())_x000D__x000A_            function InvokeWithContext {_x000D__x000A_                param([scriptblock]$Filter, [System.Management.Automation.Language.Ast]$DollarUnder)_x000D__x000A__x000D__x000A_                return $DollarUnder | &amp; { process { $Filter.InvokeReturnAsIs($DollarUnder) } }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        # Get all children or ancestors._x000D__x000A_        function GetAllFamily {_x000D__x000A_            param($Start)_x000D__x000A__x000D__x000A_            if ($Before.IsPresent) {_x000D__x000A_                $parent = $Start_x000D__x000A_                for ($parent; $parent = $parent.Parent) { $parent }_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A_            return $Start.FindAll({ $true }, $true)_x000D__x000A_        }_x000D__x000A_        # Get all asts regardless of structure, in either direction from the starting ast._x000D__x000A_        function GetAllAsts {_x000D__x000A_            param($Start)_x000D__x000A__x000D__x000A_            $predicate = [Func[System.Management.Automation.Language.Ast,bool]]{_x000D__x000A_                $args[0] -ne $Ast_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $topParent = Find-Ast -Ast $Start -Ancestor -Last -IncludeStartingAst_x000D__x000A_            if (-not $topParent) { $topParent = $Start }_x000D__x000A__x000D__x000A_            if ($Before.IsPresent) {_x000D__x000A_                # Need to store so we can reverse the collection._x000D__x000A_                $result = [Linq.Enumerable]::TakeWhile(_x000D__x000A_                    $topParent.FindAll({ $true }, $true),_x000D__x000A_                    $predicate) -as [System.Management.Automation.Language.Ast[]]_x000D__x000A__x000D__x000A_                [array]::Reverse($result)_x000D__x000A_                return $result_x000D__x000A_            }_x000D__x000A_            return [Linq.Enumerable]::SkipWhile(_x000D__x000A_                $topParent.FindAll({ $true }, $true),_x000D__x000A_                $predicate)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Ancestor.IsPresent) {_x000D__x000A_            $Family = $Before = $true_x000D__x000A_        }_x000D__x000A_        $context = $psEditor.GetEditorContext()_x000D__x000A__x000D__x000A_        if (-not $Ast -and $context) {_x000D__x000A_            $Ast = $context.CurrentFile.Ast_x000D__x000A_        }_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            AtCursor {_x000D__x000A_                $cursorLine     = $context.CursorPosition.Line - 1_x000D__x000A_                $cursorColumn   = $context.CursorPosition.Column - 1_x000D__x000A_                $cursorOffset   = $Ast.Extent.Text |_x000D__x000A_                    Select-String "(.*\r?\n){$cursorLine}.{$cursorColumn}" |_x000D__x000A_                    ForEach-Object { $PSItem.Matches.Value.Length }_x000D__x000A__x000D__x000A_                # yield_x000D__x000A_                Find-Ast -Last {_x000D__x000A_                    $cursorOffset -ge $PSItem.Extent.StartOffset -and_x000D__x000A_                    $cursorOffset -le $PSItem.Extent.EndOffset_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            FilterScript {_x000D__x000A_                if (-not $Ast) { return }_x000D__x000A__x000D__x000A_                # Check if we're trying to get the top level ancestor when we're already there._x000D__x000A_                if ($Before.IsPresent -and_x000D__x000A_                    $Family.IsPresent -and_x000D__x000A_                    $Last.IsPresent   -and -not_x000D__x000A_                    $Ast.Parent       -and_x000D__x000A_                    $Ast -is [System.Management.Automation.Language.ScriptBlockAst])_x000D__x000A_                    { return $Ast }_x000D__x000A__x000D__x000A_                if ($Family.IsPresent) {_x000D__x000A_                    $asts = GetAllFamily $Ast_x000D__x000A_                } else {_x000D__x000A_                    $asts = GetAllAsts $Ast_x000D__x000A_                }_x000D__x000A_                # Check the first ast to see if it's our starting ast, unless_x000D__x000A_                $checkFirstAst = -not $IncludeStartingAst_x000D__x000A_                foreach ($aAst in $asts) {_x000D__x000A_                    if ($checkFirstAst) {_x000D__x000A_                        if ($aAst -eq $Ast) {_x000D__x000A_                            $checkFirstAst = $false_x000D__x000A_                            continue_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                    $shouldReturn = InvokeWithContext $FilterScript $aAst_x000D__x000A__x000D__x000A_                    if (-not $shouldReturn) { continue }_x000D__x000A__x000D__x000A_                    # Return first, last, both, or all depending on the combination of switches._x000D__x000A_                    if (-not $Last.IsPresent) {_x000D__x000A_                        $aAst # yield_x000D__x000A_                        if ($First.IsPresent) { break }_x000D__x000A_                    } else {_x000D__x000A_                        $lastMatch = $aAst_x000D__x000A_                        if ($First.IsPresent) {_x000D__x000A_                            $aAst # yield_x000D__x000A_                            $First = $false_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                # yield_x000D__x000A_                if ($Last.IsPresent) { return $lastMatch }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2066">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Find</S>
      <S N="Noun">Ast</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2067">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Find-Ast</S>
      <Obj N="CommandType" RefId="2068">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="2069">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="2070">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2071">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">FilterScript</S>
            <Obj N="Value" RefId="2072">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FilterScript</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="2073">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Ast</S>
            <Obj N="Value" RefId="2074">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Ast</S>
                <S N="ParameterType">System.Management.Automation.Language.Ast</S>
                <Obj N="Aliases" RefId="2075">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Before</S>
            <Obj N="Value" RefId="2076">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Before</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2077">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Family</S>
            <Obj N="Value" RefId="2078">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Family</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2079">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">First</S>
            <Obj N="Value" RefId="2080">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">First</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2081">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Closest</S>
                    <S>F</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Last</S>
            <Obj N="Value" RefId="2082">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Last</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2083">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Furthest</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Ancestor</S>
            <Obj N="Value" RefId="2084">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Ancestor</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2085">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Parent</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludeStartingAst</S>
            <Obj N="Value" RefId="2086">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludeStartingAst</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2087">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AtCursor</S>
            <Obj N="Value" RefId="2088">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AtCursor</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2089">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2090">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2091">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2092">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2093">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2094">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2095">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2096">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2097">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2098">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2099">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2100">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2101">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2102">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2103">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2104">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2105">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2106">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2107">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2108">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2109">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2110">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2111">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2112">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2113">
            <TNRef RefId="8" />
            <ToString>[[-FilterScript] &lt;scriptblock&gt;] [-Ast &lt;Ast&gt;] [-Before] [-Family] [-First] [-Last] [-Ancestor] [-IncludeStartingAst] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">FilterScript</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="2114">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2115">
            <TNRef RefId="8" />
            <ToString>[-AtCursor] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">AtCursor</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2116">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Find-Ast</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Find-Ast.md</S>
    </MS>
  </Obj>
  <Obj RefId="2117">
    <TNRef RefId="0" />
    <ToString>G:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="2118">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2119">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">G:</S>
      <Obj N="CommandType" RefId="2120">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2121">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2122">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2123">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2124">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2125">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2126">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::G:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2127">
    <TNRef RefId="0" />
    <ToString>Get-ExcelColumnName</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $ColumnNumber=1_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process {_x000D__x000A_        $dividend = $ColumnNumber_x000D__x000A_        $columnName = New-Object System.Collections.ArrayList($null)_x000D__x000A__x000D__x000A_        while($dividend -gt 0) {_x000D__x000A_            $modulo      = ($dividend - 1) % 26_x000D__x000A_            if ($columnName.length -eq 0) {_x000D__x000A_                [char](65 + $modulo)_x000D__x000A_            } else {_x000D__x000A_                $columnName.insert(0,[char](65 + $modulo))_x000D__x000A_            }_x000D__x000A_            $dividend    = [int](($dividend -$modulo)/26)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [PSCustomObject] @{_x000D__x000A_            ColumnNumber = $ColumnNumber_x000D__x000A_            ColumnName   = $columnName -join ''_x000D__x000A_        }_x000D__x000A__x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $ColumnNumber=1_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process {_x000D__x000A_        $dividend = $ColumnNumber_x000D__x000A_        $columnName = New-Object System.Collections.ArrayList($null)_x000D__x000A__x000D__x000A_        while($dividend -gt 0) {_x000D__x000A_            $modulo      = ($dividend - 1) % 26_x000D__x000A_            if ($columnName.length -eq 0) {_x000D__x000A_                [char](65 + $modulo)_x000D__x000A_            } else {_x000D__x000A_                $columnName.insert(0,[char](65 + $modulo))_x000D__x000A_            }_x000D__x000A_            $dividend    = [int](($dividend -$modulo)/26)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [PSCustomObject] @{_x000D__x000A_            ColumnNumber = $ColumnNumber_x000D__x000A_            ColumnName   = $columnName -join ''_x000D__x000A_        }_x000D__x000A__x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2128">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">ExcelColumnName</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2129">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-ExcelColumnName</S>
      <Obj N="CommandType" RefId="2130">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2131">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2132">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2133">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ColumnNumber</S>
            <Obj N="Value" RefId="2134">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ColumnNumber</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2135">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2136">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2137">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2138">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2139">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2140">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2141">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2142">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2143">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2144">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2145">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2146">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2147">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2148">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2149">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2150">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2151">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2152">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2153">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2154">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2155">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2156">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2157">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2158">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2159">
            <TNRef RefId="8" />
            <ToString>[[-ColumnNumber] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2160">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-ExcelColumnName</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2161">
    <TNRef RefId="0" />
    <ToString>Get-ExcelSheetInfo</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName=$true, ValueFromPipeline=$true, Mandatory=$true)]_x000D__x000A_        $Path_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $Path = (Resolve-Path $Path).ProviderPath_x000D__x000A__x000D__x000A_        $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path,'Open','Read','ReadWrite'_x000D__x000A_        $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_        $workbook  = $xl.Workbook_x000D__x000A__x000D__x000A_        if ($workbook -and $workbook.Worksheets) {_x000D__x000A_            $workbook.Worksheets |_x000D__x000A_                Select-Object -Property name,index,hidden,@{_x000D__x000A_                    Label = 'Path'_x000D__x000A_                    Expression = {$Path}_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $stream.Close()_x000D__x000A_        $stream.Dispose()_x000D__x000A_        $xl.Dispose()_x000D__x000A_        $xl = $null_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName=$true, ValueFromPipeline=$true, Mandatory=$true)]_x000D__x000A_        $Path_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        $Path = (Resolve-Path $Path).ProviderPath_x000D__x000A__x000D__x000A_        $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path,'Open','Read','ReadWrite'_x000D__x000A_        $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_        $workbook  = $xl.Workbook_x000D__x000A__x000D__x000A_        if ($workbook -and $workbook.Worksheets) {_x000D__x000A_            $workbook.Worksheets |_x000D__x000A_                Select-Object -Property name,index,hidden,@{_x000D__x000A_                    Label = 'Path'_x000D__x000A_                    Expression = {$Path}_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $stream.Close()_x000D__x000A_        $stream.Dispose()_x000D__x000A_        $xl.Dispose()_x000D__x000A_        $xl = $null_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2162">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">ExcelSheetInfo</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2163">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-ExcelSheetInfo</S>
      <Obj N="CommandType" RefId="2164">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2165">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2166">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2167">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2168">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2169">
                  <TNRef RefId="25" />
                  <LST>
                    <S>FullName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2170">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2171">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2172">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2173">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2174">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2175">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2176">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2177">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2178">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2179">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2180">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2181">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2182">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2183">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2184">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2185">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2186">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2187">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2188">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2189">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2190">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2191">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2192">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2193">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2194">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-ExcelSheetInfo</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="2195">
    <TNRef RefId="0" />
    <ToString>Get-ExcelWorkbookInfo</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName=$true, ValueFromPipeline=$true, Mandatory=$true)]_x000D__x000A_        [String]$Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        try {_x000D__x000A_            $Path = (Resolve-Path $Path).ProviderPath_x000D__x000A__x000D__x000A_            $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path,'Open','Read','ReadWrite'_x000D__x000A_            $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_            $workbook  = $xl.Workbook_x000D__x000A_            $workbook.Properties_x000D__x000A__x000D__x000A_            $stream.Close()_x000D__x000A_            $stream.Dispose()_x000D__x000A_            $xl.Dispose()_x000D__x000A_            $xl = $null_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            throw "Failed retrieving Excel workbook information for '$Path': $_"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName=$true, ValueFromPipeline=$true, Mandatory=$true)]_x000D__x000A_        [String]$Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        try {_x000D__x000A_            $Path = (Resolve-Path $Path).ProviderPath_x000D__x000A__x000D__x000A_            $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path,'Open','Read','ReadWrite'_x000D__x000A_            $xl = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $stream_x000D__x000A_            $workbook  = $xl.Workbook_x000D__x000A_            $workbook.Properties_x000D__x000A__x000D__x000A_            $stream.Close()_x000D__x000A_            $stream.Dispose()_x000D__x000A_            $xl.Dispose()_x000D__x000A_            $xl = $null_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            throw "Failed retrieving Excel workbook information for '$Path': $_"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2196">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">ExcelWorkbookInfo</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2197">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-ExcelWorkbookInfo</S>
      <Obj N="CommandType" RefId="2198">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2199">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2200">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2201">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2202">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2203">
                  <TNRef RefId="25" />
                  <LST>
                    <S>FullName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2204">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2205">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2206">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2207">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2208">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2209">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2210">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2211">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2212">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2213">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2214">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2215">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2216">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2217">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2218">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2219">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2220">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2221">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2222">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2223">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2224">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2225">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2226">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2227">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2228">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-ExcelWorkbookInfo</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="2229">
    <TNRef RefId="0" />
    <ToString>Get-HtmlTable</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        $Url,_x000D__x000A_        $TableIndex=0,_x000D__x000A_        $Header,_x000D__x000A_        [int]$FirstDataRow=0,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $r = Invoke-WebRequest $Url -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A__x000D__x000A_    $table = $r.ParsedHtml.getElementsByTagName("table")[$TableIndex]_x000D__x000A_    $propertyNames=$Header_x000D__x000A_    $totalRows=@($table.rows).count_x000D__x000A__x000D__x000A_    for ($idx = $FirstDataRow; $idx -lt $totalRows; $idx++) {_x000D__x000A__x000D__x000A_        $row = $table.rows[$idx]_x000D__x000A_        $cells = @($row.cells)_x000D__x000A__x000D__x000A_        if(!$propertyNames) {_x000D__x000A_            if($cells[0].tagName -eq 'th') {_x000D__x000A_                $propertyNames = @($cells | ForEach-Object {$_.innertext -replace ' ',''})_x000D__x000A_            } else  {_x000D__x000A_                $propertyNames =  @(1..($cells.Count + 2) | Foreach-Object { "P$_" })_x000D__x000A_            }_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result = [ordered]@{}_x000D__x000A__x000D__x000A_        for($counter = 0; $counter -lt $cells.Count; $counter++) {_x000D__x000A_            $propertyName = $propertyNames[$counter]_x000D__x000A__x000D__x000A_            if(!$propertyName) { $propertyName= '[missing]'}_x000D__x000A_            $result.$propertyName= $cells[$counter].InnerText_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [PSCustomObject]$result_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        $Url,_x000D__x000A_        $TableIndex=0,_x000D__x000A_        $Header,_x000D__x000A_        [int]$FirstDataRow=0,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $r = Invoke-WebRequest $Url -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A__x000D__x000A_    $table = $r.ParsedHtml.getElementsByTagName("table")[$TableIndex]_x000D__x000A_    $propertyNames=$Header_x000D__x000A_    $totalRows=@($table.rows).count_x000D__x000A__x000D__x000A_    for ($idx = $FirstDataRow; $idx -lt $totalRows; $idx++) {_x000D__x000A__x000D__x000A_        $row = $table.rows[$idx]_x000D__x000A_        $cells = @($row.cells)_x000D__x000A__x000D__x000A_        if(!$propertyNames) {_x000D__x000A_            if($cells[0].tagName -eq 'th') {_x000D__x000A_                $propertyNames = @($cells | ForEach-Object {$_.innertext -replace ' ',''})_x000D__x000A_            } else  {_x000D__x000A_                $propertyNames =  @(1..($cells.Count + 2) | Foreach-Object { "P$_" })_x000D__x000A_            }_x000D__x000A_            continue_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $result = [ordered]@{}_x000D__x000A__x000D__x000A_        for($counter = 0; $counter -lt $cells.Count; $counter++) {_x000D__x000A_            $propertyName = $propertyNames[$counter]_x000D__x000A__x000D__x000A_            if(!$propertyName) { $propertyName= '[missing]'}_x000D__x000A_            $result.$propertyName= $cells[$counter].InnerText_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [PSCustomObject]$result_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2230">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">HtmlTable</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2231">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-HtmlTable</S>
      <Obj N="CommandType" RefId="2232">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2233">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2234">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2235">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Url</S>
            <Obj N="Value" RefId="2236">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Url</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2237">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableIndex</S>
            <Obj N="Value" RefId="2238">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableIndex</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2239">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Header</S>
            <Obj N="Value" RefId="2240">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Header</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2241">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FirstDataRow</S>
            <Obj N="Value" RefId="2242">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FirstDataRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2243">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseDefaultCredentials</S>
            <Obj N="Value" RefId="2244">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseDefaultCredentials</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2245">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2246">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2247">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2248">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2249">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2250">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2251">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2252">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2253">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2254">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2255">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2256">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2257">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2258">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2259">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2260">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2261">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2262">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2263">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2264">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2265">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2266">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2267">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2268">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2269">
            <TNRef RefId="8" />
            <ToString>[-Url] &lt;Object&gt; [[-TableIndex] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [[-FirstDataRow] &lt;int&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2270">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-HtmlTable</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2271">
    <TNRef RefId="0" />
    <ToString>Get-InvokePesterParams</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    $invokePesterParams = @{_x000D__x000A_        Script = $ScriptPath_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($pesterModule.Version -ge '3.4.0') {_x000D__x000A_        # -PesterOption was introduced before 3.4.0, and VSCodeMarker in 4.0.3-rc,_x000D__x000A_        # but because no-one checks the integrity of this hashtable we can call_x000D__x000A_        # all of the versions down to 3.4.0 like this_x000D__x000A_        $invokePesterParams.Add("PesterOption", @{ IncludeVSCodeMarker = $true })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($pesterModule.Version -ge '3.4.5') {_x000D__x000A_        # -Show was introduced in 3.4.5_x000D__x000A_        $invokePesterParams.Add("Show", $pester4Output)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $invokePesterParams_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    $invokePesterParams = @{_x000D__x000A_        Script = $ScriptPath_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($pesterModule.Version -ge '3.4.0') {_x000D__x000A_        # -PesterOption was introduced before 3.4.0, and VSCodeMarker in 4.0.3-rc,_x000D__x000A_        # but because no-one checks the integrity of this hashtable we can call_x000D__x000A_        # all of the versions down to 3.4.0 like this_x000D__x000A_        $invokePesterParams.Add("PesterOption", @{ IncludeVSCodeMarker = $true })_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($pesterModule.Version -ge '3.4.5') {_x000D__x000A_        # -Show was introduced in 3.4.5_x000D__x000A_        $invokePesterParams.Add("Show", $pester4Output)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    return $invokePesterParams_x000D__x000A_</S>
      <Obj N="Options" RefId="2272">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">InvokePesterParams</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2273">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-InvokePesterParams</S>
      <Obj N="CommandType" RefId="2274">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2275">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2276">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2277">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2278">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2279">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2280">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-InvokePesterParams</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2281">
    <TNRef RefId="0" />
    <ToString>Get-Range</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param($Start=0,$Stop,$Step=1)_x000D__x000A_    for ($idx = $Start; $idx -lt $Stop; $idx+=$Step) {$idx}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param($Start=0,$Stop,$Step=1)_x000D__x000A_    for ($idx = $Start; $idx -lt $Stop; $idx+=$Step) {$idx}_x000D__x000A_</S>
      <Obj N="Options" RefId="2282">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">Range</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2283">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-Range</S>
      <Obj N="CommandType" RefId="2284">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2285">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2286">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2287">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Start</S>
            <Obj N="Value" RefId="2288">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Start</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2289">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Stop</S>
            <Obj N="Value" RefId="2290">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Stop</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2291">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Step</S>
            <Obj N="Value" RefId="2292">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Step</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2293">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2294">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2295">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2296">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2297">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2298">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2299">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2300">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2301">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2302">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2303">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2304">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2305">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2306">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2307">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2308">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2309">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2310">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2311">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2312">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2313">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2314">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2315">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2316">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2317">
            <TNRef RefId="8" />
            <ToString>[[-Start] &lt;Object&gt;] [[-Stop] &lt;Object&gt;] [[-Step] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2318">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-Range</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2319">
    <TNRef RefId="0" />
    <ToString>Get-ShouldOperator</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Display the assertion operators available for use with Should._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Get-ShouldOperator returns a list of available Should parameters,_x000D__x000A_    their aliases, and examples to help you craft the tests you need._x000D__x000A__x000D__x000A_    Get-ShouldOperator will list all available operators,_x000D__x000A_    including any registered by the user with Add-ShouldOperator._x000D__x000A__x000D__x000A_    .NOTES_x000D__x000A_    Pester uses dynamic parameters to populate Should arguments._x000D__x000A__x000D__x000A_    This limits the user's ability to discover the available assertions via_x000D__x000A_    standard PowerShell discovery patterns (like `Get-Help Should -Parameter *`)._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator_x000D__x000A__x000D__x000A_    Return all available Should assertion operators and their aliases._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator -Name Be_x000D__x000A__x000D__x000A_    Return help examples for the Be assertion operator._x000D__x000A_    -Name is a dynamic parameter that tab completes all available options._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Get-ShouldOperator_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param ()_x000D__x000A__x000D__x000A_    # Use a dynamic parameter to create a dynamic ValidateSet_x000D__x000A_    # Define parameter -Name and tab-complete all current values of $AssertionOperators_x000D__x000A_    # Discovers included assertions (-Be, -Not) and any registered by the user via Add-ShouldOperator_x000D__x000A_    # https://martin77s.wordpress.com/2014/06/09/dynamic-validateset-in-a-dynamic-parameter/_x000D__x000A_    DynamicParam {_x000D__x000A_        $ParameterName = 'Name'_x000D__x000A__x000D__x000A_        $RuntimeParameterDictionary = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A_        $AttributeCollection = &amp; $SafeCommands['New-Object'] System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A_        $ParameterAttribute = &amp; $SafeCommands['New-Object'] System.Management.Automation.ParameterAttribute_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ParameterAttribute)_x000D__x000A__x000D__x000A_        $arrSet = $AssertionOperators.Values |_x000D__x000A_        &amp; $SafeCommands['Select-Object'] -Property Name, Alias |_x000D__x000A_        &amp; $SafeCommands['ForEach-Object'] { $_.Name; $_.Alias }_x000D__x000A__x000D__x000A_        $ValidateSetAttribute = &amp; $SafeCommands['New-Object']System.Management.Automation.ValidateSetAttribute($arrSet)_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ValidateSetAttribute)_x000D__x000A__x000D__x000A_        $RuntimeParameter = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter($ParameterName, [string], $AttributeCollection)_x000D__x000A_        $RuntimeParameterDictionary.Add($ParameterName, $RuntimeParameter)_x000D__x000A_        return $RuntimeParameterDictionary_x000D__x000A_    }_x000D__x000A__x000D__x000A_    BEGIN {_x000D__x000A_        # Bind the parameter to a friendly variable_x000D__x000A_        $Name = $PsBoundParameters[$ParameterName]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    END {_x000D__x000A_        if ($Name) {_x000D__x000A_            $operator = $AssertionOperators.Values | &amp; $SafeCommands['Where-Object'] { $Name -eq $_.Name -or $_.Alias -contains $Name }_x000D__x000A_            $help = Get-Help $operator.InternalName -Examples -ErrorAction SilentlyContinue_x000D__x000A__x000D__x000A_            if (($help | &amp; $SafeCommands['Measure-Object']).Count -ne 1) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] ("No help found for Should operator '{0}'" -f ((Get-AssertionOperatorEntry $Name).InternalName))_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $help_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $AssertionOperators.Keys | &amp; $SafeCommands['ForEach-Object'] {_x000D__x000A_                $aliases = (Get-AssertionOperatorEntry $_).Alias_x000D__x000A__x000D__x000A_                # Return name and alias(es) for all registered Should operators_x000D__x000A_                [PSCustomObject] @{_x000D__x000A_                    Name  = $__x000D__x000A_                    Alias = $aliases -join ', '_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Display the assertion operators available for use with Should._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Get-ShouldOperator returns a list of available Should parameters,_x000D__x000A_    their aliases, and examples to help you craft the tests you need._x000D__x000A__x000D__x000A_    Get-ShouldOperator will list all available operators,_x000D__x000A_    including any registered by the user with Add-ShouldOperator._x000D__x000A__x000D__x000A_    .NOTES_x000D__x000A_    Pester uses dynamic parameters to populate Should arguments._x000D__x000A__x000D__x000A_    This limits the user's ability to discover the available assertions via_x000D__x000A_    standard PowerShell discovery patterns (like `Get-Help Should -Parameter *`)._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator_x000D__x000A__x000D__x000A_    Return all available Should assertion operators and their aliases._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Get-ShouldOperator -Name Be_x000D__x000A__x000D__x000A_    Return help examples for the Be assertion operator._x000D__x000A_    -Name is a dynamic parameter that tab completes all available options._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Get-ShouldOperator_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param ()_x000D__x000A__x000D__x000A_    # Use a dynamic parameter to create a dynamic ValidateSet_x000D__x000A_    # Define parameter -Name and tab-complete all current values of $AssertionOperators_x000D__x000A_    # Discovers included assertions (-Be, -Not) and any registered by the user via Add-ShouldOperator_x000D__x000A_    # https://martin77s.wordpress.com/2014/06/09/dynamic-validateset-in-a-dynamic-parameter/_x000D__x000A_    DynamicParam {_x000D__x000A_        $ParameterName = 'Name'_x000D__x000A__x000D__x000A_        $RuntimeParameterDictionary = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A_        $AttributeCollection = &amp; $SafeCommands['New-Object'] System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A_        $ParameterAttribute = &amp; $SafeCommands['New-Object'] System.Management.Automation.ParameterAttribute_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ParameterAttribute)_x000D__x000A__x000D__x000A_        $arrSet = $AssertionOperators.Values |_x000D__x000A_        &amp; $SafeCommands['Select-Object'] -Property Name, Alias |_x000D__x000A_        &amp; $SafeCommands['ForEach-Object'] { $_.Name; $_.Alias }_x000D__x000A__x000D__x000A_        $ValidateSetAttribute = &amp; $SafeCommands['New-Object']System.Management.Automation.ValidateSetAttribute($arrSet)_x000D__x000A__x000D__x000A_        $AttributeCollection.Add($ValidateSetAttribute)_x000D__x000A__x000D__x000A_        $RuntimeParameter = &amp; $SafeCommands['New-Object'] System.Management.Automation.RuntimeDefinedParameter($ParameterName, [string], $AttributeCollection)_x000D__x000A_        $RuntimeParameterDictionary.Add($ParameterName, $RuntimeParameter)_x000D__x000A_        return $RuntimeParameterDictionary_x000D__x000A_    }_x000D__x000A__x000D__x000A_    BEGIN {_x000D__x000A_        # Bind the parameter to a friendly variable_x000D__x000A_        $Name = $PsBoundParameters[$ParameterName]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    END {_x000D__x000A_        if ($Name) {_x000D__x000A_            $operator = $AssertionOperators.Values | &amp; $SafeCommands['Where-Object'] { $Name -eq $_.Name -or $_.Alias -contains $Name }_x000D__x000A_            $help = Get-Help $operator.InternalName -Examples -ErrorAction SilentlyContinue_x000D__x000A__x000D__x000A_            if (($help | &amp; $SafeCommands['Measure-Object']).Count -ne 1) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] ("No help found for Should operator '{0}'" -f ((Get-AssertionOperatorEntry $Name).InternalName))_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $help_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $AssertionOperators.Keys | &amp; $SafeCommands['ForEach-Object'] {_x000D__x000A_                $aliases = (Get-AssertionOperatorEntry $_).Alias_x000D__x000A__x000D__x000A_                # Return name and alias(es) for all registered Should operators_x000D__x000A_                [PSCustomObject] @{_x000D__x000A_                    Name  = $__x000D__x000A_                    Alias = $aliases -join ', '_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2320">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">ShouldOperator</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2321">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-ShouldOperator</S>
      <Obj N="CommandType" RefId="2322">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="2323">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="2324">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2325">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2326">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2327">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2328">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2329">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2330">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2331">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2332">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2333">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2334">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2335">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2336">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2337">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2338">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2339">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2340">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2341">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2342">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2343">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2344">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2345">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2346">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2347">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="2348">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2349">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2350">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2351">
            <TNRef RefId="8" />
            <ToString>[&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2352">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-ShouldOperator</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Get-ShouldOperator</S>
    </MS>
  </Obj>
  <Obj RefId="2353">
    <TNRef RefId="0" />
    <ToString>Get-Token</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.Token])]_x000D__x000A_    [System.Diagnostics.CodeAnalysis.SuppressMessage('PSUseOutputTypeCorrectly', '', Justification='Issue #676')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-not $Extent) {_x000D__x000A_            if (-not $PSCmdlet.MyInvocation.ExpectingInput) {_x000D__x000A_                # yield_x000D__x000A_                $psEditor.GetEditorContext().CurrentFile.Tokens_x000D__x000A_            }_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $tokens    = $psEditor.GetEditorContext().CurrentFile.Tokens_x000D__x000A_        $predicate = [Func[System.Management.Automation.Language.Token, bool]]{_x000D__x000A_            param($Token)_x000D__x000A__x000D__x000A_            ($Token.Extent.StartOffset -ge $Extent.StartOffset -and_x000D__x000A_             $Token.Extent.EndOffset   -le $Extent.EndOffset)_x000D__x000A_        }_x000D__x000A_        if ($tokens){_x000D__x000A_            $result = [Linq.Enumerable]::Where($tokens, $predicate)_x000D__x000A_        }_x000D__x000A_        # yield_x000D__x000A_        $result_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.Token])]_x000D__x000A_    [System.Diagnostics.CodeAnalysis.SuppressMessage('PSUseOutputTypeCorrectly', '', Justification='Issue #676')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-not $Extent) {_x000D__x000A_            if (-not $PSCmdlet.MyInvocation.ExpectingInput) {_x000D__x000A_                # yield_x000D__x000A_                $psEditor.GetEditorContext().CurrentFile.Tokens_x000D__x000A_            }_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $tokens    = $psEditor.GetEditorContext().CurrentFile.Tokens_x000D__x000A_        $predicate = [Func[System.Management.Automation.Language.Token, bool]]{_x000D__x000A_            param($Token)_x000D__x000A__x000D__x000A_            ($Token.Extent.StartOffset -ge $Extent.StartOffset -and_x000D__x000A_             $Token.Extent.EndOffset   -le $Extent.EndOffset)_x000D__x000A_        }_x000D__x000A_        if ($tokens){_x000D__x000A_            $result = [Linq.Enumerable]::Where($tokens, $predicate)_x000D__x000A_        }_x000D__x000A_        # yield_x000D__x000A_        $result_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2354">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">Token</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2355">
        <TNRef RefId="2" />
        <LST>
          <S>System.Management.Automation.Language.Token</S>
        </LST>
      </Obj>
      <S N="Name">Get-Token</S>
      <Obj N="CommandType" RefId="2356">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="2357">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="2358">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2359">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="2360">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="2361">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2362">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2363">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2364">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2365">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2366">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2367">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2368">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2369">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2370">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2371">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2372">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2373">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2374">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2375">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2376">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2377">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2378">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2379">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2380">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2381">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2382">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2383">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2384">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2385">
            <TNRef RefId="8" />
            <ToString>[[-Extent] &lt;IScriptExtent&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2386">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-Token</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Get-Token.md</S>
    </MS>
  </Obj>
  <Obj RefId="2387">
    <TNRef RefId="0" />
    <ToString>Get-XYRange</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param($TargetData)_x000D__x000A__x000D__x000A_    $record = $TargetData | Select-Object -First 1_x000D__x000A_    $p=$record.psobject.Properties.name_x000D__x000A__x000D__x000A_    $infer = for ($idx = 0; $idx -lt $p.Count; $idx++) {_x000D__x000A__x000D__x000A_        $name = $p[$idx]_x000D__x000A_        $value = $record.$name_x000D__x000A__x000D__x000A_        $result=Invoke-AllTests $value -OnlyPassing -FirstOne_x000D__x000A__x000D__x000A_        [PSCustomObject]@{_x000D__x000A_            Name         = $name_x000D__x000A_            Value        = $value_x000D__x000A_            DataType     = $result.DataType_x000D__x000A_            ExcelColumn  = (Get-ExcelColumnName ($idx+1)).ColumnName_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        XRange = $infer | Where-Object -FilterScript {$_.datatype -match 'string'} | Select-Object -First 1 -Property excelcolumn, name_x000D__x000A_        YRange = $infer | Where-Object -FilterScript {$_.datatype -match 'int|double'} | Select-Object -First 1 -Property excelcolumn, name_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param($TargetData)_x000D__x000A__x000D__x000A_    $record = $TargetData | Select-Object -First 1_x000D__x000A_    $p=$record.psobject.Properties.name_x000D__x000A__x000D__x000A_    $infer = for ($idx = 0; $idx -lt $p.Count; $idx++) {_x000D__x000A__x000D__x000A_        $name = $p[$idx]_x000D__x000A_        $value = $record.$name_x000D__x000A__x000D__x000A_        $result=Invoke-AllTests $value -OnlyPassing -FirstOne_x000D__x000A__x000D__x000A_        [PSCustomObject]@{_x000D__x000A_            Name         = $name_x000D__x000A_            Value        = $value_x000D__x000A_            DataType     = $result.DataType_x000D__x000A_            ExcelColumn  = (Get-ExcelColumnName ($idx+1)).ColumnName_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        XRange = $infer | Where-Object -FilterScript {$_.datatype -match 'string'} | Select-Object -First 1 -Property excelcolumn, name_x000D__x000A_        YRange = $infer | Where-Object -FilterScript {$_.datatype -match 'int|double'} | Select-Object -First 1 -Property excelcolumn, name_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2388">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Get</S>
      <S N="Noun">XYRange</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2389">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Get-XYRange</S>
      <Obj N="CommandType" RefId="2390">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2391">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2392">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2393">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">TargetData</S>
            <Obj N="Value" RefId="2394">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TargetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2395">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2396">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2397">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2398">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2399">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2400">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2401">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2402">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2403">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2404">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2405">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2406">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2407">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2408">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2409">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2410">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2411">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2412">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2413">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2414">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2415">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2416">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2417">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2418">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2419">
            <TNRef RefId="8" />
            <ToString>[[-TargetData] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2420">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Get-XYRange</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2421">
    <TNRef RefId="0" />
    <ToString>H:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="2422">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2423">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">H:</S>
      <Obj N="CommandType" RefId="2424">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2425">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2426">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2427">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2428">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2429">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2430">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::H:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2431">
    <TNRef RefId="0" />
    <ToString>help</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_&lt;#_x000D__x000A_.FORWARDHELPTARGETNAME Get-Help_x000D__x000A_.FORWARDHELPCATEGORY Cmdlet_x000D__x000A_#&gt;_x000D__x000A_[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='https://go.microsoft.com/fwlink/?LinkID=113316')]_x000D__x000A_param(_x000D__x000A_    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [string]_x000D__x000A_    ${Name},_x000D__x000A__x000D__x000A_    [string]_x000D__x000A_    ${Path},_x000D__x000A__x000D__x000A_    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','DscResource','Class','Configuration')]_x000D__x000A_    [string[]]_x000D__x000A_    ${Category},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Detailed},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='AllUsersView')]_x000D__x000A_    [switch]_x000D__x000A_    ${Full},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Examples', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Examples},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]_x000D__x000A_    [string[]]_x000D__x000A_    ${Parameter},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Component},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Functionality},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Role},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Online', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Online},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${ShowWindow})_x000D__x000A__x000D__x000A_    # Display the full help topic by default but only for the AllUsersView parameter set._x000D__x000A_    if (($psCmdlet.ParameterSetName -eq 'AllUsersView') -and !$Full) {_x000D__x000A_        $PSBoundParameters['Full'] = $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Nano needs to use Unicode, but Windows and Linux need the default_x000D__x000A_    $OutputEncoding = if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {_x000D__x000A_        [System.Text.Encoding]::Unicode_x000D__x000A_    } else {_x000D__x000A_        [System.Console]::OutputEncoding_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $help = Get-Help @PSBoundParameters_x000D__x000A__x000D__x000A_    # If a list of help is returned or AliasHelpInfo (because it is small), don't pipe to more_x000D__x000A_    $psTypeNames = ($help | Select-Object -First 1).PSTypeNames_x000D__x000A_    if ($psTypeNames -Contains 'HelpInfoShort' -Or $psTypeNames -Contains 'AliasHelpInfo')_x000D__x000A_    {_x000D__x000A_        $help_x000D__x000A_    }_x000D__x000A_    elseif ($help -ne $null)_x000D__x000A_    {_x000D__x000A_        # By default use more on Windows and less on Linux._x000D__x000A_        if ($IsWindows) {_x000D__x000A_            $pagerCommand = 'more.com'_x000D__x000A_            $pagerArgs = $null_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $pagerCommand = 'less'_x000D__x000A_            $pagerArgs = '-Ps"Page %db?B of %D:.\. Press h for help or q to quit\.$"'_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # Respect PAGER environment variable which allows user to specify a custom pager._x000D__x000A_        # Ignore a pure whitespace PAGER value as that would cause the tokenizer to return 0 tokens._x000D__x000A_        if (![string]::IsNullOrWhitespace($env:PAGER)) {_x000D__x000A_            if (Get-Command $env:PAGER -ErrorAction Ignore) {_x000D__x000A_                # Entire PAGER value corresponds to a single command._x000D__x000A_                $pagerCommand = $env:PAGER_x000D__x000A_                $pagerArgs = $null_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # PAGER value is not a valid command, check if PAGER command and arguments have been specified._x000D__x000A_                # Tokenize the specified $env:PAGER value. Ignore tokenizing errors since any errors may be valid_x000D__x000A_                # argument syntax for the paging utility._x000D__x000A_                $errs = $null_x000D__x000A_                $tokens = [System.Management.Automation.PSParser]::Tokenize($env:PAGER, [ref]$errs)_x000D__x000A__x000D__x000A_                $customPagerCommand = $tokens[0].Content_x000D__x000A_                if (!(Get-Command $customPagerCommand -ErrorAction Ignore)) {_x000D__x000A_                    # Custom pager command is invalid, issue a warning._x000D__x000A_                    Write-Warning "Custom-paging utility command not found. Ignoring command specified in `$env:PAGER: $env:PAGER"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    # This approach will preserve all the pagers args._x000D__x000A_                    $pagerCommand = $customPagerCommand_x000D__x000A_                    $pagerArgs = if ($tokens.Count -gt 1) {$env:PAGER.Substring($tokens[1].Start)} else {$null}_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $pagerCommandInfo = Get-Command -Name $pagerCommand -ErrorAction Ignore_x000D__x000A_        if ($pagerCommandInfo -eq $null) {_x000D__x000A_            $help_x000D__x000A_        }_x000D__x000A_        elseif ($pagerCommandInfo.CommandType -eq 'Application') {_x000D__x000A_            # If the pager is an application, format the output width before sending to the app._x000D__x000A_            $consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)_x000D__x000A__x000D__x000A_            if ($pagerArgs) {_x000D__x000A_                # Supply pager arguments to an application without any PowerShell parsing of the arguments._x000D__x000A_                # Leave environment variable to help user debug arguments supplied in $env:PAGER._x000D__x000A_                $env:__PSPAGER_ARGS = $pagerArgs_x000D__x000A_                $help | Out-String -Stream -Width ($consoleWidth - 1) | &amp; $pagerCommand --% %__PSPAGER_ARGS%_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $help | Out-String -Stream -Width ($consoleWidth - 1) | &amp; $pagerCommand_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # The pager command is a PowerShell function, script or alias, so pipe directly into it._x000D__x000A_            $help | &amp; $pagerCommand $pagerArgs_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">AllUsersView</S>
      <S N="Definition">_x000D__x000A_&lt;#_x000D__x000A_.FORWARDHELPTARGETNAME Get-Help_x000D__x000A_.FORWARDHELPCATEGORY Cmdlet_x000D__x000A_#&gt;_x000D__x000A_[CmdletBinding(DefaultParameterSetName='AllUsersView', HelpUri='https://go.microsoft.com/fwlink/?LinkID=113316')]_x000D__x000A_param(_x000D__x000A_    [Parameter(Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [string]_x000D__x000A_    ${Name},_x000D__x000A__x000D__x000A_    [string]_x000D__x000A_    ${Path},_x000D__x000A__x000D__x000A_    [ValidateSet('Alias','Cmdlet','Provider','General','FAQ','Glossary','HelpFile','ScriptCommand','Function','Filter','ExternalScript','All','DefaultHelp','DscResource','Class','Configuration')]_x000D__x000A_    [string[]]_x000D__x000A_    ${Category},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='DetailedView', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Detailed},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='AllUsersView')]_x000D__x000A_    [switch]_x000D__x000A_    ${Full},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Examples', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Examples},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Parameters', Mandatory=$true)]_x000D__x000A_    [string[]]_x000D__x000A_    ${Parameter},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Component},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Functionality},_x000D__x000A__x000D__x000A_    [string[]]_x000D__x000A_    ${Role},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='Online', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${Online},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='ShowWindow', Mandatory=$true)]_x000D__x000A_    [switch]_x000D__x000A_    ${ShowWindow})_x000D__x000A__x000D__x000A_    # Display the full help topic by default but only for the AllUsersView parameter set._x000D__x000A_    if (($psCmdlet.ParameterSetName -eq 'AllUsersView') -and !$Full) {_x000D__x000A_        $PSBoundParameters['Full'] = $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # Nano needs to use Unicode, but Windows and Linux need the default_x000D__x000A_    $OutputEncoding = if ([System.Management.Automation.Platform]::IsNanoServer -or [System.Management.Automation.Platform]::IsIoT) {_x000D__x000A_        [System.Text.Encoding]::Unicode_x000D__x000A_    } else {_x000D__x000A_        [System.Console]::OutputEncoding_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $help = Get-Help @PSBoundParameters_x000D__x000A__x000D__x000A_    # If a list of help is returned or AliasHelpInfo (because it is small), don't pipe to more_x000D__x000A_    $psTypeNames = ($help | Select-Object -First 1).PSTypeNames_x000D__x000A_    if ($psTypeNames -Contains 'HelpInfoShort' -Or $psTypeNames -Contains 'AliasHelpInfo')_x000D__x000A_    {_x000D__x000A_        $help_x000D__x000A_    }_x000D__x000A_    elseif ($help -ne $null)_x000D__x000A_    {_x000D__x000A_        # By default use more on Windows and less on Linux._x000D__x000A_        if ($IsWindows) {_x000D__x000A_            $pagerCommand = 'more.com'_x000D__x000A_            $pagerArgs = $null_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $pagerCommand = 'less'_x000D__x000A_            $pagerArgs = '-Ps"Page %db?B of %D:.\. Press h for help or q to quit\.$"'_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # Respect PAGER environment variable which allows user to specify a custom pager._x000D__x000A_        # Ignore a pure whitespace PAGER value as that would cause the tokenizer to return 0 tokens._x000D__x000A_        if (![string]::IsNullOrWhitespace($env:PAGER)) {_x000D__x000A_            if (Get-Command $env:PAGER -ErrorAction Ignore) {_x000D__x000A_                # Entire PAGER value corresponds to a single command._x000D__x000A_                $pagerCommand = $env:PAGER_x000D__x000A_                $pagerArgs = $null_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # PAGER value is not a valid command, check if PAGER command and arguments have been specified._x000D__x000A_                # Tokenize the specified $env:PAGER value. Ignore tokenizing errors since any errors may be valid_x000D__x000A_                # argument syntax for the paging utility._x000D__x000A_                $errs = $null_x000D__x000A_                $tokens = [System.Management.Automation.PSParser]::Tokenize($env:PAGER, [ref]$errs)_x000D__x000A__x000D__x000A_                $customPagerCommand = $tokens[0].Content_x000D__x000A_                if (!(Get-Command $customPagerCommand -ErrorAction Ignore)) {_x000D__x000A_                    # Custom pager command is invalid, issue a warning._x000D__x000A_                    Write-Warning "Custom-paging utility command not found. Ignoring command specified in `$env:PAGER: $env:PAGER"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    # This approach will preserve all the pagers args._x000D__x000A_                    $pagerCommand = $customPagerCommand_x000D__x000A_                    $pagerArgs = if ($tokens.Count -gt 1) {$env:PAGER.Substring($tokens[1].Start)} else {$null}_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $pagerCommandInfo = Get-Command -Name $pagerCommand -ErrorAction Ignore_x000D__x000A_        if ($pagerCommandInfo -eq $null) {_x000D__x000A_            $help_x000D__x000A_        }_x000D__x000A_        elseif ($pagerCommandInfo.CommandType -eq 'Application') {_x000D__x000A_            # If the pager is an application, format the output width before sending to the app._x000D__x000A_            $consoleWidth = [System.Math]::Max([System.Console]::WindowWidth, 20)_x000D__x000A__x000D__x000A_            if ($pagerArgs) {_x000D__x000A_                # Supply pager arguments to an application without any PowerShell parsing of the arguments._x000D__x000A_                # Leave environment variable to help user debug arguments supplied in $env:PAGER._x000D__x000A_                $env:__PSPAGER_ARGS = $pagerArgs_x000D__x000A_                $help | Out-String -Stream -Width ($consoleWidth - 1) | &amp; $pagerCommand --% %__PSPAGER_ARGS%_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $help | Out-String -Stream -Width ($consoleWidth - 1) | &amp; $pagerCommand_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # The pager command is a PowerShell function, script or alias, so pipe directly into it._x000D__x000A_            $help | &amp; $pagerCommand $pagerArgs_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2432">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2433">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">help</S>
      <Obj N="CommandType" RefId="2434">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2435">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2436">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2437">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="2438">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2439">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2440">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2441">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Category</S>
            <Obj N="Value" RefId="2442">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Category</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2443">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Detailed</S>
            <Obj N="Value" RefId="2444">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Detailed</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2445">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Full</S>
            <Obj N="Value" RefId="2446">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Full</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2447">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Examples</S>
            <Obj N="Value" RefId="2448">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Examples</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2449">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Parameter</S>
            <Obj N="Value" RefId="2450">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Parameter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2451">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Component</S>
            <Obj N="Value" RefId="2452">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Component</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2453">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Functionality</S>
            <Obj N="Value" RefId="2454">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Functionality</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2455">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Role</S>
            <Obj N="Value" RefId="2456">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Role</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2457">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Online</S>
            <Obj N="Value" RefId="2458">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Online</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2459">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowWindow</S>
            <Obj N="Value" RefId="2460">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowWindow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2461">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2462">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2463">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2464">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2465">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2466">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2467">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2468">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2469">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2470">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2471">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2472">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2473">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2474">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2475">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2476">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2477">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2478">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2479">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2480">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2481">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2482">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2483">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2484">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2485">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Full] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">AllUsersView</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="2486">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2487">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] -Detailed [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">DetailedView</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2488">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2489">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] -Examples [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Examples</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2490">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2491">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] -Parameter &lt;string[]&gt; [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Parameters</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2492">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2493">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] -Online [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Online</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2494">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2495">
            <TNRef RefId="8" />
            <ToString>[[-Name] &lt;string&gt;] -ShowWindow [-Path &lt;string&gt;] [-Category &lt;string[]&gt;] [-Component &lt;string[]&gt;] [-Functionality &lt;string[]&gt;] [-Role &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ShowWindow</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2496">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::help</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri">https://go.microsoft.com/fwlink/?LinkID=113316</S>
    </MS>
  </Obj>
  <Obj RefId="2497">
    <TNRef RefId="0" />
    <ToString>I:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="2498">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2499">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">I:</S>
      <Obj N="CommandType" RefId="2500">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2501">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2502">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2503">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2504">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2505">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2506">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::I:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2507">
    <TNRef RefId="0" />
    <ToString>Import-EditorCommand</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices])]_x000D__x000A_    [CmdletBinding(DefaultParameterSetName='ByCommand')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0,_x000D__x000A_                   Mandatory,_x000D__x000A_                   ValueFromPipeline,_x000D__x000A_                   ValueFromPipelineByPropertyName,_x000D__x000A_                   ParameterSetName='ByCommand')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string[]]_x000D__x000A_        $Command,_x000D__x000A__x000D__x000A_        [Parameter(Position=0, Mandatory, ParameterSetName='ByModule')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string[]]_x000D__x000A_        $Module,_x000D__x000A__x000D__x000A_        [switch]_x000D__x000A_        $Force,_x000D__x000A__x000D__x000A_        [switch]_x000D__x000A_        $PassThru_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        function GetCommandsFromModule {_x000D__x000A_            param(_x000D__x000A_                [Parameter(ValueFromPipeline)]_x000D__x000A_                [string]_x000D__x000A_                $ModuleToSearch_x000D__x000A_            )_x000D__x000A_            process {_x000D__x000A_                if (-not $ModuleToSearch) { return }_x000D__x000A__x000D__x000A_                $caller = (Get-PSCallStack)[2]_x000D__x000A__x000D__x000A_                if ($caller.InvocationInfo.MyCommand.ScriptBlock.Module.Name -eq $ModuleToSearch) {_x000D__x000A_                    $moduleInfo = $caller.InvocationInfo.MyCommand.ScriptBlock.Module_x000D__x000A__x000D__x000A_                    return $moduleInfo.Invoke(_x000D__x000A_                        {_x000D__x000A_                            $ExecutionContext.SessionState.InvokeProvider.Item.Get('function:\*') |_x000D__x000A_                                Where-Object ModuleName -eq $args[0]_x000D__x000A_                        },_x000D__x000A_                        $ModuleToSearch)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $moduleInfo = Get-Module $ModuleToSearch -ErrorAction SilentlyContinue_x000D__x000A_                return $moduleInfo.ExportedFunctions.Values_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $editorCommands = @{}_x000D__x000A__x000D__x000A_        foreach ($existingCommand in $psEditor.GetCommands()) {_x000D__x000A_            $editorCommands[$existingCommand.Name] = $existingCommand_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            ByModule {_x000D__x000A_                $commands = $Module | GetCommandsFromModule_x000D__x000A_            }_x000D__x000A_            ByCommand {_x000D__x000A_                $commands = $Command | Get-Command -ErrorAction SilentlyContinue_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $attributeType = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommandAttribute, Microsoft.PowerShell.EditorServices]_x000D__x000A_        foreach ($aCommand in $commands) {_x000D__x000A_            # Get the attribute from our command to get name info._x000D__x000A_            $details = $aCommand.ScriptBlock.Attributes | Where-Object TypeId -eq $attributeType_x000D__x000A__x000D__x000A_            if ($details) {_x000D__x000A_                # TODO: Add module name to this?_x000D__x000A_                # Name: Expand-Expression becomes ExpandExpression_x000D__x000A_                if (-not $details.Name) { $details.Name = $aCommand.Name -replace '-' }_x000D__x000A__x000D__x000A_                # DisplayName: Expand-Expression becomes Expand Expression_x000D__x000A_                if (-not $details.DisplayName) { $details.DisplayName = $aCommand.Name -replace '-', ' ' }_x000D__x000A__x000D__x000A_                # If the editor command is already loaded skip unless force is specified._x000D__x000A_                if ($editorCommands.ContainsKey($details.Name)) {_x000D__x000A_                    if ($Force.IsPresent) {_x000D__x000A_                        $null = $psEditor.UnregisterCommand($details.Name)_x000D__x000A_                    } else {_x000D__x000A_                        $PSCmdlet.WriteVerbose($Strings.EditorCommandExists -f $details.Name)_x000D__x000A_                        continue_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                # Check for a context parameter._x000D__x000A_                $contextParameter = $aCommand.Parameters.Values |_x000D__x000A_                    Where-Object ParameterType -eq ([Microsoft.PowerShell.EditorServices.Extensions.EditorContext, Microsoft.PowerShell.EditorServices])_x000D__x000A__x000D__x000A_                # If one is found then add a named argument. Otherwise call the command directly._x000D__x000A_                if ($contextParameter) {_x000D__x000A_                    $sbText = '{0} -{1} $args[0]' -f $aCommand.Name, $contextParameter.Name_x000D__x000A_                    $scriptBlock = [scriptblock]::Create($sbText)_x000D__x000A_                } else {_x000D__x000A_                    $scriptBlock = [scriptblock]::Create($aCommand.Name)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $editorCommand = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                    &lt;# commandName:    #&gt; $details.Name,_x000D__x000A_                    &lt;# displayName:    #&gt; $details.DisplayName,_x000D__x000A_                    &lt;# suppressOutput: #&gt; $details.SuppressOutput,_x000D__x000A_                    &lt;# scriptBlock:    #&gt; $scriptBlock)_x000D__x000A__x000D__x000A_                $PSCmdlet.WriteVerbose($Strings.EditorCommandImporting -f $details.Name)_x000D__x000A_                $null = $psEditor.RegisterCommand($editorCommand)_x000D__x000A__x000D__x000A_                if ($PassThru.IsPresent -and $editorCommand) {_x000D__x000A_                    $editorCommand # yield_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">ByCommand</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [OutputType([Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices])]_x000D__x000A_    [CmdletBinding(DefaultParameterSetName='ByCommand')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0,_x000D__x000A_                   Mandatory,_x000D__x000A_                   ValueFromPipeline,_x000D__x000A_                   ValueFromPipelineByPropertyName,_x000D__x000A_                   ParameterSetName='ByCommand')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string[]]_x000D__x000A_        $Command,_x000D__x000A__x000D__x000A_        [Parameter(Position=0, Mandatory, ParameterSetName='ByModule')]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string[]]_x000D__x000A_        $Module,_x000D__x000A__x000D__x000A_        [switch]_x000D__x000A_        $Force,_x000D__x000A__x000D__x000A_        [switch]_x000D__x000A_        $PassThru_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        function GetCommandsFromModule {_x000D__x000A_            param(_x000D__x000A_                [Parameter(ValueFromPipeline)]_x000D__x000A_                [string]_x000D__x000A_                $ModuleToSearch_x000D__x000A_            )_x000D__x000A_            process {_x000D__x000A_                if (-not $ModuleToSearch) { return }_x000D__x000A__x000D__x000A_                $caller = (Get-PSCallStack)[2]_x000D__x000A__x000D__x000A_                if ($caller.InvocationInfo.MyCommand.ScriptBlock.Module.Name -eq $ModuleToSearch) {_x000D__x000A_                    $moduleInfo = $caller.InvocationInfo.MyCommand.ScriptBlock.Module_x000D__x000A__x000D__x000A_                    return $moduleInfo.Invoke(_x000D__x000A_                        {_x000D__x000A_                            $ExecutionContext.SessionState.InvokeProvider.Item.Get('function:\*') |_x000D__x000A_                                Where-Object ModuleName -eq $args[0]_x000D__x000A_                        },_x000D__x000A_                        $ModuleToSearch)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $moduleInfo = Get-Module $ModuleToSearch -ErrorAction SilentlyContinue_x000D__x000A_                return $moduleInfo.ExportedFunctions.Values_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $editorCommands = @{}_x000D__x000A__x000D__x000A_        foreach ($existingCommand in $psEditor.GetCommands()) {_x000D__x000A_            $editorCommands[$existingCommand.Name] = $existingCommand_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            ByModule {_x000D__x000A_                $commands = $Module | GetCommandsFromModule_x000D__x000A_            }_x000D__x000A_            ByCommand {_x000D__x000A_                $commands = $Command | Get-Command -ErrorAction SilentlyContinue_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        $attributeType = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommandAttribute, Microsoft.PowerShell.EditorServices]_x000D__x000A_        foreach ($aCommand in $commands) {_x000D__x000A_            # Get the attribute from our command to get name info._x000D__x000A_            $details = $aCommand.ScriptBlock.Attributes | Where-Object TypeId -eq $attributeType_x000D__x000A__x000D__x000A_            if ($details) {_x000D__x000A_                # TODO: Add module name to this?_x000D__x000A_                # Name: Expand-Expression becomes ExpandExpression_x000D__x000A_                if (-not $details.Name) { $details.Name = $aCommand.Name -replace '-' }_x000D__x000A__x000D__x000A_                # DisplayName: Expand-Expression becomes Expand Expression_x000D__x000A_                if (-not $details.DisplayName) { $details.DisplayName = $aCommand.Name -replace '-', ' ' }_x000D__x000A__x000D__x000A_                # If the editor command is already loaded skip unless force is specified._x000D__x000A_                if ($editorCommands.ContainsKey($details.Name)) {_x000D__x000A_                    if ($Force.IsPresent) {_x000D__x000A_                        $null = $psEditor.UnregisterCommand($details.Name)_x000D__x000A_                    } else {_x000D__x000A_                        $PSCmdlet.WriteVerbose($Strings.EditorCommandExists -f $details.Name)_x000D__x000A_                        continue_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                # Check for a context parameter._x000D__x000A_                $contextParameter = $aCommand.Parameters.Values |_x000D__x000A_                    Where-Object ParameterType -eq ([Microsoft.PowerShell.EditorServices.Extensions.EditorContext, Microsoft.PowerShell.EditorServices])_x000D__x000A__x000D__x000A_                # If one is found then add a named argument. Otherwise call the command directly._x000D__x000A_                if ($contextParameter) {_x000D__x000A_                    $sbText = '{0} -{1} $args[0]' -f $aCommand.Name, $contextParameter.Name_x000D__x000A_                    $scriptBlock = [scriptblock]::Create($sbText)_x000D__x000A_                } else {_x000D__x000A_                    $scriptBlock = [scriptblock]::Create($aCommand.Name)_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $editorCommand = [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new(_x000D__x000A_                    &lt;# commandName:    #&gt; $details.Name,_x000D__x000A_                    &lt;# displayName:    #&gt; $details.DisplayName,_x000D__x000A_                    &lt;# suppressOutput: #&gt; $details.SuppressOutput,_x000D__x000A_                    &lt;# scriptBlock:    #&gt; $scriptBlock)_x000D__x000A__x000D__x000A_                $PSCmdlet.WriteVerbose($Strings.EditorCommandImporting -f $details.Name)_x000D__x000A_                $null = $psEditor.RegisterCommand($editorCommand)_x000D__x000A__x000D__x000A_                if ($PassThru.IsPresent -and $editorCommand) {_x000D__x000A_                    $editorCommand # yield_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2508">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Import</S>
      <S N="Noun">EditorCommand</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2509">
        <TNRef RefId="2" />
        <LST>
          <S>Microsoft.PowerShell.EditorServices.Extensions.EditorCommand</S>
        </LST>
      </Obj>
      <S N="Name">Import-EditorCommand</S>
      <Obj N="CommandType" RefId="2510">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="2511">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="2512">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2513">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Command</S>
            <Obj N="Value" RefId="2514">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Command</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2515">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Module</S>
            <Obj N="Value" RefId="2516">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Module</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2517">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Force</S>
            <Obj N="Value" RefId="2518">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Force</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2519">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="2520">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2521">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2522">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2523">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2524">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2525">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2526">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2527">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2528">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2529">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2530">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2531">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2532">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2533">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2534">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2535">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2536">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2537">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2538">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2539">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2540">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2541">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2542">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2543">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2544">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2545">
            <TNRef RefId="8" />
            <ToString>[-Command] &lt;string[]&gt; [-Force] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByCommand</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="2546">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2547">
            <TNRef RefId="8" />
            <ToString>[-Module] &lt;string[]&gt; [-Force] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ByModule</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2548">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Import-EditorCommand</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Import-EditorCommand.md</S>
    </MS>
  </Obj>
  <Obj RefId="2549">
    <TNRef RefId="0" />
    <ToString>Import-Excel</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword", "")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSPossibleIncorrectUsageOfAssignmentOperator', '', Justification = 'Intentional')]_x000D__x000A_    param (_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ParameterSetName = "PathA", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [Parameter(ParameterSetName = "PathB", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [Parameter(ParameterSetName = "PathC", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [String[]]$Path,_x000D__x000A_        [Parameter(ParameterSetName = "PackageA", Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = "PackageB", Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = "PackageC", Mandatory)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Alias('Sheet')]_x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$WorksheetName,_x000D__x000A_        [Parameter(ParameterSetName = 'PathB'   , Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageB', Mandatory)]_x000D__x000A_        [String[]]$HeaderName ,_x000D__x000A_        [Parameter(ParameterSetName = 'PathC'   , Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageC', Mandatory)]_x000D__x000A_        [Switch]$NoHeader     ,_x000D__x000A_        [Alias('HeaderRow', 'TopRow')]_x000D__x000A_        [ValidateRange(1, 9999)]_x000D__x000A_        [Int]$StartRow = 1,_x000D__x000A_        [Alias('StopRow', 'BottomRow')]_x000D__x000A_        [Int]$EndRow ,_x000D__x000A_        [Alias('LeftColumn')]_x000D__x000A_        [Int]$StartColumn = 1,_x000D__x000A_        [Alias('RightColumn')]_x000D__x000A_        [Int]$EndColumn  ,_x000D__x000A_        [Switch]$DataOnly,_x000D__x000A_        [string[]]$AsText,_x000D__x000A_        [string[]]$AsDate,_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$Password_x000D__x000A_    )_x000D__x000A_    end {_x000D__x000A_        $sw = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_        if ($input) {_x000D__x000A_            $Paths = $input_x000D__x000A_        }_x000D__x000A_        elseif ($Path) {_x000D__x000A_            $Paths = $Path_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $Paths = ''_x000D__x000A_        }_x000D__x000A_        function Get-PropertyNames {_x000D__x000A_            &lt;#_x000D__x000A_            .SYNOPSIS_x000D__x000A_                Create objects containing the column number and the column name for each of the different header types._x000D__x000A_            #&gt;_x000D__x000A_            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '', Justification = "Name would be incorrect, and command is not exported")]_x000D__x000A_            param(_x000D__x000A_                [Parameter(Mandatory)]_x000D__x000A_                [Int[]]$Columns,_x000D__x000A_                [Parameter(Mandatory)]_x000D__x000A_                [Int]$StartRow_x000D__x000A_            )_x000D__x000A__x000D__x000A_            try {_x000D__x000A_                if ($HeaderName) {_x000D__x000A_                    $i = 0_x000D__x000A_                    foreach ($H in $HeaderName) {_x000D__x000A_                        $H | Select-Object @{N = 'Column'; E = { $Columns[$i] } }, @{N = 'Value'; E = { $H } }_x000D__x000A_                        $i++_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                elseif ($NoHeader) {_x000D__x000A_                    $i = 0_x000D__x000A_                    foreach ($C in $Columns) {_x000D__x000A_                        $i++_x000D__x000A_                        $C | Select-Object @{N = 'Column'; E = { $_ } }, @{N = 'Value'; E = { 'P' + $i } }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                else {_x000D__x000A_                    if ($StartRow -lt 1) {_x000D__x000A_                        throw 'The top row can never be less than 1 when we need to retrieve headers from the worksheet.' ; return_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    foreach ($C in $Columns) {_x000D__x000A_                        #allow "False" or "0" to be column headings_x000D__x000A_                        $Worksheet.Cells[$StartRow, $C] | Where-Object {-not [string]::IsNullOrEmpty($_.Value) } | Select-Object @{N = 'Column'; E = { $C } }, Value_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_                throw "Failed creating property names: $_" ; return_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        foreach ($Path in $Paths) {_x000D__x000A_            if ($path) {_x000D__x000A_                $extension = [System.IO.Path]::GetExtension($Path)_x000D__x000A_                if ($extension -notmatch '.xlsx$|.xlsm$') {_x000D__x000A_                    throw "Import-Excel does not support reading this extension type $($extension)"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $resolvedPath = (Resolve-Path $Path -ErrorAction SilentlyContinue)_x000D__x000A_                if ($resolvedPath) {_x000D__x000A_                    $Path = $resolvedPath.ProviderPath_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    throw "'$($Path)' file not found"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path, 'Open', 'Read', 'ReadWrite'_x000D__x000A_                $ExcelPackage = New-Object -TypeName OfficeOpenXml.ExcelPackage_x000D__x000A_                if ($Password) { $ExcelPackage.Load($stream, $Password) }_x000D__x000A_                else { $ExcelPackage.Load($stream) }_x000D__x000A_            }_x000D__x000A_            try {_x000D__x000A_                #Select worksheet_x000D__x000A_                if (-not  $WorksheetName) { $Worksheet = $ExcelPackage.Workbook.Worksheets[1] }_x000D__x000A_                elseif (-not ($Worksheet = $ExcelPackage.Workbook.Worksheets[$WorksheetName])) {_x000D__x000A_                    throw "Worksheet '$WorksheetName' not found, the workbook only contains the worksheets '$($ExcelPackage.Workbook.Worksheets)'. If you only wish to select the first worksheet, please remove the '-WorksheetName' parameter." ; return_x000D__x000A_                }_x000D__x000A__x000D__x000A_                #region Get rows and columns_x000D__x000A_                #If we are doing dataonly it is quicker to work out which rows to ignore before processing the cells._x000D__x000A_                if (-not $EndRow   ) { $EndRow = $Worksheet.Dimension.End.Row }_x000D__x000A_                if (-not $EndColumn) { $EndColumn = $Worksheet.Dimension.End.Column }_x000D__x000A_                $endAddress = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[$EndRow]C[$EndColumn]", 0, 0)_x000D__x000A_                if ($DataOnly) {_x000D__x000A_                    #If we are using headers startrow will be the header-row so examine data from startRow + 1,_x000D__x000A_                    if ($NoHeader) { $range = "A" + ($StartRow     ) + ":" + $endAddress }_x000D__x000A_                    else { $range = "A" + ($StartRow + 1 ) + ":" + $endAddress }_x000D__x000A_                    #We're going to look at every cell and build 2 hash tables holding rows &amp; columns which contain data._x000D__x000A_                    #Want to Avoid 'select unique' operations &amp; large Sorts, becuse time time taken increases with square_x000D__x000A_                    #of number of items (PS uses heapsort at large size). Instead keep a list of what we have seen,_x000D__x000A_                    #using Hash tables: "we've seen it" is all we need, no need to worry about "seen it before" / "Seen it many times"._x000D__x000A_                    $colHash = @{ }_x000D__x000A_                    $rowHash = @{ }_x000D__x000A_                    foreach ($cell in $Worksheet.Cells[$range]) {_x000D__x000A_                        if ($null -ne $cell.Value ) { $colHash[$cell.Start.Column] = 1; $rowHash[$cell.Start.row] = 1 }_x000D__x000A_                    }_x000D__x000A_                    $rows = (   $StartRow..$EndRow   ).Where( { $rowHash[$_] })_x000D__x000A_                    $columns = ($StartColumn..$EndColumn).Where( { $colHash[$_] })_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $Columns = $StartColumn .. $EndColumn  ; if ($StartColumn -gt $EndColumn) { Write-Warning -Message "Selecting columns $StartColumn to $EndColumn might give odd results." }_x000D__x000A_                    if ($NoHeader) { $rows = $StartRow..$EndRow ; if ($StartRow -gt $EndRow) { Write-Warning -Message "Selecting rows $StartRow to $EndRow might give odd results." } }_x000D__x000A_                    elseif ($HeaderName) { $rows = $StartRow..$EndRow }_x000D__x000A_                    else {_x000D__x000A_                        $rows = (1 + $StartRow)..$EndRow_x000D__x000A_                        if ($StartRow -eq 1 -and $EndRow -eq 1) {_x000D__x000A_                            $rows = 0_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    # ; if ($StartRow -ge $EndRow) { Write-Warning -Message "Selecting $StartRow as the header with data in $(1+$StartRow) to $EndRow might give odd results." } }_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                #region Create property names_x000D__x000A_                if ((-not $Columns) -or (-not ($PropertyNames = Get-PropertyNames -Columns $Columns -StartRow $StartRow))) {_x000D__x000A_                    throw "No column headers found on top row '$StartRow'. If column headers in the worksheet are not a requirement then please use the '-NoHeader' or '-HeaderName' parameter."; return_x000D__x000A_                }_x000D__x000A_                if ($Duplicates = $PropertyNames | Group-Object Value | Where-Object Count -GE 2) {_x000D__x000A_                    throw "Duplicate column headers found on row '$StartRow' in columns '$($Duplicates.Group.Column)'. Column headers must be unique, if this is not a requirement please use the '-NoHeader' or '-HeaderName' parameter."; return_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                if (-not $rows) {_x000D__x000A_                    Write-Warning "Worksheet '$WorksheetName' in workbook '$Path' contains no data in the rows after top row '$StartRow'"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    #region Create one object per row_x000D__x000A_                    if ($AsText -or $AsDate) {_x000D__x000A_                        &lt;#join items in AsText together with ~~~ . Escape any regex special characters..._x000D__x000A_                        # which turns "*" into "\*" make it ".*". Convert ~~~ to $|^ and top and tail with ^%;_x000D__x000A_                        So if we get "Week", "[Time]" and "*date*" ; make the expression ^week$|^\[Time\]$|^.*Date.*$_x000D__x000A_                        $make a regex for this which is case insensitive (option 1) and compiled (option 8)_x000D__x000A_                        #&gt;_x000D__x000A_                        $TextColExpression = ''_x000D__x000A_                        if ($AsText) {_x000D__x000A_                            $TextColExpression += '(?&lt;astext&gt;^' + [regex]::Escape($AsText -join '~~~').replace('\*', '.*').replace('~~~', '$|^') + '$)'_x000D__x000A_                        }_x000D__x000A_                        if ($AsText -and $AsDate) {_x000D__x000A_                            $TextColExpression += "|"_x000D__x000A_                        }_x000D__x000A_                        if ($AsDate) {_x000D__x000A_                            $TextColExpression += '(?&lt;asDate&gt;^' + [regex]::Escape($AsDate -join '~~~').replace('\*', '.*').replace('~~~', '$|^') + '$)'_x000D__x000A_                        }_x000D__x000A_                        $TextColRegEx = New-Object -TypeName regex -ArgumentList $TextColExpression , 9_x000D__x000A_                    }_x000D__x000A_                    else {$TextColRegEx = $null}_x000D__x000A_                    foreach ($R in $rows) {_x000D__x000A_                        #Disabled write-verbose for speed_x000D__x000A_                        #  Write-Verbose "Import row '$R'"_x000D__x000A_                        $NewRow = [Ordered]@{ }_x000D__x000A_                        if ($TextColRegEx) {_x000D__x000A_                            foreach ($P in $PropertyNames) {_x000D__x000A_                                $MatchTest = $TextColRegEx.Match($P.value)_x000D__x000A_                                if ($MatchTest.groups.name -eq "astext") {_x000D__x000A_                                        $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Text_x000D__x000A_                                }_x000D__x000A_                                elseif ($MatchTest.groups.name -eq "asdate" -and $Worksheet.Cells[$R, $P.Column].Value -is [System.ValueType]) {_x000D__x000A_                                        $NewRow[$P.Value] = [datetime]::FromOADate(($Worksheet.Cells[$R, $P.Column].Value))_x000D__x000A_                                }_x000D__x000A_                                else {  $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Value }_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                        else {_x000D__x000A_                            foreach ($P in $PropertyNames) {_x000D__x000A_                                $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Value_x000D__x000A_                                #    Write-Verbose "Import cell '$($Worksheet.Cells[$R, $P.Column].Address)' with property name '$($p.Value)' and value '$($Worksheet.Cells[$R, $P.Column].Value)'."_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                        [PSCustomObject]$NewRow_x000D__x000A_                    }_x000D__x000A_                    #endregion_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch { throw "Failed importing the Excel workbook '$Path' with worksheet '$WorksheetName': $_"; return }_x000D__x000A_            finally {_x000D__x000A_                if ($Path) { $stream.close(); $ExcelPackage.Dispose() }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword", "")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSPossibleIncorrectUsageOfAssignmentOperator', '', Justification = 'Intentional')]_x000D__x000A_    param (_x000D__x000A_        [Alias('FullName')]_x000D__x000A_        [Parameter(ParameterSetName = "PathA", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [Parameter(ParameterSetName = "PathB", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [Parameter(ParameterSetName = "PathC", Mandatory, ValueFromPipelineByPropertyName, ValueFromPipeline, Position = 0 )]_x000D__x000A_        [String[]]$Path,_x000D__x000A_        [Parameter(ParameterSetName = "PackageA", Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = "PackageB", Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = "PackageC", Mandatory)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Alias('Sheet')]_x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$WorksheetName,_x000D__x000A_        [Parameter(ParameterSetName = 'PathB'   , Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageB', Mandatory)]_x000D__x000A_        [String[]]$HeaderName ,_x000D__x000A_        [Parameter(ParameterSetName = 'PathC'   , Mandatory)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageC', Mandatory)]_x000D__x000A_        [Switch]$NoHeader     ,_x000D__x000A_        [Alias('HeaderRow', 'TopRow')]_x000D__x000A_        [ValidateRange(1, 9999)]_x000D__x000A_        [Int]$StartRow = 1,_x000D__x000A_        [Alias('StopRow', 'BottomRow')]_x000D__x000A_        [Int]$EndRow ,_x000D__x000A_        [Alias('LeftColumn')]_x000D__x000A_        [Int]$StartColumn = 1,_x000D__x000A_        [Alias('RightColumn')]_x000D__x000A_        [Int]$EndColumn  ,_x000D__x000A_        [Switch]$DataOnly,_x000D__x000A_        [string[]]$AsText,_x000D__x000A_        [string[]]$AsDate,_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [String]$Password_x000D__x000A_    )_x000D__x000A_    end {_x000D__x000A_        $sw = [System.Diagnostics.Stopwatch]::StartNew()_x000D__x000A_        if ($input) {_x000D__x000A_            $Paths = $input_x000D__x000A_        }_x000D__x000A_        elseif ($Path) {_x000D__x000A_            $Paths = $Path_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            $Paths = ''_x000D__x000A_        }_x000D__x000A_        function Get-PropertyNames {_x000D__x000A_            &lt;#_x000D__x000A_            .SYNOPSIS_x000D__x000A_                Create objects containing the column number and the column name for each of the different header types._x000D__x000A_            #&gt;_x000D__x000A_            [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '', Justification = "Name would be incorrect, and command is not exported")]_x000D__x000A_            param(_x000D__x000A_                [Parameter(Mandatory)]_x000D__x000A_                [Int[]]$Columns,_x000D__x000A_                [Parameter(Mandatory)]_x000D__x000A_                [Int]$StartRow_x000D__x000A_            )_x000D__x000A__x000D__x000A_            try {_x000D__x000A_                if ($HeaderName) {_x000D__x000A_                    $i = 0_x000D__x000A_                    foreach ($H in $HeaderName) {_x000D__x000A_                        $H | Select-Object @{N = 'Column'; E = { $Columns[$i] } }, @{N = 'Value'; E = { $H } }_x000D__x000A_                        $i++_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                elseif ($NoHeader) {_x000D__x000A_                    $i = 0_x000D__x000A_                    foreach ($C in $Columns) {_x000D__x000A_                        $i++_x000D__x000A_                        $C | Select-Object @{N = 'Column'; E = { $_ } }, @{N = 'Value'; E = { 'P' + $i } }_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                else {_x000D__x000A_                    if ($StartRow -lt 1) {_x000D__x000A_                        throw 'The top row can never be less than 1 when we need to retrieve headers from the worksheet.' ; return_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    foreach ($C in $Columns) {_x000D__x000A_                        #allow "False" or "0" to be column headings_x000D__x000A_                        $Worksheet.Cells[$StartRow, $C] | Where-Object {-not [string]::IsNullOrEmpty($_.Value) } | Select-Object @{N = 'Column'; E = { $C } }, Value_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_                throw "Failed creating property names: $_" ; return_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        foreach ($Path in $Paths) {_x000D__x000A_            if ($path) {_x000D__x000A_                $extension = [System.IO.Path]::GetExtension($Path)_x000D__x000A_                if ($extension -notmatch '.xlsx$|.xlsm$') {_x000D__x000A_                    throw "Import-Excel does not support reading this extension type $($extension)"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $resolvedPath = (Resolve-Path $Path -ErrorAction SilentlyContinue)_x000D__x000A_                if ($resolvedPath) {_x000D__x000A_                    $Path = $resolvedPath.ProviderPath_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    throw "'$($Path)' file not found"_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $stream = New-Object -TypeName System.IO.FileStream -ArgumentList $Path, 'Open', 'Read', 'ReadWrite'_x000D__x000A_                $ExcelPackage = New-Object -TypeName OfficeOpenXml.ExcelPackage_x000D__x000A_                if ($Password) { $ExcelPackage.Load($stream, $Password) }_x000D__x000A_                else { $ExcelPackage.Load($stream) }_x000D__x000A_            }_x000D__x000A_            try {_x000D__x000A_                #Select worksheet_x000D__x000A_                if (-not  $WorksheetName) { $Worksheet = $ExcelPackage.Workbook.Worksheets[1] }_x000D__x000A_                elseif (-not ($Worksheet = $ExcelPackage.Workbook.Worksheets[$WorksheetName])) {_x000D__x000A_                    throw "Worksheet '$WorksheetName' not found, the workbook only contains the worksheets '$($ExcelPackage.Workbook.Worksheets)'. If you only wish to select the first worksheet, please remove the '-WorksheetName' parameter." ; return_x000D__x000A_                }_x000D__x000A__x000D__x000A_                #region Get rows and columns_x000D__x000A_                #If we are doing dataonly it is quicker to work out which rows to ignore before processing the cells._x000D__x000A_                if (-not $EndRow   ) { $EndRow = $Worksheet.Dimension.End.Row }_x000D__x000A_                if (-not $EndColumn) { $EndColumn = $Worksheet.Dimension.End.Column }_x000D__x000A_                $endAddress = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[$EndRow]C[$EndColumn]", 0, 0)_x000D__x000A_                if ($DataOnly) {_x000D__x000A_                    #If we are using headers startrow will be the header-row so examine data from startRow + 1,_x000D__x000A_                    if ($NoHeader) { $range = "A" + ($StartRow     ) + ":" + $endAddress }_x000D__x000A_                    else { $range = "A" + ($StartRow + 1 ) + ":" + $endAddress }_x000D__x000A_                    #We're going to look at every cell and build 2 hash tables holding rows &amp; columns which contain data._x000D__x000A_                    #Want to Avoid 'select unique' operations &amp; large Sorts, becuse time time taken increases with square_x000D__x000A_                    #of number of items (PS uses heapsort at large size). Instead keep a list of what we have seen,_x000D__x000A_                    #using Hash tables: "we've seen it" is all we need, no need to worry about "seen it before" / "Seen it many times"._x000D__x000A_                    $colHash = @{ }_x000D__x000A_                    $rowHash = @{ }_x000D__x000A_                    foreach ($cell in $Worksheet.Cells[$range]) {_x000D__x000A_                        if ($null -ne $cell.Value ) { $colHash[$cell.Start.Column] = 1; $rowHash[$cell.Start.row] = 1 }_x000D__x000A_                    }_x000D__x000A_                    $rows = (   $StartRow..$EndRow   ).Where( { $rowHash[$_] })_x000D__x000A_                    $columns = ($StartColumn..$EndColumn).Where( { $colHash[$_] })_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $Columns = $StartColumn .. $EndColumn  ; if ($StartColumn -gt $EndColumn) { Write-Warning -Message "Selecting columns $StartColumn to $EndColumn might give odd results." }_x000D__x000A_                    if ($NoHeader) { $rows = $StartRow..$EndRow ; if ($StartRow -gt $EndRow) { Write-Warning -Message "Selecting rows $StartRow to $EndRow might give odd results." } }_x000D__x000A_                    elseif ($HeaderName) { $rows = $StartRow..$EndRow }_x000D__x000A_                    else {_x000D__x000A_                        $rows = (1 + $StartRow)..$EndRow_x000D__x000A_                        if ($StartRow -eq 1 -and $EndRow -eq 1) {_x000D__x000A_                            $rows = 0_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    # ; if ($StartRow -ge $EndRow) { Write-Warning -Message "Selecting $StartRow as the header with data in $(1+$StartRow) to $EndRow might give odd results." } }_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                #region Create property names_x000D__x000A_                if ((-not $Columns) -or (-not ($PropertyNames = Get-PropertyNames -Columns $Columns -StartRow $StartRow))) {_x000D__x000A_                    throw "No column headers found on top row '$StartRow'. If column headers in the worksheet are not a requirement then please use the '-NoHeader' or '-HeaderName' parameter."; return_x000D__x000A_                }_x000D__x000A_                if ($Duplicates = $PropertyNames | Group-Object Value | Where-Object Count -GE 2) {_x000D__x000A_                    throw "Duplicate column headers found on row '$StartRow' in columns '$($Duplicates.Group.Column)'. Column headers must be unique, if this is not a requirement please use the '-NoHeader' or '-HeaderName' parameter."; return_x000D__x000A_                }_x000D__x000A_                #endregion_x000D__x000A_                if (-not $rows) {_x000D__x000A_                    Write-Warning "Worksheet '$WorksheetName' in workbook '$Path' contains no data in the rows after top row '$StartRow'"_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    #region Create one object per row_x000D__x000A_                    if ($AsText -or $AsDate) {_x000D__x000A_                        &lt;#join items in AsText together with ~~~ . Escape any regex special characters..._x000D__x000A_                        # which turns "*" into "\*" make it ".*". Convert ~~~ to $|^ and top and tail with ^%;_x000D__x000A_                        So if we get "Week", "[Time]" and "*date*" ; make the expression ^week$|^\[Time\]$|^.*Date.*$_x000D__x000A_                        $make a regex for this which is case insensitive (option 1) and compiled (option 8)_x000D__x000A_                        #&gt;_x000D__x000A_                        $TextColExpression = ''_x000D__x000A_                        if ($AsText) {_x000D__x000A_                            $TextColExpression += '(?&lt;astext&gt;^' + [regex]::Escape($AsText -join '~~~').replace('\*', '.*').replace('~~~', '$|^') + '$)'_x000D__x000A_                        }_x000D__x000A_                        if ($AsText -and $AsDate) {_x000D__x000A_                            $TextColExpression += "|"_x000D__x000A_                        }_x000D__x000A_                        if ($AsDate) {_x000D__x000A_                            $TextColExpression += '(?&lt;asDate&gt;^' + [regex]::Escape($AsDate -join '~~~').replace('\*', '.*').replace('~~~', '$|^') + '$)'_x000D__x000A_                        }_x000D__x000A_                        $TextColRegEx = New-Object -TypeName regex -ArgumentList $TextColExpression , 9_x000D__x000A_                    }_x000D__x000A_                    else {$TextColRegEx = $null}_x000D__x000A_                    foreach ($R in $rows) {_x000D__x000A_                        #Disabled write-verbose for speed_x000D__x000A_                        #  Write-Verbose "Import row '$R'"_x000D__x000A_                        $NewRow = [Ordered]@{ }_x000D__x000A_                        if ($TextColRegEx) {_x000D__x000A_                            foreach ($P in $PropertyNames) {_x000D__x000A_                                $MatchTest = $TextColRegEx.Match($P.value)_x000D__x000A_                                if ($MatchTest.groups.name -eq "astext") {_x000D__x000A_                                        $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Text_x000D__x000A_                                }_x000D__x000A_                                elseif ($MatchTest.groups.name -eq "asdate" -and $Worksheet.Cells[$R, $P.Column].Value -is [System.ValueType]) {_x000D__x000A_                                        $NewRow[$P.Value] = [datetime]::FromOADate(($Worksheet.Cells[$R, $P.Column].Value))_x000D__x000A_                                }_x000D__x000A_                                else {  $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Value }_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                        else {_x000D__x000A_                            foreach ($P in $PropertyNames) {_x000D__x000A_                                $NewRow[$P.Value] = $Worksheet.Cells[$R, $P.Column].Value_x000D__x000A_                                #    Write-Verbose "Import cell '$($Worksheet.Cells[$R, $P.Column].Address)' with property name '$($p.Value)' and value '$($Worksheet.Cells[$R, $P.Column].Value)'."_x000D__x000A_                            }_x000D__x000A_                        }_x000D__x000A_                        [PSCustomObject]$NewRow_x000D__x000A_                    }_x000D__x000A_                    #endregion_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            catch { throw "Failed importing the Excel workbook '$Path' with worksheet '$WorksheetName': $_"; return }_x000D__x000A_            finally {_x000D__x000A_                if ($Path) { $stream.close(); $ExcelPackage.Dispose() }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2550">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Import</S>
      <S N="Noun">Excel</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2551">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Import-Excel</S>
      <Obj N="CommandType" RefId="2552">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2553">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2554">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2555">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2556">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2557">
                  <TNRef RefId="25" />
                  <LST>
                    <S>FullName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="2558">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="2559">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="2560">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2561">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Sheet</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HeaderName</S>
            <Obj N="Value" RefId="2562">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HeaderName</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2563">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="2564">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2565">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartRow</S>
            <Obj N="Value" RefId="2566">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2567">
                  <TNRef RefId="25" />
                  <LST>
                    <S>HeaderRow</S>
                    <S>TopRow</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndRow</S>
            <Obj N="Value" RefId="2568">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2569">
                  <TNRef RefId="25" />
                  <LST>
                    <S>StopRow</S>
                    <S>BottomRow</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartColumn</S>
            <Obj N="Value" RefId="2570">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2571">
                  <TNRef RefId="25" />
                  <LST>
                    <S>LeftColumn</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EndColumn</S>
            <Obj N="Value" RefId="2572">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EndColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2573">
                  <TNRef RefId="25" />
                  <LST>
                    <S>RightColumn</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataOnly</S>
            <Obj N="Value" RefId="2574">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataOnly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2575">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsText</S>
            <Obj N="Value" RefId="2576">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsText</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2577">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsDate</S>
            <Obj N="Value" RefId="2578">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsDate</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2579">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Password</S>
            <Obj N="Value" RefId="2580">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Password</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2581">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2582">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2583">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2584">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2585">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2586">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2587">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2588">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2589">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2590">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2591">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2592">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2593">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2594">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2595">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2596">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2597">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2598">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2599">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2600">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2601">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2602">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2603">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2604">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2605">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string&gt;] -NoHeader [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PathC</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2606">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2607">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string&gt;] -HeaderName &lt;string[]&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PathB</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2608">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2609">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string[]&gt; [[-WorksheetName] &lt;string&gt;] [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PathA</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2610">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2611">
            <TNRef RefId="8" />
            <ToString>[[-WorksheetName] &lt;string&gt;] -ExcelPackage &lt;ExcelPackage&gt; -NoHeader [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PackageC</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2612">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2613">
            <TNRef RefId="8" />
            <ToString>[[-WorksheetName] &lt;string&gt;] -ExcelPackage &lt;ExcelPackage&gt; -HeaderName &lt;string[]&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PackageB</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2614">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2615">
            <TNRef RefId="8" />
            <ToString>[[-WorksheetName] &lt;string&gt;] -ExcelPackage &lt;ExcelPackage&gt; [-StartRow &lt;int&gt;] [-EndRow &lt;int&gt;] [-StartColumn &lt;int&gt;] [-EndColumn &lt;int&gt;] [-DataOnly] [-AsText &lt;string[]&gt;] [-AsDate &lt;string[]&gt;] [-Password &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PackageA</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2616">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Import-Excel</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="2617">
    <TNRef RefId="0" />
    <ToString>Import-Html</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Url,_x000D__x000A_        $Index,_x000D__x000A_        $Header,_x000D__x000A_        [int]$FirstDataRow=0,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_    Remove-Item $xlFile -ErrorAction Ignore_x000D__x000A__x000D__x000A_    Write-Verbose "Exporting to Excel file $($xlFile)"_x000D__x000A__x000D__x000A_    $data = Get-HtmlTable -Url $Url -TableIndex $Index -Header $Header -FirstDataRow $FirstDataRow -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A__x000D__x000A_    $data | Export-Excel $xlFile -Show -AutoSize_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Url,_x000D__x000A_        $Index,_x000D__x000A_        $Header,_x000D__x000A_        [int]$FirstDataRow=0,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_    Remove-Item $xlFile -ErrorAction Ignore_x000D__x000A__x000D__x000A_    Write-Verbose "Exporting to Excel file $($xlFile)"_x000D__x000A__x000D__x000A_    $data = Get-HtmlTable -Url $Url -TableIndex $Index -Header $Header -FirstDataRow $FirstDataRow -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A__x000D__x000A_    $data | Export-Excel $xlFile -Show -AutoSize_x000D__x000A_</S>
      <Obj N="Options" RefId="2618">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Import</S>
      <S N="Noun">Html</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2619">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Import-Html</S>
      <Obj N="CommandType" RefId="2620">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2621">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2622">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2623">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Url</S>
            <Obj N="Value" RefId="2624">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Url</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2625">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Index</S>
            <Obj N="Value" RefId="2626">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Index</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2627">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Header</S>
            <Obj N="Value" RefId="2628">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Header</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2629">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FirstDataRow</S>
            <Obj N="Value" RefId="2630">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FirstDataRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2631">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseDefaultCredentials</S>
            <Obj N="Value" RefId="2632">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseDefaultCredentials</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2633">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2634">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2635">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2636">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2637">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2638">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2639">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2640">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2641">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2642">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2643">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2644">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2645">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2646">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2647">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2648">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2649">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2650">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2651">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2652">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2653">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2654">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2655">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2656">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2657">
            <TNRef RefId="8" />
            <ToString>[[-Url] &lt;Object&gt;] [[-Index] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [[-FirstDataRow] &lt;int&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2658">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Import-Html</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2659">
    <TNRef RefId="0" />
    <ToString>Import-UPS</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $TrackingNumber,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Import-Html "https://wwwapps.ups.com/WebTracking/track?track=yes&amp;trackNums=$($TrackingNumber)" 0 -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $TrackingNumber,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Import-Html "https://wwwapps.ups.com/WebTracking/track?track=yes&amp;trackNums=$($TrackingNumber)" 0 -UseDefaultCredentials: $UseDefaultCredentials_x000D__x000A_</S>
      <Obj N="Options" RefId="2660">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Import</S>
      <S N="Noun">UPS</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2661">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Import-UPS</S>
      <Obj N="CommandType" RefId="2662">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2663">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2664">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2665">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">TrackingNumber</S>
            <Obj N="Value" RefId="2666">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TrackingNumber</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2667">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseDefaultCredentials</S>
            <Obj N="Value" RefId="2668">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseDefaultCredentials</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2669">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2670">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2671">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2672">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2673">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2674">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2675">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2676">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2677">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2678">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2679">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2680">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2681">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2682">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2683">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2684">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2685">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2686">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2687">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2688">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2689">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2690">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2691">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2692">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2693">
            <TNRef RefId="8" />
            <ToString>[[-TrackingNumber] &lt;Object&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2694">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Import-UPS</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2695">
    <TNRef RefId="0" />
    <ToString>Import-USPS</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $TrackingNumber,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A__x000D__x000A_    )_x000D__x000A__x000D__x000A_    Import-Html "https://tools.usps.com/go/TrackConfirmAction?qtc_tLabels1=$($TrackingNumber)" 0 -UseDefaultCredentials:$UseDefaultCredentials_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $TrackingNumber,_x000D__x000A_        [Switch]$UseDefaultCredentials_x000D__x000A__x000D__x000A_    )_x000D__x000A__x000D__x000A_    Import-Html "https://tools.usps.com/go/TrackConfirmAction?qtc_tLabels1=$($TrackingNumber)" 0 -UseDefaultCredentials:$UseDefaultCredentials_x000D__x000A_</S>
      <Obj N="Options" RefId="2696">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Import</S>
      <S N="Noun">USPS</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2697">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Import-USPS</S>
      <Obj N="CommandType" RefId="2698">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2699">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2700">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2701">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">TrackingNumber</S>
            <Obj N="Value" RefId="2702">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TrackingNumber</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2703">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UseDefaultCredentials</S>
            <Obj N="Value" RefId="2704">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UseDefaultCredentials</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2705">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2706">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2707">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2708">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2709">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2710">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2711">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2712">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2713">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2714">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2715">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2716">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2717">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2718">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2719">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2720">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2721">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2722">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2723">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2724">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2725">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2726">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2727">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2728">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2729">
            <TNRef RefId="8" />
            <ToString>[[-TrackingNumber] &lt;Object&gt;] [-UseDefaultCredentials] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2730">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Import-USPS</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2731">
    <TNRef RefId="0" />
    <ToString>InModuleScope</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_   Allows you to execute parts of a test script within the_x000D__x000A_   scope of a PowerShell script module._x000D__x000A_.DESCRIPTION_x000D__x000A_   By injecting some test code into the scope of a PowerShell_x000D__x000A_   script module, you can use non-exported functions, aliases_x000D__x000A_   and variables inside that module, to perform unit tests on_x000D__x000A_   its internal implementation._x000D__x000A__x000D__x000A_   InModuleScope may be used anywhere inside a Pester script,_x000D__x000A_   either inside or outside a Describe block._x000D__x000A_.PARAMETER ModuleName_x000D__x000A_   The name of the module into which the test code should be_x000D__x000A_   injected. This module must already be loaded into the current_x000D__x000A_   PowerShell session._x000D__x000A_.PARAMETER ScriptBlock_x000D__x000A_   The code to be executed within the script module._x000D__x000A_.PARAMETER Parameters_x000D__x000A_   A optional hashtable of parameters to be passed to the scriptblock._x000D__x000A_.PARAMETER ArgumentList_x000D__x000A_   A optional list of arguments to be passed to the scriptblock._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    # The script module:_x000D__x000A_    function PublicFunction_x000D__x000A_    {_x000D__x000A_        # Does something_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function PrivateFunction_x000D__x000A_    {_x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function PublicFunction_x000D__x000A__x000D__x000A_    # The test script:_x000D__x000A__x000D__x000A_    Import-Module MyModule_x000D__x000A__x000D__x000A_    InModuleScope MyModule {_x000D__x000A_        Describe 'Testing MyModule' {_x000D__x000A_            It 'Tests the Private function' {_x000D__x000A_                PrivateFunction | Should -Be $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    Normally you would not be able to access "PrivateFunction" from_x000D__x000A_    the PowerShell session, because the module only exported_x000D__x000A_    "PublicFunction".  Using InModuleScope allowed this call to_x000D__x000A_    "PrivateFunction" to work successfully._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/InModuleScope_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]_x000D__x000A_        $ModuleName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [HashTable]_x000D__x000A_        $Parameters,_x000D__x000A__x000D__x000A_        $ArgumentList_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $module = Get-ScriptModule -ModuleName $ModuleName -ErrorAction Stop_x000D__x000A__x000D__x000A_    # TODO: could this simply be $PSCmdlet.SessionState? Because the original scope we are moving from_x000D__x000A_    # is the scope in which this command is running, right?_x000D__x000A_    # $originalState = $Pester.SessionState_x000D__x000A_    # $originalScriptBlockScope = Get-ScriptBlockScope -ScriptBlock $ScriptBlock_x000D__x000A__x000D__x000A_    # try {_x000D__x000A_    # $sessionState = Set-SessionStateHint -PassThru -Hint "Module - $($module.Name)" -SessionState $module.SessionState_x000D__x000A_    # $Pester.SessionState = $sessionState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionState $sessionState_x000D__x000A__x000D__x000A_    # do {_x000D__x000A_    # Write-ScriptBlockInvocationHint -Hint "InModuleScope" -ScriptBlock $ScriptBlock_x000D__x000A_    &amp; $module $ScriptBlock @Parameters @ArgumentList_x000D__x000A_    # } until ($true)_x000D__x000A_    # }_x000D__x000A_    # finally {_x000D__x000A_    # $Pester.SessionState = $originalState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionStateInternal $originalScriptBlockScope_x000D__x000A_    # }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_   Allows you to execute parts of a test script within the_x000D__x000A_   scope of a PowerShell script module._x000D__x000A_.DESCRIPTION_x000D__x000A_   By injecting some test code into the scope of a PowerShell_x000D__x000A_   script module, you can use non-exported functions, aliases_x000D__x000A_   and variables inside that module, to perform unit tests on_x000D__x000A_   its internal implementation._x000D__x000A__x000D__x000A_   InModuleScope may be used anywhere inside a Pester script,_x000D__x000A_   either inside or outside a Describe block._x000D__x000A_.PARAMETER ModuleName_x000D__x000A_   The name of the module into which the test code should be_x000D__x000A_   injected. This module must already be loaded into the current_x000D__x000A_   PowerShell session._x000D__x000A_.PARAMETER ScriptBlock_x000D__x000A_   The code to be executed within the script module._x000D__x000A_.PARAMETER Parameters_x000D__x000A_   A optional hashtable of parameters to be passed to the scriptblock._x000D__x000A_.PARAMETER ArgumentList_x000D__x000A_   A optional list of arguments to be passed to the scriptblock._x000D__x000A_.EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    # The script module:_x000D__x000A_    function PublicFunction_x000D__x000A_    {_x000D__x000A_        # Does something_x000D__x000A_    }_x000D__x000A__x000D__x000A_    function PrivateFunction_x000D__x000A_    {_x000D__x000A_        return $true_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function PublicFunction_x000D__x000A__x000D__x000A_    # The test script:_x000D__x000A__x000D__x000A_    Import-Module MyModule_x000D__x000A__x000D__x000A_    InModuleScope MyModule {_x000D__x000A_        Describe 'Testing MyModule' {_x000D__x000A_            It 'Tests the Private function' {_x000D__x000A_                PrivateFunction | Should -Be $true_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    Normally you would not be able to access "PrivateFunction" from_x000D__x000A_    the PowerShell session, because the module only exported_x000D__x000A_    "PublicFunction".  Using InModuleScope allowed this call to_x000D__x000A_    "PrivateFunction" to work successfully._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_    https://pester.dev/docs/commands/InModuleScope_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [string]_x000D__x000A_        $ModuleName,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [scriptblock]_x000D__x000A_        $ScriptBlock,_x000D__x000A__x000D__x000A_        [HashTable]_x000D__x000A_        $Parameters,_x000D__x000A__x000D__x000A_        $ArgumentList_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $module = Get-ScriptModule -ModuleName $ModuleName -ErrorAction Stop_x000D__x000A__x000D__x000A_    # TODO: could this simply be $PSCmdlet.SessionState? Because the original scope we are moving from_x000D__x000A_    # is the scope in which this command is running, right?_x000D__x000A_    # $originalState = $Pester.SessionState_x000D__x000A_    # $originalScriptBlockScope = Get-ScriptBlockScope -ScriptBlock $ScriptBlock_x000D__x000A__x000D__x000A_    # try {_x000D__x000A_    # $sessionState = Set-SessionStateHint -PassThru -Hint "Module - $($module.Name)" -SessionState $module.SessionState_x000D__x000A_    # $Pester.SessionState = $sessionState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionState $sessionState_x000D__x000A__x000D__x000A_    # do {_x000D__x000A_    # Write-ScriptBlockInvocationHint -Hint "InModuleScope" -ScriptBlock $ScriptBlock_x000D__x000A_    &amp; $module $ScriptBlock @Parameters @ArgumentList_x000D__x000A_    # } until ($true)_x000D__x000A_    # }_x000D__x000A_    # finally {_x000D__x000A_    # $Pester.SessionState = $originalState_x000D__x000A_    # Set-ScriptBlockScope -ScriptBlock $ScriptBlock -SessionStateInternal $originalScriptBlockScope_x000D__x000A_    # }_x000D__x000A_</S>
      <Obj N="Options" RefId="2732">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2733">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">InModuleScope</S>
      <Obj N="CommandType" RefId="2734">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="2735">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="2736">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2737">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ModuleName</S>
            <Obj N="Value" RefId="2738">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2739">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ScriptBlock</S>
            <Obj N="Value" RefId="2740">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ScriptBlock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="2741">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Parameters</S>
            <Obj N="Value" RefId="2742">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Parameters</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="2743">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ArgumentList</S>
            <Obj N="Value" RefId="2744">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ArgumentList</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2745">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2746">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2747">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2748">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2749">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2750">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2751">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2752">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2753">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2754">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2755">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2756">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2757">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2758">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2759">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2760">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2761">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2762">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2763">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2764">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2765">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2766">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2767">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2768">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2769">
            <TNRef RefId="8" />
            <ToString>[-ModuleName] &lt;string&gt; [-ScriptBlock] &lt;scriptblock&gt; [[-Parameters] &lt;hashtable&gt;] [[-ArgumentList] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2770">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::InModuleScope</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/InModuleScope</S>
    </MS>
  </Obj>
  <Obj RefId="2771">
    <TNRef RefId="0" />
    <ToString>Invoke-Pester</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs Pester tests_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    The Invoke-Pester function runs Pester tests, including *.Tests.ps1 files and_x000D__x000A_    Pester tests in PowerShell scripts._x000D__x000A__x000D__x000A_    You can run scripts that include Pester tests just as you would any other_x000D__x000A_    Windows PowerShell script, including typing the full path at the command line_x000D__x000A_    and running in a script editing program. Typically, you use Invoke-Pester to run_x000D__x000A_    all Pester tests in a directory, or to use its many helpful parameters,_x000D__x000A_    including parameters that generate custom objects or XML files._x000D__x000A__x000D__x000A_    By default, Invoke-Pester runs all *.Tests.ps1 files in the current directory_x000D__x000A_    and all subdirectories recursively. You can use its parameters to select tests_x000D__x000A_    by file name, test name, or tag._x000D__x000A__x000D__x000A_    To run Pester tests in scripts that take parameter values, use the Script_x000D__x000A_    parameter with a hash table value._x000D__x000A__x000D__x000A_    Also, by default, Pester tests write test results to the console host, much like_x000D__x000A_    Write-Host does, but you can use the Show parameter set to None to suppress the host_x000D__x000A_    messages, use the PassThru parameter to generate a custom object_x000D__x000A_    (PSCustomObject) that contains the test results, use the OutputXml and_x000D__x000A_    OutputFormat parameters to write the test results to an XML file, and use the_x000D__x000A_    EnableExit parameter to return an exit code that contains the number of failed_x000D__x000A_    tests._x000D__x000A__x000D__x000A_    You can also use the Strict parameter to fail all pending and skipped tests._x000D__x000A_    This feature is ideal for build systems and other processes that require success_x000D__x000A_    on every test._x000D__x000A__x000D__x000A_    To help with test design, Invoke-Pester includes a CodeCoverage parameter that_x000D__x000A_    lists commands, classes, functions, and lines of code that did not run during test_x000D__x000A_    execution and returns the code that ran as a percentage of all tested code._x000D__x000A__x000D__x000A_    Invoke-Pester, and the Pester module that exports it, are products of an_x000D__x000A_    open-source project hosted on GitHub. To view, comment, or contribute to the_x000D__x000A_    repository, see https://github.com/Pester._x000D__x000A__x000D__x000A_    .PARAMETER CI_x000D__x000A_    (Introduced v5)_x000D__x000A_    Enable Code Coverage, Test Results and Exit after Run_x000D__x000A__x000D__x000A_    Replace with ConfigurationProperty_x000D__x000A_        CodeCoverage.Enabled = $true_x000D__x000A_        TestResult.Enabled = $true_x000D__x000A_        Run.Exit = $true_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverage_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.Enabled = $true_x000D__x000A_    Adds a code coverage report to the Pester tests. Takes strings or hash table values._x000D__x000A_    A code coverage report lists the lines of code that did and did not run during_x000D__x000A_    a Pester test. This report does not tell whether code was tested; only whether_x000D__x000A_    the code ran during the test._x000D__x000A_    By default, the code coverage report is written to the host program_x000D__x000A_    (like Write-Host). When you use the PassThru parameter, the custom object_x000D__x000A_    that Invoke-Pester returns has an additional CodeCoverage property that contains_x000D__x000A_    a custom object with detailed results of the code coverage test, including lines_x000D__x000A_    hit, lines missed, and helpful statistics._x000D__x000A_    However, NUnitXml and JUnitXml output (OutputXML, OutputFormat) do not include_x000D__x000A_    any code coverage information, because it's not supported by the schema._x000D__x000A_    Enter the path to the files of code under test (not the test file)._x000D__x000A_    Wildcard characters are supported. If you omit the path, the default is local_x000D__x000A_    directory, not the directory specified by the Script parameter. Pester test files_x000D__x000A_    are by default excluded from code coverage when a directory is provided. When you_x000D__x000A_    provide a test file directly using string, code coverage will be measured. To include_x000D__x000A_    tests in code coverage of a directory, use the dictionary syntax and provide_x000D__x000A_    IncludeTests = $true option, as shown below._x000D__x000A_    To run a code coverage test only on selected classes, functions or lines in a script,_x000D__x000A_    enter a hash table value with the following keys:_x000D__x000A_    -- Path (P)(mandatory) &lt;string&gt;: Enter one path to the files. Wildcard characters_x000D__x000A_    are supported, but only one string is permitted._x000D__x000A_    -- IncludeTests &lt;bool&gt;: Includes code coverage for Pester test files (*.tests.ps1)._x000D__x000A_    Default is false._x000D__x000A_    One of the following: Class/Function or StartLine/EndLine_x000D__x000A_    -- Class (C) &lt;string&gt;: Enter the class name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -- Function (F) &lt;string&gt;: Enter the function name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -or-_x000D__x000A_    -- StartLine (S): Performs code coverage analysis beginning with the specified_x000D__x000A_    line. Default is line 1._x000D__x000A_    -- EndLine (E): Performs code coverage analysis ending with the specified line._x000D__x000A_    Default is the last line of the script._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The path where Invoke-Pester will save formatted code coverage results file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    a required extension (usually the xml)._x000D__x000A_    If this path is not provided, no file will be generated._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileEncoding_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileEncoding_x000D__x000A_    Sets the output encoding of CodeCoverageOutputFileFormat_x000D__x000A_    Default is utf8_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileFormat_x000D__x000A_    The name of a code coverage report file format._x000D__x000A_    Default value is: JaCoCo._x000D__x000A_    Currently supported formats are:_x000D__x000A_    - JaCoCo - this XML file format is compatible with Azure Devops, VSTS/TFS_x000D__x000A__x000D__x000A_    The ReportGenerator tool can be used to consolidate multiple reports and provide code coverage reporting._x000D__x000A_    https://github.com/danielpalme/ReportGenerator_x000D__x000A__x000D__x000A_    .PARAMETER Configuration_x000D__x000A_    (Introduced v5)_x000D__x000A_    [PesterConfiguration] object for Advanced Configuration_x000D__x000A__x000D__x000A_    Pester supports Simple and Advanced Configuration._x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration &lt;PesterConfiguration&gt; [&lt;CommonParameters&gt;]_x000D__x000A__x000D__x000A_    Default is [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_    ConfigurationProperties include following:_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Run_x000D__x000A_    ---_x000D__x000A_    Run.ExcludePath - Directories or files to be excluded from the run._x000D__x000A_    Run.Exit - Exit with non-zero exit code when the test run fails._x000D__x000A_        Default is: false_x000D__x000A_    Run.PassThru - Return result object to the pipeline after finishing the test run._x000D__x000A_        Default is: false_x000D__x000A_    Run.Path - Directories to be searched for tests, paths directly to test files, or combination of both._x000D__x000A_        Default is: ._x000D__x000A_    Run.ScriptBlock - ScriptBlocks containing tests to be executed._x000D__x000A_    Run.Container - ContainerInfo objects containing tests to be executed._x000D__x000A_    Run.TestExtension - Filter used to identify test files._x000D__x000A_        Default is: *.Tests.ps1*_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Output_x000D__x000A_    ------------_x000D__x000A_    Output.Verbosity - The verbosity of output, options are None, Normal, Detailed and Diagnostic._x000D__x000A_        Default is: Normal_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.CodeCoverage_x000D__x000A_    ------------_x000D__x000A_    CodeCoverage.Enabled - Enable CodeCoverage._x000D__x000A_        Default is: false_x000D__x000A_    CodeCoverage.OutputFormat - Format to use for code coverage report. Possible values: JaCoCo_x000D__x000A_    CodeCoverage.OutputPath - Path relative to the current directory where code coverage report is saved._x000D__x000A_        Default is: coverage.xml_x000D__x000A_    CodeCoverage.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    CodeCoverage.Path - Directories or files to be used for codecoverage, by default the Path(s) from general settings are used, unless overridden here._x000D__x000A_    CodeCoverage.ExcludeTests - Exclude tests from code coverage. This uses the TestFilter from general configuration._x000D__x000A_        Default is: true_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.TestResult_x000D__x000A_    ----------_x000D__x000A_    TestResult.Enabled - Enable TestResult._x000D__x000A_    TestResult.OutputFormat - Format to use for test result report. Possible values:  NUnitXml, JUnitXml_x000D__x000A_        Default is: NUnitXml_x000D__x000A_    TestResult.OutputPath - Path relative to the current directory where test result report is saved._x000D__x000A_        Default is: testResults.xml_x000D__x000A_    TestResult.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    TestResult.TestSuiteName - Set the name assigned to the root 'test-suite' element._x000D__x000A_        Default is: Pester_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Filter_x000D__x000A_    ------_x000D__x000A_    Filter.ExcludeTag - Exclude a tag, accepts wildcards_x000D__x000A_    Filter.FullName - Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'_x000D__x000A_    Filter.Line - Filter by file and scriptblock start line, useful to run parsed tests programatically to avoid problems with expanded names. Example: 'C:\tests\file1.Tests.ps1:37'_x000D__x000A_    Filter.Tag - Tags of Describe, Context or It to be run._x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Should_x000D__x000A_    ------------_x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A_        Default is: Stop_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Debug_x000D__x000A_    -----_x000D__x000A_    Debug.ShowFullErrors - Show full errors including Pester internal stack._x000D__x000A_    Debug.ShowNavigationMarkers - Write paths after every block and test, for easy navigation in VSCode._x000D__x000A_    Debug.WriteDebugMessages - Write Debug messages to screen._x000D__x000A_    Debug.WriteDebugMessagesFrom - Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything._x000D__x000A_        Available options: "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A__x000D__x000A_    .PARAMETER Container_x000D__x000A_    Specifies one or more ContainerInfo-objects that define containers with tests._x000D__x000A_    ContainerInfo-objects are generated using New-PesterContainer. Useful for_x000D__x000A_    scenarios where data-driven test are generated, e.g. parametrized test files._x000D__x000A__x000D__x000A_    .PARAMETER EnableExit_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.EnableExit_x000D__x000A_    Will cause Invoke-Pester to exit with a exit code equal to the number of failed_x000D__x000A_    tests once all tests have been run. Use this to "fail" a build when any tests fail._x000D__x000A__x000D__x000A_    .PARAMETER ExcludePath_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.ExcludePath_x000D__x000A__x000D__x000A_    .PARAMETER ExcludeTagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.ExcludeTag_x000D__x000A__x000D__x000A_    .PARAMETER FullNameFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.FullName_x000D__x000A__x000D__x000A_    .PARAMETER Output_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Supports Diagnostic, Detailed, Normal, Minimal, None_x000D__x000A__x000D__x000A_    Default value is: Normal_x000D__x000A__x000D__x000A_    .PARAMETER OutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFile_x000D__x000A_    The path where Invoke-Pester will save formatted test results log file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    the xml extension._x000D__x000A_    If this path is not provided, no log will be generated._x000D__x000A__x000D__x000A_    .PARAMETER OutputFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFormat_x000D__x000A_    The format of output. Currently NUnitXml and JUnitXml is supported._x000D__x000A__x000D__x000A_    .PARAMETER PassThru_x000D__x000A_    Replace with ConfigurationProperty Run.PassThru_x000D__x000A_    Returns a custom object (PSCustomObject) that contains the test results._x000D__x000A_    By default, Invoke-Pester writes to the host program, not to the output stream (stdout)._x000D__x000A_    If you try to save the result in a variable, the variable is empty unless you_x000D__x000A_    use the PassThru parameter._x000D__x000A_    To suppress the host output, use the Show parameter set to None._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Aliases Script_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER PesterOption_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Sets advanced options for the test execution. Enter a PesterOption object,_x000D__x000A_    such as one that you create by using the New-PesterOption cmdlet, or a hash table_x000D__x000A_    in which the keys are option names and the values are option values._x000D__x000A_    For more information on the options available, see the help for New-PesterOption._x000D__x000A__x000D__x000A_    .PARAMETER Quiet_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The parameter Quiet is deprecated since Pester v4.0 and will be deleted_x000D__x000A_    in the next major version of Pester. Please use the parameter Show_x000D__x000A_    with value 'None' instead._x000D__x000A_    The parameter Quiet suppresses the output that Pester writes to the host program,_x000D__x000A_    including the result summary and CodeCoverage output._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Show_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Customizes the output Pester writes to the screen. Available options are None, Default,_x000D__x000A_    Passed, Failed, Pending, Skipped, Inconclusive, Describe, Context, Summary, Header, All, Fails._x000D__x000A_    The options can be combined to define presets._x000D__x000A_    ConfigurationProperty Output.Verbosity supports the following values:_x000D__x000A_    None_x000D__x000A_    Minimal_x000D__x000A_    Normal_x000D__x000A_    Detailed_x000D__x000A_    Diagnostic_x000D__x000A__x000D__x000A_    Show parameter supports the following parameter values:_x000D__x000A_    None - (None) to write no output to the screen._x000D__x000A_    All - (Detailed) to write all available information (this is default option)._x000D__x000A_    Default - (Detailed)_x000D__x000A_    Detailed - (Detailed)_x000D__x000A_    Fails - (Normal) to write everything except Passed (but including Describes etc.)._x000D__x000A_    Diagnostic - (Diagnostic)_x000D__x000A_    Normal - (Normal)_x000D__x000A_    Minimal - (Minimal)_x000D__x000A__x000D__x000A_    A common setting is also Failed, Summary, to write only failed tests and test summary._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Strict_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Makes Pending and Skipped tests to Failed tests. Useful for continuous_x000D__x000A_    integration where you need to make sure all tests passed._x000D__x000A__x000D__x000A_    .PARAMETER TagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Aliases Tag, Tags_x000D__x000A_    Replace with ConfigurationProperty Filter.Tag_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester_x000D__x000A__x000D__x000A_    This command runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester -Path .\Util*_x000D__x000A__x000D__x000A_    This commands runs all *.Tests.ps1 files in subdirectories with names that begin_x000D__x000A_    with 'Util' and their subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $config = [PesterConfiguration]@{_x000D__x000A_        Should = @{ # &lt;- Should configuration._x000D__x000A_            ErrorAction = 'Continue' # &lt;- Always run all Should-assertions in a test_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It shows how advanced configuration can be used by casting a hashtable to override_x000D__x000A_    default settings, in this case to make Pester run all Should-assertions in a test_x000D__x000A_    even if the first fails._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $config = [PesterConfiguration]::Default_x000D__x000A_    $config.TestResults.Enabled = $true_x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It uses advanced configuration to enable testresult-output to file. Access $config.TestResults_x000D__x000A_    to see other testresult options like  output path and format and their default values._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/quick-start_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    # Currently doesn't work. $IgnoreUnsafeCommands filter used in rule as workaround_x000D__x000A_    # [Diagnostics.CodeAnalysis.SuppressMessageAttribute('Pester.BuildAnalyzerRules\Measure-SafeCommands', 'Remove-Variable', Justification = 'Remove-Variable can't remove "optimized variables" when using "alias" for Remove-Variable.')]_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Simple')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Script")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [String[]] $Path = '.',_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [String[]] $ExcludePath = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 4, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tag")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tags")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $TagFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $ExcludeTagFilter,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Alias("Name")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $FullNameFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Switch] $CI,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [ValidateSet("Diagnostic", "Detailed", "Normal", "Minimal", "None")]_x000D__x000A_        [String] $Output = "Normal",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch] $PassThru,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Pester.ContainerInfo[]] $Container,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Advanced")]_x000D__x000A_        [PesterConfiguration] $Configuration,_x000D__x000A__x000D__x000A_        # rest of the Legacy set_x000D__x000A_        [Parameter(Position = 2, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [switch]$EnableExit,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object[]] $CodeCoverage = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFileEncoding = 'utf8',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('JaCoCo')]_x000D__x000A_        [String]$CodeCoverageOutputFileFormat = "JaCoCo",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Strict,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $OutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('NUnitXml', 'NUnit2.5', 'JUnitXml')]_x000D__x000A_        [string] $OutputFormat = 'NUnitXml',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Quiet,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object]$PesterOption,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Pester.OutputTypes]$Show = 'All'_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $start = [DateTime]::Now_x000D__x000A_        # this will inherit to child scopes and allow Describe / Context to run directly from a file or command line_x000D__x000A_        $invokedViaInvokePester = $true_x000D__x000A__x000D__x000A_        # TODO: Remove all references to mock table, there should not be many._x000D__x000A_        $script:mockTable = @{}_x000D__x000A_        # todo: move mock cleanup to BeforeAllBlockContainer when there is any_x000D__x000A_        Remove-MockFunctionsAndAliases_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        try {_x000D__x000A_            if ('Simple' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        if (@($Path)[0] -is [System.Collections.IDictionary]) {_x000D__x000A_                            throw "Passing hashtable configuration to -Path / -Script is currently not supported in Pester 5.0. Please provide just paths, as an array of strings."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludePath')) {_x000D__x000A_                    if ($null -ne $ExcludePath) {_x000D__x000A_                        $Configuration.Run.ExcludePath = $ExcludePath_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludePath' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CI')) {_x000D__x000A_                    if ($CI) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CI' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Output')) {_x000D__x000A_                    if ($null -ne $Output) {_x000D__x000A_                        $Configuration.Output.Verbosity = $Output_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Output' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Container')) {_x000D__x000A_                    if ($null -ne $Container) {_x000D__x000A_                        $Configuration.Run.Container = $Container_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Container' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Legacy' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] "You are using Legacy parameter set that adapts Pester 5 syntax to Pester 4 syntax. This parameter set is deprecated, and does not work 100%. The -Strict and -PesterOption parameters are ignored, and providing advanced configuration to -Path (-Script), and -CodeCoverage via a hash table does not work. Please refer to https://github.com/pester/Pester/releases/tag/5.0.1#legacy-parameter-set for more information."_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('EnableExit')) {_x000D__x000A_                    if ($EnableExit) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'EnableExit' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverage')) {_x000D__x000A__x000D__x000A_                    # advanced CC options won't work (hashtable)_x000D__x000A_                    if ($null -ne $CodeCoverage) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.Path = $CodeCoverage_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverage' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFile')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFile) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputPath = $CodeCoverageOutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileEncoding')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileEncoding) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputEncoding = $CodeCoverageOutputFileEncoding_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileEncoding' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileFormat')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileFormat) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputFormat = $CodeCoverageOutputFileFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('Strict')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Strict' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('PesterOption')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PesterOption' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFile')) {_x000D__x000A_                    if ($null -ne $OutputFile -and 0 -lt @($OutputFile).Count){_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.OutputPath = $OutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFormat')) {_x000D__x000A_                    if ($null -ne $OutputFormat -and 0 -lt @($OutputFormat).Count) {_x000D__x000A_                        $Configuration.TestResult.OutputFormat = $OutputFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Show')) {_x000D__x000A_                    if ($null -ne $Show) {_x000D__x000A_                        # most used v4 options are adapted, and it also takes v5 options to be able to migrate gradually_x000D__x000A_                        # without switching the whole param set just to get Diagnostic output_x000D__x000A_                        # {None | Default | Passed | Failed | Pending | Skipped | Inconclusive | Describe | Context | Summary | Header | Fails | All}_x000D__x000A_                        $verbosity = switch ($Show) {_x000D__x000A_                            "All" { "Detailed" }_x000D__x000A_                            "Default" { "Detailed" }_x000D__x000A_                            "Fails" { "Normal" }_x000D__x000A_                            "Diagnostic" { "Diagnostic" }_x000D__x000A_                            "Detailed" { "Detailed" }_x000D__x000A_                            "Normal" { "Normal" }_x000D__x000A_                            "Minimal" { "Minimal" }_x000D__x000A_                            "None" { "None" }_x000D__x000A_                            default { "Detailed" }_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Output.Verbosity = $verbosity_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Quiet')) {_x000D__x000A_                    if ($null -ne $Quiet) {_x000D__x000A_                        if ($Quiet) {_x000D__x000A_                            $Configuration.Output.Verbosity = 'None'_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # maybe -IgnorePesterPreference to avoid using $PesterPreference from the context_x000D__x000A__x000D__x000A_            $callerPreference = [PesterConfiguration] $PSCmdlet.SessionState.PSVariable.GetValue("PesterPreference")_x000D__x000A_            $hasCallerPreference = $null -ne $callerPreference_x000D__x000A__x000D__x000A_            # we never want to use and keep the pester preference directly,_x000D__x000A_            # because then the settings are modified on an object that outlives the_x000D__x000A_            # invoke-pester run and we leak changes from this run to the next_x000D__x000A_            # such as filters set in the first run will end up in the next run as well_x000D__x000A_            #_x000D__x000A_            # preference is inherited in all subsequent calls in this session state_x000D__x000A_            # but we still pass it explicitly where practical_x000D__x000A_            if (-not $hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = $Configuration_x000D__x000A_            }_x000D__x000A_            elseif ($hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = [PesterConfiguration]::Merge($callerPreference, $Configuration)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            &amp; $SafeCommands['Get-Variable'] 'Configuration' -Scope Local | Remove-Variable_x000D__x000A__x000D__x000A_            # $sessionState = Set-SessionStateHint -PassThru  -Hint "Caller - Captured in Invoke-Pester" -SessionState $PSCmdlet.SessionState_x000D__x000A_            $sessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_            $pluginConfiguration = @{}_x000D__x000A_            $plugins = @()_x000D__x000A_            if ('None' -ne $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $plugins += Get-WriteScreenPlugin -Verbosity $PesterPreference.Output.Verbosity.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Diagnostic' -eq $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessages = $true_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessagesFrom = "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=_x000D__x000A_            @(_x000D__x000A_                # decorator plugin needs to be added after output_x000D__x000A_                # because on teardown they will run in opposite order_x000D__x000A_                # and that way output can consume the fixed object that decorator_x000D__x000A_                # decorated, not nice but works_x000D__x000A_                Get-RSpecObjectDecoratorPlugin_x000D__x000A_                Get-TestDrivePlugin_x000D__x000A_            )_x000D__x000A__x000D__x000A_            if ("Windows" -eq (GetPesterOs)) {_x000D__x000A_                $plugins += @(Get-TestRegistryPlugin)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=  @(Get-MockPlugin)_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $paths = @(if (0 -lt $PesterPreference.CodeCoverage.Path.Value.Count) {_x000D__x000A_                        $PesterPreference.CodeCoverage.Path.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        # no paths specific to CodeCoverage were provided, resolve them from_x000D__x000A_                        # tests by using the whole directory in which the test or the_x000D__x000A_                        # provided directory. We might need another option to disable this convention._x000D__x000A_                        @(foreach ($p in $PesterPreference.Run.Path.Value) {_x000D__x000A_                            # this is a bit ugly, but the logic here is_x000D__x000A_                            # that we check if the path exists,_x000D__x000A_                            # and if it does and is a file then we return the_x000D__x000A_                            # parent directory, otherwise we got a directory_x000D__x000A_                            # and return just it_x000D__x000A_                            $i = &amp; $SafeCommands['Get-Item'] $p_x000D__x000A_                            if ($i.PSIsContainer) {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.FullName "*"_x000D__x000A_                            }_x000D__x000A_                            else {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.Directory.FullName "*"_x000D__x000A_                            }_x000D__x000A_                        })_x000D__x000A_                    })_x000D__x000A__x000D__x000A_                $outputPath = if ([IO.Path]::IsPathRooted($PesterPreference.CodeCoverage.OutputPath.Value)) {_x000D__x000A_                        $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        &amp; $SafeCommands['Join-Path'] $pwd.Path $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                $CodeCoverage = @{_x000D__x000A_                    Enabled = $PesterPreference.CodeCoverage.Enabled.Value_x000D__x000A_                    OutputFormat = $PesterPreference.CodeCoverage.OutputFormat.Value_x000D__x000A_                    OutputPath = $outputPath_x000D__x000A_                    OutputEncoding = $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_                    ExcludeTests = $PesterPreference.CodeCoverage.ExcludeTests.Value_x000D__x000A_                    Path = @($paths)_x000D__x000A_                    TestExtension = $PesterPreference.Run.TestExtension.Value_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $plugins += (Get-CoveragePlugin)_x000D__x000A_                $pluginConfiguration["Coverage"] = $CodeCoverage_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $filter = New-FilterObject `_x000D__x000A_                -Tag $PesterPreference.Filter.Tag.Value `_x000D__x000A_                -ExcludeTag $PesterPreference.Filter.ExcludeTag.Value `_x000D__x000A_                -Line $PesterPreference.Filter.Line.Value `_x000D__x000A_                -FullName $PesterPreference.Filter.FullName.Value_x000D__x000A__x000D__x000A_            $containers = @()_x000D__x000A_            if (any $PesterPreference.Run.ScriptBlock.Value) {_x000D__x000A_                $containers += @( $PesterPreference.Run.ScriptBlock.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -ScriptBlock $_ })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            foreach ($c in $PesterPreference.Run.Container.Value) {_x000D__x000A_                $containers += $c_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((any $PesterPreference.Run.Path.Value)) {_x000D__x000A_                if (((none $PesterPreference.Run.ScriptBlock.Value) -and (none $PesterPreference.Run.Container.Value)) -or ('.' -ne $PesterPreference.Run.Path.Value[0])) {_x000D__x000A_                    #TODO: Skipping the invocation when scriptblock is provided and the default path, later keep path in the default parameter set and remove scriptblock from it, so get-help still shows . as the default value and we can still provide script blocks via an advanced settings parameter_x000D__x000A_                    # TODO: pass the startup options as context to Start instead of just paths_x000D__x000A__x000D__x000A_                    $exclusions = combineNonNull @($PesterPreference.Run.ExcludePath.Value, ($PesterPreference.Run.Container.Value | &amp; $SafeCommands['Where-Object'] { "File" -eq $_.Type } | &amp; $SafeCommands['ForEach-Object'] {$_.Item.FullName }))_x000D__x000A_                    $containers += @(Find-File -Path $PesterPreference.Run.Path.Value -ExcludePath $exclusions -Extension $PesterPreference.Run.TestExtension.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -File $_ })_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # monkey patching that we need global data for code coverage, this is problematic because code coverage should be setup once for the whole run, but because at the start everything was separated on container level the discovery is not done at this point, and we don't have any info about the containers apart from the path, or scriptblock content_x000D__x000A_            $pluginData = @{}_x000D__x000A__x000D__x000A_            $steps = $Plugins.Start_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step Start -Context @{_x000D__x000A_                    Containers = $containers_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                    GlobalPluginData = $pluginData_x000D__x000A_                    WriteDebugMessages = $PesterPreference.Debug.WriteDebugMessages.Value_x000D__x000A_                    Write_PesterDebugMessage = if ($PesterPreference.Debug.WriteDebugMessages) { $script:SafeCommands['Write-PesterDebugMessage'] }_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((none $containers)) {_x000D__x000A_                throw "No test files were found and no scriptblocks were provided."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $r = Invoke-Test -BlockContainer $containers -Plugin $plugins -PluginConfiguration $pluginConfiguration -SessionState $sessionState -Filter $filter -Configuration $PesterPreference_x000D__x000A__x000D__x000A_            foreach ($c in $r) {_x000D__x000A_                Fold-Container -Container $c  -OnTest { param($t) Add-RSpecTestObjectProperties $t }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $parameters = @{_x000D__x000A_                PSBoundParameters = $PSBoundParameters_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run = [Pester.Run]::Create()_x000D__x000A_            $run.Executed = $true_x000D__x000A_            $run.ExecutedAt = $start_x000D__x000A_            $run.PSBoundParameters = $PSBoundParameters_x000D__x000A_            $run.PluginConfiguration = $pluginConfiguration_x000D__x000A_            $run.Plugins = $Plugins_x000D__x000A_            $run.PluginData = $pluginData_x000D__x000A_            $run.Configuration = $PesterPreference_x000D__x000A_            $m = $ExecutionContext.SessionState.Module_x000D__x000A_            $run.Version = if ($m.PrivateData -and $m.PrivateData.PSData -and $m.PrivateData.PSData.PreRelease)_x000D__x000A_            {_x000D__x000A_                "$($m.Version)-$($m.PrivateData.PSData.PreRelease)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $m.Version_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run.PSVersion = $PSVersionTable.PSVersion_x000D__x000A_            foreach ($i in @($r)) {_x000D__x000A_                $run.Containers.Add($i)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            PostProcess-RSpecTestRun -TestRun $run_x000D__x000A__x000D__x000A_            $steps = $Plugins.End_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step End -Context @{_x000D__x000A_                    TestRun = $run_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.TestResult.Enabled.Value) {_x000D__x000A_                Export-PesterResults -Result $run -Path $PesterPreference.TestResult.OutputPath.Value -Format $PesterPreference.TestResult.OutputFormat.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $breakpoints = @($run.PluginData.Coverage.CommandCoverage)_x000D__x000A_                $coverageReport = Get-CoverageReport -CommandCoverage $breakpoints_x000D__x000A_                $totalMilliseconds = $run.Duration.TotalMilliseconds_x000D__x000A_                $jaCoCoReport = Get-JaCoCoReportXml -CommandCoverage $breakpoints -TotalMilliseconds $totalMilliseconds -CoverageReport $coverageReport_x000D__x000A_                $jaCoCoReport | &amp; $SafeCommands['Out-File'] $PesterPreference.CodeCoverage.OutputPath.Value -Encoding $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not $PesterPreference.Debug.ReturnRawResultObject.Value) {_x000D__x000A_                Remove-RSPecNonPublicProperties $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.Run.PassThru.Value) {_x000D__x000A_                $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # exit with exit code if we fail and even if we succeed, othwerise we could inherit_x000D__x000A_            # exit code of some other app end exit with it's exit code instead with ours_x000D__x000A_            $failedCount = $run.FailedCount + $run.FailedBlocksCount + $run.FailedContainersCount_x000D__x000A_            if ($PesterPreference.Run.Exit.Value -and 0 -ne $failedCount) {_x000D__x000A_                # exit with the number of failed tests when there are any_x000D__x000A_                # and the exit preference is set. This will fail the run in CI_x000D__x000A_                # when any tests failed._x000D__x000A_                exit $failedCount_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # just set exit code but don't fail when the option is not set_x000D__x000A_                # or when there are no failed tests, to ensure that we can run_x000D__x000A_                # multiple successful runs of Invoke-Pester in a row._x000D__x000A_                $global:LASTEXITCODE = $failedCount_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            Write-ErrorToScreen $__x000D__x000A_            if ($PesterPreference.Run.Exit.Value) {_x000D__x000A_                exit -1_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Simple</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Runs Pester tests_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    The Invoke-Pester function runs Pester tests, including *.Tests.ps1 files and_x000D__x000A_    Pester tests in PowerShell scripts._x000D__x000A__x000D__x000A_    You can run scripts that include Pester tests just as you would any other_x000D__x000A_    Windows PowerShell script, including typing the full path at the command line_x000D__x000A_    and running in a script editing program. Typically, you use Invoke-Pester to run_x000D__x000A_    all Pester tests in a directory, or to use its many helpful parameters,_x000D__x000A_    including parameters that generate custom objects or XML files._x000D__x000A__x000D__x000A_    By default, Invoke-Pester runs all *.Tests.ps1 files in the current directory_x000D__x000A_    and all subdirectories recursively. You can use its parameters to select tests_x000D__x000A_    by file name, test name, or tag._x000D__x000A__x000D__x000A_    To run Pester tests in scripts that take parameter values, use the Script_x000D__x000A_    parameter with a hash table value._x000D__x000A__x000D__x000A_    Also, by default, Pester tests write test results to the console host, much like_x000D__x000A_    Write-Host does, but you can use the Show parameter set to None to suppress the host_x000D__x000A_    messages, use the PassThru parameter to generate a custom object_x000D__x000A_    (PSCustomObject) that contains the test results, use the OutputXml and_x000D__x000A_    OutputFormat parameters to write the test results to an XML file, and use the_x000D__x000A_    EnableExit parameter to return an exit code that contains the number of failed_x000D__x000A_    tests._x000D__x000A__x000D__x000A_    You can also use the Strict parameter to fail all pending and skipped tests._x000D__x000A_    This feature is ideal for build systems and other processes that require success_x000D__x000A_    on every test._x000D__x000A__x000D__x000A_    To help with test design, Invoke-Pester includes a CodeCoverage parameter that_x000D__x000A_    lists commands, classes, functions, and lines of code that did not run during test_x000D__x000A_    execution and returns the code that ran as a percentage of all tested code._x000D__x000A__x000D__x000A_    Invoke-Pester, and the Pester module that exports it, are products of an_x000D__x000A_    open-source project hosted on GitHub. To view, comment, or contribute to the_x000D__x000A_    repository, see https://github.com/Pester._x000D__x000A__x000D__x000A_    .PARAMETER CI_x000D__x000A_    (Introduced v5)_x000D__x000A_    Enable Code Coverage, Test Results and Exit after Run_x000D__x000A__x000D__x000A_    Replace with ConfigurationProperty_x000D__x000A_        CodeCoverage.Enabled = $true_x000D__x000A_        TestResult.Enabled = $true_x000D__x000A_        Run.Exit = $true_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverage_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.Enabled = $true_x000D__x000A_    Adds a code coverage report to the Pester tests. Takes strings or hash table values._x000D__x000A_    A code coverage report lists the lines of code that did and did not run during_x000D__x000A_    a Pester test. This report does not tell whether code was tested; only whether_x000D__x000A_    the code ran during the test._x000D__x000A_    By default, the code coverage report is written to the host program_x000D__x000A_    (like Write-Host). When you use the PassThru parameter, the custom object_x000D__x000A_    that Invoke-Pester returns has an additional CodeCoverage property that contains_x000D__x000A_    a custom object with detailed results of the code coverage test, including lines_x000D__x000A_    hit, lines missed, and helpful statistics._x000D__x000A_    However, NUnitXml and JUnitXml output (OutputXML, OutputFormat) do not include_x000D__x000A_    any code coverage information, because it's not supported by the schema._x000D__x000A_    Enter the path to the files of code under test (not the test file)._x000D__x000A_    Wildcard characters are supported. If you omit the path, the default is local_x000D__x000A_    directory, not the directory specified by the Script parameter. Pester test files_x000D__x000A_    are by default excluded from code coverage when a directory is provided. When you_x000D__x000A_    provide a test file directly using string, code coverage will be measured. To include_x000D__x000A_    tests in code coverage of a directory, use the dictionary syntax and provide_x000D__x000A_    IncludeTests = $true option, as shown below._x000D__x000A_    To run a code coverage test only on selected classes, functions or lines in a script,_x000D__x000A_    enter a hash table value with the following keys:_x000D__x000A_    -- Path (P)(mandatory) &lt;string&gt;: Enter one path to the files. Wildcard characters_x000D__x000A_    are supported, but only one string is permitted._x000D__x000A_    -- IncludeTests &lt;bool&gt;: Includes code coverage for Pester test files (*.tests.ps1)._x000D__x000A_    Default is false._x000D__x000A_    One of the following: Class/Function or StartLine/EndLine_x000D__x000A_    -- Class (C) &lt;string&gt;: Enter the class name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -- Function (F) &lt;string&gt;: Enter the function name. Wildcard characters are_x000D__x000A_    supported, but only one string is permitted. Default is *._x000D__x000A_    -or-_x000D__x000A_    -- StartLine (S): Performs code coverage analysis beginning with the specified_x000D__x000A_    line. Default is line 1._x000D__x000A_    -- EndLine (E): Performs code coverage analysis ending with the specified line._x000D__x000A_    Default is the last line of the script._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The path where Invoke-Pester will save formatted code coverage results file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    a required extension (usually the xml)._x000D__x000A_    If this path is not provided, no file will be generated._x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileEncoding_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileEncoding_x000D__x000A_    Sets the output encoding of CodeCoverageOutputFileFormat_x000D__x000A_    Default is utf8_x000D__x000A__x000D__x000A_    .PARAMETER CodeCoverageOutputFileFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty CodeCoverage.CodeCoverageOutputFileFormat_x000D__x000A_    The name of a code coverage report file format._x000D__x000A_    Default value is: JaCoCo._x000D__x000A_    Currently supported formats are:_x000D__x000A_    - JaCoCo - this XML file format is compatible with Azure Devops, VSTS/TFS_x000D__x000A__x000D__x000A_    The ReportGenerator tool can be used to consolidate multiple reports and provide code coverage reporting._x000D__x000A_    https://github.com/danielpalme/ReportGenerator_x000D__x000A__x000D__x000A_    .PARAMETER Configuration_x000D__x000A_    (Introduced v5)_x000D__x000A_    [PesterConfiguration] object for Advanced Configuration_x000D__x000A__x000D__x000A_    Pester supports Simple and Advanced Configuration._x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration &lt;PesterConfiguration&gt; [&lt;CommonParameters&gt;]_x000D__x000A__x000D__x000A_    Default is [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_    ConfigurationProperties include following:_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Run_x000D__x000A_    ---_x000D__x000A_    Run.ExcludePath - Directories or files to be excluded from the run._x000D__x000A_    Run.Exit - Exit with non-zero exit code when the test run fails._x000D__x000A_        Default is: false_x000D__x000A_    Run.PassThru - Return result object to the pipeline after finishing the test run._x000D__x000A_        Default is: false_x000D__x000A_    Run.Path - Directories to be searched for tests, paths directly to test files, or combination of both._x000D__x000A_        Default is: ._x000D__x000A_    Run.ScriptBlock - ScriptBlocks containing tests to be executed._x000D__x000A_    Run.Container - ContainerInfo objects containing tests to be executed._x000D__x000A_    Run.TestExtension - Filter used to identify test files._x000D__x000A_        Default is: *.Tests.ps1*_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Output_x000D__x000A_    ------------_x000D__x000A_    Output.Verbosity - The verbosity of output, options are None, Normal, Detailed and Diagnostic._x000D__x000A_        Default is: Normal_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.CodeCoverage_x000D__x000A_    ------------_x000D__x000A_    CodeCoverage.Enabled - Enable CodeCoverage._x000D__x000A_        Default is: false_x000D__x000A_    CodeCoverage.OutputFormat - Format to use for code coverage report. Possible values: JaCoCo_x000D__x000A_    CodeCoverage.OutputPath - Path relative to the current directory where code coverage report is saved._x000D__x000A_        Default is: coverage.xml_x000D__x000A_    CodeCoverage.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    CodeCoverage.Path - Directories or files to be used for codecoverage, by default the Path(s) from general settings are used, unless overridden here._x000D__x000A_    CodeCoverage.ExcludeTests - Exclude tests from code coverage. This uses the TestFilter from general configuration._x000D__x000A_        Default is: true_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.TestResult_x000D__x000A_    ----------_x000D__x000A_    TestResult.Enabled - Enable TestResult._x000D__x000A_    TestResult.OutputFormat - Format to use for test result report. Possible values:  NUnitXml, JUnitXml_x000D__x000A_        Default is: NUnitXml_x000D__x000A_    TestResult.OutputPath - Path relative to the current directory where test result report is saved._x000D__x000A_        Default is: testResults.xml_x000D__x000A_    TestResult.OutputEncoding - Encoding of the output file. Currently UTF8_x000D__x000A_    TestResult.TestSuiteName - Set the name assigned to the root 'test-suite' element._x000D__x000A_        Default is: Pester_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Filter_x000D__x000A_    ------_x000D__x000A_    Filter.ExcludeTag - Exclude a tag, accepts wildcards_x000D__x000A_    Filter.FullName - Full name of test with -like wildcards, joined by dot. Example: '*.describe Get-Item.test1'_x000D__x000A_    Filter.Line - Filter by file and scriptblock start line, useful to run parsed tests programatically to avoid problems with expanded names. Example: 'C:\tests\file1.Tests.ps1:37'_x000D__x000A_    Filter.Tag - Tags of Describe, Context or It to be run._x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Should_x000D__x000A_    ------------_x000D__x000A_    Should.ErrorAction - Controls if Should throws on error. Use 'Stop' to throw on error, or 'Continue' to fail at the end of the test._x000D__x000A_        Default is: Stop_x000D__x000A__x000D__x000A_    [PesterConfiguration]::Default.Debug_x000D__x000A_    -----_x000D__x000A_    Debug.ShowFullErrors - Show full errors including Pester internal stack._x000D__x000A_    Debug.ShowNavigationMarkers - Write paths after every block and test, for easy navigation in VSCode._x000D__x000A_    Debug.WriteDebugMessages - Write Debug messages to screen._x000D__x000A_    Debug.WriteDebugMessagesFrom - Write Debug messages from a given source, WriteDebugMessages must be set to true for this to work. You can use like wildcards to get messages from multiple sources, as well as * to get everything._x000D__x000A_        Available options: "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A__x000D__x000A_    .PARAMETER Container_x000D__x000A_    Specifies one or more ContainerInfo-objects that define containers with tests._x000D__x000A_    ContainerInfo-objects are generated using New-PesterContainer. Useful for_x000D__x000A_    scenarios where data-driven test are generated, e.g. parametrized test files._x000D__x000A__x000D__x000A_    .PARAMETER EnableExit_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.EnableExit_x000D__x000A_    Will cause Invoke-Pester to exit with a exit code equal to the number of failed_x000D__x000A_    tests once all tests have been run. Use this to "fail" a build when any tests fail._x000D__x000A__x000D__x000A_    .PARAMETER ExcludePath_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Run.ExcludePath_x000D__x000A__x000D__x000A_    .PARAMETER ExcludeTagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.ExcludeTag_x000D__x000A__x000D__x000A_    .PARAMETER FullNameFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Filter.FullName_x000D__x000A__x000D__x000A_    .PARAMETER Output_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Supports Diagnostic, Detailed, Normal, Minimal, None_x000D__x000A__x000D__x000A_    Default value is: Normal_x000D__x000A__x000D__x000A_    .PARAMETER OutputFile_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFile_x000D__x000A_    The path where Invoke-Pester will save formatted test results log file._x000D__x000A_    The path must include the location and name of the folder and file name with_x000D__x000A_    the xml extension._x000D__x000A_    If this path is not provided, no log will be generated._x000D__x000A__x000D__x000A_    .PARAMETER OutputFormat_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty TestResult.OutputFormat_x000D__x000A_    The format of output. Currently NUnitXml and JUnitXml is supported._x000D__x000A__x000D__x000A_    .PARAMETER PassThru_x000D__x000A_    Replace with ConfigurationProperty Run.PassThru_x000D__x000A_    Returns a custom object (PSCustomObject) that contains the test results._x000D__x000A_    By default, Invoke-Pester writes to the host program, not to the output stream (stdout)._x000D__x000A_    If you try to save the result in a variable, the variable is empty unless you_x000D__x000A_    use the PassThru parameter._x000D__x000A_    To suppress the host output, use the Show parameter set to None._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Aliases Script_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER PesterOption_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Sets advanced options for the test execution. Enter a PesterOption object,_x000D__x000A_    such as one that you create by using the New-PesterOption cmdlet, or a hash table_x000D__x000A_    in which the keys are option names and the values are option values._x000D__x000A_    For more information on the options available, see the help for New-PesterOption._x000D__x000A__x000D__x000A_    .PARAMETER Quiet_x000D__x000A_    (Deprecated v4)_x000D__x000A_    The parameter Quiet is deprecated since Pester v4.0 and will be deleted_x000D__x000A_    in the next major version of Pester. Please use the parameter Show_x000D__x000A_    with value 'None' instead._x000D__x000A_    The parameter Quiet suppresses the output that Pester writes to the host program,_x000D__x000A_    including the result summary and CodeCoverage output._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Show_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Replace with ConfigurationProperty Output.Verbosity_x000D__x000A_    Customizes the output Pester writes to the screen. Available options are None, Default,_x000D__x000A_    Passed, Failed, Pending, Skipped, Inconclusive, Describe, Context, Summary, Header, All, Fails._x000D__x000A_    The options can be combined to define presets._x000D__x000A_    ConfigurationProperty Output.Verbosity supports the following values:_x000D__x000A_    None_x000D__x000A_    Minimal_x000D__x000A_    Normal_x000D__x000A_    Detailed_x000D__x000A_    Diagnostic_x000D__x000A__x000D__x000A_    Show parameter supports the following parameter values:_x000D__x000A_    None - (None) to write no output to the screen._x000D__x000A_    All - (Detailed) to write all available information (this is default option)._x000D__x000A_    Default - (Detailed)_x000D__x000A_    Detailed - (Detailed)_x000D__x000A_    Fails - (Normal) to write everything except Passed (but including Describes etc.)._x000D__x000A_    Diagnostic - (Diagnostic)_x000D__x000A_    Normal - (Normal)_x000D__x000A_    Minimal - (Minimal)_x000D__x000A__x000D__x000A_    A common setting is also Failed, Summary, to write only failed tests and test summary._x000D__x000A_    This parameter does not affect the PassThru custom object or the XML output that_x000D__x000A_    is written when you use the Output parameters._x000D__x000A__x000D__x000A_    .PARAMETER Strict_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Makes Pending and Skipped tests to Failed tests. Useful for continuous_x000D__x000A_    integration where you need to make sure all tests passed._x000D__x000A__x000D__x000A_    .PARAMETER TagFilter_x000D__x000A_    (Deprecated v4)_x000D__x000A_    Aliases Tag, Tags_x000D__x000A_    Replace with ConfigurationProperty Filter.Tag_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester_x000D__x000A__x000D__x000A_    This command runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Invoke-Pester -Path .\Util*_x000D__x000A__x000D__x000A_    This commands runs all *.Tests.ps1 files in subdirectories with names that begin_x000D__x000A_    with 'Util' and their subdirectories._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $config = [PesterConfiguration]@{_x000D__x000A_        Should = @{ # &lt;- Should configuration._x000D__x000A_            ErrorAction = 'Continue' # &lt;- Always run all Should-assertions in a test_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It shows how advanced configuration can be used by casting a hashtable to override_x000D__x000A_    default settings, in this case to make Pester run all Should-assertions in a test_x000D__x000A_    even if the first fails._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $config = [PesterConfiguration]::Default_x000D__x000A_    $config.TestResults.Enabled = $true_x000D__x000A_    Invoke-Pester -Configuration $config_x000D__x000A__x000D__x000A_    This example runs all *.Tests.ps1 files in the current directory and its subdirectories._x000D__x000A_    It uses advanced configuration to enable testresult-output to file. Access $config.TestResults_x000D__x000A_    to see other testresult options like  output path and format and their default values._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/quick-start_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A_    #&gt;_x000D__x000A__x000D__x000A_    # Currently doesn't work. $IgnoreUnsafeCommands filter used in rule as workaround_x000D__x000A_    # [Diagnostics.CodeAnalysis.SuppressMessageAttribute('Pester.BuildAnalyzerRules\Measure-SafeCommands', 'Remove-Variable', Justification = 'Remove-Variable can't remove "optimized variables" when using "alias" for Remove-Variable.')]_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Simple')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 0, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Script")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [String[]] $Path = '.',_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [String[]] $ExcludePath = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(Position = 4, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tag")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Alias("Tags")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $TagFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $ExcludeTagFilter,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Alias("Name")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string[]] $FullNameFilter,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Switch] $CI,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [ValidateSet("Diagnostic", "Detailed", "Normal", "Minimal", "None")]_x000D__x000A_        [String] $Output = "Normal",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch] $PassThru,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Simple")]_x000D__x000A_        [Pester.ContainerInfo[]] $Container,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Advanced")]_x000D__x000A_        [PesterConfiguration] $Configuration,_x000D__x000A__x000D__x000A_        # rest of the Legacy set_x000D__x000A_        [Parameter(Position = 2, Mandatory = 0, ParameterSetName = "Legacy")]  # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [switch]$EnableExit,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object[]] $CodeCoverage = @(),_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $CodeCoverageOutputFileEncoding = 'utf8',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('JaCoCo')]_x000D__x000A_        [String]$CodeCoverageOutputFileFormat = "JaCoCo",_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Strict,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [string] $OutputFile,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [ValidateSet('NUnitXml', 'NUnit2.5', 'JUnitXml')]_x000D__x000A_        [string] $OutputFormat = 'NUnitXml',_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Switch]$Quiet,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [object]$PesterOption,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = "Legacy")] # Legacy set for v4 compatibility during migration - deprecated_x000D__x000A_        [Pester.OutputTypes]$Show = 'All'_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $start = [DateTime]::Now_x000D__x000A_        # this will inherit to child scopes and allow Describe / Context to run directly from a file or command line_x000D__x000A_        $invokedViaInvokePester = $true_x000D__x000A__x000D__x000A_        # TODO: Remove all references to mock table, there should not be many._x000D__x000A_        $script:mockTable = @{}_x000D__x000A_        # todo: move mock cleanup to BeforeAllBlockContainer when there is any_x000D__x000A_        Remove-MockFunctionsAndAliases_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        try {_x000D__x000A_            if ('Simple' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        if (@($Path)[0] -is [System.Collections.IDictionary]) {_x000D__x000A_                            throw "Passing hashtable configuration to -Path / -Script is currently not supported in Pester 5.0. Please provide just paths, as an array of strings."_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludePath')) {_x000D__x000A_                    if ($null -ne $ExcludePath) {_x000D__x000A_                        $Configuration.Run.ExcludePath = $ExcludePath_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludePath' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CI')) {_x000D__x000A_                    if ($CI) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CI' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Output')) {_x000D__x000A_                    if ($null -ne $Output) {_x000D__x000A_                        $Configuration.Output.Verbosity = $Output_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Output' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Container')) {_x000D__x000A_                    if ($null -ne $Container) {_x000D__x000A_                        $Configuration.Run.Container = $Container_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Container' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Legacy' -eq $PSCmdlet.ParameterSetName) {_x000D__x000A_                &amp; $SafeCommands['Write-Warning'] "You are using Legacy parameter set that adapts Pester 5 syntax to Pester 4 syntax. This parameter set is deprecated, and does not work 100%. The -Strict and -PesterOption parameters are ignored, and providing advanced configuration to -Path (-Script), and -CodeCoverage via a hash table does not work. Please refer to https://github.com/pester/Pester/releases/tag/5.0.1#legacy-parameter-set for more information."_x000D__x000A_                # populate config from parameters and remove them so we_x000D__x000A_                # don't inherit them to child functions by accident_x000D__x000A__x000D__x000A_                $Configuration = [PesterConfiguration]::Default_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Path')) {_x000D__x000A_                    if ($null -ne $Path) {_x000D__x000A_                        $Configuration.Run.Path = $Path_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Path' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('FullNameFilter')) {_x000D__x000A_                    if ($null -ne $FullNameFilter -and 0 -lt @($FullNameFilter).Count){_x000D__x000A_                        $Configuration.Filter.FullName = $FullNameFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'FullNameFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('EnableExit')) {_x000D__x000A_                    if ($EnableExit) {_x000D__x000A_                        $Configuration.Run.Exit = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'EnableExit' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('TagFilter')) {_x000D__x000A_                    if ($null -ne $TagFilter -and 0 -lt @($TagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.Tag = $TagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'TagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('ExcludeTagFilter')) {_x000D__x000A_                    if ($null -ne $ExcludeTagFilter -and 0 -lt @($ExludeTagFilter).Count) {_x000D__x000A_                        $Configuration.Filter.ExcludeTag = $ExcludeTagFilter_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'ExcludeTagFilter' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('PassThru')) {_x000D__x000A_                    if ($null -ne $PassThru) {_x000D__x000A_                        $Configuration.Run.PassThru = [bool] $PassThru_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PassThru' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverage')) {_x000D__x000A__x000D__x000A_                    # advanced CC options won't work (hashtable)_x000D__x000A_                    if ($null -ne $CodeCoverage) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.Path = $CodeCoverage_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverage' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFile')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFile) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputPath = $CodeCoverageOutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileEncoding')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileEncoding) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputEncoding = $CodeCoverageOutputFileEncoding_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileEncoding' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('CodeCoverageOutputFileFormat')) {_x000D__x000A_                    if ($null -ne $CodeCoverageOutputFileFormat) {_x000D__x000A_                        $Configuration.CodeCoverage.Enabled = $true_x000D__x000A_                        $Configuration.CodeCoverage.OutputFormat = $CodeCoverageOutputFileFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'CodeCoverageOutputFileFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('Strict')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Strict' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if (-not $PSBoundParameters.ContainsKey('PesterOption')) {_x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'PesterOption' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFile')) {_x000D__x000A_                    if ($null -ne $OutputFile -and 0 -lt @($OutputFile).Count){_x000D__x000A_                        $Configuration.TestResult.Enabled = $true_x000D__x000A_                        $Configuration.TestResult.OutputPath = $OutputFile_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFile' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('OutputFormat')) {_x000D__x000A_                    if ($null -ne $OutputFormat -and 0 -lt @($OutputFormat).Count) {_x000D__x000A_                        $Configuration.TestResult.OutputFormat = $OutputFormat_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'OutputFormat' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Show')) {_x000D__x000A_                    if ($null -ne $Show) {_x000D__x000A_                        # most used v4 options are adapted, and it also takes v5 options to be able to migrate gradually_x000D__x000A_                        # without switching the whole param set just to get Diagnostic output_x000D__x000A_                        # {None | Default | Passed | Failed | Pending | Skipped | Inconclusive | Describe | Context | Summary | Header | Fails | All}_x000D__x000A_                        $verbosity = switch ($Show) {_x000D__x000A_                            "All" { "Detailed" }_x000D__x000A_                            "Default" { "Detailed" }_x000D__x000A_                            "Fails" { "Normal" }_x000D__x000A_                            "Diagnostic" { "Diagnostic" }_x000D__x000A_                            "Detailed" { "Detailed" }_x000D__x000A_                            "Normal" { "Normal" }_x000D__x000A_                            "Minimal" { "Minimal" }_x000D__x000A_                            "None" { "None" }_x000D__x000A_                            default { "Detailed" }_x000D__x000A_                        }_x000D__x000A__x000D__x000A_                        $Configuration.Output.Verbosity = $verbosity_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A__x000D__x000A_                if ($PSBoundParameters.ContainsKey('Quiet')) {_x000D__x000A_                    if ($null -ne $Quiet) {_x000D__x000A_                        if ($Quiet) {_x000D__x000A_                            $Configuration.Output.Verbosity = 'None'_x000D__x000A_                        }_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    &amp; $SafeCommands['Get-Variable'] 'Quiet' -Scope Local | Remove-Variable_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # maybe -IgnorePesterPreference to avoid using $PesterPreference from the context_x000D__x000A__x000D__x000A_            $callerPreference = [PesterConfiguration] $PSCmdlet.SessionState.PSVariable.GetValue("PesterPreference")_x000D__x000A_            $hasCallerPreference = $null -ne $callerPreference_x000D__x000A__x000D__x000A_            # we never want to use and keep the pester preference directly,_x000D__x000A_            # because then the settings are modified on an object that outlives the_x000D__x000A_            # invoke-pester run and we leak changes from this run to the next_x000D__x000A_            # such as filters set in the first run will end up in the next run as well_x000D__x000A_            #_x000D__x000A_            # preference is inherited in all subsequent calls in this session state_x000D__x000A_            # but we still pass it explicitly where practical_x000D__x000A_            if (-not $hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = $Configuration_x000D__x000A_            }_x000D__x000A_            elseif ($hasCallerPreference) {_x000D__x000A_                [PesterConfiguration] $PesterPreference = [PesterConfiguration]::Merge($callerPreference, $Configuration)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            &amp; $SafeCommands['Get-Variable'] 'Configuration' -Scope Local | Remove-Variable_x000D__x000A__x000D__x000A_            # $sessionState = Set-SessionStateHint -PassThru  -Hint "Caller - Captured in Invoke-Pester" -SessionState $PSCmdlet.SessionState_x000D__x000A_            $sessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_            $pluginConfiguration = @{}_x000D__x000A_            $plugins = @()_x000D__x000A_            if ('None' -ne $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $plugins += Get-WriteScreenPlugin -Verbosity $PesterPreference.Output.Verbosity.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ('Diagnostic' -eq $PesterPreference.Output.Verbosity.Value) {_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessages = $true_x000D__x000A_                $PesterPreference.Debug.WriteDebugMessagesFrom = "Discovery", "Skip", "Filter", "Mock", "CodeCoverage"_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=_x000D__x000A_            @(_x000D__x000A_                # decorator plugin needs to be added after output_x000D__x000A_                # because on teardown they will run in opposite order_x000D__x000A_                # and that way output can consume the fixed object that decorator_x000D__x000A_                # decorated, not nice but works_x000D__x000A_                Get-RSpecObjectDecoratorPlugin_x000D__x000A_                Get-TestDrivePlugin_x000D__x000A_            )_x000D__x000A__x000D__x000A_            if ("Windows" -eq (GetPesterOs)) {_x000D__x000A_                $plugins += @(Get-TestRegistryPlugin)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $plugins +=  @(Get-MockPlugin)_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $paths = @(if (0 -lt $PesterPreference.CodeCoverage.Path.Value.Count) {_x000D__x000A_                        $PesterPreference.CodeCoverage.Path.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        # no paths specific to CodeCoverage were provided, resolve them from_x000D__x000A_                        # tests by using the whole directory in which the test or the_x000D__x000A_                        # provided directory. We might need another option to disable this convention._x000D__x000A_                        @(foreach ($p in $PesterPreference.Run.Path.Value) {_x000D__x000A_                            # this is a bit ugly, but the logic here is_x000D__x000A_                            # that we check if the path exists,_x000D__x000A_                            # and if it does and is a file then we return the_x000D__x000A_                            # parent directory, otherwise we got a directory_x000D__x000A_                            # and return just it_x000D__x000A_                            $i = &amp; $SafeCommands['Get-Item'] $p_x000D__x000A_                            if ($i.PSIsContainer) {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.FullName "*"_x000D__x000A_                            }_x000D__x000A_                            else {_x000D__x000A_                                &amp; $SafeCommands['Join-Path'] $i.Directory.FullName "*"_x000D__x000A_                            }_x000D__x000A_                        })_x000D__x000A_                    })_x000D__x000A__x000D__x000A_                $outputPath = if ([IO.Path]::IsPathRooted($PesterPreference.CodeCoverage.OutputPath.Value)) {_x000D__x000A_                        $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A_                    else {_x000D__x000A_                        &amp; $SafeCommands['Join-Path'] $pwd.Path $PesterPreference.CodeCoverage.OutputPath.Value_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                $CodeCoverage = @{_x000D__x000A_                    Enabled = $PesterPreference.CodeCoverage.Enabled.Value_x000D__x000A_                    OutputFormat = $PesterPreference.CodeCoverage.OutputFormat.Value_x000D__x000A_                    OutputPath = $outputPath_x000D__x000A_                    OutputEncoding = $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_                    ExcludeTests = $PesterPreference.CodeCoverage.ExcludeTests.Value_x000D__x000A_                    Path = @($paths)_x000D__x000A_                    TestExtension = $PesterPreference.Run.TestExtension.Value_x000D__x000A_                }_x000D__x000A__x000D__x000A_                $plugins += (Get-CoveragePlugin)_x000D__x000A_                $pluginConfiguration["Coverage"] = $CodeCoverage_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $filter = New-FilterObject `_x000D__x000A_                -Tag $PesterPreference.Filter.Tag.Value `_x000D__x000A_                -ExcludeTag $PesterPreference.Filter.ExcludeTag.Value `_x000D__x000A_                -Line $PesterPreference.Filter.Line.Value `_x000D__x000A_                -FullName $PesterPreference.Filter.FullName.Value_x000D__x000A__x000D__x000A_            $containers = @()_x000D__x000A_            if (any $PesterPreference.Run.ScriptBlock.Value) {_x000D__x000A_                $containers += @( $PesterPreference.Run.ScriptBlock.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -ScriptBlock $_ })_x000D__x000A_            }_x000D__x000A__x000D__x000A_            foreach ($c in $PesterPreference.Run.Container.Value) {_x000D__x000A_                $containers += $c_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((any $PesterPreference.Run.Path.Value)) {_x000D__x000A_                if (((none $PesterPreference.Run.ScriptBlock.Value) -and (none $PesterPreference.Run.Container.Value)) -or ('.' -ne $PesterPreference.Run.Path.Value[0])) {_x000D__x000A_                    #TODO: Skipping the invocation when scriptblock is provided and the default path, later keep path in the default parameter set and remove scriptblock from it, so get-help still shows . as the default value and we can still provide script blocks via an advanced settings parameter_x000D__x000A_                    # TODO: pass the startup options as context to Start instead of just paths_x000D__x000A__x000D__x000A_                    $exclusions = combineNonNull @($PesterPreference.Run.ExcludePath.Value, ($PesterPreference.Run.Container.Value | &amp; $SafeCommands['Where-Object'] { "File" -eq $_.Type } | &amp; $SafeCommands['ForEach-Object'] {$_.Item.FullName }))_x000D__x000A_                    $containers += @(Find-File -Path $PesterPreference.Run.Path.Value -ExcludePath $exclusions -Extension $PesterPreference.Run.TestExtension.Value | &amp; $SafeCommands['ForEach-Object'] { New-BlockContainerObject -File $_ })_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # monkey patching that we need global data for code coverage, this is problematic because code coverage should be setup once for the whole run, but because at the start everything was separated on container level the discovery is not done at this point, and we don't have any info about the containers apart from the path, or scriptblock content_x000D__x000A_            $pluginData = @{}_x000D__x000A__x000D__x000A_            $steps = $Plugins.Start_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step Start -Context @{_x000D__x000A_                    Containers = $containers_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                    GlobalPluginData = $pluginData_x000D__x000A_                    WriteDebugMessages = $PesterPreference.Debug.WriteDebugMessages.Value_x000D__x000A_                    Write_PesterDebugMessage = if ($PesterPreference.Debug.WriteDebugMessages) { $script:SafeCommands['Write-PesterDebugMessage'] }_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ((none $containers)) {_x000D__x000A_                throw "No test files were found and no scriptblocks were provided."_x000D__x000A_                return_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $r = Invoke-Test -BlockContainer $containers -Plugin $plugins -PluginConfiguration $pluginConfiguration -SessionState $sessionState -Filter $filter -Configuration $PesterPreference_x000D__x000A__x000D__x000A_            foreach ($c in $r) {_x000D__x000A_                Fold-Container -Container $c  -OnTest { param($t) Add-RSpecTestObjectProperties $t }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $parameters = @{_x000D__x000A_                PSBoundParameters = $PSBoundParameters_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run = [Pester.Run]::Create()_x000D__x000A_            $run.Executed = $true_x000D__x000A_            $run.ExecutedAt = $start_x000D__x000A_            $run.PSBoundParameters = $PSBoundParameters_x000D__x000A_            $run.PluginConfiguration = $pluginConfiguration_x000D__x000A_            $run.Plugins = $Plugins_x000D__x000A_            $run.PluginData = $pluginData_x000D__x000A_            $run.Configuration = $PesterPreference_x000D__x000A_            $m = $ExecutionContext.SessionState.Module_x000D__x000A_            $run.Version = if ($m.PrivateData -and $m.PrivateData.PSData -and $m.PrivateData.PSData.PreRelease)_x000D__x000A_            {_x000D__x000A_                "$($m.Version)-$($m.PrivateData.PSData.PreRelease)"_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                $m.Version_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $run.PSVersion = $PSVersionTable.PSVersion_x000D__x000A_            foreach ($i in @($r)) {_x000D__x000A_                $run.Containers.Add($i)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            PostProcess-RSpecTestRun -TestRun $run_x000D__x000A__x000D__x000A_            $steps = $Plugins.End_x000D__x000A_            if ($null -ne $steps -and 0 -lt @($steps).Count) {_x000D__x000A_                Invoke-PluginStep -Plugins $Plugins -Step End -Context @{_x000D__x000A_                    TestRun = $run_x000D__x000A_                    Configuration = $pluginConfiguration_x000D__x000A_                } -ThrowOnFailure_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.TestResult.Enabled.Value) {_x000D__x000A_                Export-PesterResults -Result $run -Path $PesterPreference.TestResult.OutputPath.Value -Format $PesterPreference.TestResult.OutputFormat.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.CodeCoverage.Enabled.Value) {_x000D__x000A_                $breakpoints = @($run.PluginData.Coverage.CommandCoverage)_x000D__x000A_                $coverageReport = Get-CoverageReport -CommandCoverage $breakpoints_x000D__x000A_                $totalMilliseconds = $run.Duration.TotalMilliseconds_x000D__x000A_                $jaCoCoReport = Get-JaCoCoReportXml -CommandCoverage $breakpoints -TotalMilliseconds $totalMilliseconds -CoverageReport $coverageReport_x000D__x000A_                $jaCoCoReport | &amp; $SafeCommands['Out-File'] $PesterPreference.CodeCoverage.OutputPath.Value -Encoding $PesterPreference.CodeCoverage.OutputEncoding.Value_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if (-not $PesterPreference.Debug.ReturnRawResultObject.Value) {_x000D__x000A_                Remove-RSPecNonPublicProperties $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($PesterPreference.Run.PassThru.Value) {_x000D__x000A_                $run_x000D__x000A_            }_x000D__x000A__x000D__x000A_            # exit with exit code if we fail and even if we succeed, othwerise we could inherit_x000D__x000A_            # exit code of some other app end exit with it's exit code instead with ours_x000D__x000A_            $failedCount = $run.FailedCount + $run.FailedBlocksCount + $run.FailedContainersCount_x000D__x000A_            if ($PesterPreference.Run.Exit.Value -and 0 -ne $failedCount) {_x000D__x000A_                # exit with the number of failed tests when there are any_x000D__x000A_                # and the exit preference is set. This will fail the run in CI_x000D__x000A_                # when any tests failed._x000D__x000A_                exit $failedCount_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                # just set exit code but don't fail when the option is not set_x000D__x000A_                # or when there are no failed tests, to ensure that we can run_x000D__x000A_                # multiple successful runs of Invoke-Pester in a row._x000D__x000A_                $global:LASTEXITCODE = $failedCount_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            Write-ErrorToScreen $__x000D__x000A_            if ($PesterPreference.Run.Exit.Value) {_x000D__x000A_                exit -1_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2772">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Invoke</S>
      <S N="Noun">Pester</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2773">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Invoke-Pester</S>
      <Obj N="CommandType" RefId="2774">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="2775">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="2776">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2777">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="2778">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2779">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Script</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludePath</S>
            <Obj N="Value" RefId="2780">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludePath</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2781">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TagFilter</S>
            <Obj N="Value" RefId="2782">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TagFilter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2783">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Tags</S>
                    <S>Tag</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeTagFilter</S>
            <Obj N="Value" RefId="2784">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeTagFilter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2785">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FullNameFilter</S>
            <Obj N="Value" RefId="2786">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FullNameFilter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2787">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Name</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CI</S>
            <Obj N="Value" RefId="2788">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CI</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2789">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Output</S>
            <Obj N="Value" RefId="2790">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Output</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2791">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="2792">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2793">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Container</S>
            <Obj N="Value" RefId="2794">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Container</S>
                <S N="ParameterType">Pester.ContainerInfo[]</S>
                <Obj N="Aliases" RefId="2795">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Configuration</S>
            <Obj N="Value" RefId="2796">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Configuration</S>
                <S N="ParameterType">PesterConfiguration</S>
                <Obj N="Aliases" RefId="2797">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">EnableExit</S>
            <Obj N="Value" RefId="2798">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">EnableExit</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2799">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CodeCoverage</S>
            <Obj N="Value" RefId="2800">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CodeCoverage</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="2801">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CodeCoverageOutputFile</S>
            <Obj N="Value" RefId="2802">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CodeCoverageOutputFile</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2803">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CodeCoverageOutputFileEncoding</S>
            <Obj N="Value" RefId="2804">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CodeCoverageOutputFileEncoding</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2805">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CodeCoverageOutputFileFormat</S>
            <Obj N="Value" RefId="2806">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CodeCoverageOutputFileFormat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2807">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Strict</S>
            <Obj N="Value" RefId="2808">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Strict</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2809">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputFile</S>
            <Obj N="Value" RefId="2810">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputFile</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2811">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputFormat</S>
            <Obj N="Value" RefId="2812">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputFormat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2813">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Quiet</S>
            <Obj N="Value" RefId="2814">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Quiet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2815">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PesterOption</S>
            <Obj N="Value" RefId="2816">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PesterOption</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2817">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="2818">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">Pester.OutputTypes</S>
                <Obj N="Aliases" RefId="2819">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2820">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2821">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2822">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2823">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2824">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2825">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2826">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2827">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2828">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2829">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2830">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2831">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2832">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2833">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2834">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2835">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2836">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2837">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2838">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2839">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2840">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2841">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2842">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2843">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string[]&gt;] [-ExcludePath &lt;string[]&gt;] [-TagFilter &lt;string[]&gt;] [-ExcludeTagFilter &lt;string[]&gt;] [-FullNameFilter &lt;string[]&gt;] [-CI] [-Output &lt;string&gt;] [-PassThru] [-Container &lt;ContainerInfo[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Simple</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="2844">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2845">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string[]&gt;] [[-FullNameFilter] &lt;string[]&gt;] [-EnableExit] [[-TagFilter] &lt;string[]&gt;] [-ExcludeTagFilter &lt;string[]&gt;] [-PassThru] [-CodeCoverage &lt;Object[]&gt;] [-CodeCoverageOutputFile &lt;string&gt;] [-CodeCoverageOutputFileEncoding &lt;string&gt;] [-CodeCoverageOutputFileFormat &lt;string&gt;] [-Strict] [-OutputFile &lt;string&gt;] [-OutputFormat &lt;string&gt;] [-Quiet] [-PesterOption &lt;Object&gt;] [-Show &lt;OutputTypes&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Legacy</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2846">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2847">
            <TNRef RefId="8" />
            <ToString>[-Configuration &lt;PesterConfiguration&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Advanced</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2848">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Invoke-Pester</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Invoke-Pester</S>
    </MS>
  </Obj>
  <Obj RefId="2849">
    <TNRef RefId="0" />
    <ToString>Invoke-Sum</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Data,_x000D__x000A_        $Dimension,_x000D__x000A_        $Measure_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if(!$Measure) {$Measure = $Dimension}_x000D__x000A__x000D__x000A_    $h=@{}_x000D__x000A__x000D__x000A_    foreach ($item in $Data){_x000D__x000A_        $key=$item.$Dimension_x000D__x000A__x000D__x000A_        if(!$key) {$key="[missing]"}_x000D__x000A__x000D__x000A_        if(!$h.ContainsKey($key)) {_x000D__x000A_            $h.$key=[ordered]@{}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach($m in $Measure) {_x000D__x000A_            $value = $item.$m_x000D__x000A_            if($value -is [string] -or $value -is [System.Enum]) {_x000D__x000A_                $value = 1_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $h.$key.$m+=$value_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($entry in $h.GetEnumerator()){_x000D__x000A__x000D__x000A_        $nh=[ordered]@{Name=$entry.key}_x000D__x000A__x000D__x000A_        foreach ($item in $entry.value.getenumerator()) {_x000D__x000A_            $nh.($item.key)=$item.value_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [pscustomobject]$nh_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Data,_x000D__x000A_        $Dimension,_x000D__x000A_        $Measure_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if(!$Measure) {$Measure = $Dimension}_x000D__x000A__x000D__x000A_    $h=@{}_x000D__x000A__x000D__x000A_    foreach ($item in $Data){_x000D__x000A_        $key=$item.$Dimension_x000D__x000A__x000D__x000A_        if(!$key) {$key="[missing]"}_x000D__x000A__x000D__x000A_        if(!$h.ContainsKey($key)) {_x000D__x000A_            $h.$key=[ordered]@{}_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach($m in $Measure) {_x000D__x000A_            $value = $item.$m_x000D__x000A_            if($value -is [string] -or $value -is [System.Enum]) {_x000D__x000A_                $value = 1_x000D__x000A_            }_x000D__x000A__x000D__x000A_            $h.$key.$m+=$value_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    foreach ($entry in $h.GetEnumerator()){_x000D__x000A__x000D__x000A_        $nh=[ordered]@{Name=$entry.key}_x000D__x000A__x000D__x000A_        foreach ($item in $entry.value.getenumerator()) {_x000D__x000A_            $nh.($item.key)=$item.value_x000D__x000A_        }_x000D__x000A__x000D__x000A_        [pscustomobject]$nh_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2850">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Invoke</S>
      <S N="Noun">Sum</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2851">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Invoke-Sum</S>
      <Obj N="CommandType" RefId="2852">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="2853">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="2854">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2855">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Data</S>
            <Obj N="Value" RefId="2856">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Data</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2857">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Dimension</S>
            <Obj N="Value" RefId="2858">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Dimension</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2859">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Measure</S>
            <Obj N="Value" RefId="2860">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Measure</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2861">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2862">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2863">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2864">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2865">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2866">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2867">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2868">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2869">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2870">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2871">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2872">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2873">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2874">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2875">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2876">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2877">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2878">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2879">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2880">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2881">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2882">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2883">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2884">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2885">
            <TNRef RefId="8" />
            <ToString>[[-Data] &lt;Object&gt;] [[-Dimension] &lt;Object&gt;] [[-Measure] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2886">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Invoke-Sum</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2887">
    <TNRef RefId="0" />
    <ToString>Invoke-WebScript</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param (_x000D__x000A_        [string]$uri,_x000D__x000A_        [Parameter(ValueFromRemainingArguments)]$myargs_x000D__x000A_    )_x000D__x000A_    Invoke-Expression "&amp; {$(Invoke-WebRequest $uri)} $myargs"_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param (_x000D__x000A_        [string]$uri,_x000D__x000A_        [Parameter(ValueFromRemainingArguments)]$myargs_x000D__x000A_    )_x000D__x000A_    Invoke-Expression "&amp; {$(Invoke-WebRequest $uri)} $myargs"_x000D__x000A_</S>
      <Obj N="Options" RefId="2888">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Invoke</S>
      <S N="Noun">WebScript</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2889">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Invoke-WebScript</S>
      <Obj N="CommandType" RefId="2890">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2891">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2892">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2893">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">uri</S>
            <Obj N="Value" RefId="2894">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">uri</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2895">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">myargs</S>
            <Obj N="Value" RefId="2896">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">myargs</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="2897">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2898">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2899">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2900">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2901">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2902">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2903">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2904">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2905">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2906">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2907">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2908">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2909">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2910">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2911">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2912">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2913">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2914">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2915">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2916">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2917">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2918">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2919">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2920">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2921">
            <TNRef RefId="8" />
            <ToString>[[-uri] &lt;string&gt;] [[-myargs] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2922">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Invoke-WebScript</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2923">
    <TNRef RefId="0" />
    <ToString>It</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Validates the results of a test inside of a Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_The It command is intended to be used inside of a Describe or Context Block._x000D__x000A_If you are familiar with the AAA pattern (Arrange-Act-Assert), the body of_x000D__x000A_the It block is the appropriate location for an assert. The convention is to_x000D__x000A_assert a single expectation for each It block. The code inside of the It block_x000D__x000A_should throw a terminating error if the expectation of the test is not met and_x000D__x000A_thus cause the test to fail. The name of the It block should expressively state_x000D__x000A_the expectation of the test._x000D__x000A__x000D__x000A_In addition to using your own logic to test expectations and throw exceptions,_x000D__x000A_you may also use Pester's Should command to perform assertions in plain language._x000D__x000A__x000D__x000A_You can intentionally mark It block result as inconclusive by using Set-TestInconclusive_x000D__x000A_command as the first tested statement in the It block._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_An expressive phrase describing the expected test outcome._x000D__x000A__x000D__x000A_.PARAMETER Test_x000D__x000A_The script block that should throw an exception if the_x000D__x000A_expectation of the test is not met.If you are following the_x000D__x000A_AAA pattern (Arrange-Act-Assert), this typically holds the_x000D__x000A_Assert._x000D__x000A__x000D__x000A_.PARAMETER Pending_x000D__x000A_Use this parameter to explicitly mark the test as work-in-progress/not implemented/pending when you_x000D__x000A_need to distinguish a test that fails because it is not finished yet from a tests_x000D__x000A_that fail as a result of changes being made in the code base. An empty test, that is a_x000D__x000A_test that contains nothing except whitespace or comments is marked as Pending by default._x000D__x000A__x000D__x000A_.PARAMETER Skip_x000D__x000A_Use this parameter to explicitly mark the test to be skipped. This is preferable to temporarily_x000D__x000A_commenting out a test, because the test remains listed in the output. Use the Strict parameter_x000D__x000A_of Invoke-Pester to force all skipped tests to fail._x000D__x000A__x000D__x000A_.PARAMETER TestCases_x000D__x000A_Optional array of hashtable (or any IDictionary) objects.  If this parameter is used,_x000D__x000A_Pester will call the test script block once for each table in the TestCases array,_x000D__x000A_splatting the dictionary to the test script block as input.  If you want the name of_x000D__x000A_the test to appear differently for each test case, you can embed tokens into the Name_x000D__x000A_parameter with the syntax 'Adds numbers &lt;A&gt; and &lt;B&gt;' (assuming you have keys named A and B_x000D__x000A_in your TestCases hashtables.)_x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to include or exclude tests containing the same Tag._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    $testCases = @(_x000D__x000A_        @{ a = 2;     b = 3;       expectedResult = 5 }_x000D__x000A_        @{ a = -2;    b = -2;      expectedResult = -4 }_x000D__x000A_        @{ a = -2;    b = 2;       expectedResult = 0 }_x000D__x000A_        @{ a = 'two'; b = 'three'; expectedResult = 'twothree' }_x000D__x000A_    )_x000D__x000A__x000D__x000A_    It 'Correctly adds &lt;a&gt; and &lt;b&gt; to get &lt;expectedResult&gt;' -TestCases $testCases {_x000D__x000A_        param ($a, $b, $expectedResult)_x000D__x000A__x000D__x000A_        $sum = Add-Numbers $a $b_x000D__x000A_        $sum | Should -Be $expectedResult_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Normal')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ScriptBlock] $Test,_x000D__x000A__x000D__x000A_        [Alias("ForEach")]_x000D__x000A_        [object[]] $TestCases,_x000D__x000A__x000D__x000A_        [String[]] $Tag,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Pending')]_x000D__x000A_        [Switch] $Pending,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        [Switch] $Skip_x000D__x000A__x000D__x000A_        # [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        # [String] $SkipBecause,_x000D__x000A__x000D__x000A_        # [Switch]$Focus_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($PSBoundParameters.ContainsKey('Pending')) {_x000D__x000A_        $PSBoundParameters.Remove('Pending')_x000D__x000A__x000D__x000A_        $Skip = $Pending_x000D__x000A_        # $SkipBecause = "This test is pending."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $Test) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test name has multiple lines and no test scriptblock is provided. Did you provide the test name?"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "No test scriptblock is provided. Did you put the opening curly brace on the next line?"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey('TestCases')) {_x000D__x000A_        if ($null -ne $TestCases -and 0 -lt @($TestCases).Count) {_x000D__x000A_            New-ParametrizedTest -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Data $TestCases -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # @() or $null is provided do nothing_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        New-Test -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Normal</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Validates the results of a test inside of a Describe block._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_The It command is intended to be used inside of a Describe or Context Block._x000D__x000A_If you are familiar with the AAA pattern (Arrange-Act-Assert), the body of_x000D__x000A_the It block is the appropriate location for an assert. The convention is to_x000D__x000A_assert a single expectation for each It block. The code inside of the It block_x000D__x000A_should throw a terminating error if the expectation of the test is not met and_x000D__x000A_thus cause the test to fail. The name of the It block should expressively state_x000D__x000A_the expectation of the test._x000D__x000A__x000D__x000A_In addition to using your own logic to test expectations and throw exceptions,_x000D__x000A_you may also use Pester's Should command to perform assertions in plain language._x000D__x000A__x000D__x000A_You can intentionally mark It block result as inconclusive by using Set-TestInconclusive_x000D__x000A_command as the first tested statement in the It block._x000D__x000A__x000D__x000A_.PARAMETER Name_x000D__x000A_An expressive phrase describing the expected test outcome._x000D__x000A__x000D__x000A_.PARAMETER Test_x000D__x000A_The script block that should throw an exception if the_x000D__x000A_expectation of the test is not met.If you are following the_x000D__x000A_AAA pattern (Arrange-Act-Assert), this typically holds the_x000D__x000A_Assert._x000D__x000A__x000D__x000A_.PARAMETER Pending_x000D__x000A_Use this parameter to explicitly mark the test as work-in-progress/not implemented/pending when you_x000D__x000A_need to distinguish a test that fails because it is not finished yet from a tests_x000D__x000A_that fail as a result of changes being made in the code base. An empty test, that is a_x000D__x000A_test that contains nothing except whitespace or comments is marked as Pending by default._x000D__x000A__x000D__x000A_.PARAMETER Skip_x000D__x000A_Use this parameter to explicitly mark the test to be skipped. This is preferable to temporarily_x000D__x000A_commenting out a test, because the test remains listed in the output. Use the Strict parameter_x000D__x000A_of Invoke-Pester to force all skipped tests to fail._x000D__x000A__x000D__x000A_.PARAMETER TestCases_x000D__x000A_Optional array of hashtable (or any IDictionary) objects.  If this parameter is used,_x000D__x000A_Pester will call the test script block once for each table in the TestCases array,_x000D__x000A_splatting the dictionary to the test script block as input.  If you want the name of_x000D__x000A_the test to appear differently for each test case, you can embed tokens into the Name_x000D__x000A_parameter with the syntax 'Adds numbers &lt;A&gt; and &lt;B&gt;' (assuming you have keys named A and B_x000D__x000A_in your TestCases hashtables.)_x000D__x000A__x000D__x000A_.PARAMETER Tag_x000D__x000A_Optional parameter containing an array of strings. When calling Invoke-Pester,_x000D__x000A_it is possible to include or exclude tests containing the same Tag._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    It "adds positive numbers" {_x000D__x000A_        $sum = Add-Numbers 2 3_x000D__x000A_        $sum | Should -Be 5_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds negative numbers" {_x000D__x000A_        $sum = Add-Numbers (-2) (-2)_x000D__x000A_        $sum | Should -Be (-4)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "adds one negative number to positive number" {_x000D__x000A_        $sum = Add-Numbers (-2) 2_x000D__x000A_        $sum | Should -Be 0_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "concatenates strings if given strings" {_x000D__x000A_        $sum = Add-Numbers two three_x000D__x000A_        $sum | Should -Be "twothree"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_function Add-Numbers($a, $b) {_x000D__x000A_    return $a + $b_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "Add-Numbers" {_x000D__x000A_    $testCases = @(_x000D__x000A_        @{ a = 2;     b = 3;       expectedResult = 5 }_x000D__x000A_        @{ a = -2;    b = -2;      expectedResult = -4 }_x000D__x000A_        @{ a = -2;    b = 2;       expectedResult = 0 }_x000D__x000A_        @{ a = 'two'; b = 'three'; expectedResult = 'twothree' }_x000D__x000A_    )_x000D__x000A__x000D__x000A_    It 'Correctly adds &lt;a&gt; and &lt;b&gt; to get &lt;expectedResult&gt;' -TestCases $testCases {_x000D__x000A_        param ($a, $b, $expectedResult)_x000D__x000A__x000D__x000A_        $sum = Add-Numbers $a $b_x000D__x000A_        $sum | Should -Be $expectedResult_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Normal')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $true, Position = 0)]_x000D__x000A_        [string] $Name,_x000D__x000A__x000D__x000A_        [Parameter(Position = 1)]_x000D__x000A_        [ScriptBlock] $Test,_x000D__x000A__x000D__x000A_        [Alias("ForEach")]_x000D__x000A_        [object[]] $TestCases,_x000D__x000A__x000D__x000A_        [String[]] $Tag,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Pending')]_x000D__x000A_        [Switch] $Pending,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        [Switch] $Skip_x000D__x000A__x000D__x000A_        # [Parameter(ParameterSetName = 'Skip')]_x000D__x000A_        # [String] $SkipBecause,_x000D__x000A__x000D__x000A_        # [Switch]$Focus_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Focus = $false_x000D__x000A_    if ($PSBoundParameters.ContainsKey('Pending')) {_x000D__x000A_        $PSBoundParameters.Remove('Pending')_x000D__x000A__x000D__x000A_        $Skip = $Pending_x000D__x000A_        # $SkipBecause = "This test is pending."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($null -eq $Test) {_x000D__x000A_        if ($Name.Contains("`n")) {_x000D__x000A_            throw "Test name has multiple lines and no test scriptblock is provided. Did you provide the test name?"_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            throw "No test scriptblock is provided. Did you put the opening curly brace on the next line?"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PSBoundParameters.ContainsKey('TestCases')) {_x000D__x000A_        if ($null -ne $TestCases -and 0 -lt @($TestCases).Count) {_x000D__x000A_            New-ParametrizedTest -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Data $TestCases -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            # @() or $null is provided do nothing_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        New-Test -Name $Name -ScriptBlock $Test -StartLine $MyInvocation.ScriptLineNumber -Tag $Tag -Focus:$Focus -Skip:$Skip_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2924">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2925">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">It</S>
      <Obj N="CommandType" RefId="2926">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="2927">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="2928">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2929">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="2930">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2931">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Test</S>
            <Obj N="Value" RefId="2932">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Test</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="2933">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TestCases</S>
            <Obj N="Value" RefId="2934">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TestCases</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="2935">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ForEach</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Tag</S>
            <Obj N="Value" RefId="2936">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Tag</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="2937">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Pending</S>
            <Obj N="Value" RefId="2938">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Pending</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2939">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Skip</S>
            <Obj N="Value" RefId="2940">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Skip</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2941">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2942">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2943">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2944">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2945">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2946">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2947">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2948">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2949">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2950">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2951">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="2952">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2953">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="2954">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2955">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="2956">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2957">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="2958">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2959">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="2960">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="2961">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="2962">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="2963">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="2964">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2965">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Test] &lt;scriptblock&gt;] [-TestCases &lt;Object[]&gt;] [-Tag &lt;string[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Normal</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="2966">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2967">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Test] &lt;scriptblock&gt;] [-TestCases &lt;Object[]&gt;] [-Tag &lt;string[]&gt;] [-Pending] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Pending</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2968">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="2969">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Test] &lt;scriptblock&gt;] [-TestCases &lt;Object[]&gt;] [-Tag &lt;string[]&gt;] [-Skip] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Skip</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2970">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::It</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/It</S>
    </MS>
  </Obj>
  <Obj RefId="2971">
    <TNRef RefId="0" />
    <ToString>J:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="2972">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2973">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">J:</S>
      <Obj N="CommandType" RefId="2974">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="2975">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="2976">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2977">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="2978">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="2979">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="2980">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::J:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="2981">
    <TNRef RefId="0" />
    <ToString>Join-ScriptExtent</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent[]]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $extentList = New-Object System.Collections.Generic.List[System.Management.Automation.Language.IScriptExtent]_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Extent) {_x000D__x000A_            $extentList.AddRange($Extent)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    end {_x000D__x000A_        if (-not $extentList) { return }_x000D__x000A__x000D__x000A_        $startOffset = [Linq.Enumerable]::Min($extentList.StartOffset -as [int[]])_x000D__x000A_        $endOffset   = [Linq.Enumerable]::Max($extentList.EndOffset -as [int[]])_x000D__x000A__x000D__x000A_        return New-Object Microsoft.PowerShell.EditorServices.FullScriptExtent @(_x000D__x000A_            $psEditor.GetEditorContext().CurrentFile,_x000D__x000A_            $startOffset,_x000D__x000A_            $endOffset)_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent])]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent[]]_x000D__x000A_        $Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $extentList = New-Object System.Collections.Generic.List[System.Management.Automation.Language.IScriptExtent]_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Extent) {_x000D__x000A_            $extentList.AddRange($Extent)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    end {_x000D__x000A_        if (-not $extentList) { return }_x000D__x000A__x000D__x000A_        $startOffset = [Linq.Enumerable]::Min($extentList.StartOffset -as [int[]])_x000D__x000A_        $endOffset   = [Linq.Enumerable]::Max($extentList.EndOffset -as [int[]])_x000D__x000A__x000D__x000A_        return New-Object Microsoft.PowerShell.EditorServices.FullScriptExtent @(_x000D__x000A_            $psEditor.GetEditorContext().CurrentFile,_x000D__x000A_            $startOffset,_x000D__x000A_            $endOffset)_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="2982">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Join</S>
      <S N="Noun">ScriptExtent</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="2983">
        <TNRef RefId="2" />
        <LST>
          <S>System.Management.Automation.Language.IScriptExtent</S>
        </LST>
      </Obj>
      <S N="Name">Join-ScriptExtent</S>
      <Obj N="CommandType" RefId="2984">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="2985">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="2986">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="2987">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="2988">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent[]</S>
                <Obj N="Aliases" RefId="2989">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="2990">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2991">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="2992">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="2993">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="2994">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2995">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="2996">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2997">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="2998">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="2999">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3000">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3001">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3002">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3003">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3004">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3005">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3006">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3007">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3008">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3009">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3010">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3011">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3012">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3013">
            <TNRef RefId="8" />
            <ToString>[[-Extent] &lt;IScriptExtent[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3014">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Join-ScriptExtent</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Join-ScriptExtent.md</S>
    </MS>
  </Obj>
  <Obj RefId="3015">
    <TNRef RefId="0" />
    <ToString>Join-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Default')]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ParameterSetName = "Default", Position = 0)]_x000D__x000A_        [Parameter(ParameterSetName = "Table"  , Position = 0)]_x000D__x000A_        [String]$Path  ,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "PackageDefault")]_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "PackageTable")]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        $WorksheetName = 'Combined',_x000D__x000A_        [switch]$Clearsheet,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [string]$FromLabel = "From" ,_x000D__x000A_        [switch]$LabelBlocks,_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [Switch]$FreezeTopRow,_x000D__x000A_        [Switch]$FreezeFirstColumn,_x000D__x000A_        [Switch]$FreezeTopRowFirstColumn,_x000D__x000A_        [Int[]]$FreezePane,_x000D__x000A_        [Parameter(ParameterSetName = 'Default')]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageDefault')]_x000D__x000A_        [Switch]$AutoFilter,_x000D__x000A_        [Switch]$BoldTopRow,_x000D__x000A_        [switch]$HideSource,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$TitleFillPattern = 'Solid',_x000D__x000A_        $TitleBackgroundColor,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize = 22,_x000D__x000A_        [Hashtable]$PivotTableDefinition,_x000D__x000A_        [Object[]]$ExcelChartDefinition,_x000D__x000A_        [Object[]]$ConditionalFormat,_x000D__x000A_        [Object[]]$ConditionalText,_x000D__x000A_        [switch]$AutoNameRange,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'RangeName is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'RangeName starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [String]$RangeName,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'Tablename is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'Tablename starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [Parameter(ParameterSetName = 'Table'        , Mandatory = $true)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageTable' , Mandatory = $true)]_x000D__x000A_        [String]$TableName,_x000D__x000A_        [Parameter(ParameterSetName = 'Table')]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageTable')]_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle = 'Medium6',_x000D__x000A_        [switch]$ReturnRange,_x000D__x000A_        [switch]$Show,_x000D__x000A_        [switch]$PassThru_x000D__x000A_    )_x000D__x000A_    #region get target worksheet, select it and move it to the end._x000D__x000A_    if ($Path -and -not $ExcelPackage) {$ExcelPackage = Open-ExcelPackage -path $Path  }_x000D__x000A_    $destinationSheet = Add-Worksheet -ExcelPackage $ExcelPackage -WorksheetName $WorksheetName -ClearSheet:$Clearsheet_x000D__x000A_    foreach ($w in $ExcelPackage.Workbook.Worksheets) {$w.view.TabSelected = $false}_x000D__x000A_    $destinationSheet.View.TabSelected = $true_x000D__x000A_    $ExcelPackage.Workbook.Worksheets.MoveToEnd($WorksheetName)_x000D__x000A_    #row to insert at will be 1 on a blank sheet and lastrow + 1 on populated one_x000D__x000A_    $row = (1 + $destinationSheet.Dimension.End.Row )_x000D__x000A_    #endregion_x000D__x000A__x000D__x000A_    #region Setup title and header rows_x000D__x000A_    #Title parameters work as they do in Export-Excel ._x000D__x000A_    if ($row -eq 1 -and $Title) {_x000D__x000A_        $destinationSheet.Cells[1, 1].Value = $Title_x000D__x000A_        $destinationSheet.Cells[1, 1].Style.Font.Size = $TitleSize_x000D__x000A_        if ($TitleBold) {$destinationSheet.Cells[1, 1].Style.Font.Bold = $True }_x000D__x000A_        #Can only set TitleBackgroundColor if TitleFillPattern is something other than None._x000D__x000A_        if ($TitleBackgroundColor -AND ($TitleFillPattern -ne 'None')) {_x000D__x000A_            if ($TitleBackgroundColor -is [string])         {$TitleBackgroundColor = [System.Drawing.Color]::$TitleBackgroundColor }_x000D__x000A_            $destinationSheet.Cells[1, 1].Style.Fill.PatternType = $TitleFillPattern_x000D__x000A_            $destinationSheet.Cells[1, 1].Style.Fill.BackgroundColor.SetColor($TitleBackgroundColor)_x000D__x000A_        }_x000D__x000A_        elseif ($TitleBackgroundColor) { Write-Warning "Title Background Color ignored. You must set the TitleFillPattern parameter to a value other than 'None'. Try 'Solid'." }_x000D__x000A_        $row = 2_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $noHeader) {_x000D__x000A_        #Assume every row has titles in row 1, copy row 1 from first sheet to new sheet._x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A_        $ExcelPackage.Workbook.Worksheets[1].cells["1:1"].Copy($destinationSheet.SelectedRange)_x000D__x000A_        #fromlabel can't be an empty string_x000D__x000A_        if ($FromLabel ) {_x000D__x000A_            #Add a column which says where the data comes from._x000D__x000A_            $fromColumn = ($destinationSheet.Dimension.Columns + 1)_x000D__x000A_            $destinationSheet.Cells[$row, $fromColumn].Value = $FromLabel_x000D__x000A_        }_x000D__x000A_        $row += 1_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A__x000D__x000A_    foreach ($i in 1..($ExcelPackage.Workbook.Worksheets.Count - 1) ) {_x000D__x000A_        $sourceWorksheet = $ExcelPackage.Workbook.Worksheets[$i]_x000D__x000A_        #Assume row one is titles, so data itself starts at A2._x000D__x000A_        if ($NoHeader) {$sourceRange = $sourceWorksheet.Dimension.Address}_x000D__x000A_        else {$sourceRange = $sourceWorksheet.Dimension.Address -replace "A1:", "A2:"}_x000D__x000A_        #Position insertion point/_x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A_        if ($LabelBlocks) {_x000D__x000A_            $destinationSheet.Cells[$row, 1].value = $sourceWorksheet.Name_x000D__x000A_            $destinationSheet.Cells[$row, 1].Style.Font.Bold = $true_x000D__x000A_            $destinationSheet.Cells[$row, 1].Style.Font.Size += 2_x000D__x000A_            $row += 1_x000D__x000A_        }_x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A__x000D__x000A_        #And finally we're ready to copy the data._x000D__x000A_        $sourceWorksheet.Cells[$sourceRange].Copy($destinationSheet.SelectedRange)_x000D__x000A_        #Fill in column saying where data came from._x000D__x000A_        if ($fromColumn) { $row..$destinationSheet.Dimension.Rows | ForEach-Object {$destinationSheet.Cells[$_, $fromColumn].Value = $sourceWorksheet.Name} }_x000D__x000A_        #Update where next insertion will go._x000D__x000A_        $row = $destinationSheet.Dimension.Rows + 1_x000D__x000A_        if ($HideSource) {$sourceWorksheet.Hidden = [OfficeOpenXml.eWorkSheetHidden]::Hidden}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #We accept a bunch of parameters work to pass on to Export-excel ( Autosize, Autofilter, boldtopRow Freeze ); if we have any of those call Export-excel otherwise close the package here._x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A_    'Path', 'Clearsheet', 'NoHeader', 'FromLabel', 'LabelBlocks', 'HideSource',_x000D__x000A_    'Title', 'TitleFillPattern', 'TitleBackgroundColor', 'TitleBold', 'TitleSize' | ForEach-Object {$null = $params.Remove($_)}_x000D__x000A_    if ($params.Keys.Count) {_x000D__x000A_        if ($Title) { $params.StartRow = 2}_x000D__x000A_        $params.WorksheetName = $WorksheetName_x000D__x000A_        $params.ExcelPackage = $ExcelPackage_x000D__x000A_        Export-Excel @Params_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Close-ExcelPackage -ExcelPackage $ExcelPackage_x000D__x000A_        $ExcelPackage.Dispose()_x000D__x000A_        $ExcelPackage = $null_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Default</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName = 'Default')]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ParameterSetName = "Default", Position = 0)]_x000D__x000A_        [Parameter(ParameterSetName = "Table"  , Position = 0)]_x000D__x000A_        [String]$Path  ,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "PackageDefault")]_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = "PackageTable")]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        $WorksheetName = 'Combined',_x000D__x000A_        [switch]$Clearsheet,_x000D__x000A_        [switch]$NoHeader,_x000D__x000A_        [string]$FromLabel = "From" ,_x000D__x000A_        [switch]$LabelBlocks,_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [Switch]$FreezeTopRow,_x000D__x000A_        [Switch]$FreezeFirstColumn,_x000D__x000A_        [Switch]$FreezeTopRowFirstColumn,_x000D__x000A_        [Int[]]$FreezePane,_x000D__x000A_        [Parameter(ParameterSetName = 'Default')]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageDefault')]_x000D__x000A_        [Switch]$AutoFilter,_x000D__x000A_        [Switch]$BoldTopRow,_x000D__x000A_        [switch]$HideSource,_x000D__x000A_        [String]$Title,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$TitleFillPattern = 'Solid',_x000D__x000A_        $TitleBackgroundColor,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize = 22,_x000D__x000A_        [Hashtable]$PivotTableDefinition,_x000D__x000A_        [Object[]]$ExcelChartDefinition,_x000D__x000A_        [Object[]]$ConditionalFormat,_x000D__x000A_        [Object[]]$ConditionalText,_x000D__x000A_        [switch]$AutoNameRange,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'RangeName is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'RangeName starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [String]$RangeName,_x000D__x000A_        [ValidateScript( {_x000D__x000A_                if (-not $_) {  throw 'Tablename is null or empty.'  }_x000D__x000A_                elseif ($_[0] -notmatch '[a-z]') { throw 'Tablename starts with an invalid character.'  }_x000D__x000A_                else { $true }_x000D__x000A_        })]_x000D__x000A_        [Parameter(ParameterSetName = 'Table'        , Mandatory = $true)]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageTable' , Mandatory = $true)]_x000D__x000A_        [String]$TableName,_x000D__x000A_        [Parameter(ParameterSetName = 'Table')]_x000D__x000A_        [Parameter(ParameterSetName = 'PackageTable')]_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$TableStyle = 'Medium6',_x000D__x000A_        [switch]$ReturnRange,_x000D__x000A_        [switch]$Show,_x000D__x000A_        [switch]$PassThru_x000D__x000A_    )_x000D__x000A_    #region get target worksheet, select it and move it to the end._x000D__x000A_    if ($Path -and -not $ExcelPackage) {$ExcelPackage = Open-ExcelPackage -path $Path  }_x000D__x000A_    $destinationSheet = Add-Worksheet -ExcelPackage $ExcelPackage -WorksheetName $WorksheetName -ClearSheet:$Clearsheet_x000D__x000A_    foreach ($w in $ExcelPackage.Workbook.Worksheets) {$w.view.TabSelected = $false}_x000D__x000A_    $destinationSheet.View.TabSelected = $true_x000D__x000A_    $ExcelPackage.Workbook.Worksheets.MoveToEnd($WorksheetName)_x000D__x000A_    #row to insert at will be 1 on a blank sheet and lastrow + 1 on populated one_x000D__x000A_    $row = (1 + $destinationSheet.Dimension.End.Row )_x000D__x000A_    #endregion_x000D__x000A__x000D__x000A_    #region Setup title and header rows_x000D__x000A_    #Title parameters work as they do in Export-Excel ._x000D__x000A_    if ($row -eq 1 -and $Title) {_x000D__x000A_        $destinationSheet.Cells[1, 1].Value = $Title_x000D__x000A_        $destinationSheet.Cells[1, 1].Style.Font.Size = $TitleSize_x000D__x000A_        if ($TitleBold) {$destinationSheet.Cells[1, 1].Style.Font.Bold = $True }_x000D__x000A_        #Can only set TitleBackgroundColor if TitleFillPattern is something other than None._x000D__x000A_        if ($TitleBackgroundColor -AND ($TitleFillPattern -ne 'None')) {_x000D__x000A_            if ($TitleBackgroundColor -is [string])         {$TitleBackgroundColor = [System.Drawing.Color]::$TitleBackgroundColor }_x000D__x000A_            $destinationSheet.Cells[1, 1].Style.Fill.PatternType = $TitleFillPattern_x000D__x000A_            $destinationSheet.Cells[1, 1].Style.Fill.BackgroundColor.SetColor($TitleBackgroundColor)_x000D__x000A_        }_x000D__x000A_        elseif ($TitleBackgroundColor) { Write-Warning "Title Background Color ignored. You must set the TitleFillPattern parameter to a value other than 'None'. Try 'Solid'." }_x000D__x000A_        $row = 2_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if (-not $noHeader) {_x000D__x000A_        #Assume every row has titles in row 1, copy row 1 from first sheet to new sheet._x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A_        $ExcelPackage.Workbook.Worksheets[1].cells["1:1"].Copy($destinationSheet.SelectedRange)_x000D__x000A_        #fromlabel can't be an empty string_x000D__x000A_        if ($FromLabel ) {_x000D__x000A_            #Add a column which says where the data comes from._x000D__x000A_            $fromColumn = ($destinationSheet.Dimension.Columns + 1)_x000D__x000A_            $destinationSheet.Cells[$row, $fromColumn].Value = $FromLabel_x000D__x000A_        }_x000D__x000A_        $row += 1_x000D__x000A_    }_x000D__x000A_    #endregion_x000D__x000A__x000D__x000A_    foreach ($i in 1..($ExcelPackage.Workbook.Worksheets.Count - 1) ) {_x000D__x000A_        $sourceWorksheet = $ExcelPackage.Workbook.Worksheets[$i]_x000D__x000A_        #Assume row one is titles, so data itself starts at A2._x000D__x000A_        if ($NoHeader) {$sourceRange = $sourceWorksheet.Dimension.Address}_x000D__x000A_        else {$sourceRange = $sourceWorksheet.Dimension.Address -replace "A1:", "A2:"}_x000D__x000A_        #Position insertion point/_x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A_        if ($LabelBlocks) {_x000D__x000A_            $destinationSheet.Cells[$row, 1].value = $sourceWorksheet.Name_x000D__x000A_            $destinationSheet.Cells[$row, 1].Style.Font.Bold = $true_x000D__x000A_            $destinationSheet.Cells[$row, 1].Style.Font.Size += 2_x000D__x000A_            $row += 1_x000D__x000A_        }_x000D__x000A_        $destinationSheet.Select("A$row")_x000D__x000A__x000D__x000A_        #And finally we're ready to copy the data._x000D__x000A_        $sourceWorksheet.Cells[$sourceRange].Copy($destinationSheet.SelectedRange)_x000D__x000A_        #Fill in column saying where data came from._x000D__x000A_        if ($fromColumn) { $row..$destinationSheet.Dimension.Rows | ForEach-Object {$destinationSheet.Cells[$_, $fromColumn].Value = $sourceWorksheet.Name} }_x000D__x000A_        #Update where next insertion will go._x000D__x000A_        $row = $destinationSheet.Dimension.Rows + 1_x000D__x000A_        if ($HideSource) {$sourceWorksheet.Hidden = [OfficeOpenXml.eWorkSheetHidden]::Hidden}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #We accept a bunch of parameters work to pass on to Export-excel ( Autosize, Autofilter, boldtopRow Freeze ); if we have any of those call Export-excel otherwise close the package here._x000D__x000A_    $params = @{} + $PSBoundParameters_x000D__x000A_    'Path', 'Clearsheet', 'NoHeader', 'FromLabel', 'LabelBlocks', 'HideSource',_x000D__x000A_    'Title', 'TitleFillPattern', 'TitleBackgroundColor', 'TitleBold', 'TitleSize' | ForEach-Object {$null = $params.Remove($_)}_x000D__x000A_    if ($params.Keys.Count) {_x000D__x000A_        if ($Title) { $params.StartRow = 2}_x000D__x000A_        $params.WorksheetName = $WorksheetName_x000D__x000A_        $params.ExcelPackage = $ExcelPackage_x000D__x000A_        Export-Excel @Params_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        Close-ExcelPackage -ExcelPackage $ExcelPackage_x000D__x000A_        $ExcelPackage.Dispose()_x000D__x000A_        $ExcelPackage = $null_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3016">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Join</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3017">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Join-Worksheet</S>
      <Obj N="CommandType" RefId="3018">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3019">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3020">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3021">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3022">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3023">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="3024">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="3025">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="3026">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3027">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Clearsheet</S>
            <Obj N="Value" RefId="3028">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Clearsheet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3029">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="3030">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3031">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FromLabel</S>
            <Obj N="Value" RefId="3032">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FromLabel</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3033">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LabelBlocks</S>
            <Obj N="Value" RefId="3034">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LabelBlocks</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3035">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="3036">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3037">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRow</S>
            <Obj N="Value" RefId="3038">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3039">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeFirstColumn</S>
            <Obj N="Value" RefId="3040">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3041">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRowFirstColumn</S>
            <Obj N="Value" RefId="3042">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRowFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3043">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezePane</S>
            <Obj N="Value" RefId="3044">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezePane</S>
                <S N="ParameterType">System.Int32[]</S>
                <Obj N="Aliases" RefId="3045">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoFilter</S>
            <Obj N="Value" RefId="3046">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoFilter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3047">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BoldTopRow</S>
            <Obj N="Value" RefId="3048">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BoldTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3049">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HideSource</S>
            <Obj N="Value" RefId="3050">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HideSource</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3051">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Title</S>
            <Obj N="Value" RefId="3052">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Title</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3053">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleFillPattern</S>
            <Obj N="Value" RefId="3054">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleFillPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="3055">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBackgroundColor</S>
            <Obj N="Value" RefId="3056">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3057">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBold</S>
            <Obj N="Value" RefId="3058">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3059">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleSize</S>
            <Obj N="Value" RefId="3060">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3061">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableDefinition</S>
            <Obj N="Value" RefId="3062">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableDefinition</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="3063">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelChartDefinition</S>
            <Obj N="Value" RefId="3064">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelChartDefinition</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="3065">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalFormat</S>
            <Obj N="Value" RefId="3066">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalFormat</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="3067">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalText</S>
            <Obj N="Value" RefId="3068">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalText</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="3069">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoNameRange</S>
            <Obj N="Value" RefId="3070">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoNameRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3071">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RangeName</S>
            <Obj N="Value" RefId="3072">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RangeName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3073">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableName</S>
            <Obj N="Value" RefId="3074">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3075">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableStyle</S>
            <Obj N="Value" RefId="3076">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="3077">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReturnRange</S>
            <Obj N="Value" RefId="3078">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReturnRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3079">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="3080">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3081">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="3082">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3083">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3084">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3085">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3086">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3087">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3088">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3089">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3090">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3091">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3092">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3093">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3094">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3095">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3096">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3097">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3098">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3099">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3100">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3101">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3102">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3103">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3104">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3105">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3106">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3107">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string&gt;] [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;string&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-AutoFilter] [-BoldTopRow] [-HideSource] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-PivotTableDefinition &lt;hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;string&gt;] [-ReturnRange] [-Show] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Default</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="3108">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3109">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string&gt;] -TableName &lt;string&gt; [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;string&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-BoldTopRow] [-HideSource] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-PivotTableDefinition &lt;hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;string&gt;] [-TableStyle &lt;TableStyles&gt;] [-ReturnRange] [-Show] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Table</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3110">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3111">
            <TNRef RefId="8" />
            <ToString>-ExcelPackage &lt;ExcelPackage&gt; -TableName &lt;string&gt; [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;string&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-BoldTopRow] [-HideSource] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-PivotTableDefinition &lt;hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;string&gt;] [-TableStyle &lt;TableStyles&gt;] [-ReturnRange] [-Show] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PackageTable</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3112">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3113">
            <TNRef RefId="8" />
            <ToString>-ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;Object&gt;] [-Clearsheet] [-NoHeader] [-FromLabel &lt;string&gt;] [-LabelBlocks] [-AutoSize] [-FreezeTopRow] [-FreezeFirstColumn] [-FreezeTopRowFirstColumn] [-FreezePane &lt;int[]&gt;] [-AutoFilter] [-BoldTopRow] [-HideSource] [-Title &lt;string&gt;] [-TitleFillPattern &lt;ExcelFillStyle&gt;] [-TitleBackgroundColor &lt;Object&gt;] [-TitleBold] [-TitleSize &lt;int&gt;] [-PivotTableDefinition &lt;hashtable&gt;] [-ExcelChartDefinition &lt;Object[]&gt;] [-ConditionalFormat &lt;Object[]&gt;] [-ConditionalText &lt;Object[]&gt;] [-AutoNameRange] [-RangeName &lt;string&gt;] [-ReturnRange] [-Show] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PackageDefault</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3114">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Join-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="3115">
    <TNRef RefId="0" />
    <ToString>K:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="3116">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3117">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">K:</S>
      <Obj N="CommandType" RefId="3118">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="3119">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="3120">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3121">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="3122">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3123">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3124">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::K:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3125">
    <TNRef RefId="0" />
    <ToString>L:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="3126">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3127">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">L:</S>
      <Obj N="CommandType" RefId="3128">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="3129">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="3130">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3131">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="3132">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3133">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3134">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::L:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3135">
    <TNRef RefId="0" />
    <ToString>LineChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="Line",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="Line",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3136">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3137">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">LineChart</S>
      <Obj N="CommandType" RefId="3138">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3139">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3140">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3141">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="3142">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3143">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">title</S>
            <Obj N="Value" RefId="3144">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3145">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="3146">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="3147">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="3148">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3149">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="3150">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3151">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="3152">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3153">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3154">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3155">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3156">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3157">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3158">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3159">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3160">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3161">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3162">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3163">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3164">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3165">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3166">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3167">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3168">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3169">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3170">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3171">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3172">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3173">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3174">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3175">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3176">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3177">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3178">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::LineChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3179">
    <TNRef RefId="0" />
    <ToString>M:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="3180">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3181">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">M:</S>
      <Obj N="CommandType" RefId="3182">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="3183">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="3184">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3185">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="3186">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3187">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3188">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::M:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3189">
    <TNRef RefId="0" />
    <ToString>Merge-MultipleSheets</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_     [CmdletBinding()]_x000D__x000A_     [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="False positives when initializing variable in begin block")]_x000D__x000A_     [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '', Justification="MultipleSheet would be incorrect")]_x000D__x000A_     #[Alias("Merge-MulipleSheets")] #There was a spelling error in the first release. This was there to ensure things didn't break but intelisense gave the alias first._x000D__x000A_     param   (_x000D__x000A_         [Parameter(Mandatory=$true,ValueFromPipeline=$true)]_x000D__x000A_         $Path  ,_x000D__x000A_         [int]$Startrow = 1,_x000D__x000A__x000D__x000A_         [String[]]$Headername,_x000D__x000A__x000D__x000A_         [switch]$NoHeader,_x000D__x000A__x000D__x000A_         $WorksheetName   = "Sheet1",_x000D__x000A_         [Alias('OutFile')]_x000D__x000A_         $OutputFile = ".\temp.xlsx",_x000D__x000A_         [Alias('OutSheet')]_x000D__x000A_         $OutputSheetName = "Sheet1",_x000D__x000A_         $Property        = "*"    ,_x000D__x000A_         $ExcludeProperty ,_x000D__x000A_         $Key           = "Name" ,_x000D__x000A_         $KeyFontColor          = [System.Drawing.Color]::Red,_x000D__x000A_         $ChangeBackgroundColor = [System.Drawing.Color]::Orange,_x000D__x000A_         $DeleteBackgroundColor = [System.Drawing.Color]::LightPink,_x000D__x000A_         $AddBackgroundColor    = [System.Drawing.Color]::Orange,_x000D__x000A_         [switch]$HideRowNumbers ,_x000D__x000A_         [switch]$Passthru  ,_x000D__x000A_         [Switch]$Show_x000D__x000A_    )_x000D__x000A_     begin   {    $filestoProcess   = @()  }_x000D__x000A_     process {    $filestoProcess  += $Path}_x000D__x000A_     end     {_x000D__x000A_         if     ($filestoProcess.Count -eq 1 -and $WorksheetName -match '\*') {_x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "Expanding * to names of sheets in $($filestoProcess[0]). "_x000D__x000A_             $excel = Open-ExcelPackage -Path $filestoProcess_x000D__x000A_             $WorksheetName = $excel.Workbook.Worksheets.Name.where({$_ -like $WorksheetName})_x000D__x000A_             Close-ExcelPackage -NoSave -ExcelPackage $excel_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #Merge identically named sheets in different work books;_x000D__x000A_          if     ($filestoProcess.Count -ge 2 -and $WorksheetName -is "string" ) {_x000D__x000A_             Get-Variable -Name 'HeaderName','NoHeader','StartRow','Key','Property','ExcludeProperty','WorksheetName' -ErrorAction SilentlyContinue |_x000D__x000A_                 Where-Object {$_.Value} | ForEach-Object -Begin {$params= @{} } -Process {$params[$_.Name] = $_.Value}_x000D__x000A__x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "comparing '$WorksheetName' in $($filestoProcess[-1]) against $($filestoProcess[0]). "_x000D__x000A_             $merged            = Merge-Worksheet  @params -Referencefile $filestoProcess[0] -Differencefile $filestoProcess[-1]_x000D__x000A_             $nextFileNo        = 2_x000D__x000A_             while ($nextFileNo -lt $filestoProcess.count -and $merged) {_x000D__x000A_                 Write-Progress -Activity "Merging sheets" -CurrentOperation "comparing '$WorksheetName' in $($filestoProcess[-$nextFileNo]) against $($filestoProcess[0]). "_x000D__x000A_                 $merged        = Merge-Worksheet  @params -ReferenceObject $merged -Differencefile $filestoProcess[-$nextFileNo]_x000D__x000A_                 $nextFileNo    ++_x000D__x000A__x000D__x000A_             }_x000D__x000A_         }_x000D__x000A_         #Merge different sheets from one workbook_x000D__x000A_         elseif ($filestoProcess.Count -eq 1 -and $WorksheetName.Count -ge 2 ) {_x000D__x000A_             Get-Variable -Name 'HeaderName','NoHeader','StartRow','Key','Property','ExcludeProperty' -ErrorAction SilentlyContinue |_x000D__x000A_                 Where-Object {$_.Value} | ForEach-Object -Begin {$params= @{} } -Process {$params[$_.Name] = $_.Value}_x000D__x000A__x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "Comparing $($WorksheetName[-1]) against $($WorksheetName[0]). "_x000D__x000A_             $merged          = Merge-Worksheet  @params -Referencefile $filestoProcess[0] -Differencefile $filestoProcess[0] -WorksheetName $WorksheetName[0,-1]_x000D__x000A_             $nextSheetNo     = 2_x000D__x000A_             while ($nextSheetNo -lt $WorksheetName.count -and $merged) {_x000D__x000A_                 Write-Progress -Activity "Merging sheets" -CurrentOperation "Comparing $($WorksheetName[-$nextSheetNo]) against $($WorksheetName[0]). "_x000D__x000A_                 $merged      = Merge-Worksheet  @params -ReferenceObject $merged -Differencefile $filestoProcess[0] -WorksheetName  $WorksheetName[-$nextSheetNo] -DiffPrefix $WorksheetName[-$nextSheetNo]_x000D__x000A_                 $nextSheetNo ++_x000D__x000A_             }_x000D__x000A_         }_x000D__x000A_         #We either need one Worksheet name and many files or one file and many sheets._x000D__x000A_         else {            Write-Warning -Message "Need at least two files to process"           ; return }_x000D__x000A_         #if the process didn't return data then abandon now._x000D__x000A_         if (-not $merged) {Write-Warning -Message "The merge operation did not return any data."; return }_x000D__x000A__x000D__x000A_         $orderByProperties  = $merged[0].psobject.properties.where({$_.name -match "row$"}).name_x000D__x000A_         Write-Progress -Activity "Merging sheets" -CurrentOperation "creating output sheet '$OutputSheetName' in $OutputFile"_x000D__x000A_         $excel                 = $merged | Sort-Object -Property $orderByProperties  |_x000D__x000A_                                   Export-Excel -Path $OutputFile -WorksheetName $OutputSheetName -ClearSheet -BoldTopRow -AutoFilter -PassThru_x000D__x000A_         $sheet                 = $excel.Workbook.Worksheets[$OutputSheetName]_x000D__x000A__x000D__x000A_         #We will put in a conditional format for "if all the others are not flagged as 'same'" to mark rows where something is added, removed or changed_x000D__x000A_         $sameChecks            = @()_x000D__x000A__x000D__x000A_         #All the 'difference' columns in the sheet are labeled with the file they came from, 'reference' columns need their_x000D__x000A_         #headers prefixed with the ref file name,  $colnames is the basis of a regular expression to identify what should have $refPrefix appended_x000D__x000A_         $colNames              = @("^_Row$")_x000D__x000A_         if ($Key -ne "*")_x000D__x000A_               {$colnames      += "^$Key$"}_x000D__x000A_         if ($filesToProcess.Count -ge 2) {_x000D__x000A_               $refPrefix       = (Split-Path -Path $filestoProcess[0] -Leaf) -replace "\.xlsx$"," "_x000D__x000A_         }_x000D__x000A_         else {$refPrefix       = $WorksheetName[0] + " "}_x000D__x000A_         Write-Progress -Activity "Merging sheets" -CurrentOperation "applying formatting to sheet '$OutputSheetName' in $OutputFile"_x000D__x000A_         #Find the column headings which are in the form "diffFile  is"; which will hold 'Same', 'Added' or 'Changed'_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "\sIS$"}) ) {_x000D__x000A_            #Work leftwards across the headings applying conditional formatting which says_x000D__x000A_            # 'Format this cell if the "IS" column has a value of ...' until you find a heading which doesn't have the prefix._x000D__x000A_            $prefix             = $cell.value -replace  "\sIS$",""_x000D__x000A_            $columnNo           = $cell.start.Column -1_x000D__x000A_            $cellAddr           = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R1C$columnNo",1,$columnNo)_x000D__x000A_            while ($sheet.cells[$cellAddr].value -match $prefix) {_x000D__x000A_                $condFormattingParams =  @{RuleType='Expression'; BackgroundPattern='Solid'; Worksheet=$sheet; StopIfTrue=$true; Range=$([OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[1]C[$columnNo]:R[1048576]C[$columnNo]",0,0)) }_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Added"'  ) -BackgroundColor $AddBackgroundColor_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Changed"') -BackgroundColor $ChangeBackgroundColor_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Removed"') -BackgroundColor $DeleteBackgroundColor_x000D__x000A_                $columnNo --_x000D__x000A_                $cellAddr       = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R1C$columnNo",1,$columnNo)_x000D__x000A_            }_x000D__x000A_            #build up a list of prefixes in $colnames - we'll use that to set headers on rows from the reference file; and build up the "if the 'is' cell isn't same" list_x000D__x000A_            $colNames          += $prefix_x000D__x000A_            $sameChecks        += (($cell.Address -replace "1","2") +'&lt;&gt;"Same"')_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #For all the columns which don't match one of the Diff-file prefixes or "_Row" or the 'Key' columnn name; add the reference file prefix to their header._x000D__x000A_         $nameRegex             = $colNames -Join '|'_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -Notmatch $nameRegex}) ) {_x000D__x000A_            $cell.Value         = $refPrefix + $cell.Value_x000D__x000A_            $condFormattingParams =  @{RuleType='Expression'; BackgroundPattern='Solid'; Worksheet=$sheet; StopIfTrue=$true; Range=[OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[2]C[$($cell.start.column)]:R[1048576]C[$($cell.start.column)]",0,0)}_x000D__x000A_            Add-ConditionalFormatting @condFormattingParams -ConditionValue ("OR("  +(($sameChecks -join ",") -replace '&lt;&gt;"Same"','="Added"'  ) +")" )   -BackgroundColor $DeleteBackgroundColor_x000D__x000A_            Add-ConditionalFormatting @condFormattingParams -ConditionValue ("AND(" +(($sameChecks -join ",") -replace '&lt;&gt;"Same"','="Changed"') +")" )   -BackgroundColor $ChangeBackgroundColor_x000D__x000A_         }_x000D__x000A_         #We've made a bunch of things wider so now is the time to autofit columns. Any hiding has to come AFTER this, because it unhides things_x000D__x000A_         if ($env:NoAutoSize) {Write-Warning "Autofit is not available with this OS configuration."}_x000D__x000A_         else  {$sheet.Cells.AutoFitColumns()}_x000D__x000A__x000D__x000A_         #if we have a key field (we didn't concatenate all fields) use what we built up in $sameChecks to apply conditional formatting to it (Row no will be in column A, Key in Column B)_x000D__x000A_         if ($Key -ne '*') {_x000D__x000A_               Add-ConditionalFormatting -Worksheet $sheet -Range "B2:B1048576" -ForeGroundColor $KeyFontColor -BackgroundPattern 'None' -RuleType Expression -ConditionValue ("OR(" +($sameChecks -join ",") +")" )_x000D__x000A_               $sheet.view.FreezePanes(2, 3)_x000D__x000A_         }_x000D__x000A_         else {$sheet.view.FreezePanes(2, 2) }_x000D__x000A_         #Go back over the headings to find and hide the "is" columns;_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "\sIS$"}) ) {_x000D__x000A_            $sheet.Column($cell.start.Column).HIDDEN = $true_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #If specified, look over the headings for "row" and hide the columns which say "this was in row such-and-such"_x000D__x000A_         if ($HideRowNumbers) {_x000D__x000A_            foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "Row$"}) ) {_x000D__x000A_                $sheet.Column($cell.start.Column).HIDDEN = $true_x000D__x000A_            }_x000D__x000A_         }_x000D__x000A_         if ($Passthru) {$excel}_x000D__x000A_         else {Close-ExcelPackage -ExcelPackage $excel -Show:$Show}_x000D__x000A_         Write-Progress -Activity "Merging sheets" -Completed_x000D__x000A_     }_x000D__x000A_ </SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_     [CmdletBinding()]_x000D__x000A_     [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="False positives when initializing variable in begin block")]_x000D__x000A_     [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseSingularNouns', '', Justification="MultipleSheet would be incorrect")]_x000D__x000A_     #[Alias("Merge-MulipleSheets")] #There was a spelling error in the first release. This was there to ensure things didn't break but intelisense gave the alias first._x000D__x000A_     param   (_x000D__x000A_         [Parameter(Mandatory=$true,ValueFromPipeline=$true)]_x000D__x000A_         $Path  ,_x000D__x000A_         [int]$Startrow = 1,_x000D__x000A__x000D__x000A_         [String[]]$Headername,_x000D__x000A__x000D__x000A_         [switch]$NoHeader,_x000D__x000A__x000D__x000A_         $WorksheetName   = "Sheet1",_x000D__x000A_         [Alias('OutFile')]_x000D__x000A_         $OutputFile = ".\temp.xlsx",_x000D__x000A_         [Alias('OutSheet')]_x000D__x000A_         $OutputSheetName = "Sheet1",_x000D__x000A_         $Property        = "*"    ,_x000D__x000A_         $ExcludeProperty ,_x000D__x000A_         $Key           = "Name" ,_x000D__x000A_         $KeyFontColor          = [System.Drawing.Color]::Red,_x000D__x000A_         $ChangeBackgroundColor = [System.Drawing.Color]::Orange,_x000D__x000A_         $DeleteBackgroundColor = [System.Drawing.Color]::LightPink,_x000D__x000A_         $AddBackgroundColor    = [System.Drawing.Color]::Orange,_x000D__x000A_         [switch]$HideRowNumbers ,_x000D__x000A_         [switch]$Passthru  ,_x000D__x000A_         [Switch]$Show_x000D__x000A_    )_x000D__x000A_     begin   {    $filestoProcess   = @()  }_x000D__x000A_     process {    $filestoProcess  += $Path}_x000D__x000A_     end     {_x000D__x000A_         if     ($filestoProcess.Count -eq 1 -and $WorksheetName -match '\*') {_x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "Expanding * to names of sheets in $($filestoProcess[0]). "_x000D__x000A_             $excel = Open-ExcelPackage -Path $filestoProcess_x000D__x000A_             $WorksheetName = $excel.Workbook.Worksheets.Name.where({$_ -like $WorksheetName})_x000D__x000A_             Close-ExcelPackage -NoSave -ExcelPackage $excel_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #Merge identically named sheets in different work books;_x000D__x000A_          if     ($filestoProcess.Count -ge 2 -and $WorksheetName -is "string" ) {_x000D__x000A_             Get-Variable -Name 'HeaderName','NoHeader','StartRow','Key','Property','ExcludeProperty','WorksheetName' -ErrorAction SilentlyContinue |_x000D__x000A_                 Where-Object {$_.Value} | ForEach-Object -Begin {$params= @{} } -Process {$params[$_.Name] = $_.Value}_x000D__x000A__x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "comparing '$WorksheetName' in $($filestoProcess[-1]) against $($filestoProcess[0]). "_x000D__x000A_             $merged            = Merge-Worksheet  @params -Referencefile $filestoProcess[0] -Differencefile $filestoProcess[-1]_x000D__x000A_             $nextFileNo        = 2_x000D__x000A_             while ($nextFileNo -lt $filestoProcess.count -and $merged) {_x000D__x000A_                 Write-Progress -Activity "Merging sheets" -CurrentOperation "comparing '$WorksheetName' in $($filestoProcess[-$nextFileNo]) against $($filestoProcess[0]). "_x000D__x000A_                 $merged        = Merge-Worksheet  @params -ReferenceObject $merged -Differencefile $filestoProcess[-$nextFileNo]_x000D__x000A_                 $nextFileNo    ++_x000D__x000A__x000D__x000A_             }_x000D__x000A_         }_x000D__x000A_         #Merge different sheets from one workbook_x000D__x000A_         elseif ($filestoProcess.Count -eq 1 -and $WorksheetName.Count -ge 2 ) {_x000D__x000A_             Get-Variable -Name 'HeaderName','NoHeader','StartRow','Key','Property','ExcludeProperty' -ErrorAction SilentlyContinue |_x000D__x000A_                 Where-Object {$_.Value} | ForEach-Object -Begin {$params= @{} } -Process {$params[$_.Name] = $_.Value}_x000D__x000A__x000D__x000A_             Write-Progress -Activity "Merging sheets" -CurrentOperation "Comparing $($WorksheetName[-1]) against $($WorksheetName[0]). "_x000D__x000A_             $merged          = Merge-Worksheet  @params -Referencefile $filestoProcess[0] -Differencefile $filestoProcess[0] -WorksheetName $WorksheetName[0,-1]_x000D__x000A_             $nextSheetNo     = 2_x000D__x000A_             while ($nextSheetNo -lt $WorksheetName.count -and $merged) {_x000D__x000A_                 Write-Progress -Activity "Merging sheets" -CurrentOperation "Comparing $($WorksheetName[-$nextSheetNo]) against $($WorksheetName[0]). "_x000D__x000A_                 $merged      = Merge-Worksheet  @params -ReferenceObject $merged -Differencefile $filestoProcess[0] -WorksheetName  $WorksheetName[-$nextSheetNo] -DiffPrefix $WorksheetName[-$nextSheetNo]_x000D__x000A_                 $nextSheetNo ++_x000D__x000A_             }_x000D__x000A_         }_x000D__x000A_         #We either need one Worksheet name and many files or one file and many sheets._x000D__x000A_         else {            Write-Warning -Message "Need at least two files to process"           ; return }_x000D__x000A_         #if the process didn't return data then abandon now._x000D__x000A_         if (-not $merged) {Write-Warning -Message "The merge operation did not return any data."; return }_x000D__x000A__x000D__x000A_         $orderByProperties  = $merged[0].psobject.properties.where({$_.name -match "row$"}).name_x000D__x000A_         Write-Progress -Activity "Merging sheets" -CurrentOperation "creating output sheet '$OutputSheetName' in $OutputFile"_x000D__x000A_         $excel                 = $merged | Sort-Object -Property $orderByProperties  |_x000D__x000A_                                   Export-Excel -Path $OutputFile -WorksheetName $OutputSheetName -ClearSheet -BoldTopRow -AutoFilter -PassThru_x000D__x000A_         $sheet                 = $excel.Workbook.Worksheets[$OutputSheetName]_x000D__x000A__x000D__x000A_         #We will put in a conditional format for "if all the others are not flagged as 'same'" to mark rows where something is added, removed or changed_x000D__x000A_         $sameChecks            = @()_x000D__x000A__x000D__x000A_         #All the 'difference' columns in the sheet are labeled with the file they came from, 'reference' columns need their_x000D__x000A_         #headers prefixed with the ref file name,  $colnames is the basis of a regular expression to identify what should have $refPrefix appended_x000D__x000A_         $colNames              = @("^_Row$")_x000D__x000A_         if ($Key -ne "*")_x000D__x000A_               {$colnames      += "^$Key$"}_x000D__x000A_         if ($filesToProcess.Count -ge 2) {_x000D__x000A_               $refPrefix       = (Split-Path -Path $filestoProcess[0] -Leaf) -replace "\.xlsx$"," "_x000D__x000A_         }_x000D__x000A_         else {$refPrefix       = $WorksheetName[0] + " "}_x000D__x000A_         Write-Progress -Activity "Merging sheets" -CurrentOperation "applying formatting to sheet '$OutputSheetName' in $OutputFile"_x000D__x000A_         #Find the column headings which are in the form "diffFile  is"; which will hold 'Same', 'Added' or 'Changed'_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "\sIS$"}) ) {_x000D__x000A_            #Work leftwards across the headings applying conditional formatting which says_x000D__x000A_            # 'Format this cell if the "IS" column has a value of ...' until you find a heading which doesn't have the prefix._x000D__x000A_            $prefix             = $cell.value -replace  "\sIS$",""_x000D__x000A_            $columnNo           = $cell.start.Column -1_x000D__x000A_            $cellAddr           = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R1C$columnNo",1,$columnNo)_x000D__x000A_            while ($sheet.cells[$cellAddr].value -match $prefix) {_x000D__x000A_                $condFormattingParams =  @{RuleType='Expression'; BackgroundPattern='Solid'; Worksheet=$sheet; StopIfTrue=$true; Range=$([OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[1]C[$columnNo]:R[1048576]C[$columnNo]",0,0)) }_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Added"'  ) -BackgroundColor $AddBackgroundColor_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Changed"') -BackgroundColor $ChangeBackgroundColor_x000D__x000A_                Add-ConditionalFormatting @condFormattingParams -ConditionValue ($cell.Address + '="Removed"') -BackgroundColor $DeleteBackgroundColor_x000D__x000A_                $columnNo --_x000D__x000A_                $cellAddr       = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R1C$columnNo",1,$columnNo)_x000D__x000A_            }_x000D__x000A_            #build up a list of prefixes in $colnames - we'll use that to set headers on rows from the reference file; and build up the "if the 'is' cell isn't same" list_x000D__x000A_            $colNames          += $prefix_x000D__x000A_            $sameChecks        += (($cell.Address -replace "1","2") +'&lt;&gt;"Same"')_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #For all the columns which don't match one of the Diff-file prefixes or "_Row" or the 'Key' columnn name; add the reference file prefix to their header._x000D__x000A_         $nameRegex             = $colNames -Join '|'_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -Notmatch $nameRegex}) ) {_x000D__x000A_            $cell.Value         = $refPrefix + $cell.Value_x000D__x000A_            $condFormattingParams =  @{RuleType='Expression'; BackgroundPattern='Solid'; Worksheet=$sheet; StopIfTrue=$true; Range=[OfficeOpenXml.ExcelAddress]::TranslateFromR1C1("R[2]C[$($cell.start.column)]:R[1048576]C[$($cell.start.column)]",0,0)}_x000D__x000A_            Add-ConditionalFormatting @condFormattingParams -ConditionValue ("OR("  +(($sameChecks -join ",") -replace '&lt;&gt;"Same"','="Added"'  ) +")" )   -BackgroundColor $DeleteBackgroundColor_x000D__x000A_            Add-ConditionalFormatting @condFormattingParams -ConditionValue ("AND(" +(($sameChecks -join ",") -replace '&lt;&gt;"Same"','="Changed"') +")" )   -BackgroundColor $ChangeBackgroundColor_x000D__x000A_         }_x000D__x000A_         #We've made a bunch of things wider so now is the time to autofit columns. Any hiding has to come AFTER this, because it unhides things_x000D__x000A_         if ($env:NoAutoSize) {Write-Warning "Autofit is not available with this OS configuration."}_x000D__x000A_         else  {$sheet.Cells.AutoFitColumns()}_x000D__x000A__x000D__x000A_         #if we have a key field (we didn't concatenate all fields) use what we built up in $sameChecks to apply conditional formatting to it (Row no will be in column A, Key in Column B)_x000D__x000A_         if ($Key -ne '*') {_x000D__x000A_               Add-ConditionalFormatting -Worksheet $sheet -Range "B2:B1048576" -ForeGroundColor $KeyFontColor -BackgroundPattern 'None' -RuleType Expression -ConditionValue ("OR(" +($sameChecks -join ",") +")" )_x000D__x000A_               $sheet.view.FreezePanes(2, 3)_x000D__x000A_         }_x000D__x000A_         else {$sheet.view.FreezePanes(2, 2) }_x000D__x000A_         #Go back over the headings to find and hide the "is" columns;_x000D__x000A_         foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "\sIS$"}) ) {_x000D__x000A_            $sheet.Column($cell.start.Column).HIDDEN = $true_x000D__x000A_         }_x000D__x000A__x000D__x000A_         #If specified, look over the headings for "row" and hide the columns which say "this was in row such-and-such"_x000D__x000A_         if ($HideRowNumbers) {_x000D__x000A_            foreach ($cell in $sheet.Cells[($sheet.Dimension.Address -replace "\d+$","1")].Where({$_.value -match "Row$"}) ) {_x000D__x000A_                $sheet.Column($cell.start.Column).HIDDEN = $true_x000D__x000A_            }_x000D__x000A_         }_x000D__x000A_         if ($Passthru) {$excel}_x000D__x000A_         else {Close-ExcelPackage -ExcelPackage $excel -Show:$Show}_x000D__x000A_         Write-Progress -Activity "Merging sheets" -Completed_x000D__x000A_     }_x000D__x000A_ </S>
      <Obj N="Options" RefId="3190">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Merge</S>
      <S N="Noun">MultipleSheets</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3191">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Merge-MultipleSheets</S>
      <Obj N="CommandType" RefId="3192">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3193">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3194">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3195">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3196">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3197">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Startrow</S>
            <Obj N="Value" RefId="3198">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Startrow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3199">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Headername</S>
            <Obj N="Value" RefId="3200">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Headername</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3201">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="3202">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3203">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="3204">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3205">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputFile</S>
            <Obj N="Value" RefId="3206">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputFile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3207">
                  <TNRef RefId="25" />
                  <LST>
                    <S>OutFile</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputSheetName</S>
            <Obj N="Value" RefId="3208">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputSheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3209">
                  <TNRef RefId="25" />
                  <LST>
                    <S>OutSheet</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Property</S>
            <Obj N="Value" RefId="3210">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Property</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3211">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="3212">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3213">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Key</S>
            <Obj N="Value" RefId="3214">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Key</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3215">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">KeyFontColor</S>
            <Obj N="Value" RefId="3216">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">KeyFontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3217">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChangeBackgroundColor</S>
            <Obj N="Value" RefId="3218">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChangeBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3219">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DeleteBackgroundColor</S>
            <Obj N="Value" RefId="3220">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DeleteBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3221">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AddBackgroundColor</S>
            <Obj N="Value" RefId="3222">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AddBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3223">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HideRowNumbers</S>
            <Obj N="Value" RefId="3224">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HideRowNumbers</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3225">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Passthru</S>
            <Obj N="Value" RefId="3226">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Passthru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3227">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="3228">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3229">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3230">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3231">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3232">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3233">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3234">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3235">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3236">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3237">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3238">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3239">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3240">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3241">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3242">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3243">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3244">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3245">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3246">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3247">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3248">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3249">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3250">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3251">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3252">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3253">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [[-Startrow] &lt;int&gt;] [[-Headername] &lt;string[]&gt;] [[-WorksheetName] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [[-Property] &lt;Object&gt;] [[-ExcludeProperty] &lt;Object&gt;] [[-Key] &lt;Object&gt;] [[-KeyFontColor] &lt;Object&gt;] [[-ChangeBackgroundColor] &lt;Object&gt;] [[-DeleteBackgroundColor] &lt;Object&gt;] [[-AddBackgroundColor] &lt;Object&gt;] [-NoHeader] [-HideRowNumbers] [-Passthru] [-Show] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3254">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Merge-MultipleSheets</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="3255">
    <TNRef RefId="0" />
    <ToString>Merge-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(SupportsShouldProcess=$true)]_x000D__x000A_    param(_x000D__x000A_         [parameter(ParameterSetName='A',Mandatory=$true,Position=0)]  #A = Compare two files default headers_x000D__x000A_         [parameter(ParameterSetName='B',Mandatory=$true,Position=0)]  #B = Compare two files user supplied headers_x000D__x000A_         [parameter(ParameterSetName='C',Mandatory=$true,Position=0)]  #C = Compare two files headers P1, P2, P3 etc_x000D__x000A_         $Referencefile ,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='B',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='C',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='E',Mandatory=$true,Position=1)] #D Compare two objects; E = Compare one object one file that uses default headers_x000D__x000A_         [parameter(ParameterSetName='F',Mandatory=$true,Position=1)] #F = Compare one object one file that uses user supplied headers_x000D__x000A_         [parameter(ParameterSetName='G',Mandatory=$true,Position=1)] #G   Compare one object one file that uses headers P1, P2, P3 etc_x000D__x000A_         $Differencefile ,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A',Position=2)]  #Applies to all sets EXCEPT D which is two objects (no sheets)_x000D__x000A_         [parameter(ParameterSetName='B',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='C',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='E',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='F',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='G',Position=2)]_x000D__x000A_         $WorksheetName   = "Sheet1",_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A')]  #Applies to all sets EXCEPT D which is two objects (no sheets, so no start row )_x000D__x000A_         [parameter(ParameterSetName='B')]_x000D__x000A_         [parameter(ParameterSetName='C')]_x000D__x000A_         [parameter(ParameterSetName='E')]_x000D__x000A_         [parameter(ParameterSetName='F')]_x000D__x000A_         [parameter(ParameterSetName='G')]_x000D__x000A_         [int]$Startrow = 1,_x000D__x000A__x000D__x000A_         [Parameter(ParameterSetName='B',Mandatory=$true)]  #Compare  object + sheet or 2 sheets with user supplied headers_x000D__x000A_         [Parameter(ParameterSetName='F',Mandatory=$true)]_x000D__x000A_         [String[]]$Headername,_x000D__x000A__x000D__x000A_         [Parameter(ParameterSetName='C',Mandatory=$true)]  #Compare  object + sheet or 2 sheets with headers of P1, P2, P3 ..._x000D__x000A_         [Parameter(ParameterSetName='G',Mandatory=$true)]_x000D__x000A_         [switch]$NoHeader,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='D',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='E',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='F',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='G',Mandatory=$true)]_x000D__x000A_         [Alias('RefObject')]_x000D__x000A_         $ReferenceObject ,_x000D__x000A_         [parameter(ParameterSetName='D',Mandatory=$true,Position=1)]_x000D__x000A_         [Alias('DiffObject')]_x000D__x000A_         $DifferenceObject ,_x000D__x000A_         [parameter(ParameterSetName='D',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='E',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='F',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='G',Position=2)]_x000D__x000A_         $DiffPrefix = "=&gt;" ,_x000D__x000A_         [parameter(Position=3)]_x000D__x000A_         [Alias('OutFile')]_x000D__x000A_         $OutputFile ,_x000D__x000A_         [parameter(Position=4)]_x000D__x000A_         [Alias('OutSheet')]_x000D__x000A_         $OutputSheetName = "Sheet1",_x000D__x000A_         $Property        = "*"    ,_x000D__x000A_         $ExcludeProperty ,_x000D__x000A_         $Key           = "Name" ,_x000D__x000A_         $KeyFontColor          = [System.Drawing.Color]::DarkRed ,_x000D__x000A_         $ChangeBackgroundColor = [System.Drawing.Color]::Orange,_x000D__x000A_         $DeleteBackgroundColor = [System.Drawing.Color]::LightPink,_x000D__x000A_         $AddBackgroundColor    = [System.Drawing.Color]::PaleGreen,_x000D__x000A_         [switch]$HideEqual ,_x000D__x000A_         [switch]$Passthru  ,_x000D__x000A_         [Switch]$Show_x000D__x000A_    )_x000D__x000A__x000D__x000A_ #region Read Excel data_x000D__x000A_    if ($Differencefile -is [System.IO.FileInfo]) {$Differencefile = $Differencefile.FullName}_x000D__x000A_    if ($Referencefile  -is [System.IO.FileInfo]) {$Referencefile  = $Referencefile.FullName}_x000D__x000A_    if ($Referencefile -and $Differencefile) {_x000D__x000A_         #if the filenames don't resolve, give up now._x000D__x000A_         try     { $oneFile = ((Resolve-Path -Path $Referencefile -ErrorAction Stop).path -eq (Resolve-Path -Path $Differencefile  -ErrorAction Stop).path)}_x000D__x000A_         catch   { Write-Warning -Message "Could not Resolve the filenames." ; return }_x000D__x000A__x000D__x000A_         #If we have one file , we must have two different Worksheet names. If we have two files $WorksheetName can be a single string or two strings._x000D__x000A_         if      ($onefile -and ( ($WorksheetName.count -ne 2) -or $WorksheetName[0] -eq $WorksheetName[1] ) ) {_x000D__x000A_             Write-Warning -Message "If both the Reference and difference file are the same then Worksheet name must provide 2 different names"_x000D__x000A_             return_x000D__x000A_         }_x000D__x000A_         if      ($WorksheetName.count -eq 2)  {$Worksheet2 = $DiffPrefix = $WorksheetName[1] ; $Worksheet1 = $WorksheetName[0]  ;  }_x000D__x000A_         elseif  ($WorksheetName -is [string]) {$Worksheet2 = $Worksheet1 = $WorksheetName    ;_x000D__x000A_                                                $DiffPrefix = (Split-Path -Path $Differencefile -Leaf) -replace "\.xlsx$","" }_x000D__x000A_         else    {Write-Warning -Message "You must provide either a single Worksheet name or two names." ; return }_x000D__x000A__x000D__x000A_         $params= @{ ErrorAction = [System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_         foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_         try     {_x000D__x000A_             $ReferenceObject  = Import-Excel -Path $Referencefile  -WorksheetName $Worksheet1 @params_x000D__x000A_             $DifferenceObject = Import-Excel -Path $Differencefile -WorksheetName $Worksheet2 @Params_x000D__x000A_         }_x000D__x000A_         catch   {Write-Warning -Message "Could not read the Worksheet from $Referencefile::$Worksheet1 and/or $Differencefile::$Worksheet2." ; return }_x000D__x000A_         if ($NoHeader) {$firstDataRow = $Startrow  } else {$firstDataRow = $Startrow + 1}_x000D__x000A_     }_x000D__x000A_     elseif (                $Differencefile) {_x000D__x000A_         if ($WorksheetName -isnot [string]) {Write-Warning -Message "You must provide a single Worksheet name." ; return }_x000D__x000A_         $params     =  @{WorksheetName=$WorksheetName; Path=$Differencefile; ErrorAction=[System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_         foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_         try            {$DifferenceObject = Import-Excel   @Params }_x000D__x000A_         catch          {Write-Warning -Message "Could not read the Worksheet '$WorksheetName' from $Differencefile::$WorksheetName." ; return }_x000D__x000A_         if ($DiffPrefix -eq "=&gt;" ) {_x000D__x000A_             $DiffPrefix  =  (Split-Path -Path $Differencefile -Leaf) -replace "\.xlsx$",""_x000D__x000A_         }_x000D__x000A_         if ($NoHeader) {$firstDataRow = $Startrow  } else {$firstDataRow = $Startrow + 1}_x000D__x000A_     }_x000D__x000A_     else   { $firstDataRow = 1  }_x000D__x000A_ #endregion_x000D__x000A__x000D__x000A_ #region Set lists of properties and row numbers_x000D__x000A_     #Make a list of properties/headings using the Property (default "*") and ExcludeProperty parameters_x000D__x000A_     $propList         = @()_x000D__x000A_     $DifferenceObject = $DifferenceObject | Update-FirstObjectProperties_x000D__x000A_     $headings         = $DifferenceObject[0].psobject.Properties.Name # This preserves the sequence - using Get-member would sort them alphabetically! There may be extra properties in_x000D__x000A_     if ($NoHeader     -and "Name" -eq $Key)  {$Key     = "p1"}_x000D__x000A_     if ($headings     -notcontains    $Key -and_x000D__x000A_                              ('*' -ne $Key)) {Write-Warning -Message "You need to specify one of the headings in the sheet '$Worksheet2' as a key." ; return }_x000D__x000A_     foreach ($p in $Property)                { $propList += ($headings.where({$_ -like    $p}) )}_x000D__x000A_     foreach ($p in $ExcludeProperty)         { $propList  =  $propList.where({$_ -notlike $p})  }_x000D__x000A_     if (($propList    -notcontains $Key) -and_x000D__x000A_                           ('*' -ne $Key))    { $propList +=  $Key}    #If $Key isn't one of the headings we will have bailed by now_x000D__x000A_     $propList         = $propList   | Select-Object -Unique           #so, prolist must contain at least $Key if nothing else_x000D__x000A__x000D__x000A_     #If key is "*" we treat it differently , and we will create a script property which concatenates all the Properties in $Proplist_x000D__x000A_     $ConCatblock      = [scriptblock]::Create( ($proplist | ForEach-Object {'$this."' + $_ + '"'})  -join " + ")_x000D__x000A__x000D__x000A_     #Build the list of the properties to output, in order._x000D__x000A_     $diffpart         = @()_x000D__x000A_     $refpart          = @()_x000D__x000A_     foreach ($p in $proplist.Where({$Key -ne $_}) ) {$refPart += $p ; $diffPart += "$DiffPrefix $p" }_x000D__x000A_     $lastRefColNo     = $proplist.count_x000D__x000A_     $FirstDiffColNo   = $lastRefColNo + 1_x000D__x000A__x000D__x000A_     if ($Key -ne '*') {_x000D__x000A_            $outputProps   = @($Key) + $refpart + $diffpart_x000D__x000A_            #If we are using a single column as the key, don't duplicate it, so the last difference column will be A if there is one property, C if there are two, E if there are 3_x000D__x000A_            $lastDiffColNo = (2 * $proplist.count) - 1_x000D__x000A_     }_x000D__x000A_     else {_x000D__x000A_            $outputProps   = @( )    + $refpart + $diffpart_x000D__x000A_            #If we not using a single column as a key all columns are duplicated so, the Last difference column will be B if there is one property, D if there are two, F if there are 3_x000D__x000A_            $lastDiffColNo = (2 * $proplist.count )_x000D__x000A_     }_x000D__x000A__x000D__x000A_     #Add RowNumber to every row_x000D__x000A_     #If one sheet has extra rows we can get a single "==" result from compare, with the row from the reference sheet, but_x000D__x000A_     #the row in the other sheet might be different so we will look up the row number from the key field - build a hash table for that here_x000D__x000A_     #If we have "*" as the key ad the script property to concatenate the [selected] properties._x000D__x000A__x000D__x000A_     $rowHash = @{}_x000D__x000A_     $rowNo = $firstDataRow_x000D__x000A_     foreach ($row in $ReferenceObject)  {_x000D__x000A_        if   ($null -eq $row._row) {Add-Member -InputObject $row -MemberType NoteProperty   -Value ($rowNo ++)  -Name "_Row" }_x000D__x000A_        else {$rowNo++ }_x000D__x000A_        if   ($Key      -eq '*'  ) {Add-Member -InputObject $row -MemberType ScriptProperty -Value $ConCatblock -Name "_All" }_x000D__x000A_     }_x000D__x000A_     $rowNo = $firstDataRow_x000D__x000A_     foreach ($row in $DifferenceObject) {_x000D__x000A_         Add-Member       -InputObject $row -MemberType NoteProperty   -Value $rowNo       -Name "$DiffPrefix Row" -Force_x000D__x000A_         if   ($Key       -eq '*' )    {_x000D__x000A_               Add-Member -InputObject $row -MemberType ScriptProperty -Value $ConCatblock -Name "_All"_x000D__x000A_               $rowHash[$row._All] = $rowNo_x000D__x000A_         }_x000D__x000A_         else {$rowHash[$row.$Key] = $rowNo  }_x000D__x000A_         $rowNo ++_x000D__x000A_     }_x000D__x000A_     if ($DifferenceObject.count -gt $rowHash.Keys.Count) {_x000D__x000A_        Write-Warning -Message "Difference object has $($DifferenceObject.Count) rows; but only $($rowHash.keys.count) unique keys"_x000D__x000A_     }_x000D__x000A_     if ($Key -eq '*') {$Key = "_ALL"}_x000D__x000A_ #endregion_x000D__x000A_     #We need to know all the properties we've met on the objects we've diffed_x000D__x000A_     $eDiffProps  = [ordered]@{}_x000D__x000A_     #When we do a compare object changes will result in two rows so we group them and join them together._x000D__x000A_     $expandedDiff = Compare-Object -ReferenceObject $ReferenceObject -DifferenceObject $DifferenceObject -Property $propList -PassThru -IncludeEqual |_x000D__x000A_                        Group-Object -Property $Key | ForEach-Object {_x000D__x000A_                            #The value of the key column is the name of the Group._x000D__x000A_                            $keyVal = $_.name_x000D__x000A_                            #we're going to create a custom object from a hash table._x000D__x000A_                            $hash = [ordered]@{}_x000D__x000A_                            foreach ($result in $_.Group) {_x000D__x000A_                                if     ($result.SideIndicator -ne "=&gt;")      {$hash["_Row"] = $result._Row  }_x000D__x000A_                                elseif (-not $hash["$DiffPrefix Row"])       {$hash["_Row"] = "" }_x000D__x000A_                                #if we have already set the side, this must be the second record, so set side to indicate "changed"; if we got two "Same" indicators we may have a classh of keys_x000D__x000A_                                if     ($hash.Side) {_x000D__x000A_                                    if ($hash.Side -eq $result.SideIndicator) {Write-Warning -Message "'$keyVal' may be a duplicate."}_x000D__x000A_                                        $hash.Side = "&lt;&gt;"_x000D__x000A_                                }_x000D__x000A_                                else   {$hash["Side"] = $result.SideIndicator}_x000D__x000A_                                switch ($hash.side) {_x000D__x000A_                                    '==' {      $hash["$DiffPrefix is"] = 'Same'   }_x000D__x000A_                                    '=&gt;' {      $hash["$DiffPrefix is"] = 'Added'  }_x000D__x000A_                                    '&lt;&gt;' { if (-not $hash["_Row"]) {_x000D__x000A_                                                $hash["$DiffPrefix is"] = 'Added'_x000D__x000A_                                            }_x000D__x000A_                                            else {_x000D__x000A_                                                $hash["$DiffPrefix is"] = 'Changed'_x000D__x000A_                                            }_x000D__x000A_                                         }_x000D__x000A_                                    '&lt;=' {      $hash["$DiffPrefix is"] = 'Removed'}_x000D__x000A_                                    }_x000D__x000A_                                 #find the number of the row in the the "difference" object which has this key. If it is the object is only in the reference this will be blank._x000D__x000A_                                 $hash["$DiffPrefix Row"] = $rowHash[$keyVal]_x000D__x000A_                                 $hash[$Key]              = $keyVal_x000D__x000A_                                 #Create FieldName and/or =&gt;FieldName columns_x000D__x000A_                                 foreach  ($p in $result.psobject.Properties.name.where({$_ -ne $Key -and $_ -ne "SideIndicator" -and $_ -ne "$DiffPrefix Row" })) {_x000D__x000A_                                    if     ($result.SideIndicator -eq "==" -and $p -in $propList)_x000D__x000A_                                                                             {$hash[("$p")] = $hash[("$DiffPrefix $p")] = $result.$P}_x000D__x000A_                                    elseif ($result.SideIndicator -eq "==" -or $result.SideIndicator -eq "&lt;=")_x000D__x000A_                                                                             {$hash[("$p")]                             = $result.$P}_x000D__x000A_                                    elseif ($result.SideIndicator -eq "=&gt;")  {                $hash[("$DiffPrefix $p")] = $result.$P}_x000D__x000A_                                 }_x000D__x000A_                             }_x000D__x000A__x000D__x000A_                             foreach ($k in $hash.keys) {$eDiffProps[$k] = $true}_x000D__x000A_                             [Pscustomobject]$hash_x000D__x000A_     }  | Sort-Object -Property "_row"_x000D__x000A__x000D__x000A_     #Already sorted by reference row number, fill in any blanks in the difference-row column._x000D__x000A_     for ($i = 1; $i -lt $expandedDiff.Count; $i++) {if (-not $expandedDiff[$i]."$DiffPrefix Row") {$expandedDiff[$i]."$DiffPrefix Row" = $expandedDiff[$i-1]."$DiffPrefix Row" } }_x000D__x000A__x000D__x000A_     #Now re-Sort by difference row number, and fill in any blanks in the reference-row column._x000D__x000A_     $expandedDiff = $expandedDiff | Sort-Object -Property "$DiffPrefix Row"_x000D__x000A_     for ($i = 1; $i -lt $expandedDiff.Count; $i++) {if (-not $expandedDiff[$i]."_Row") {$expandedDiff[$i]."_Row" = $expandedDiff[$i-1]."_Row" } }_x000D__x000A__x000D__x000A_     $AllProps = @("_Row") + $OutputProps + $eDiffProps.keys.where({$_ -notin ($outputProps + @("_row","side","SideIndicator","_ALL" ))})_x000D__x000A__x000D__x000A_     if     ($PassThru -or -not $OutputFile) {return  ($expandedDiff | Select-Object -Property $allprops  | Sort-Object -Property  "_row", "$DiffPrefix Row"    )  }_x000D__x000A_     elseif ($PSCmdlet.ShouldProcess($OutputFile,"Write Output to Excel file")) {_x000D__x000A_         $expandedDiff =  $expandedDiff | Sort-Object -Property  "_row", "$DiffPrefix Row"_x000D__x000A_         $xl = $expandedDiff | Select-Object -Property   $OutputProps    | Update-FirstObjectProperties      |_x000D__x000A_           Export-Excel -Path $OutputFile -WorksheetName $OutputSheetName -FreezeTopRow -BoldTopRow -AutoSize -AutoFilter -PassThru_x000D__x000A_         $ws =  $xl.Workbook.Worksheets[$OutputSheetName]_x000D__x000A_         for ($i = 0; $i -lt $expandedDiff.Count; $i++ ) {_x000D__x000A_            if     ( $expandedDiff[$i].side -ne "==" )  {_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range ("A" + ($i + 2 )) -FontColor       $KeyFontColor_x000D__x000A_            }_x000D__x000A_            elseif ( $HideEqual                      )  {$ws.row($i+2).hidden = $true }_x000D__x000A_            if     ( $expandedDiff[$i].side -eq "&lt;&gt;" )  {_x000D__x000A_                $range = $ws.Dimension -replace "\d+",  ($i + 2 )_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range $range            -BackgroundColor $ChangeBackgroundColor_x000D__x000A_            }_x000D__x000A_            elseif ( $expandedDiff[$i].side -eq "&lt;=" )  {_x000D__x000A_                $rangeR1C1 = "R[{0}]C[1]:R[{0}]C[{1}]" -f ($i + 2 ) , $lastRefColNo_x000D__x000A_                $range = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1($rangeR1C1,0,0)_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range $range            -BackgroundColor $DeleteBackgroundColor_x000D__x000A_            }_x000D__x000A_            elseif ( $expandedDiff[$i].side -eq "=&gt;" )  {_x000D__x000A_                if ($propList.count -gt 1) {_x000D__x000A_                    $rangeR1C1 = "R[{0}]C[{1}]:R[{0}]C[{2}]" -f ($i + 2 ) , $FirstDiffColNo , $lastDiffColNo_x000D__x000A_                    $range = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1($rangeR1C1,0,0)_x000D__x000A_                    Set-ExcelRange -Worksheet $ws -Range $range            -BackgroundColor $AddBackgroundColor_x000D__x000A_                }_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range ("A" + ($i + 2 )) -BackgroundColor $AddBackgroundColor_x000D__x000A_            }_x000D__x000A_         }_x000D__x000A_         Close-ExcelPackage -ExcelPackage $xl -Show:$Show_x000D__x000A_     }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding(SupportsShouldProcess=$true)]_x000D__x000A_    param(_x000D__x000A_         [parameter(ParameterSetName='A',Mandatory=$true,Position=0)]  #A = Compare two files default headers_x000D__x000A_         [parameter(ParameterSetName='B',Mandatory=$true,Position=0)]  #B = Compare two files user supplied headers_x000D__x000A_         [parameter(ParameterSetName='C',Mandatory=$true,Position=0)]  #C = Compare two files headers P1, P2, P3 etc_x000D__x000A_         $Referencefile ,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='B',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='C',Mandatory=$true,Position=1)]_x000D__x000A_         [parameter(ParameterSetName='E',Mandatory=$true,Position=1)] #D Compare two objects; E = Compare one object one file that uses default headers_x000D__x000A_         [parameter(ParameterSetName='F',Mandatory=$true,Position=1)] #F = Compare one object one file that uses user supplied headers_x000D__x000A_         [parameter(ParameterSetName='G',Mandatory=$true,Position=1)] #G   Compare one object one file that uses headers P1, P2, P3 etc_x000D__x000A_         $Differencefile ,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A',Position=2)]  #Applies to all sets EXCEPT D which is two objects (no sheets)_x000D__x000A_         [parameter(ParameterSetName='B',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='C',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='E',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='F',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='G',Position=2)]_x000D__x000A_         $WorksheetName   = "Sheet1",_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='A')]  #Applies to all sets EXCEPT D which is two objects (no sheets, so no start row )_x000D__x000A_         [parameter(ParameterSetName='B')]_x000D__x000A_         [parameter(ParameterSetName='C')]_x000D__x000A_         [parameter(ParameterSetName='E')]_x000D__x000A_         [parameter(ParameterSetName='F')]_x000D__x000A_         [parameter(ParameterSetName='G')]_x000D__x000A_         [int]$Startrow = 1,_x000D__x000A__x000D__x000A_         [Parameter(ParameterSetName='B',Mandatory=$true)]  #Compare  object + sheet or 2 sheets with user supplied headers_x000D__x000A_         [Parameter(ParameterSetName='F',Mandatory=$true)]_x000D__x000A_         [String[]]$Headername,_x000D__x000A__x000D__x000A_         [Parameter(ParameterSetName='C',Mandatory=$true)]  #Compare  object + sheet or 2 sheets with headers of P1, P2, P3 ..._x000D__x000A_         [Parameter(ParameterSetName='G',Mandatory=$true)]_x000D__x000A_         [switch]$NoHeader,_x000D__x000A__x000D__x000A_         [parameter(ParameterSetName='D',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='E',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='F',Mandatory=$true)]_x000D__x000A_         [parameter(ParameterSetName='G',Mandatory=$true)]_x000D__x000A_         [Alias('RefObject')]_x000D__x000A_         $ReferenceObject ,_x000D__x000A_         [parameter(ParameterSetName='D',Mandatory=$true,Position=1)]_x000D__x000A_         [Alias('DiffObject')]_x000D__x000A_         $DifferenceObject ,_x000D__x000A_         [parameter(ParameterSetName='D',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='E',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='F',Position=2)]_x000D__x000A_         [parameter(ParameterSetName='G',Position=2)]_x000D__x000A_         $DiffPrefix = "=&gt;" ,_x000D__x000A_         [parameter(Position=3)]_x000D__x000A_         [Alias('OutFile')]_x000D__x000A_         $OutputFile ,_x000D__x000A_         [parameter(Position=4)]_x000D__x000A_         [Alias('OutSheet')]_x000D__x000A_         $OutputSheetName = "Sheet1",_x000D__x000A_         $Property        = "*"    ,_x000D__x000A_         $ExcludeProperty ,_x000D__x000A_         $Key           = "Name" ,_x000D__x000A_         $KeyFontColor          = [System.Drawing.Color]::DarkRed ,_x000D__x000A_         $ChangeBackgroundColor = [System.Drawing.Color]::Orange,_x000D__x000A_         $DeleteBackgroundColor = [System.Drawing.Color]::LightPink,_x000D__x000A_         $AddBackgroundColor    = [System.Drawing.Color]::PaleGreen,_x000D__x000A_         [switch]$HideEqual ,_x000D__x000A_         [switch]$Passthru  ,_x000D__x000A_         [Switch]$Show_x000D__x000A_    )_x000D__x000A__x000D__x000A_ #region Read Excel data_x000D__x000A_    if ($Differencefile -is [System.IO.FileInfo]) {$Differencefile = $Differencefile.FullName}_x000D__x000A_    if ($Referencefile  -is [System.IO.FileInfo]) {$Referencefile  = $Referencefile.FullName}_x000D__x000A_    if ($Referencefile -and $Differencefile) {_x000D__x000A_         #if the filenames don't resolve, give up now._x000D__x000A_         try     { $oneFile = ((Resolve-Path -Path $Referencefile -ErrorAction Stop).path -eq (Resolve-Path -Path $Differencefile  -ErrorAction Stop).path)}_x000D__x000A_         catch   { Write-Warning -Message "Could not Resolve the filenames." ; return }_x000D__x000A__x000D__x000A_         #If we have one file , we must have two different Worksheet names. If we have two files $WorksheetName can be a single string or two strings._x000D__x000A_         if      ($onefile -and ( ($WorksheetName.count -ne 2) -or $WorksheetName[0] -eq $WorksheetName[1] ) ) {_x000D__x000A_             Write-Warning -Message "If both the Reference and difference file are the same then Worksheet name must provide 2 different names"_x000D__x000A_             return_x000D__x000A_         }_x000D__x000A_         if      ($WorksheetName.count -eq 2)  {$Worksheet2 = $DiffPrefix = $WorksheetName[1] ; $Worksheet1 = $WorksheetName[0]  ;  }_x000D__x000A_         elseif  ($WorksheetName -is [string]) {$Worksheet2 = $Worksheet1 = $WorksheetName    ;_x000D__x000A_                                                $DiffPrefix = (Split-Path -Path $Differencefile -Leaf) -replace "\.xlsx$","" }_x000D__x000A_         else    {Write-Warning -Message "You must provide either a single Worksheet name or two names." ; return }_x000D__x000A__x000D__x000A_         $params= @{ ErrorAction = [System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_         foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_         try     {_x000D__x000A_             $ReferenceObject  = Import-Excel -Path $Referencefile  -WorksheetName $Worksheet1 @params_x000D__x000A_             $DifferenceObject = Import-Excel -Path $Differencefile -WorksheetName $Worksheet2 @Params_x000D__x000A_         }_x000D__x000A_         catch   {Write-Warning -Message "Could not read the Worksheet from $Referencefile::$Worksheet1 and/or $Differencefile::$Worksheet2." ; return }_x000D__x000A_         if ($NoHeader) {$firstDataRow = $Startrow  } else {$firstDataRow = $Startrow + 1}_x000D__x000A_     }_x000D__x000A_     elseif (                $Differencefile) {_x000D__x000A_         if ($WorksheetName -isnot [string]) {Write-Warning -Message "You must provide a single Worksheet name." ; return }_x000D__x000A_         $params     =  @{WorksheetName=$WorksheetName; Path=$Differencefile; ErrorAction=[System.Management.Automation.ActionPreference]::Stop }_x000D__x000A_         foreach ($p in @("HeaderName","NoHeader","StartRow")) {if ($PSBoundParameters[$p]) {$params[$p] = $PSBoundParameters[$p]}}_x000D__x000A_         try            {$DifferenceObject = Import-Excel   @Params }_x000D__x000A_         catch          {Write-Warning -Message "Could not read the Worksheet '$WorksheetName' from $Differencefile::$WorksheetName." ; return }_x000D__x000A_         if ($DiffPrefix -eq "=&gt;" ) {_x000D__x000A_             $DiffPrefix  =  (Split-Path -Path $Differencefile -Leaf) -replace "\.xlsx$",""_x000D__x000A_         }_x000D__x000A_         if ($NoHeader) {$firstDataRow = $Startrow  } else {$firstDataRow = $Startrow + 1}_x000D__x000A_     }_x000D__x000A_     else   { $firstDataRow = 1  }_x000D__x000A_ #endregion_x000D__x000A__x000D__x000A_ #region Set lists of properties and row numbers_x000D__x000A_     #Make a list of properties/headings using the Property (default "*") and ExcludeProperty parameters_x000D__x000A_     $propList         = @()_x000D__x000A_     $DifferenceObject = $DifferenceObject | Update-FirstObjectProperties_x000D__x000A_     $headings         = $DifferenceObject[0].psobject.Properties.Name # This preserves the sequence - using Get-member would sort them alphabetically! There may be extra properties in_x000D__x000A_     if ($NoHeader     -and "Name" -eq $Key)  {$Key     = "p1"}_x000D__x000A_     if ($headings     -notcontains    $Key -and_x000D__x000A_                              ('*' -ne $Key)) {Write-Warning -Message "You need to specify one of the headings in the sheet '$Worksheet2' as a key." ; return }_x000D__x000A_     foreach ($p in $Property)                { $propList += ($headings.where({$_ -like    $p}) )}_x000D__x000A_     foreach ($p in $ExcludeProperty)         { $propList  =  $propList.where({$_ -notlike $p})  }_x000D__x000A_     if (($propList    -notcontains $Key) -and_x000D__x000A_                           ('*' -ne $Key))    { $propList +=  $Key}    #If $Key isn't one of the headings we will have bailed by now_x000D__x000A_     $propList         = $propList   | Select-Object -Unique           #so, prolist must contain at least $Key if nothing else_x000D__x000A__x000D__x000A_     #If key is "*" we treat it differently , and we will create a script property which concatenates all the Properties in $Proplist_x000D__x000A_     $ConCatblock      = [scriptblock]::Create( ($proplist | ForEach-Object {'$this."' + $_ + '"'})  -join " + ")_x000D__x000A__x000D__x000A_     #Build the list of the properties to output, in order._x000D__x000A_     $diffpart         = @()_x000D__x000A_     $refpart          = @()_x000D__x000A_     foreach ($p in $proplist.Where({$Key -ne $_}) ) {$refPart += $p ; $diffPart += "$DiffPrefix $p" }_x000D__x000A_     $lastRefColNo     = $proplist.count_x000D__x000A_     $FirstDiffColNo   = $lastRefColNo + 1_x000D__x000A__x000D__x000A_     if ($Key -ne '*') {_x000D__x000A_            $outputProps   = @($Key) + $refpart + $diffpart_x000D__x000A_            #If we are using a single column as the key, don't duplicate it, so the last difference column will be A if there is one property, C if there are two, E if there are 3_x000D__x000A_            $lastDiffColNo = (2 * $proplist.count) - 1_x000D__x000A_     }_x000D__x000A_     else {_x000D__x000A_            $outputProps   = @( )    + $refpart + $diffpart_x000D__x000A_            #If we not using a single column as a key all columns are duplicated so, the Last difference column will be B if there is one property, D if there are two, F if there are 3_x000D__x000A_            $lastDiffColNo = (2 * $proplist.count )_x000D__x000A_     }_x000D__x000A__x000D__x000A_     #Add RowNumber to every row_x000D__x000A_     #If one sheet has extra rows we can get a single "==" result from compare, with the row from the reference sheet, but_x000D__x000A_     #the row in the other sheet might be different so we will look up the row number from the key field - build a hash table for that here_x000D__x000A_     #If we have "*" as the key ad the script property to concatenate the [selected] properties._x000D__x000A__x000D__x000A_     $rowHash = @{}_x000D__x000A_     $rowNo = $firstDataRow_x000D__x000A_     foreach ($row in $ReferenceObject)  {_x000D__x000A_        if   ($null -eq $row._row) {Add-Member -InputObject $row -MemberType NoteProperty   -Value ($rowNo ++)  -Name "_Row" }_x000D__x000A_        else {$rowNo++ }_x000D__x000A_        if   ($Key      -eq '*'  ) {Add-Member -InputObject $row -MemberType ScriptProperty -Value $ConCatblock -Name "_All" }_x000D__x000A_     }_x000D__x000A_     $rowNo = $firstDataRow_x000D__x000A_     foreach ($row in $DifferenceObject) {_x000D__x000A_         Add-Member       -InputObject $row -MemberType NoteProperty   -Value $rowNo       -Name "$DiffPrefix Row" -Force_x000D__x000A_         if   ($Key       -eq '*' )    {_x000D__x000A_               Add-Member -InputObject $row -MemberType ScriptProperty -Value $ConCatblock -Name "_All"_x000D__x000A_               $rowHash[$row._All] = $rowNo_x000D__x000A_         }_x000D__x000A_         else {$rowHash[$row.$Key] = $rowNo  }_x000D__x000A_         $rowNo ++_x000D__x000A_     }_x000D__x000A_     if ($DifferenceObject.count -gt $rowHash.Keys.Count) {_x000D__x000A_        Write-Warning -Message "Difference object has $($DifferenceObject.Count) rows; but only $($rowHash.keys.count) unique keys"_x000D__x000A_     }_x000D__x000A_     if ($Key -eq '*') {$Key = "_ALL"}_x000D__x000A_ #endregion_x000D__x000A_     #We need to know all the properties we've met on the objects we've diffed_x000D__x000A_     $eDiffProps  = [ordered]@{}_x000D__x000A_     #When we do a compare object changes will result in two rows so we group them and join them together._x000D__x000A_     $expandedDiff = Compare-Object -ReferenceObject $ReferenceObject -DifferenceObject $DifferenceObject -Property $propList -PassThru -IncludeEqual |_x000D__x000A_                        Group-Object -Property $Key | ForEach-Object {_x000D__x000A_                            #The value of the key column is the name of the Group._x000D__x000A_                            $keyVal = $_.name_x000D__x000A_                            #we're going to create a custom object from a hash table._x000D__x000A_                            $hash = [ordered]@{}_x000D__x000A_                            foreach ($result in $_.Group) {_x000D__x000A_                                if     ($result.SideIndicator -ne "=&gt;")      {$hash["_Row"] = $result._Row  }_x000D__x000A_                                elseif (-not $hash["$DiffPrefix Row"])       {$hash["_Row"] = "" }_x000D__x000A_                                #if we have already set the side, this must be the second record, so set side to indicate "changed"; if we got two "Same" indicators we may have a classh of keys_x000D__x000A_                                if     ($hash.Side) {_x000D__x000A_                                    if ($hash.Side -eq $result.SideIndicator) {Write-Warning -Message "'$keyVal' may be a duplicate."}_x000D__x000A_                                        $hash.Side = "&lt;&gt;"_x000D__x000A_                                }_x000D__x000A_                                else   {$hash["Side"] = $result.SideIndicator}_x000D__x000A_                                switch ($hash.side) {_x000D__x000A_                                    '==' {      $hash["$DiffPrefix is"] = 'Same'   }_x000D__x000A_                                    '=&gt;' {      $hash["$DiffPrefix is"] = 'Added'  }_x000D__x000A_                                    '&lt;&gt;' { if (-not $hash["_Row"]) {_x000D__x000A_                                                $hash["$DiffPrefix is"] = 'Added'_x000D__x000A_                                            }_x000D__x000A_                                            else {_x000D__x000A_                                                $hash["$DiffPrefix is"] = 'Changed'_x000D__x000A_                                            }_x000D__x000A_                                         }_x000D__x000A_                                    '&lt;=' {      $hash["$DiffPrefix is"] = 'Removed'}_x000D__x000A_                                    }_x000D__x000A_                                 #find the number of the row in the the "difference" object which has this key. If it is the object is only in the reference this will be blank._x000D__x000A_                                 $hash["$DiffPrefix Row"] = $rowHash[$keyVal]_x000D__x000A_                                 $hash[$Key]              = $keyVal_x000D__x000A_                                 #Create FieldName and/or =&gt;FieldName columns_x000D__x000A_                                 foreach  ($p in $result.psobject.Properties.name.where({$_ -ne $Key -and $_ -ne "SideIndicator" -and $_ -ne "$DiffPrefix Row" })) {_x000D__x000A_                                    if     ($result.SideIndicator -eq "==" -and $p -in $propList)_x000D__x000A_                                                                             {$hash[("$p")] = $hash[("$DiffPrefix $p")] = $result.$P}_x000D__x000A_                                    elseif ($result.SideIndicator -eq "==" -or $result.SideIndicator -eq "&lt;=")_x000D__x000A_                                                                             {$hash[("$p")]                             = $result.$P}_x000D__x000A_                                    elseif ($result.SideIndicator -eq "=&gt;")  {                $hash[("$DiffPrefix $p")] = $result.$P}_x000D__x000A_                                 }_x000D__x000A_                             }_x000D__x000A__x000D__x000A_                             foreach ($k in $hash.keys) {$eDiffProps[$k] = $true}_x000D__x000A_                             [Pscustomobject]$hash_x000D__x000A_     }  | Sort-Object -Property "_row"_x000D__x000A__x000D__x000A_     #Already sorted by reference row number, fill in any blanks in the difference-row column._x000D__x000A_     for ($i = 1; $i -lt $expandedDiff.Count; $i++) {if (-not $expandedDiff[$i]."$DiffPrefix Row") {$expandedDiff[$i]."$DiffPrefix Row" = $expandedDiff[$i-1]."$DiffPrefix Row" } }_x000D__x000A__x000D__x000A_     #Now re-Sort by difference row number, and fill in any blanks in the reference-row column._x000D__x000A_     $expandedDiff = $expandedDiff | Sort-Object -Property "$DiffPrefix Row"_x000D__x000A_     for ($i = 1; $i -lt $expandedDiff.Count; $i++) {if (-not $expandedDiff[$i]."_Row") {$expandedDiff[$i]."_Row" = $expandedDiff[$i-1]."_Row" } }_x000D__x000A__x000D__x000A_     $AllProps = @("_Row") + $OutputProps + $eDiffProps.keys.where({$_ -notin ($outputProps + @("_row","side","SideIndicator","_ALL" ))})_x000D__x000A__x000D__x000A_     if     ($PassThru -or -not $OutputFile) {return  ($expandedDiff | Select-Object -Property $allprops  | Sort-Object -Property  "_row", "$DiffPrefix Row"    )  }_x000D__x000A_     elseif ($PSCmdlet.ShouldProcess($OutputFile,"Write Output to Excel file")) {_x000D__x000A_         $expandedDiff =  $expandedDiff | Sort-Object -Property  "_row", "$DiffPrefix Row"_x000D__x000A_         $xl = $expandedDiff | Select-Object -Property   $OutputProps    | Update-FirstObjectProperties      |_x000D__x000A_           Export-Excel -Path $OutputFile -WorksheetName $OutputSheetName -FreezeTopRow -BoldTopRow -AutoSize -AutoFilter -PassThru_x000D__x000A_         $ws =  $xl.Workbook.Worksheets[$OutputSheetName]_x000D__x000A_         for ($i = 0; $i -lt $expandedDiff.Count; $i++ ) {_x000D__x000A_            if     ( $expandedDiff[$i].side -ne "==" )  {_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range ("A" + ($i + 2 )) -FontColor       $KeyFontColor_x000D__x000A_            }_x000D__x000A_            elseif ( $HideEqual                      )  {$ws.row($i+2).hidden = $true }_x000D__x000A_            if     ( $expandedDiff[$i].side -eq "&lt;&gt;" )  {_x000D__x000A_                $range = $ws.Dimension -replace "\d+",  ($i + 2 )_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range $range            -BackgroundColor $ChangeBackgroundColor_x000D__x000A_            }_x000D__x000A_            elseif ( $expandedDiff[$i].side -eq "&lt;=" )  {_x000D__x000A_                $rangeR1C1 = "R[{0}]C[1]:R[{0}]C[{1}]" -f ($i + 2 ) , $lastRefColNo_x000D__x000A_                $range = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1($rangeR1C1,0,0)_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range $range            -BackgroundColor $DeleteBackgroundColor_x000D__x000A_            }_x000D__x000A_            elseif ( $expandedDiff[$i].side -eq "=&gt;" )  {_x000D__x000A_                if ($propList.count -gt 1) {_x000D__x000A_                    $rangeR1C1 = "R[{0}]C[{1}]:R[{0}]C[{2}]" -f ($i + 2 ) , $FirstDiffColNo , $lastDiffColNo_x000D__x000A_                    $range = [OfficeOpenXml.ExcelAddress]::TranslateFromR1C1($rangeR1C1,0,0)_x000D__x000A_                    Set-ExcelRange -Worksheet $ws -Range $range            -BackgroundColor $AddBackgroundColor_x000D__x000A_                }_x000D__x000A_                Set-ExcelRange -Worksheet $ws     -Range ("A" + ($i + 2 )) -BackgroundColor $AddBackgroundColor_x000D__x000A_            }_x000D__x000A_         }_x000D__x000A_         Close-ExcelPackage -ExcelPackage $xl -Show:$Show_x000D__x000A_     }_x000D__x000A_</S>
      <Obj N="Options" RefId="3256">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Merge</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3257">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Merge-Worksheet</S>
      <Obj N="CommandType" RefId="3258">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3259">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3260">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3261">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Referencefile</S>
            <Obj N="Value" RefId="3262">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Referencefile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3263">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Differencefile</S>
            <Obj N="Value" RefId="3264">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Differencefile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3265">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="3266">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3267">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Startrow</S>
            <Obj N="Value" RefId="3268">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Startrow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3269">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Headername</S>
            <Obj N="Value" RefId="3270">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Headername</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3271">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="3272">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3273">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReferenceObject</S>
            <Obj N="Value" RefId="3274">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReferenceObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3275">
                  <TNRef RefId="25" />
                  <LST>
                    <S>RefObject</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DifferenceObject</S>
            <Obj N="Value" RefId="3276">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DifferenceObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3277">
                  <TNRef RefId="25" />
                  <LST>
                    <S>DiffObject</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DiffPrefix</S>
            <Obj N="Value" RefId="3278">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DiffPrefix</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3279">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputFile</S>
            <Obj N="Value" RefId="3280">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputFile</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3281">
                  <TNRef RefId="25" />
                  <LST>
                    <S>OutFile</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutputSheetName</S>
            <Obj N="Value" RefId="3282">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutputSheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3283">
                  <TNRef RefId="25" />
                  <LST>
                    <S>OutSheet</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Property</S>
            <Obj N="Value" RefId="3284">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Property</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3285">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="3286">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3287">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Key</S>
            <Obj N="Value" RefId="3288">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Key</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3289">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">KeyFontColor</S>
            <Obj N="Value" RefId="3290">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">KeyFontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3291">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChangeBackgroundColor</S>
            <Obj N="Value" RefId="3292">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChangeBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3293">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DeleteBackgroundColor</S>
            <Obj N="Value" RefId="3294">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DeleteBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3295">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AddBackgroundColor</S>
            <Obj N="Value" RefId="3296">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AddBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3297">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HideEqual</S>
            <Obj N="Value" RefId="3298">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HideEqual</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3299">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Passthru</S>
            <Obj N="Value" RefId="3300">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Passthru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3301">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="3302">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3303">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3304">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3305">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3306">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3307">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3308">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3309">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3310">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3311">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3312">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3313">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3314">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3315">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3316">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3317">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3318">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3319">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3320">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3321">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3322">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3323">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3324">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3325">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="3326">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3327">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="3328">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3329">
                  <TNRef RefId="25" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3330">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3331">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -NoHeader [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">C</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3332">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3333">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -Headername &lt;string[]&gt; [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">B</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3334">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3335">
            <TNRef RefId="8" />
            <ToString>[-Referencefile] &lt;Object&gt; [-Differencefile] &lt;Object&gt; [[-WorksheetName] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">A</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3336">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3337">
            <TNRef RefId="8" />
            <ToString>[-Differencefile] &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -NoHeader -ReferenceObject &lt;Object&gt; [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">G</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3338">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3339">
            <TNRef RefId="8" />
            <ToString>[-Differencefile] &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -Headername &lt;string[]&gt; -ReferenceObject &lt;Object&gt; [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">F</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3340">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3341">
            <TNRef RefId="8" />
            <ToString>[-Differencefile] &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -ReferenceObject &lt;Object&gt; [-Startrow &lt;int&gt;] [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">E</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3342">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3343">
            <TNRef RefId="8" />
            <ToString>[-DifferenceObject] &lt;Object&gt; [[-DiffPrefix] &lt;Object&gt;] [[-OutputFile] &lt;Object&gt;] [[-OutputSheetName] &lt;Object&gt;] -ReferenceObject &lt;Object&gt; [-Property &lt;Object&gt;] [-ExcludeProperty &lt;Object&gt;] [-Key &lt;Object&gt;] [-KeyFontColor &lt;Object&gt;] [-ChangeBackgroundColor &lt;Object&gt;] [-DeleteBackgroundColor &lt;Object&gt;] [-AddBackgroundColor &lt;Object&gt;] [-HideEqual] [-Passthru] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">D</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3344">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Merge-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="3345">
    <TNRef RefId="0" />
    <ToString>mkdir</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_&lt;#_x000D__x000A_.FORWARDHELPTARGETNAME New-Item_x000D__x000A_.FORWARDHELPCATEGORY Cmdlet_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_[CmdletBinding(DefaultParameterSetName='pathSet',_x000D__x000A_    SupportsShouldProcess=$true,_x000D__x000A_    SupportsTransactions=$true,_x000D__x000A_    ConfirmImpact='Medium')]_x000D__x000A_    [OutputType([System.IO.DirectoryInfo])]_x000D__x000A_param(_x000D__x000A_    [Parameter(ParameterSetName='nameSet', Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [Parameter(ParameterSetName='pathSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.String[]]_x000D__x000A_    ${Path},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='nameSet', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [AllowNull()]_x000D__x000A_    [AllowEmptyString()]_x000D__x000A_    [System.String]_x000D__x000A_    ${Name},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.Object]_x000D__x000A_    ${Value},_x000D__x000A__x000D__x000A_    [Switch]_x000D__x000A_    ${Force},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.Management.Automation.PSCredential]_x000D__x000A_    ${Credential}_x000D__x000A_)_x000D__x000A__x000D__x000A_begin {_x000D__x000A_    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('New-Item', [System.Management.Automation.CommandTypes]::Cmdlet)_x000D__x000A_    $scriptCmd = {&amp; $wrappedCmd -Type Directory @PSBoundParameters }_x000D__x000A__x000D__x000A_    $steppablePipeline = $scriptCmd.GetSteppablePipeline()_x000D__x000A_    $steppablePipeline.Begin($PSCmdlet)_x000D__x000A_}_x000D__x000A__x000D__x000A_process {_x000D__x000A_    $steppablePipeline.Process($_)_x000D__x000A_}_x000D__x000A__x000D__x000A_end {_x000D__x000A_    $steppablePipeline.End()_x000D__x000A_}_x000D__x000A__x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">pathSet</S>
      <S N="Definition">_x000D__x000A_&lt;#_x000D__x000A_.FORWARDHELPTARGETNAME New-Item_x000D__x000A_.FORWARDHELPCATEGORY Cmdlet_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_[CmdletBinding(DefaultParameterSetName='pathSet',_x000D__x000A_    SupportsShouldProcess=$true,_x000D__x000A_    SupportsTransactions=$true,_x000D__x000A_    ConfirmImpact='Medium')]_x000D__x000A_    [OutputType([System.IO.DirectoryInfo])]_x000D__x000A_param(_x000D__x000A_    [Parameter(ParameterSetName='nameSet', Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [Parameter(ParameterSetName='pathSet', Mandatory=$true, Position=0, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.String[]]_x000D__x000A_    ${Path},_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName='nameSet', Mandatory=$true, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [AllowNull()]_x000D__x000A_    [AllowEmptyString()]_x000D__x000A_    [System.String]_x000D__x000A_    ${Name},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipeline=$true, ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.Object]_x000D__x000A_    ${Value},_x000D__x000A__x000D__x000A_    [Switch]_x000D__x000A_    ${Force},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipelineByPropertyName=$true)]_x000D__x000A_    [System.Management.Automation.PSCredential]_x000D__x000A_    ${Credential}_x000D__x000A_)_x000D__x000A__x000D__x000A_begin {_x000D__x000A_    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('New-Item', [System.Management.Automation.CommandTypes]::Cmdlet)_x000D__x000A_    $scriptCmd = {&amp; $wrappedCmd -Type Directory @PSBoundParameters }_x000D__x000A__x000D__x000A_    $steppablePipeline = $scriptCmd.GetSteppablePipeline()_x000D__x000A_    $steppablePipeline.Begin($PSCmdlet)_x000D__x000A_}_x000D__x000A__x000D__x000A_process {_x000D__x000A_    $steppablePipeline.Process($_)_x000D__x000A_}_x000D__x000A__x000D__x000A_end {_x000D__x000A_    $steppablePipeline.End()_x000D__x000A_}_x000D__x000A__x000D__x000A_</S>
      <Obj N="Options" RefId="3346">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3347">
        <TNRef RefId="2" />
        <LST>
          <S>System.IO.DirectoryInfo</S>
        </LST>
      </Obj>
      <S N="Name">mkdir</S>
      <Obj N="CommandType" RefId="3348">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="3349">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="3350">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3351">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3352">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3353">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="3354">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3355">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="3356">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3357">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Force</S>
            <Obj N="Value" RefId="3358">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Force</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3359">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Credential</S>
            <Obj N="Value" RefId="3360">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Credential</S>
                <S N="ParameterType">System.Management.Automation.PSCredential</S>
                <Obj N="Aliases" RefId="3361">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3362">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3363">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3364">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3365">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3366">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3367">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3368">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3369">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3370">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3371">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3372">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3373">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3374">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3375">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3376">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3377">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3378">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3379">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3380">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3381">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3382">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3383">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="3384">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3385">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="3386">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3387">
                  <TNRef RefId="25" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3388">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3389">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;string[]&gt; [-Value &lt;Object&gt;] [-Force] [-Credential &lt;pscredential&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">pathSet</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="3390">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3391">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string[]&gt;] -Name &lt;string&gt; [-Value &lt;Object&gt;] [-Force] [-Credential &lt;pscredential&gt;] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">nameSet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3392">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::mkdir</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri">https://go.microsoft.com/fwlink/?LinkID=2096592</S>
    </MS>
  </Obj>
  <Obj RefId="3393">
    <TNRef RefId="0" />
    <ToString>Mock</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Mocks the behavior of an existing command with an alternate_x000D__x000A_implementation._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_This creates new behavior for any existing command within the scope of a_x000D__x000A_Describe or Context block. The function allows you to specify a script block_x000D__x000A_that will become the command's new behavior._x000D__x000A__x000D__x000A_Optionally, you may create a Parameter Filter which will examine the_x000D__x000A_parameters passed to the mocked command and will invoke the mocked_x000D__x000A_behavior only if the values of the parameter values pass the filter. If_x000D__x000A_they do not, the original command implementation will be invoked instead_x000D__x000A_of a mock._x000D__x000A__x000D__x000A_You may create multiple mocks for the same command, each using a different_x000D__x000A_ParameterFilter. ParameterFilters will be evaluated in reverse order of_x000D__x000A_their creation. The last one created will be the first to be evaluated._x000D__x000A_The mock of the first filter to pass will be used. The exception to this_x000D__x000A_rule are Mocks with no filters. They will always be evaluated last since_x000D__x000A_they will act as a "catch all" mock._x000D__x000A__x000D__x000A_Mocks can be marked Verifiable. If so, the Assert-VerifiableMock command_x000D__x000A_can be used to check if all Verifiable mocks were actually called. If any_x000D__x000A_verifiable mock is not called, Should -InvokeVerifiable will throw an_x000D__x000A_exception and indicate all mocks not called._x000D__x000A__x000D__x000A_If you wish to mock commands that are called from inside a script module,_x000D__x000A_you can do so by using the -ModuleName parameter to the Mock command. This_x000D__x000A_injects the mock into the specified module. If you do not specify a_x000D__x000A_module name, the mock will be created in the same scope as the test script._x000D__x000A_You may mock the same command multiple times, in different scopes, as needed._x000D__x000A_Each module's mock maintains a separate call history and verified status._x000D__x000A__x000D__x000A_.PARAMETER CommandName_x000D__x000A_The name of the command to be mocked._x000D__x000A__x000D__x000A_.PARAMETER MockWith_x000D__x000A_A ScriptBlock specifying the behavior that will be used to mock CommandName._x000D__x000A_The default is an empty ScriptBlock._x000D__x000A_NOTE: Do not specify param or dynamicparam blocks in this script block._x000D__x000A_These will be injected automatically based on the signature of the command_x000D__x000A_being mocked, and the MockWith script block can contain references to the_x000D__x000A_mocked commands parameter variables._x000D__x000A__x000D__x000A_.PARAMETER Verifiable_x000D__x000A_When this is set, the mock will be checked when Should -InvokeVerifiable is_x000D__x000A_called._x000D__x000A__x000D__x000A_.PARAMETER ParameterFilter_x000D__x000A_An optional filter to limit mocking behavior only to usages of_x000D__x000A_CommandName where the values of the parameters passed to the command_x000D__x000A_pass the filter._x000D__x000A__x000D__x000A_This ScriptBlock must return a boolean value. See examples for usage._x000D__x000A__x000D__x000A_.PARAMETER ModuleName_x000D__x000A_Optional string specifying the name of the module where this command_x000D__x000A_is to be mocked.  This should be a module that _calls_ the mocked_x000D__x000A_command; it doesn't necessarily have to be the same module which_x000D__x000A_originally implemented the command._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterType_x000D__x000A_Optional list of parameter names that should use Object as the parameter_x000D__x000A_type instead of the parameter type defined by the function. This relaxes the_x000D__x000A_type requirements and allows some strongly typed functions to be mocked_x000D__x000A_more easily._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterValidation_x000D__x000A_Optional list of parameter names in the original command_x000D__x000A_that should not have any validation rules applied. This relaxes the_x000D__x000A_validation requirements, and allows functions that are strict about their_x000D__x000A_parameter validation to be mocked more easily._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_This Mock will only be applied to Get-ChildItem calls within the user's temp directory._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Set-Content {} -Verifiable -ParameterFilter { $Path -eq "some_path" -and $Value -eq "Expected Value" }_x000D__x000A__x000D__x000A_When this mock is used, if the Mock is never invoked and Should -InvokeVerifiable is called, an exception will be thrown. The command behavior will do nothing since the ScriptBlock is empty._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\1) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\2) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "C_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\3) }_x000D__x000A_```_x000D__x000A__x000D__x000A_Multiple mocks of the same command may be used. The parameter filter determines which is invoked. Here, if Get-ChildItem is called on the "2" directory of the temp folder, then B_File.txt will be returned._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName="B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName="A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, both mocks could apply since both filters will pass. A_File.TXT will be returned because it was the most recent Mock created._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem c:\windows_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, A_File.TXT will be returned. Since no filter was specified, it will apply to any call to Get-ChildItem that does not pass another filter._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, B_File.TXT will be returned. Even though the filterless mock was created more recently. This illustrates that filterless Mocks are always evaluated last regardless of their creation order._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ModuleName MyTestModule_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem from within the MyTestModule module_x000D__x000A_will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Get-Module -Name ModuleMockExample | Remove-Module_x000D__x000A_New-Module -Name ModuleMockExample  -ScriptBlock {_x000D__x000A_    function Hidden { "Internal Module Function" }_x000D__x000A_    function Exported { Hidden }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function Exported_x000D__x000A_} | Import-Module -Force_x000D__x000A__x000D__x000A_Describe "ModuleMockExample" {_x000D__x000A__x000D__x000A_    It "Hidden function is not directly accessible outside the module" {_x000D__x000A_        { Hidden } | Should -Throw_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Original Hidden function is called" {_x000D__x000A_        Exported | Should -Be "Internal Module Function"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Hidden is replaced with our implementation" {_x000D__x000A_        Mock Hidden { "Mocked" } -ModuleName ModuleMockExample_x000D__x000A_        Exported | Should -Be "Mocked"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_This example shows how calls to commands made from inside a module can be_x000D__x000A_mocked by using the -ModuleName parameter._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Mock_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    # Mock_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [string]$CommandName,_x000D__x000A_        [ScriptBlock]$MockWith = {},_x000D__x000A_        [switch]$Verifiable,_x000D__x000A_        [ScriptBlock]$ParameterFilter,_x000D__x000A_        [string]$ModuleName,_x000D__x000A_        [string[]]$RemoveParameterType,_x000D__x000A_        [string[]]$RemoveParameterValidation_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        # this is to allow mocks in between Describe and It which is discouraged but common_x000D__x000A_        # and will make for an easier move to v5_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Setting up $(if ($ParameterFilter) {"parametrized"} else {"default"}) mock for$(if ($ModuleName) {" $ModuleName -"}) $CommandName."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        $null = Set-ScriptBlockHint -Hint "Unbound MockWith - Captured in Mock" -ScriptBlock $MockWith_x000D__x000A_        $null = if ($ParameterFilter) { Set-ScriptBlockHint -Hint "Unbound ParameterFilter - Captured in Mock" -ScriptBlock $ParameterFilter }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # takes 0.4 ms max_x000D__x000A_    $invokeMockCallBack = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Invoke-Mock', 'function')_x000D__x000A__x000D__x000A_    $mockData = Get-MockDataForCurrentScope_x000D__x000A_    $contextInfo = Resolve-Command $CommandName $ModuleName -SessionState $SessionState_x000D__x000A__x000D__x000A_    if ($contextInfo.IsMockBootstrapFunction) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock resolves to an existing hook, will only define mock behavior."_x000D__x000A_        }_x000D__x000A_        $hook = $contextInfo.Hook_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock does not have a hook yet, creating a new one."_x000D__x000A_        }_x000D__x000A_        $hook = Create-MockHook -ContextInfo $contextInfo -InvokeMockCallback $invokeMockCallBack_x000D__x000A_        $mockData.Hooks.Add($hook)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($mockData.Behaviors.ContainsKey($contextInfo.Command.Name)) {_x000D__x000A_        $behaviors = $mockData.Behaviors[$contextInfo.Command.Name]_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $behaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_        $mockData.Behaviors[$contextInfo.Command.Name] = $behaviors_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $behavior = New-MockBehavior -ContextInfo $contextInfo -MockWith $MockWith -Verifiable:$Verifiable -ParameterFilter $ParameterFilter -Hook $hook_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Adding a new $(if ($behavior.IsDefault) {"default"} else {"parametrized"}) behavior to $(if ($behavior.ModuleName) { " $($behavior.ModuleName) -"})$($behavior.CommandName)."_x000D__x000A_    }_x000D__x000A_    $behaviors.Add($behavior)_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_Mocks the behavior of an existing command with an alternate_x000D__x000A_implementation._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_This creates new behavior for any existing command within the scope of a_x000D__x000A_Describe or Context block. The function allows you to specify a script block_x000D__x000A_that will become the command's new behavior._x000D__x000A__x000D__x000A_Optionally, you may create a Parameter Filter which will examine the_x000D__x000A_parameters passed to the mocked command and will invoke the mocked_x000D__x000A_behavior only if the values of the parameter values pass the filter. If_x000D__x000A_they do not, the original command implementation will be invoked instead_x000D__x000A_of a mock._x000D__x000A__x000D__x000A_You may create multiple mocks for the same command, each using a different_x000D__x000A_ParameterFilter. ParameterFilters will be evaluated in reverse order of_x000D__x000A_their creation. The last one created will be the first to be evaluated._x000D__x000A_The mock of the first filter to pass will be used. The exception to this_x000D__x000A_rule are Mocks with no filters. They will always be evaluated last since_x000D__x000A_they will act as a "catch all" mock._x000D__x000A__x000D__x000A_Mocks can be marked Verifiable. If so, the Assert-VerifiableMock command_x000D__x000A_can be used to check if all Verifiable mocks were actually called. If any_x000D__x000A_verifiable mock is not called, Should -InvokeVerifiable will throw an_x000D__x000A_exception and indicate all mocks not called._x000D__x000A__x000D__x000A_If you wish to mock commands that are called from inside a script module,_x000D__x000A_you can do so by using the -ModuleName parameter to the Mock command. This_x000D__x000A_injects the mock into the specified module. If you do not specify a_x000D__x000A_module name, the mock will be created in the same scope as the test script._x000D__x000A_You may mock the same command multiple times, in different scopes, as needed._x000D__x000A_Each module's mock maintains a separate call history and verified status._x000D__x000A__x000D__x000A_.PARAMETER CommandName_x000D__x000A_The name of the command to be mocked._x000D__x000A__x000D__x000A_.PARAMETER MockWith_x000D__x000A_A ScriptBlock specifying the behavior that will be used to mock CommandName._x000D__x000A_The default is an empty ScriptBlock._x000D__x000A_NOTE: Do not specify param or dynamicparam blocks in this script block._x000D__x000A_These will be injected automatically based on the signature of the command_x000D__x000A_being mocked, and the MockWith script block can contain references to the_x000D__x000A_mocked commands parameter variables._x000D__x000A__x000D__x000A_.PARAMETER Verifiable_x000D__x000A_When this is set, the mock will be checked when Should -InvokeVerifiable is_x000D__x000A_called._x000D__x000A__x000D__x000A_.PARAMETER ParameterFilter_x000D__x000A_An optional filter to limit mocking behavior only to usages of_x000D__x000A_CommandName where the values of the parameters passed to the command_x000D__x000A_pass the filter._x000D__x000A__x000D__x000A_This ScriptBlock must return a boolean value. See examples for usage._x000D__x000A__x000D__x000A_.PARAMETER ModuleName_x000D__x000A_Optional string specifying the name of the module where this command_x000D__x000A_is to be mocked.  This should be a module that _calls_ the mocked_x000D__x000A_command; it doesn't necessarily have to be the same module which_x000D__x000A_originally implemented the command._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterType_x000D__x000A_Optional list of parameter names that should use Object as the parameter_x000D__x000A_type instead of the parameter type defined by the function. This relaxes the_x000D__x000A_type requirements and allows some strongly typed functions to be mocked_x000D__x000A_more easily._x000D__x000A__x000D__x000A_.PARAMETER RemoveParameterValidation_x000D__x000A_Optional list of parameter names in the original command_x000D__x000A_that should not have any validation rules applied. This relaxes the_x000D__x000A_validation requirements, and allows functions that are strict about their_x000D__x000A_parameter validation to be mocked more easily._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_This Mock will only be applied to Get-ChildItem calls within the user's temp directory._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Set-Content {} -Verifiable -ParameterFilter { $Path -eq "some_path" -and $Value -eq "Expected Value" }_x000D__x000A__x000D__x000A_When this mock is used, if the Mock is never invoked and Should -InvokeVerifiable is called, an exception will be thrown. The command behavior will do nothing since the ScriptBlock is empty._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\1) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\2) }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "C_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp\3) }_x000D__x000A_```_x000D__x000A__x000D__x000A_Multiple mocks of the same command may be used. The parameter filter determines which is invoked. Here, if Get-ChildItem is called on the "2" directory of the temp folder, then B_File.txt will be returned._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName="B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName="A_File.TXT"} } -ParameterFilter { $Path -and $Path.StartsWith($env:temp) }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, both mocks could apply since both filters will pass. A_File.TXT will be returned because it was the most recent Mock created._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem c:\windows_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, A_File.TXT will be returned. Since no filter was specified, it will apply to any call to Get-ChildItem that does not pass another filter._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Mock Get-ChildItem { return @{FullName = "B_File.TXT"} } -ParameterFilter { $Path -eq "$env:temp\me" }_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} }_x000D__x000A__x000D__x000A_Get-ChildItem $env:temp\me_x000D__x000A_```_x000D__x000A__x000D__x000A_Here, B_File.TXT will be returned. Even though the filterless mock was created more recently. This illustrates that filterless Mocks are always evaluated last regardless of their creation order._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_Mock Get-ChildItem { return @{FullName = "A_File.TXT"} } -ModuleName MyTestModule_x000D__x000A__x000D__x000A_Using this Mock, all calls to Get-ChildItem from within the MyTestModule module_x000D__x000A_will return a hashtable with a FullName property returning "A_File.TXT"_x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_Get-Module -Name ModuleMockExample | Remove-Module_x000D__x000A_New-Module -Name ModuleMockExample  -ScriptBlock {_x000D__x000A_    function Hidden { "Internal Module Function" }_x000D__x000A_    function Exported { Hidden }_x000D__x000A__x000D__x000A_    Export-ModuleMember -Function Exported_x000D__x000A_} | Import-Module -Force_x000D__x000A__x000D__x000A_Describe "ModuleMockExample" {_x000D__x000A__x000D__x000A_    It "Hidden function is not directly accessible outside the module" {_x000D__x000A_        { Hidden } | Should -Throw_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Original Hidden function is called" {_x000D__x000A_        Exported | Should -Be "Internal Module Function"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    It "Hidden is replaced with our implementation" {_x000D__x000A_        Mock Hidden { "Mocked" } -ModuleName ModuleMockExample_x000D__x000A_        Exported | Should -Be "Mocked"_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_```_x000D__x000A__x000D__x000A_This example shows how calls to commands made from inside a module can be_x000D__x000A_mocked by using the -ModuleName parameter._x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/Mock_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A_    # Mock_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [string]$CommandName,_x000D__x000A_        [ScriptBlock]$MockWith = {},_x000D__x000A_        [switch]$Verifiable,_x000D__x000A_        [ScriptBlock]$ParameterFilter,_x000D__x000A_        [string]$ModuleName,_x000D__x000A_        [string[]]$RemoveParameterType,_x000D__x000A_        [string[]]$RemoveParameterValidation_x000D__x000A_    )_x000D__x000A_    if (Is-Discovery) {_x000D__x000A_        # this is to allow mocks in between Describe and It which is discouraged but common_x000D__x000A_        # and will make for an easier move to v5_x000D__x000A_        return_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Setting up $(if ($ParameterFilter) {"parametrized"} else {"default"}) mock for$(if ($ModuleName) {" $ModuleName -"}) $CommandName."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $SessionState = $PSCmdlet.SessionState_x000D__x000A__x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        $null = Set-ScriptBlockHint -Hint "Unbound MockWith - Captured in Mock" -ScriptBlock $MockWith_x000D__x000A_        $null = if ($ParameterFilter) { Set-ScriptBlockHint -Hint "Unbound ParameterFilter - Captured in Mock" -ScriptBlock $ParameterFilter }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    # takes 0.4 ms max_x000D__x000A_    $invokeMockCallBack = $ExecutionContext.SessionState.InvokeCommand.GetCommand('Invoke-Mock', 'function')_x000D__x000A__x000D__x000A_    $mockData = Get-MockDataForCurrentScope_x000D__x000A_    $contextInfo = Resolve-Command $CommandName $ModuleName -SessionState $SessionState_x000D__x000A__x000D__x000A_    if ($contextInfo.IsMockBootstrapFunction) {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock resolves to an existing hook, will only define mock behavior."_x000D__x000A_        }_x000D__x000A_        $hook = $contextInfo.Hook_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_            Write-PesterDebugMessage -Scope Mock -Message "Mock does not have a hook yet, creating a new one."_x000D__x000A_        }_x000D__x000A_        $hook = Create-MockHook -ContextInfo $contextInfo -InvokeMockCallback $invokeMockCallBack_x000D__x000A_        $mockData.Hooks.Add($hook)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ($mockData.Behaviors.ContainsKey($contextInfo.Command.Name)) {_x000D__x000A_        $behaviors = $mockData.Behaviors[$contextInfo.Command.Name]_x000D__x000A_    }_x000D__x000A_    else {_x000D__x000A_        $behaviors = [System.Collections.Generic.List[Object]]@()_x000D__x000A_        $mockData.Behaviors[$contextInfo.Command.Name] = $behaviors_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $behavior = New-MockBehavior -ContextInfo $contextInfo -MockWith $MockWith -Verifiable:$Verifiable -ParameterFilter $ParameterFilter -Hook $hook_x000D__x000A_    if ($PesterPreference.Debug.WriteDebugMessages.Value) {_x000D__x000A_        Write-PesterDebugMessage -Scope Mock -Message "Adding a new $(if ($behavior.IsDefault) {"default"} else {"parametrized"}) behavior to $(if ($behavior.ModuleName) { " $($behavior.ModuleName) -"})$($behavior.CommandName)."_x000D__x000A_    }_x000D__x000A_    $behaviors.Add($behavior)_x000D__x000A_</S>
      <Obj N="Options" RefId="3394">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3395">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Mock</S>
      <Obj N="CommandType" RefId="3396">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="3397">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="3398">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3399">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="3400">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3401">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MockWith</S>
            <Obj N="Value" RefId="3402">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MockWith</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="3403">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verifiable</S>
            <Obj N="Value" RefId="3404">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verifiable</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3405">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ParameterFilter</S>
            <Obj N="Value" RefId="3406">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ParameterFilter</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="3407">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModuleName</S>
            <Obj N="Value" RefId="3408">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3409">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RemoveParameterType</S>
            <Obj N="Value" RefId="3410">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RemoveParameterType</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3411">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RemoveParameterValidation</S>
            <Obj N="Value" RefId="3412">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RemoveParameterValidation</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3413">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3414">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3415">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3416">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3417">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3418">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3419">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3420">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3421">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3422">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3423">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3424">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3425">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3426">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3427">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3428">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3429">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3430">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3431">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3432">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3433">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3434">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3435">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3436">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3437">
            <TNRef RefId="8" />
            <ToString>[[-CommandName] &lt;string&gt;] [[-MockWith] &lt;scriptblock&gt;] [[-ParameterFilter] &lt;scriptblock&gt;] [[-ModuleName] &lt;string&gt;] [[-RemoveParameterType] &lt;string[]&gt;] [[-RemoveParameterValidation] &lt;string[]&gt;] [-Verifiable] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3438">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Mock</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Mock</S>
    </MS>
  </Obj>
  <Obj RefId="3439">
    <TNRef RefId="0" />
    <ToString>N:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="3440">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3441">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">N:</S>
      <Obj N="CommandType" RefId="3442">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="3443">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="3444">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3445">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="3446">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3447">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3448">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::N:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3449">
    <TNRef RefId="0" />
    <ToString>New-ConditionalFormattingIconSet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        $Range,_x000D__x000A_        [ValidateSet("ThreeIconSet","FourIconSet","FiveIconSet")]_x000D__x000A_        $ConditionalFormat,_x000D__x000A_        [Switch]$Reverse_x000D__x000A_    )_x000D__x000A__x000D__x000A_    DynamicParam {_x000D__x000A_        $IconType = New-Object System.Management.Automation.ParameterAttribute_x000D__x000A_        $IconType.Position = 2_x000D__x000A_        $IconType.Mandatory = $true_x000D__x000A__x000D__x000A_        $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A__x000D__x000A_        $attributeCollection.Add($IconType)_x000D__x000A__x000D__x000A_        switch ($ConditionalFormat) {_x000D__x000A_            "ThreeIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            "FourIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            "FiveIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A__x000D__x000A_        $paramDictionary.Add('IconType', $IconTypeParam)_x000D__x000A__x000D__x000A_        return $paramDictionary_x000D__x000A_    }_x000D__x000A__x000D__x000A_    End {_x000D__x000A__x000D__x000A_        $bp = @{}+$PSBoundParameters_x000D__x000A__x000D__x000A_        $obj = [PSCustomObject]@{_x000D__x000A_            Range     = $Range_x000D__x000A_            Formatter = $ConditionalFormat_x000D__x000A_            IconType  = $bp.IconType_x000D__x000A_            Reverse   = $Reverse_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $obj.pstypenames.Clear()_x000D__x000A_        $obj.pstypenames.Add("ConditionalFormatIconSet")_x000D__x000A__x000D__x000A_        $obj_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        $Range,_x000D__x000A_        [ValidateSet("ThreeIconSet","FourIconSet","FiveIconSet")]_x000D__x000A_        $ConditionalFormat,_x000D__x000A_        [Switch]$Reverse_x000D__x000A_    )_x000D__x000A__x000D__x000A_    DynamicParam {_x000D__x000A_        $IconType = New-Object System.Management.Automation.ParameterAttribute_x000D__x000A_        $IconType.Position = 2_x000D__x000A_        $IconType.Mandatory = $true_x000D__x000A__x000D__x000A_        $attributeCollection = New-Object System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A__x000D__x000A_        $attributeCollection.Add($IconType)_x000D__x000A__x000D__x000A_        switch ($ConditionalFormat) {_x000D__x000A_            "ThreeIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting3IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            "FourIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting4IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A__x000D__x000A_            "FiveIconSet" {_x000D__x000A_                $IconTypeParam = New-Object System.Management.Automation.RuntimeDefinedParameter('IconType', [OfficeOpenXml.ConditionalFormatting.eExcelconditionalFormatting5IconsSetType], $attributeCollection)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $paramDictionary = New-Object System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A__x000D__x000A_        $paramDictionary.Add('IconType', $IconTypeParam)_x000D__x000A__x000D__x000A_        return $paramDictionary_x000D__x000A_    }_x000D__x000A__x000D__x000A_    End {_x000D__x000A__x000D__x000A_        $bp = @{}+$PSBoundParameters_x000D__x000A__x000D__x000A_        $obj = [PSCustomObject]@{_x000D__x000A_            Range     = $Range_x000D__x000A_            Formatter = $ConditionalFormat_x000D__x000A_            IconType  = $bp.IconType_x000D__x000A_            Reverse   = $Reverse_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $obj.pstypenames.Clear()_x000D__x000A_        $obj.pstypenames.Add("ConditionalFormatIconSet")_x000D__x000A__x000D__x000A_        $obj_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3450">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">ConditionalFormattingIconSet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3451">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-ConditionalFormattingIconSet</S>
      <Obj N="CommandType" RefId="3452">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3453">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3454">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3455">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="3456">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3457">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalFormat</S>
            <Obj N="Value" RefId="3458">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3459">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Reverse</S>
            <Obj N="Value" RefId="3460">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Reverse</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3461">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3462">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3463">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3464">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3465">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3466">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3467">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3468">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3469">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3470">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3471">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3472">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3473">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3474">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3475">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3476">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3477">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3478">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3479">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3480">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3481">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3482">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3483">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3484">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3485">
            <TNRef RefId="8" />
            <ToString>[-Range] &lt;Object&gt; [[-ConditionalFormat] &lt;Object&gt;] [-Reverse] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3486">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-ConditionalFormattingIconSet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3487">
    <TNRef RefId="0" />
    <ToString>New-ConditionalText</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        #[Parameter(Mandatory=$true)]_x000D__x000A_        [Alias('ConditionValue')]_x000D__x000A_        $Text,_x000D__x000A_        [Alias('ForeGroundColor')]_x000D__x000A_        $ConditionalTextColor=[System.Drawing.Color]::DarkRed,_x000D__x000A_        $BackgroundColor=[System.Drawing.Color]::LightPink,_x000D__x000A_        [String]$Range,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$PatternType=[OfficeOpenXml.Style.ExcelFillStyle]::Solid,_x000D__x000A_        [ValidateSet(_x000D__x000A_            'LessThan',        'LessThanOrEqual',      'GreaterThan',    'GreaterThanOrEqual',_x000D__x000A_            'Equal',           'NotEqual',_x000D__x000A_            'Top',             'TopPercent',           'Bottom',         'BottomPercent',_x000D__x000A_            'ContainsText',    'NotContainsText',      'BeginsWith',     'EndsWith',_x000D__x000A_            'ContainsBlanks',  'NotContainsBlanks',    'ContainsErrors', 'NotContainsErrors',_x000D__x000A_            'DuplicateValues', 'UniqueValues',_x000D__x000A_            'Tomorrow',        'Today',                'Yesterday',      'Last7Days',_x000D__x000A_            'NextWeek',        'ThisWeek',             'LastWeek',_x000D__x000A_            'NextMonth',       'ThisMonth',            'LastMonth',_x000D__x000A_            'AboveAverage',    'AboveOrEqualAverage',  'BelowAverage',  'BelowOrEqualAverage',_x000D__x000A_            'Expression'_x000D__x000A_        )]_x000D__x000A_        [Alias('RuleType')]_x000D__x000A_        $ConditionalType='ContainsText'_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $obj = [PSCustomObject]@{_x000D__x000A_        Text                 = $Text_x000D__x000A_        ConditionalTextColor = $ConditionalTextColor_x000D__x000A_        ConditionalType      = $ConditionalType_x000D__x000A_        PatternType          = $PatternType_x000D__x000A_        Range                = $Range_x000D__x000A_        BackgroundColor      = $BackgroundColor_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $obj.pstypenames.Clear()_x000D__x000A_    $obj.pstypenames.Add("ConditionalText")_x000D__x000A_    $obj_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        #[Parameter(Mandatory=$true)]_x000D__x000A_        [Alias('ConditionValue')]_x000D__x000A_        $Text,_x000D__x000A_        [Alias('ForeGroundColor')]_x000D__x000A_        $ConditionalTextColor=[System.Drawing.Color]::DarkRed,_x000D__x000A_        $BackgroundColor=[System.Drawing.Color]::LightPink,_x000D__x000A_        [String]$Range,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$PatternType=[OfficeOpenXml.Style.ExcelFillStyle]::Solid,_x000D__x000A_        [ValidateSet(_x000D__x000A_            'LessThan',        'LessThanOrEqual',      'GreaterThan',    'GreaterThanOrEqual',_x000D__x000A_            'Equal',           'NotEqual',_x000D__x000A_            'Top',             'TopPercent',           'Bottom',         'BottomPercent',_x000D__x000A_            'ContainsText',    'NotContainsText',      'BeginsWith',     'EndsWith',_x000D__x000A_            'ContainsBlanks',  'NotContainsBlanks',    'ContainsErrors', 'NotContainsErrors',_x000D__x000A_            'DuplicateValues', 'UniqueValues',_x000D__x000A_            'Tomorrow',        'Today',                'Yesterday',      'Last7Days',_x000D__x000A_            'NextWeek',        'ThisWeek',             'LastWeek',_x000D__x000A_            'NextMonth',       'ThisMonth',            'LastMonth',_x000D__x000A_            'AboveAverage',    'AboveOrEqualAverage',  'BelowAverage',  'BelowOrEqualAverage',_x000D__x000A_            'Expression'_x000D__x000A_        )]_x000D__x000A_        [Alias('RuleType')]_x000D__x000A_        $ConditionalType='ContainsText'_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $obj = [PSCustomObject]@{_x000D__x000A_        Text                 = $Text_x000D__x000A_        ConditionalTextColor = $ConditionalTextColor_x000D__x000A_        ConditionalType      = $ConditionalType_x000D__x000A_        PatternType          = $PatternType_x000D__x000A_        Range                = $Range_x000D__x000A_        BackgroundColor      = $BackgroundColor_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $obj.pstypenames.Clear()_x000D__x000A_    $obj.pstypenames.Add("ConditionalText")_x000D__x000A_    $obj_x000D__x000A_</S>
      <Obj N="Options" RefId="3488">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">ConditionalText</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3489">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-ConditionalText</S>
      <Obj N="CommandType" RefId="3490">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3491">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3492">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3493">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Text</S>
            <Obj N="Value" RefId="3494">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Text</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3495">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ConditionValue</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalTextColor</S>
            <Obj N="Value" RefId="3496">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalTextColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3497">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ForeGroundColor</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="3498">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3499">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="3500">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3501">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternType</S>
            <Obj N="Value" RefId="3502">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternType</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="3503">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalType</S>
            <Obj N="Value" RefId="3504">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalType</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3505">
                  <TNRef RefId="25" />
                  <LST>
                    <S>RuleType</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3506">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3507">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3508">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3509">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3510">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3511">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3512">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3513">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3514">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3515">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3516">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3517">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3518">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3519">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3520">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3521">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3522">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3523">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3524">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3525">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3526">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3527">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3528">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3529">
            <TNRef RefId="8" />
            <ToString>[[-Text] &lt;Object&gt;] [[-ConditionalTextColor] &lt;Object&gt;] [[-BackgroundColor] &lt;Object&gt;] [[-Range] &lt;string&gt;] [[-PatternType] &lt;ExcelFillStyle&gt;] [[-ConditionalType] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3530">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-ConditionalText</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3531">
    <TNRef RefId="0" />
    <ToString>New-EditorFile</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter()]_x000D__x000A_        [String[]]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        $Path,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $Value,_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [switch]_x000D__x000A_        $Force_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $valueList = @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $valueList += $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        # If editorContext is null, then we're in a Temp session and_x000D__x000A_        # this cmdlet won't work so return early._x000D__x000A_        $editorContext = $psEditor.GetEditorContext()_x000D__x000A_        if (!$editorContext) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Path) {_x000D__x000A_            foreach ($fileName in $Path)_x000D__x000A_            {_x000D__x000A_                if (-not (Test-Path $fileName) -or $Force) {_x000D__x000A_                    New-Item -Path $fileName -ItemType File | Out-Null_x000D__x000A__x000D__x000A_                    if ($Path.Count -gt 1) {_x000D__x000A_                        $preview = $false_x000D__x000A_                    } else {_x000D__x000A_                        $preview = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    # Resolve full path before passing to editor_x000D__x000A_                    if (!([System.IO.Path]::IsPathRooted($fileName))) {_x000D__x000A_                        $fileName = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($fileName)_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    $psEditor.Workspace.OpenFile($fileName, $preview)_x000D__x000A_                    $editorContext.CurrentFile.InsertText(($valueList | Out-String))_x000D__x000A_                } else {_x000D__x000A_                    $PSCmdlet.WriteError( (_x000D__x000A_                        New-Object -TypeName System.Management.Automation.ErrorRecord -ArgumentList @(_x000D__x000A_                            [System.IO.IOException]"The file '$fileName' already exists.",_x000D__x000A_                            'NewEditorFileIOError',_x000D__x000A_                            [System.Management.Automation.ErrorCategory]::WriteError,_x000D__x000A_                            $fileName) ) )_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        } else {_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_            $editorContext.CurrentFile.InsertText(($valueList | Out-String))_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter()]_x000D__x000A_        [String[]]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        $Path,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $Value,_x000D__x000A__x000D__x000A_        [Parameter()]_x000D__x000A_        [switch]_x000D__x000A_        $Force_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $valueList = @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $valueList += $Value_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        # If editorContext is null, then we're in a Temp session and_x000D__x000A_        # this cmdlet won't work so return early._x000D__x000A_        $editorContext = $psEditor.GetEditorContext()_x000D__x000A_        if (!$editorContext) {_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($Path) {_x000D__x000A_            foreach ($fileName in $Path)_x000D__x000A_            {_x000D__x000A_                if (-not (Test-Path $fileName) -or $Force) {_x000D__x000A_                    New-Item -Path $fileName -ItemType File | Out-Null_x000D__x000A__x000D__x000A_                    if ($Path.Count -gt 1) {_x000D__x000A_                        $preview = $false_x000D__x000A_                    } else {_x000D__x000A_                        $preview = $true_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    # Resolve full path before passing to editor_x000D__x000A_                    if (!([System.IO.Path]::IsPathRooted($fileName))) {_x000D__x000A_                        $fileName = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($fileName)_x000D__x000A_                    }_x000D__x000A__x000D__x000A_                    $psEditor.Workspace.OpenFile($fileName, $preview)_x000D__x000A_                    $editorContext.CurrentFile.InsertText(($valueList | Out-String))_x000D__x000A_                } else {_x000D__x000A_                    $PSCmdlet.WriteError( (_x000D__x000A_                        New-Object -TypeName System.Management.Automation.ErrorRecord -ArgumentList @(_x000D__x000A_                            [System.IO.IOException]"The file '$fileName' already exists.",_x000D__x000A_                            'NewEditorFileIOError',_x000D__x000A_                            [System.Management.Automation.ErrorCategory]::WriteError,_x000D__x000A_                            $fileName) ) )_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        } else {_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_            $editorContext.CurrentFile.InsertText(($valueList | Out-String))_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3532">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">EditorFile</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3533">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-EditorFile</S>
      <Obj N="CommandType" RefId="3534">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="3535">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="3536">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3537">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3538">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3539">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="3540">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3541">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Force</S>
            <Obj N="Value" RefId="3542">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Force</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3543">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3544">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3545">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3546">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3547">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3548">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3549">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3550">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3551">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3552">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3553">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3554">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3555">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3556">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3557">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3558">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3559">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3560">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3561">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3562">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3563">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3564">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3565">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3566">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3567">
            <TNRef RefId="8" />
            <ToString>[[-Path] &lt;string[]&gt;] [[-Value] &lt;Object&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3568">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-EditorFile</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3569">
    <TNRef RefId="0" />
    <ToString>New-ExcelChartDefinition</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [Alias("New-ExcelChart")] #This was the former name. The new name reflects that we are defining a chart, not making one in the workbook._x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '', Justification = 'Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        $Title = "Chart Title",_x000D__x000A_        $Header,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = "ColumnStacked",_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eTrendLine[]]$ChartTrendLine,_x000D__x000A_        $XRange,_x000D__x000A_        $YRange,_x000D__x000A_        $Width = 500,_x000D__x000A_        $Height = 350,_x000D__x000A_        $Row = 0,_x000D__x000A_        $RowOffSetPixels = 10,_x000D__x000A_        $Column = 6,_x000D__x000A_        $ColumnOffSetPixels = 5,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eLegendPosition]$LegendPosition,_x000D__x000A_        $LegendSize,_x000D__x000A_        [Switch]$LegendBold,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        $SeriesHeader,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize ,_x000D__x000A_        [String]$XAxisTitleText,_x000D__x000A_        [Switch]$XAxisTitleBold,_x000D__x000A_        $XAxisTitleSize ,_x000D__x000A_        [string]$XAxisNumberformat,_x000D__x000A_        $XMajorUnit,_x000D__x000A_        $XMinorUnit,_x000D__x000A_        $XMaxValue,_x000D__x000A_        $XMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$XAxisPosition        ,_x000D__x000A_        [String]$YAxisTitleText,_x000D__x000A_        [Switch]$YAxisTitleBold,_x000D__x000A_        $YAxisTitleSize,_x000D__x000A_        [string]$YAxisNumberformat,_x000D__x000A_        $YMajorUnit,_x000D__x000A_        $YMinorUnit,_x000D__x000A_        $YMaxValue,_x000D__x000A_        $YMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$YAxisPosition_x000D__x000A_    )_x000D__x000A_    if ( $Header ) { Write-Warning "The header parameter is ignored." } #Nothing was done with it when creating a chart._x000D__x000A_    #might be able to do [PSCustomObject]$PsboundParameters,   the defaults here match those in Add-Excel Chart_x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Title              = $Title_x000D__x000A_        ChartType          = $ChartType_x000D__x000A_        ChartTrendLine     = $ChartTrendLine_x000D__x000A_        XRange             = $XRange_x000D__x000A_        YRange             = $YRange_x000D__x000A_        Width              = $Width_x000D__x000A_        Height             = $Height_x000D__x000A_        Row                = $Row_x000D__x000A_        RowOffSetPixels    = $RowOffSetPixels_x000D__x000A_        Column             = $Column_x000D__x000A_        ColumnOffSetPixels = $ColumnOffSetPixels_x000D__x000A_        LegendPosition     = $LegendPosition_x000D__x000A_        LegendSize         = $LegendSize_x000D__x000A_        Legendbold         = $LegendBold_x000D__x000A_        NoLegend           = $NoLegend -as [Boolean]_x000D__x000A_        ShowCategory       = $ShowCategory -as [Boolean]_x000D__x000A_        ShowPercent        = $ShowPercent -as [Boolean]_x000D__x000A_        SeriesHeader       = $SeriesHeader_x000D__x000A_        TitleBold          = $TitleBold -as [Boolean]_x000D__x000A_        TitleSize          = $TitleSize_x000D__x000A_        XAxisTitleText     = $XAxisTitleText_x000D__x000A_        XAxisTitleBold     = $XAxisTitleBold -as [Boolean]_x000D__x000A_        XAxisTitleSize     = $XAxisTitleSize_x000D__x000A_        XAxisNumberformat  = $XAxisNumberformat_x000D__x000A_        XMajorUnit         = $XMajorUnit_x000D__x000A_        XMinorUnit         = $XMinorUnit_x000D__x000A_        XMaxValue          = $XMaxValue_x000D__x000A_        XMinValue          = $XMinValue_x000D__x000A_        XAxisPosition      = $XAxisPosition_x000D__x000A_        YAxisTitleText     = $YAxisTitleText_x000D__x000A_        YAxisTitleBold     = $YAxisTitleBold -as [Boolean]_x000D__x000A_        YAxisTitleSize     = $YAxisTitleSize_x000D__x000A_        YAxisNumberformat  = $YAxisNumberformat_x000D__x000A_        YMajorUnit         = $YMajorUnit_x000D__x000A_        YMinorUnit         = $YMinorUnit_x000D__x000A_        YMaxValue          = $YMaxValue_x000D__x000A_        YMinValue          = $YMinValue_x000D__x000A_        YAxisPosition      = $YAxisPosition_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [Alias("New-ExcelChart")] #This was the former name. The new name reflects that we are defining a chart, not making one in the workbook._x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '', Justification = 'Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        $Title = "Chart Title",_x000D__x000A_        $Header,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = "ColumnStacked",_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eTrendLine[]]$ChartTrendLine,_x000D__x000A_        $XRange,_x000D__x000A_        $YRange,_x000D__x000A_        $Width = 500,_x000D__x000A_        $Height = 350,_x000D__x000A_        $Row = 0,_x000D__x000A_        $RowOffSetPixels = 10,_x000D__x000A_        $Column = 6,_x000D__x000A_        $ColumnOffSetPixels = 5,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eLegendPosition]$LegendPosition,_x000D__x000A_        $LegendSize,_x000D__x000A_        [Switch]$LegendBold,_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        $SeriesHeader,_x000D__x000A_        [Switch]$TitleBold,_x000D__x000A_        [Int]$TitleSize ,_x000D__x000A_        [String]$XAxisTitleText,_x000D__x000A_        [Switch]$XAxisTitleBold,_x000D__x000A_        $XAxisTitleSize ,_x000D__x000A_        [string]$XAxisNumberformat,_x000D__x000A_        $XMajorUnit,_x000D__x000A_        $XMinorUnit,_x000D__x000A_        $XMaxValue,_x000D__x000A_        $XMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$XAxisPosition        ,_x000D__x000A_        [String]$YAxisTitleText,_x000D__x000A_        [Switch]$YAxisTitleBold,_x000D__x000A_        $YAxisTitleSize,_x000D__x000A_        [string]$YAxisNumberformat,_x000D__x000A_        $YMajorUnit,_x000D__x000A_        $YMinorUnit,_x000D__x000A_        $YMaxValue,_x000D__x000A_        $YMinValue,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eAxisPosition]$YAxisPosition_x000D__x000A_    )_x000D__x000A_    if ( $Header ) { Write-Warning "The header parameter is ignored." } #Nothing was done with it when creating a chart._x000D__x000A_    #might be able to do [PSCustomObject]$PsboundParameters,   the defaults here match those in Add-Excel Chart_x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Title              = $Title_x000D__x000A_        ChartType          = $ChartType_x000D__x000A_        ChartTrendLine     = $ChartTrendLine_x000D__x000A_        XRange             = $XRange_x000D__x000A_        YRange             = $YRange_x000D__x000A_        Width              = $Width_x000D__x000A_        Height             = $Height_x000D__x000A_        Row                = $Row_x000D__x000A_        RowOffSetPixels    = $RowOffSetPixels_x000D__x000A_        Column             = $Column_x000D__x000A_        ColumnOffSetPixels = $ColumnOffSetPixels_x000D__x000A_        LegendPosition     = $LegendPosition_x000D__x000A_        LegendSize         = $LegendSize_x000D__x000A_        Legendbold         = $LegendBold_x000D__x000A_        NoLegend           = $NoLegend -as [Boolean]_x000D__x000A_        ShowCategory       = $ShowCategory -as [Boolean]_x000D__x000A_        ShowPercent        = $ShowPercent -as [Boolean]_x000D__x000A_        SeriesHeader       = $SeriesHeader_x000D__x000A_        TitleBold          = $TitleBold -as [Boolean]_x000D__x000A_        TitleSize          = $TitleSize_x000D__x000A_        XAxisTitleText     = $XAxisTitleText_x000D__x000A_        XAxisTitleBold     = $XAxisTitleBold -as [Boolean]_x000D__x000A_        XAxisTitleSize     = $XAxisTitleSize_x000D__x000A_        XAxisNumberformat  = $XAxisNumberformat_x000D__x000A_        XMajorUnit         = $XMajorUnit_x000D__x000A_        XMinorUnit         = $XMinorUnit_x000D__x000A_        XMaxValue          = $XMaxValue_x000D__x000A_        XMinValue          = $XMinValue_x000D__x000A_        XAxisPosition      = $XAxisPosition_x000D__x000A_        YAxisTitleText     = $YAxisTitleText_x000D__x000A_        YAxisTitleBold     = $YAxisTitleBold -as [Boolean]_x000D__x000A_        YAxisTitleSize     = $YAxisTitleSize_x000D__x000A_        YAxisNumberformat  = $YAxisNumberformat_x000D__x000A_        YMajorUnit         = $YMajorUnit_x000D__x000A_        YMinorUnit         = $YMinorUnit_x000D__x000A_        YMaxValue          = $YMaxValue_x000D__x000A_        YMinValue          = $YMinValue_x000D__x000A_        YAxisPosition      = $YAxisPosition_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3570">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">ExcelChartDefinition</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3571">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-ExcelChartDefinition</S>
      <Obj N="CommandType" RefId="3572">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3573">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3574">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3575">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Title</S>
            <Obj N="Value" RefId="3576">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3577">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Header</S>
            <Obj N="Value" RefId="3578">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Header</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3579">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="3580">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="3581">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartTrendLine</S>
            <Obj N="Value" RefId="3582">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartTrendLine</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eTrendLine[]</S>
                <Obj N="Aliases" RefId="3583">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XRange</S>
            <Obj N="Value" RefId="3584">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3585">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YRange</S>
            <Obj N="Value" RefId="3586">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3587">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="3588">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3589">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Height</S>
            <Obj N="Value" RefId="3590">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Height</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3591">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Row</S>
            <Obj N="Value" RefId="3592">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Row</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3593">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RowOffSetPixels</S>
            <Obj N="Value" RefId="3594">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RowOffSetPixels</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3595">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Column</S>
            <Obj N="Value" RefId="3596">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Column</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3597">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ColumnOffSetPixels</S>
            <Obj N="Value" RefId="3598">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ColumnOffSetPixels</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3599">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendPosition</S>
            <Obj N="Value" RefId="3600">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eLegendPosition</S>
                <Obj N="Aliases" RefId="3601">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendSize</S>
            <Obj N="Value" RefId="3602">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3603">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LegendBold</S>
            <Obj N="Value" RefId="3604">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LegendBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3605">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="3606">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3607">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="3608">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3609">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="3610">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3611">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SeriesHeader</S>
            <Obj N="Value" RefId="3612">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SeriesHeader</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3613">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBold</S>
            <Obj N="Value" RefId="3614">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3615">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleSize</S>
            <Obj N="Value" RefId="3616">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3617">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleText</S>
            <Obj N="Value" RefId="3618">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleText</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3619">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleBold</S>
            <Obj N="Value" RefId="3620">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3621">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisTitleSize</S>
            <Obj N="Value" RefId="3622">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisTitleSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3623">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisNumberformat</S>
            <Obj N="Value" RefId="3624">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisNumberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3625">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMajorUnit</S>
            <Obj N="Value" RefId="3626">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMajorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3627">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMinorUnit</S>
            <Obj N="Value" RefId="3628">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMinorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3629">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMaxValue</S>
            <Obj N="Value" RefId="3630">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMaxValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3631">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XMinValue</S>
            <Obj N="Value" RefId="3632">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XMinValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3633">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">XAxisPosition</S>
            <Obj N="Value" RefId="3634">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">XAxisPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eAxisPosition</S>
                <Obj N="Aliases" RefId="3635">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleText</S>
            <Obj N="Value" RefId="3636">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleText</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3637">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleBold</S>
            <Obj N="Value" RefId="3638">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3639">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisTitleSize</S>
            <Obj N="Value" RefId="3640">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisTitleSize</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3641">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisNumberformat</S>
            <Obj N="Value" RefId="3642">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisNumberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3643">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMajorUnit</S>
            <Obj N="Value" RefId="3644">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMajorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3645">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMinorUnit</S>
            <Obj N="Value" RefId="3646">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMinorUnit</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3647">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMaxValue</S>
            <Obj N="Value" RefId="3648">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMaxValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3649">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YMinValue</S>
            <Obj N="Value" RefId="3650">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YMinValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3651">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">YAxisPosition</S>
            <Obj N="Value" RefId="3652">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">YAxisPosition</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eAxisPosition</S>
                <Obj N="Aliases" RefId="3653">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3654">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3655">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3656">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3657">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3658">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3659">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3660">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3661">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3662">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3663">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3664">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3665">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3666">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3667">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3668">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3669">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3670">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3671">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3672">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3673">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3674">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3675">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3676">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3677">
            <TNRef RefId="8" />
            <ToString>[[-Title] &lt;Object&gt;] [[-Header] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [[-ChartTrendLine] &lt;eTrendLine[]&gt;] [[-XRange] &lt;Object&gt;] [[-YRange] &lt;Object&gt;] [[-Width] &lt;Object&gt;] [[-Height] &lt;Object&gt;] [[-Row] &lt;Object&gt;] [[-RowOffSetPixels] &lt;Object&gt;] [[-Column] &lt;Object&gt;] [[-ColumnOffSetPixels] &lt;Object&gt;] [[-LegendPosition] &lt;eLegendPosition&gt;] [[-LegendSize] &lt;Object&gt;] [[-SeriesHeader] &lt;Object&gt;] [[-TitleSize] &lt;int&gt;] [[-XAxisTitleText] &lt;string&gt;] [[-XAxisTitleSize] &lt;Object&gt;] [[-XAxisNumberformat] &lt;string&gt;] [[-XMajorUnit] &lt;Object&gt;] [[-XMinorUnit] &lt;Object&gt;] [[-XMaxValue] &lt;Object&gt;] [[-XMinValue] &lt;Object&gt;] [[-XAxisPosition] &lt;eAxisPosition&gt;] [[-YAxisTitleText] &lt;string&gt;] [[-YAxisTitleSize] &lt;Object&gt;] [[-YAxisNumberformat] &lt;string&gt;] [[-YMajorUnit] &lt;Object&gt;] [[-YMinorUnit] &lt;Object&gt;] [[-YMaxValue] &lt;Object&gt;] [[-YMinValue] &lt;Object&gt;] [[-YAxisPosition] &lt;eAxisPosition&gt;] [-LegendBold] [-NoLegend] [-ShowCategory] [-ShowPercent] [-TitleBold] [-XAxisTitleBold] [-YAxisTitleBold] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3678">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-ExcelChartDefinition</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3679">
    <TNRef RefId="0" />
    <ToString>New-ExcelStyle</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '', Justification = 'Does not change system State')]_x000D__x000A_    param (_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        [Alias('ForegroundColor')]_x000D__x000A_        $FontColor,_x000D__x000A_        $Value,_x000D__x000A_        $Formula,_x000D__x000A_        [Switch]$ArrayFormula,_x000D__x000A_        [Switch]$ResetFont,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hide')]_x000D__x000A_        [Switch]$Hidden,_x000D__x000A_        [Switch]$Locked,_x000D__x000A_        [Switch]$Merge_x000D__x000A_    )_x000D__x000A_    $PSBoundParameters_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '', Justification = 'Does not change system State')]_x000D__x000A_    param (_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        [Alias('ForegroundColor')]_x000D__x000A_        $FontColor,_x000D__x000A_        $Value,_x000D__x000A_        $Formula,_x000D__x000A_        [Switch]$ArrayFormula,_x000D__x000A_        [Switch]$ResetFont,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hide')]_x000D__x000A_        [Switch]$Hidden,_x000D__x000A_        [Switch]$Locked,_x000D__x000A_        [Switch]$Merge_x000D__x000A_    )_x000D__x000A_    $PSBoundParameters_x000D__x000A_</S>
      <Obj N="Options" RefId="3680">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">ExcelStyle</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3681">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-ExcelStyle</S>
      <Obj N="CommandType" RefId="3682">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3683">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3684">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3685">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="3686">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3687">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Address</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="3688">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3689">
                  <TNRef RefId="25" />
                  <LST>
                    <S>NFormat</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderAround</S>
            <Obj N="Value" RefId="3690">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderAround</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="3691">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderColor</S>
            <Obj N="Value" RefId="3692">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3693">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderBottom</S>
            <Obj N="Value" RefId="3694">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderBottom</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="3695">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderTop</S>
            <Obj N="Value" RefId="3696">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderTop</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="3697">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderLeft</S>
            <Obj N="Value" RefId="3698">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderLeft</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="3699">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderRight</S>
            <Obj N="Value" RefId="3700">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderRight</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="3701">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontColor</S>
            <Obj N="Value" RefId="3702">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3703">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ForegroundColor</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="3704">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3705">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Formula</S>
            <Obj N="Value" RefId="3706">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Formula</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3707">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ArrayFormula</S>
            <Obj N="Value" RefId="3708">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ArrayFormula</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3709">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResetFont</S>
            <Obj N="Value" RefId="3710">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResetFont</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3711">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Bold</S>
            <Obj N="Value" RefId="3712">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Bold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3713">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Italic</S>
            <Obj N="Value" RefId="3714">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Italic</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3715">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Underline</S>
            <Obj N="Value" RefId="3716">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Underline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3717">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnderLineType</S>
            <Obj N="Value" RefId="3718">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnderLineType</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelUnderLineType</S>
                <Obj N="Aliases" RefId="3719">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StrikeThru</S>
            <Obj N="Value" RefId="3720">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StrikeThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3721">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontShift</S>
            <Obj N="Value" RefId="3722">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontShift</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignmentFont</S>
                <Obj N="Aliases" RefId="3723">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontName</S>
            <Obj N="Value" RefId="3724">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3725">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontSize</S>
            <Obj N="Value" RefId="3726">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontSize</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="3727">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="3728">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3729">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundPattern</S>
            <Obj N="Value" RefId="3730">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="3731">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternColor</S>
            <Obj N="Value" RefId="3732">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3733">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PatternColour</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WrapText</S>
            <Obj N="Value" RefId="3734">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WrapText</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3735">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HorizontalAlignment</S>
            <Obj N="Value" RefId="3736">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HorizontalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelHorizontalAlignment</S>
                <Obj N="Aliases" RefId="3737">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">VerticalAlignment</S>
            <Obj N="Value" RefId="3738">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">VerticalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignment</S>
                <Obj N="Aliases" RefId="3739">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TextRotation</S>
            <Obj N="Value" RefId="3740">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TextRotation</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3741">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="3742">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3743">
                  <TNRef RefId="25" />
                  <LST>
                    <S>AutoFit</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="3744">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="3745">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Height</S>
            <Obj N="Value" RefId="3746">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Height</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="3747">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Hidden</S>
            <Obj N="Value" RefId="3748">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Hidden</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3749">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Hide</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Locked</S>
            <Obj N="Value" RefId="3750">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Locked</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3751">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Merge</S>
            <Obj N="Value" RefId="3752">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Merge</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3753">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3754">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3755">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3756">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3757">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3758">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3759">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3760">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3761">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3762">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3763">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3764">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3765">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3766">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3767">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3768">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3769">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3770">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3771">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3772">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3773">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3774">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3775">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3776">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3777">
            <TNRef RefId="8" />
            <ToString>[[-Range] &lt;Object&gt;] [[-NumberFormat] &lt;Object&gt;] [[-BorderAround] &lt;ExcelBorderStyle&gt;] [[-BorderColor] &lt;Object&gt;] [[-BorderBottom] &lt;ExcelBorderStyle&gt;] [[-BorderTop] &lt;ExcelBorderStyle&gt;] [[-BorderLeft] &lt;ExcelBorderStyle&gt;] [[-BorderRight] &lt;ExcelBorderStyle&gt;] [[-FontColor] &lt;Object&gt;] [[-Value] &lt;Object&gt;] [[-Formula] &lt;Object&gt;] [[-UnderLineType] &lt;ExcelUnderLineType&gt;] [[-FontShift] &lt;ExcelVerticalAlignmentFont&gt;] [[-FontName] &lt;string&gt;] [[-FontSize] &lt;float&gt;] [[-BackgroundColor] &lt;Object&gt;] [[-BackgroundPattern] &lt;ExcelFillStyle&gt;] [[-PatternColor] &lt;Object&gt;] [[-HorizontalAlignment] &lt;ExcelHorizontalAlignment&gt;] [[-VerticalAlignment] &lt;ExcelVerticalAlignment&gt;] [[-TextRotation] &lt;int&gt;] [[-Width] &lt;float&gt;] [[-Height] &lt;float&gt;] [-ArrayFormula] [-ResetFont] [-Bold] [-Italic] [-Underline] [-StrikeThru] [-WrapText] [-AutoSize] [-Hidden] [-Locked] [-Merge] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3778">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-ExcelStyle</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3779">
    <TNRef RefId="0" />
    <ToString>New-Fixture</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests. The files are by default_x000D__x000A_    placed in the current directory and are called and populated as such:_x000D__x000A__x000D__x000A_    The script defining the function: .\Clean.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    function Clean {_x000D__x000A_        #Do something_x000D__x000A_        $true_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    The script containing the example test .\Clean.Tests.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    BeforeAll {_x000D__x000A_        . $PSCommandPath.Replace('.Tests.ps1', '.ps1')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "Clean" {_x000D__x000A__x000D__x000A_        It "Returns expected output" {_x000D__x000A_            Clean | Should -Be $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .PARAMETER Name_x000D__x000A_    Defines the name of the function and the name of the test to be created._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Defines path where the test and the function should be created, you can use full or relative path._x000D__x000A_    If the parameter is not specified the scripts are created in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture -Name Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture C:\Projects\Cleaner Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the C:\Projects\Cleaner directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture Cleaner Clean_x000D__x000A__x000D__x000A_    Creates a new folder named Cleaner in the current directory and creates the scripts in it._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-Fixture_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]$Name,_x000D__x000A_        [String]$Path = $PWD_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Name = $Name -replace '.ps(m?)1', ''_x000D__x000A__x000D__x000A_    if($Name -notmatch '^\S+$') {_x000D__x000A_        throw "Name is not valid. Whitespace are not allowed in a function name."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #keep this formatted as is. the format is output to the file as is, including indentation_x000D__x000A_    $scriptCode = "function $Name {_x000D__x000A_    throw [NotImplementedException]'$Name is not implemented.'_x000D__x000A_}"_x000D__x000A__x000D__x000A_    $testCode = 'BeforeAll {_x000D__x000A_    . $PSCommandPath.Replace(''.Tests.ps1'', ''.ps1'')_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "#name#" {_x000D__x000A_    It "Returns expected output" {_x000D__x000A_        #name# | Should -Be "YOUR_EXPECTED_VALUE"_x000D__x000A_    }_x000D__x000A_}' -replace "#name#", $Name_x000D__x000A__x000D__x000A_    $Path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)_x000D__x000A__x000D__x000A_    Create-File -Path $Path -Name "$Name.ps1" -Content $scriptCode_x000D__x000A_    Create-File -Path $Path -Name "$Name.Tests.ps1" -Content $testCode_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    This function generates two scripts, one that defines a function_x000D__x000A_    and another one that contains its tests. The files are by default_x000D__x000A_    placed in the current directory and are called and populated as such:_x000D__x000A__x000D__x000A_    The script defining the function: .\Clean.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    function Clean {_x000D__x000A_        #Do something_x000D__x000A_        $true_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    The script containing the example test .\Clean.Tests.ps1:_x000D__x000A__x000D__x000A_    ```powershell_x000D__x000A_    BeforeAll {_x000D__x000A_        . $PSCommandPath.Replace('.Tests.ps1', '.ps1')_x000D__x000A_    }_x000D__x000A__x000D__x000A_    Describe "Clean" {_x000D__x000A__x000D__x000A_        It "Returns expected output" {_x000D__x000A_            Clean | Should -Be $true_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .PARAMETER Name_x000D__x000A_    Defines the name of the function and the name of the test to be created._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Defines path where the test and the function should be created, you can use full or relative path._x000D__x000A_    If the parameter is not specified the scripts are created in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture -Name Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the current directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture C:\Projects\Cleaner Clean_x000D__x000A__x000D__x000A_    Creates the scripts in the C:\Projects\Cleaner directory._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    New-Fixture Cleaner Clean_x000D__x000A__x000D__x000A_    Creates a new folder named Cleaner in the current directory and creates the scripts in it._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-Fixture_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Describe_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Context_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/It_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A_    #&gt;_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [String]$Name,_x000D__x000A_        [String]$Path = $PWD_x000D__x000A_    )_x000D__x000A__x000D__x000A_    $Name = $Name -replace '.ps(m?)1', ''_x000D__x000A__x000D__x000A_    if($Name -notmatch '^\S+$') {_x000D__x000A_        throw "Name is not valid. Whitespace are not allowed in a function name."_x000D__x000A_    }_x000D__x000A__x000D__x000A_    #keep this formatted as is. the format is output to the file as is, including indentation_x000D__x000A_    $scriptCode = "function $Name {_x000D__x000A_    throw [NotImplementedException]'$Name is not implemented.'_x000D__x000A_}"_x000D__x000A__x000D__x000A_    $testCode = 'BeforeAll {_x000D__x000A_    . $PSCommandPath.Replace(''.Tests.ps1'', ''.ps1'')_x000D__x000A_}_x000D__x000A__x000D__x000A_Describe "#name#" {_x000D__x000A_    It "Returns expected output" {_x000D__x000A_        #name# | Should -Be "YOUR_EXPECTED_VALUE"_x000D__x000A_    }_x000D__x000A_}' -replace "#name#", $Name_x000D__x000A__x000D__x000A_    $Path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)_x000D__x000A__x000D__x000A_    Create-File -Path $Path -Name "$Name.ps1" -Content $scriptCode_x000D__x000A_    Create-File -Path $Path -Name "$Name.Tests.ps1" -Content $testCode_x000D__x000A_</S>
      <Obj N="Options" RefId="3780">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">Fixture</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3781">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-Fixture</S>
      <Obj N="CommandType" RefId="3782">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="3783">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="3784">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3785">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="3786">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3787">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3788">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3789">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3790">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3791">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3792">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3793">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3794">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3795">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3796">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3797">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3798">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3799">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3800">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3801">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3802">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3803">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3804">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3805">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3806">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3807">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3808">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3809">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3810">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3811">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3812">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3813">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [[-Path] &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3814">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-Fixture</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/New-Fixture</S>
    </MS>
  </Obj>
  <Obj RefId="3815">
    <TNRef RefId="0" />
    <ToString>New-MockObject</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_This function instantiates a .NET object from a type._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Using the New-MockObject you can mock an object based on .NET type._x000D__x000A__x000D__x000A_An .NET assembly for the particular type must be available in the system and loaded._x000D__x000A__x000D__x000A_.PARAMETER Type_x000D__x000A_The .NET type to create an object based on._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_$obj = New-MockObject -Type 'System.Diagnostics.Process'_x000D__x000A_$obj.GetType().FullName_x000D__x000A_    System.Diagnostics.Process_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/New-MockObject_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [type]$Type_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [System.Runtime.Serialization.Formatterservices]::GetUninitializedObject($Type)_x000D__x000A__x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_.SYNOPSIS_x000D__x000A_This function instantiates a .NET object from a type._x000D__x000A__x000D__x000A_.DESCRIPTION_x000D__x000A_Using the New-MockObject you can mock an object based on .NET type._x000D__x000A__x000D__x000A_An .NET assembly for the particular type must be available in the system and loaded._x000D__x000A__x000D__x000A_.PARAMETER Type_x000D__x000A_The .NET type to create an object based on._x000D__x000A__x000D__x000A_.EXAMPLE_x000D__x000A_```powershell_x000D__x000A_$obj = New-MockObject -Type 'System.Diagnostics.Process'_x000D__x000A_$obj.GetType().FullName_x000D__x000A_    System.Diagnostics.Process_x000D__x000A_```_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/commands/New-MockObject_x000D__x000A__x000D__x000A_.LINK_x000D__x000A_https://pester.dev/docs/usage/mocking_x000D__x000A__x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [type]$Type_x000D__x000A_    )_x000D__x000A__x000D__x000A_    [System.Runtime.Serialization.Formatterservices]::GetUninitializedObject($Type)_x000D__x000A__x000D__x000A_</S>
      <Obj N="Options" RefId="3816">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">MockObject</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3817">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-MockObject</S>
      <Obj N="CommandType" RefId="3818">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="3819">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="3820">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3821">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Type</S>
            <Obj N="Value" RefId="3822">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Type</S>
                <S N="ParameterType">System.Type</S>
                <Obj N="Aliases" RefId="3823">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3824">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3825">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3826">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3827">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3828">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3829">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3830">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3831">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3832">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3833">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3834">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3835">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3836">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3837">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3838">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3839">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3840">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3841">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3842">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3843">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3844">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3845">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3846">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3847">
            <TNRef RefId="8" />
            <ToString>[-Type] &lt;type&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3848">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-MockObject</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/New-MockObject</S>
    </MS>
  </Obj>
  <Obj RefId="3849">
    <TNRef RefId="0" />
    <ToString>New-PesterContainer</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Generates ContainerInfo-objects used as for Invoke-Pester -Container_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 supports running tests files and scriptblocks using parameter-input._x000D__x000A_    To use this feature, Invoke-Pester expects one or more ContainerInfo-objects_x000D__x000A_    created using this funciton, that specify test containers in the form of paths_x000D__x000A_    to the test files or scriptblocks containing the tests directly._x000D__x000A__x000D__x000A_    A optional Data-dictionary can be provided to supply the containers with any_x000D__x000A_    required parameter-values. This is useful in when tests are generated dynamically_x000D__x000A_    based on parameter-input. This method enables complex test-solutions while being_x000D__x000A_    able to re-use a lot of test-code._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    Specifies one or more scriptblocks containing tests._x000D__x000A__x000D__x000A_    .PARAMETER Data_x000D__x000A_    Allows a dictionary to be provided with parameter-values that should be used during_x000D__x000A_    execution of the test containers defined in Path or ScriptBlock._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $container = New-PesterContainer -Path 'CodingStyle.Tests.ps1' -Data @{ File = "Get-Emoji.ps1" }_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using a generated ContainerInfo-object referencing a file and_x000D__x000A_    required parameters that's provided to the test-file during execution._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $sb = {_x000D__x000A_        Describe 'Testing New-PesterContainer' {_x000D__x000A_            It 'Useless test' {_x000D__x000A_                "foo" | Should -Not -Be "bar"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    $container = New-PesterContainer -ScriptBlock $sb_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester agianst a scriptblock. New-PesterContainer is used to genreated_x000D__x000A_    the requried ContainerInfo-object that enables us to do this directly._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-PesterContainer_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="Path")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "Path")]_x000D__x000A_        [String[]] $Path,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "ScriptBlock")]_x000D__x000A_        [ScriptBlock[]] $ScriptBlock,_x000D__x000A__x000D__x000A_        [Collections.IDictionary[]] $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # it seems that when I don't assign $Data to $dt here the foreach does not always work in 5.1 :/ some vooodo_x000D__x000A_    $dt = $Data_x000D__x000A_    # expand to ContainerInfo user can provide multiple sets of data, but ContainerInfo can hold only one_x000D__x000A_    # to keep the internal logic simple._x000D__x000A_    $kind = $PSCmdlet.ParameterSetName_x000D__x000A_    if ('ScriptBlock' -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows scriptblocks without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($sb in $ScriptBlock) {_x000D__x000A_                New-BlockContainerObject -ScriptBlock $sb -Data $d_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ("Path" -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows files without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($p in $Path) {_x000D__x000A_                # resolve the path we are given in the same way we would resolve -Path on Invoke-Pester_x000D__x000A_                $files = @(Find-File -Path $p -ExcludePath $PesterPreference.Run.ExcludePath.Value -Extension $PesterPreference.Run.TestExtension.Value)_x000D__x000A_                foreach ($file in $files) {_x000D__x000A_                    New-BlockContainerObject -File $file -Data $d_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">Path</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Generates ContainerInfo-objects used as for Invoke-Pester -Container_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Pester 5 supports running tests files and scriptblocks using parameter-input._x000D__x000A_    To use this feature, Invoke-Pester expects one or more ContainerInfo-objects_x000D__x000A_    created using this funciton, that specify test containers in the form of paths_x000D__x000A_    to the test files or scriptblocks containing the tests directly._x000D__x000A__x000D__x000A_    A optional Data-dictionary can be provided to supply the containers with any_x000D__x000A_    required parameter-values. This is useful in when tests are generated dynamically_x000D__x000A_    based on parameter-input. This method enables complex test-solutions while being_x000D__x000A_    able to re-use a lot of test-code._x000D__x000A__x000D__x000A_    .PARAMETER Path_x000D__x000A_    Specifies one or more paths to files containing tests. The value is a path\file_x000D__x000A_    name or name pattern. Wildcards are permitted._x000D__x000A__x000D__x000A_    .PARAMETER ScriptBlock_x000D__x000A_    Specifies one or more scriptblocks containing tests._x000D__x000A__x000D__x000A_    .PARAMETER Data_x000D__x000A_    Allows a dictionary to be provided with parameter-values that should be used during_x000D__x000A_    execution of the test containers defined in Path or ScriptBlock._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $container = New-PesterContainer -Path 'CodingStyle.Tests.ps1' -Data @{ File = "Get-Emoji.ps1" }_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester using a generated ContainerInfo-object referencing a file and_x000D__x000A_    required parameters that's provided to the test-file during execution._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    $sb = {_x000D__x000A_        Describe 'Testing New-PesterContainer' {_x000D__x000A_            It 'Useless test' {_x000D__x000A_                "foo" | Should -Not -Be "bar"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    $container = New-PesterContainer -ScriptBlock $sb_x000D__x000A_    Invoke-Pester -Container $container_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    This example runs Pester agianst a scriptblock. New-PesterContainer is used to genreated_x000D__x000A_    the requried ContainerInfo-object that enables us to do this directly._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/New-PesterContainer_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Invoke-Pester_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/data-driven-tests_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="Path")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "Path")]_x000D__x000A_        [String[]] $Path,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName = "ScriptBlock")]_x000D__x000A_        [ScriptBlock[]] $ScriptBlock,_x000D__x000A__x000D__x000A_        [Collections.IDictionary[]] $Data_x000D__x000A_    )_x000D__x000A__x000D__x000A_    # it seems that when I don't assign $Data to $dt here the foreach does not always work in 5.1 :/ some vooodo_x000D__x000A_    $dt = $Data_x000D__x000A_    # expand to ContainerInfo user can provide multiple sets of data, but ContainerInfo can hold only one_x000D__x000A_    # to keep the internal logic simple._x000D__x000A_    $kind = $PSCmdlet.ParameterSetName_x000D__x000A_    if ('ScriptBlock' -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows scriptblocks without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($sb in $ScriptBlock) {_x000D__x000A_                New-BlockContainerObject -ScriptBlock $sb -Data $d_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    if ("Path" -eq $kind) {_x000D__x000A_        # the @() is significant here, it will make it iterate even if there are no data_x000D__x000A_        # which allows files without data to run_x000D__x000A_        foreach ($d in @($dt)) {_x000D__x000A_            foreach ($p in $Path) {_x000D__x000A_                # resolve the path we are given in the same way we would resolve -Path on Invoke-Pester_x000D__x000A_                $files = @(Find-File -Path $p -ExcludePath $PesterPreference.Run.ExcludePath.Value -Extension $PesterPreference.Run.TestExtension.Value)_x000D__x000A_                foreach ($file in $files) {_x000D__x000A_                    New-BlockContainerObject -File $file -Data $d_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="3850">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">PesterContainer</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3851">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-PesterContainer</S>
      <Obj N="CommandType" RefId="3852">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="3853">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="3854">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3855">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="3856">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="3857">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ScriptBlock</S>
            <Obj N="Value" RefId="3858">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ScriptBlock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock[]</S>
                <Obj N="Aliases" RefId="3859">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Data</S>
            <Obj N="Value" RefId="3860">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Data</S>
                <S N="ParameterType">System.Collections.IDictionary[]</S>
                <Obj N="Aliases" RefId="3861">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3862">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3863">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3864">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3865">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3866">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3867">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3868">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3869">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3870">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3871">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3872">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3873">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3874">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3875">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3876">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3877">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3878">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3879">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3880">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3881">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3882">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3883">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3884">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3885">
            <TNRef RefId="8" />
            <ToString>-Path &lt;string[]&gt; [-Data &lt;IDictionary[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Path</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="3886">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3887">
            <TNRef RefId="8" />
            <ToString>-ScriptBlock &lt;scriptblock[]&gt; [-Data &lt;IDictionary[]&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ScriptBlock</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3888">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-PesterContainer</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/New-PesterContainer</S>
    </MS>
  </Obj>
  <Obj RefId="3889">
    <TNRef RefId="0" />
    <ToString>New-PivotTableDefinition</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Alias("PivtoTableName")]#Previous typo - use alias to avoid breaking scripts_x000D__x000A_        $PivotTableName,_x000D__x000A_        $SourceWorksheet,_x000D__x000A_        $SourceRange,_x000D__x000A_        $PivotRows,_x000D__x000A_        [hashtable]$PivotData,_x000D__x000A_        $PivotColumns,_x000D__x000A_        $PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [ValidateSet("Both", "Columns", "Rows", "None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [String]$GroupDateRow,_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.eDateGroupBy[]]$GroupDatePart,_x000D__x000A_        [String]$GroupNumericRow,_x000D__x000A_        [double]$GroupNumericMin = 0 ,_x000D__x000A_        [double]$GroupNumericMax = [Double]::MaxValue  ,_x000D__x000A_        [double]$GroupNumericInterval = 100  ,_x000D__x000A_        [string]$PivotNumberFormat,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$PivotTableStyle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyDef', Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        $PivotChartDefinition,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [String]$ChartTitle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartHeight = 400 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartWidth = 600,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRow = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumn = 4,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRowOffSetPixels = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumnOffSetPixels = 0,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = 'Pie',_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [switch]$Activate_x000D__x000A_    )_x000D__x000A_    $validDataFuntions = [system.enum]::GetNames([OfficeOpenXml.Table.PivotTable.DataFieldFunctions])_x000D__x000A__x000D__x000A_    if ($PivotData.values.Where( {$_ -notin $validDataFuntions}) ) {_x000D__x000A_        Write-Warning -Message ("Pivot data functions might not be valid, they should be one of " + ($validDataFuntions -join ", ") + ".")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $parameters = @{} + $PSBoundParameters_x000D__x000A_    if ($NoTotalsInPivot) {_x000D__x000A_        $parameters.Remove('NoTotalsInPivot')_x000D__x000A_        $parameters["PivotTotals"] = "None"_x000D__x000A_    }_x000D__x000A_    if  ($PSBoundParameters.ContainsKey('ChartType') -and -not $PSBoundParameters.ContainsKey('IncludePivotChart')) {_x000D__x000A_        $parameters['IncludePivotChart'] = $true_x000D__x000A_    }_x000D__x000A_    $parameters.Remove('PivotTableName')_x000D__x000A_    if ($PivotChartDefinition) {_x000D__x000A_        $parameters.PivotChartDefinition.XRange = $null_x000D__x000A_        $parameters.PivotChartDefinition.YRange = $null_x000D__x000A_        $parameters.PivotChartDefinition.SeriesHeader = $null_x000D__x000A_    }_x000D__x000A_    @{$PivotTableName = $parameters}_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system State')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory)]_x000D__x000A_        [Alias("PivtoTableName")]#Previous typo - use alias to avoid breaking scripts_x000D__x000A_        $PivotTableName,_x000D__x000A_        $SourceWorksheet,_x000D__x000A_        $SourceRange,_x000D__x000A_        $PivotRows,_x000D__x000A_        [hashtable]$PivotData,_x000D__x000A_        $PivotColumns,_x000D__x000A_        $PivotFilter,_x000D__x000A_        [Switch]$PivotDataToColumn,_x000D__x000A_        [ValidateSet("Both", "Columns", "Rows", "None")]_x000D__x000A_        [String]$PivotTotals = "Both",_x000D__x000A_        [Switch]$NoTotalsInPivot,_x000D__x000A_        [String]$GroupDateRow,_x000D__x000A_        [OfficeOpenXml.Table.PivotTable.eDateGroupBy[]]$GroupDatePart,_x000D__x000A_        [String]$GroupNumericRow,_x000D__x000A_        [double]$GroupNumericMin = 0 ,_x000D__x000A_        [double]$GroupNumericMax = [Double]::MaxValue  ,_x000D__x000A_        [double]$GroupNumericInterval = 100  ,_x000D__x000A_        [string]$PivotNumberFormat,_x000D__x000A_        [OfficeOpenXml.Table.TableStyles]$PivotTableStyle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyDef', Mandatory = $true, ValueFromPipelineByPropertyName = $true)]_x000D__x000A_        $PivotChartDefinition,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$IncludePivotChart,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [String]$ChartTitle,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartHeight = 400 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [int]$ChartWidth = 600,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRow = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumn = 4,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartRowOffSetPixels = 0 ,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Int]$ChartColumnOffSetPixels = 0,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType = 'Pie',_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Parameter(ParameterSetName = 'ChartbyParams')]_x000D__x000A_        [Switch]$ShowPercent,_x000D__x000A_        [switch]$Activate_x000D__x000A_    )_x000D__x000A_    $validDataFuntions = [system.enum]::GetNames([OfficeOpenXml.Table.PivotTable.DataFieldFunctions])_x000D__x000A__x000D__x000A_    if ($PivotData.values.Where( {$_ -notin $validDataFuntions}) ) {_x000D__x000A_        Write-Warning -Message ("Pivot data functions might not be valid, they should be one of " + ($validDataFuntions -join ", ") + ".")_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $parameters = @{} + $PSBoundParameters_x000D__x000A_    if ($NoTotalsInPivot) {_x000D__x000A_        $parameters.Remove('NoTotalsInPivot')_x000D__x000A_        $parameters["PivotTotals"] = "None"_x000D__x000A_    }_x000D__x000A_    if  ($PSBoundParameters.ContainsKey('ChartType') -and -not $PSBoundParameters.ContainsKey('IncludePivotChart')) {_x000D__x000A_        $parameters['IncludePivotChart'] = $true_x000D__x000A_    }_x000D__x000A_    $parameters.Remove('PivotTableName')_x000D__x000A_    if ($PivotChartDefinition) {_x000D__x000A_        $parameters.PivotChartDefinition.XRange = $null_x000D__x000A_        $parameters.PivotChartDefinition.YRange = $null_x000D__x000A_        $parameters.PivotChartDefinition.SeriesHeader = $null_x000D__x000A_    }_x000D__x000A_    @{$PivotTableName = $parameters}_x000D__x000A_</S>
      <Obj N="Options" RefId="3890">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">PivotTableDefinition</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3891">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-PivotTableDefinition</S>
      <Obj N="CommandType" RefId="3892">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3893">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3894">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3895">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">PivotTableName</S>
            <Obj N="Value" RefId="3896">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3897">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PivtoTableName</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SourceWorksheet</S>
            <Obj N="Value" RefId="3898">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceWorksheet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3899">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SourceRange</S>
            <Obj N="Value" RefId="3900">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SourceRange</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3901">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotRows</S>
            <Obj N="Value" RefId="3902">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotRows</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3903">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotData</S>
            <Obj N="Value" RefId="3904">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotData</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="3905">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotColumns</S>
            <Obj N="Value" RefId="3906">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotColumns</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3907">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotFilter</S>
            <Obj N="Value" RefId="3908">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotFilter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3909">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotDataToColumn</S>
            <Obj N="Value" RefId="3910">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotDataToColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3911">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTotals</S>
            <Obj N="Value" RefId="3912">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTotals</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3913">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoTotalsInPivot</S>
            <Obj N="Value" RefId="3914">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoTotalsInPivot</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3915">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupDateRow</S>
            <Obj N="Value" RefId="3916">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupDateRow</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3917">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupDatePart</S>
            <Obj N="Value" RefId="3918">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupDatePart</S>
                <S N="ParameterType">OfficeOpenXml.Table.PivotTable.eDateGroupBy[]</S>
                <Obj N="Aliases" RefId="3919">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericRow</S>
            <Obj N="Value" RefId="3920">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericRow</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3921">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericMin</S>
            <Obj N="Value" RefId="3922">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericMin</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="3923">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericMax</S>
            <Obj N="Value" RefId="3924">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericMax</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="3925">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">GroupNumericInterval</S>
            <Obj N="Value" RefId="3926">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">GroupNumericInterval</S>
                <S N="ParameterType">System.Double</S>
                <Obj N="Aliases" RefId="3927">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotNumberFormat</S>
            <Obj N="Value" RefId="3928">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotNumberFormat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3929">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableStyle</S>
            <Obj N="Value" RefId="3930">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="3931">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotChartDefinition</S>
            <Obj N="Value" RefId="3932">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotChartDefinition</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="3933">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotChart</S>
            <Obj N="Value" RefId="3934">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3935">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartTitle</S>
            <Obj N="Value" RefId="3936">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartTitle</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3937">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartHeight</S>
            <Obj N="Value" RefId="3938">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartHeight</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3939">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartWidth</S>
            <Obj N="Value" RefId="3940">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartWidth</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3941">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartRow</S>
            <Obj N="Value" RefId="3942">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3943">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartColumn</S>
            <Obj N="Value" RefId="3944">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3945">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartRowOffSetPixels</S>
            <Obj N="Value" RefId="3946">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartRowOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3947">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartColumnOffSetPixels</S>
            <Obj N="Value" RefId="3948">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartColumnOffSetPixels</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3949">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="3950">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="3951">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="3952">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3953">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="3954">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3955">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="3956">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3957">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Activate</S>
            <Obj N="Value" RefId="3958">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Activate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3959">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="3960">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3961">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="3962">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="3963">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="3964">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3965">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="3966">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3967">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="3968">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="3969">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="3970">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3971">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="3972">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3973">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="3974">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3975">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="3976">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3977">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="3978">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="3979">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="3980">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="3981">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="3982">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3983">
            <TNRef RefId="8" />
            <ToString>-PivotTableName &lt;Object&gt; -PivotChartDefinition &lt;Object&gt; [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;hashtable&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;string&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;string&gt;] [-GroupNumericMin &lt;double&gt;] [-GroupNumericMax &lt;double&gt;] [-GroupNumericInterval &lt;double&gt;] [-PivotNumberFormat &lt;string&gt;] [-PivotTableStyle &lt;TableStyles&gt;] [-Activate] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ChartbyDef</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3984">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="3985">
            <TNRef RefId="8" />
            <ToString>-PivotTableName &lt;Object&gt; [-SourceWorksheet &lt;Object&gt;] [-SourceRange &lt;Object&gt;] [-PivotRows &lt;Object&gt;] [-PivotData &lt;hashtable&gt;] [-PivotColumns &lt;Object&gt;] [-PivotFilter &lt;Object&gt;] [-PivotDataToColumn] [-PivotTotals &lt;string&gt;] [-NoTotalsInPivot] [-GroupDateRow &lt;string&gt;] [-GroupDatePart &lt;eDateGroupBy[]&gt;] [-GroupNumericRow &lt;string&gt;] [-GroupNumericMin &lt;double&gt;] [-GroupNumericMax &lt;double&gt;] [-GroupNumericInterval &lt;double&gt;] [-PivotNumberFormat &lt;string&gt;] [-PivotTableStyle &lt;TableStyles&gt;] [-IncludePivotChart] [-ChartTitle &lt;string&gt;] [-ChartHeight &lt;int&gt;] [-ChartWidth &lt;int&gt;] [-ChartRow &lt;int&gt;] [-ChartColumn &lt;int&gt;] [-ChartRowOffSetPixels &lt;int&gt;] [-ChartColumnOffSetPixels &lt;int&gt;] [-ChartType &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [-Activate] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ChartbyParams</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3986">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-PivotTableDefinition</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3987">
    <TNRef RefId="0" />
    <ToString>New-Plot</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_        [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '', Justification = 'New-Plot does not change system state')]_x000D__x000A_        param()_x000D__x000A__x000D__x000A_        [PSPlot]::new()_x000D__x000A_    </SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_        [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '', Justification = 'New-Plot does not change system state')]_x000D__x000A_        param()_x000D__x000A__x000D__x000A_        [PSPlot]::new()_x000D__x000A_    </S>
      <Obj N="Options" RefId="3988">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">Plot</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3989">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-Plot</S>
      <Obj N="CommandType" RefId="3990">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="3991">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="3992">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="3993">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="3994">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="3995">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="3996">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-Plot</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="3997">
    <TNRef RefId="0" />
    <ToString>New-PSItem</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param()_x000D__x000A_    $totalArgs = $args.Count_x000D__x000A__x000D__x000A_    if($args[-1] -is [array]) {_x000D__x000A_        $script:PSItemHeader=$args[-1]_x000D__x000A_        $totalArgs-=1_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $h=[ordered]@{}_x000D__x000A__x000D__x000A_    for ($idx = 0; $idx -lt $totalArgs; $idx+=1) {_x000D__x000A_        if($PSItemHeader) {_x000D__x000A_            $key = $PSItemHeader[$idx]_x000D__x000A_        } else {_x000D__x000A_            $key = "P$($idx+1)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $h.$key=$args[$idx]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [PSCustomObject]$h_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param()_x000D__x000A_    $totalArgs = $args.Count_x000D__x000A__x000D__x000A_    if($args[-1] -is [array]) {_x000D__x000A_        $script:PSItemHeader=$args[-1]_x000D__x000A_        $totalArgs-=1_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $h=[ordered]@{}_x000D__x000A__x000D__x000A_    for ($idx = 0; $idx -lt $totalArgs; $idx+=1) {_x000D__x000A_        if($PSItemHeader) {_x000D__x000A_            $key = $PSItemHeader[$idx]_x000D__x000A_        } else {_x000D__x000A_            $key = "P$($idx+1)"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $h.$key=$args[$idx]_x000D__x000A_    }_x000D__x000A__x000D__x000A_    [PSCustomObject]$h_x000D__x000A_</S>
      <Obj N="Options" RefId="3998">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">New</S>
      <S N="Noun">PSItem</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="3999">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">New-PSItem</S>
      <Obj N="CommandType" RefId="4000">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4001">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4002">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4003">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4004">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4005">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4006">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::New-PSItem</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4007">
    <TNRef RefId="0" />
    <ToString>O:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="4008">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4009">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">O:</S>
      <Obj N="CommandType" RefId="4010">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4011">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4012">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4013">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4014">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4015">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4016">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::O:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4017">
    <TNRef RefId="0" />
    <ToString>Open-EditorFile</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $Paths = @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $Paths += $Path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        if ($Paths.Count -gt 1) {_x000D__x000A_            $preview = $false_x000D__x000A_        } else {_x000D__x000A_            $preview = $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Get-ChildItem $Paths -File | ForEach-Object {_x000D__x000A_            $psEditor.Workspace.OpenFile($_.FullName, $preview)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true, ValueFromPipeline=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        $Path_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $Paths = @()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $Paths += $Path_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        if ($Paths.Count -gt 1) {_x000D__x000A_            $preview = $false_x000D__x000A_        } else {_x000D__x000A_            $preview = $true_x000D__x000A_        }_x000D__x000A__x000D__x000A_        Get-ChildItem $Paths -File | ForEach-Object {_x000D__x000A_            $psEditor.Workspace.OpenFile($_.FullName, $preview)_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4018">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Open</S>
      <S N="Noun">EditorFile</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4019">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Open-EditorFile</S>
      <Obj N="CommandType" RefId="4020">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="4021">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="4022">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4023">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="4024">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4025">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4026">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4027">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4028">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4029">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4030">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4031">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4032">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4033">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4034">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4035">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4036">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4037">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4038">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4039">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4040">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4041">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4042">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4043">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4044">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4045">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4046">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4047">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4048">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4049">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4050">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Open-EditorFile</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4051">
    <TNRef RefId="0" />
    <ToString>Open-ExcelPackage</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword","")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelPackage])]_x000D__x000A_    param(_x000D__x000A_        #The path to the file to open._x000D__x000A_        [Parameter(Mandatory=$true)]$Path,_x000D__x000A_        #If specified, any running instances of Excel will be terminated before opening the file._x000D__x000A_        [switch]$KillExcel,_x000D__x000A_        #The password for a protected worksheet, as a [normal] string (not a secure string)._x000D__x000A_        [String]$Password,_x000D__x000A_        #By default Open-ExcelPackage will only opens an existing file; -Create instructs it to create a new file if required._x000D__x000A_        [switch]$Create_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if($KillExcel)         {_x000D__x000A_        Get-Process -Name "excel" -ErrorAction Ignore | Stop-Process_x000D__x000A_        while (Get-Process -Name "excel" -ErrorAction Ignore) {}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)_x000D__x000A_    #If -Create was not specified only open the file if it exists already (send a warning if it doesn't exist)._x000D__x000A_    if ($Create -and -not (Test-Path -Path $path)) {_x000D__x000A_        #Create the directory if required._x000D__x000A_        $targetPath = Split-Path -Parent -Path $Path_x000D__x000A_        if (!(Test-Path -Path $targetPath)) {_x000D__x000A_                Write-Debug "Base path $($targetPath) does not exist, creating"_x000D__x000A_                $null = New-item -ItemType Directory -Path $targetPath -ErrorAction Ignore_x000D__x000A_        }_x000D__x000A_        New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path_x000D__x000A_    }_x000D__x000A_    elseif (Test-Path -Path $path) {_x000D__x000A_        if ($Password) {$pkgobj = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path , $Password }_x000D__x000A_        else           {$pkgobj = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path }_x000D__x000A_        if ($pkgobj) {_x000D__x000A_            foreach ($w in $pkgobj.Workbook.Worksheets) {_x000D__x000A_                $sb = [scriptblock]::Create(('$this.workbook.Worksheets["{0}"]' -f $w.name))_x000D__x000A_                Add-Member -InputObject $pkgobj -MemberType ScriptProperty -Name $w.name -Value $sb_x000D__x000A_            }_x000D__x000A_            return $pkgobj_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else   {Write-Warning "Could not find $path" }_x000D__x000A_ </SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdLetBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute("PSAvoidUsingPlainTextForPassword","")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelPackage])]_x000D__x000A_    param(_x000D__x000A_        #The path to the file to open._x000D__x000A_        [Parameter(Mandatory=$true)]$Path,_x000D__x000A_        #If specified, any running instances of Excel will be terminated before opening the file._x000D__x000A_        [switch]$KillExcel,_x000D__x000A_        #The password for a protected worksheet, as a [normal] string (not a secure string)._x000D__x000A_        [String]$Password,_x000D__x000A_        #By default Open-ExcelPackage will only opens an existing file; -Create instructs it to create a new file if required._x000D__x000A_        [switch]$Create_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if($KillExcel)         {_x000D__x000A_        Get-Process -Name "excel" -ErrorAction Ignore | Stop-Process_x000D__x000A_        while (Get-Process -Name "excel" -ErrorAction Ignore) {}_x000D__x000A_    }_x000D__x000A__x000D__x000A_    $Path = $ExecutionContext.SessionState.Path.GetUnresolvedProviderPathFromPSPath($Path)_x000D__x000A_    #If -Create was not specified only open the file if it exists already (send a warning if it doesn't exist)._x000D__x000A_    if ($Create -and -not (Test-Path -Path $path)) {_x000D__x000A_        #Create the directory if required._x000D__x000A_        $targetPath = Split-Path -Parent -Path $Path_x000D__x000A_        if (!(Test-Path -Path $targetPath)) {_x000D__x000A_                Write-Debug "Base path $($targetPath) does not exist, creating"_x000D__x000A_                $null = New-item -ItemType Directory -Path $targetPath -ErrorAction Ignore_x000D__x000A_        }_x000D__x000A_        New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path_x000D__x000A_    }_x000D__x000A_    elseif (Test-Path -Path $path) {_x000D__x000A_        if ($Password) {$pkgobj = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path , $Password }_x000D__x000A_        else           {$pkgobj = New-Object -TypeName OfficeOpenXml.ExcelPackage -ArgumentList $Path }_x000D__x000A_        if ($pkgobj) {_x000D__x000A_            foreach ($w in $pkgobj.Workbook.Worksheets) {_x000D__x000A_                $sb = [scriptblock]::Create(('$this.workbook.Worksheets["{0}"]' -f $w.name))_x000D__x000A_                Add-Member -InputObject $pkgobj -MemberType ScriptProperty -Name $w.name -Value $sb_x000D__x000A_            }_x000D__x000A_            return $pkgobj_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    else   {Write-Warning "Could not find $path" }_x000D__x000A_ </S>
      <Obj N="Options" RefId="4052">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Open</S>
      <S N="Noun">ExcelPackage</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4053">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.ExcelPackage</S>
        </LST>
      </Obj>
      <S N="Name">Open-ExcelPackage</S>
      <Obj N="CommandType" RefId="4054">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4055">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4056">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4057">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="4058">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4059">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">KillExcel</S>
            <Obj N="Value" RefId="4060">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">KillExcel</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4061">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Password</S>
            <Obj N="Value" RefId="4062">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Password</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4063">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Create</S>
            <Obj N="Value" RefId="4064">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Create</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4065">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4066">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4067">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4068">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4069">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4070">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4071">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4072">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4073">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4074">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4075">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4076">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4077">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4078">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4079">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4080">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4081">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4082">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4083">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4084">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4085">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4086">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4087">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4088">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4089">
            <TNRef RefId="8" />
            <ToString>[-Path] &lt;Object&gt; [[-Password] &lt;string&gt;] [-KillExcel] [-Create] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4090">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Open-ExcelPackage</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4091">
    <TNRef RefId="0" />
    <ToString>oss</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_[CmdletBinding()]_x000D__x000A_param(_x000D__x000A_    [ValidateRange(2, 2147483647)]_x000D__x000A_    [int]_x000D__x000A_    ${Width},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipeline=$true)]_x000D__x000A_    [psobject]_x000D__x000A_    ${InputObject})_x000D__x000A__x000D__x000A_begin {_x000D__x000A_    $PSBoundParameters['Stream'] = $true_x000D__x000A_    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)_x000D__x000A_    $scriptCmd = {&amp; $wrappedCmd @PSBoundParameters }_x000D__x000A__x000D__x000A_    $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)_x000D__x000A_    $steppablePipeline.Begin($PSCmdlet)_x000D__x000A_}_x000D__x000A__x000D__x000A_process {_x000D__x000A_    $steppablePipeline.Process($_)_x000D__x000A_}_x000D__x000A__x000D__x000A_end {_x000D__x000A_    $steppablePipeline.End()_x000D__x000A_}_x000D__x000A_&lt;#_x000D__x000A_.ForwardHelpTargetName Out-String_x000D__x000A_.ForwardHelpCategory Cmdlet_x000D__x000A_#&gt;_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_[CmdletBinding()]_x000D__x000A_param(_x000D__x000A_    [ValidateRange(2, 2147483647)]_x000D__x000A_    [int]_x000D__x000A_    ${Width},_x000D__x000A__x000D__x000A_    [Parameter(ValueFromPipeline=$true)]_x000D__x000A_    [psobject]_x000D__x000A_    ${InputObject})_x000D__x000A__x000D__x000A_begin {_x000D__x000A_    $PSBoundParameters['Stream'] = $true_x000D__x000A_    $wrappedCmd = $ExecutionContext.InvokeCommand.GetCommand('Out-String',[System.Management.Automation.CommandTypes]::Cmdlet)_x000D__x000A_    $scriptCmd = {&amp; $wrappedCmd @PSBoundParameters }_x000D__x000A__x000D__x000A_    $steppablePipeline = $scriptCmd.GetSteppablePipeline($myInvocation.CommandOrigin)_x000D__x000A_    $steppablePipeline.Begin($PSCmdlet)_x000D__x000A_}_x000D__x000A__x000D__x000A_process {_x000D__x000A_    $steppablePipeline.Process($_)_x000D__x000A_}_x000D__x000A__x000D__x000A_end {_x000D__x000A_    $steppablePipeline.End()_x000D__x000A_}_x000D__x000A_&lt;#_x000D__x000A_.ForwardHelpTargetName Out-String_x000D__x000A_.ForwardHelpCategory Cmdlet_x000D__x000A_#&gt;_x000D__x000A_</S>
      <Obj N="Options" RefId="4092">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4093">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">oss</S>
      <Obj N="CommandType" RefId="4094">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4095">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4096">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4097">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="4098">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4099">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InputObject</S>
            <Obj N="Value" RefId="4100">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InputObject</S>
                <S N="ParameterType">System.Management.Automation.PSObject</S>
                <Obj N="Aliases" RefId="4101">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4102">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4103">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4104">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4105">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4106">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4107">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4108">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4109">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4110">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4111">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4112">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4113">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4114">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4115">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4116">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4117">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4118">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4119">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4120">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4121">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4122">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4123">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4124">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4125">
            <TNRef RefId="8" />
            <ToString>[[-Width] &lt;int&gt;] [[-InputObject] &lt;psobject&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4126">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::oss</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri">https://go.microsoft.com/fwlink/?LinkID=2097024</S>
    </MS>
  </Obj>
  <Obj RefId="4127">
    <TNRef RefId="0" />
    <ToString>Out-CurrentFile</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Switch]$AsNewFile,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, Mandatory = $true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin { $objectsToWrite = @() }_x000D__x000A_    Process { $objectsToWrite += $InputObject }_x000D__x000A_    End {_x000D__x000A__x000D__x000A_        # If requested, create a new file_x000D__x000A_        if ($AsNewFile) {_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $outputString = "@`"`r`n{0}`r`n`"@" -f ($objectsToWrite|out-string).Trim()_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            # If there is no file open_x000D__x000A_            $psEditor.GetEditorContext()_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            # create a new one_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $psEditor.GetEditorContext().CurrentFile.InsertText($outputString)_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Switch]$AsNewFile,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, Mandatory = $true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin { $objectsToWrite = @() }_x000D__x000A_    Process { $objectsToWrite += $InputObject }_x000D__x000A_    End {_x000D__x000A__x000D__x000A_        # If requested, create a new file_x000D__x000A_        if ($AsNewFile) {_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $outputString = "@`"`r`n{0}`r`n`"@" -f ($objectsToWrite|out-string).Trim()_x000D__x000A__x000D__x000A_        try {_x000D__x000A_            # If there is no file open_x000D__x000A_            $psEditor.GetEditorContext()_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            # create a new one_x000D__x000A_            $psEditor.Workspace.NewFile()_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $psEditor.GetEditorContext().CurrentFile.InsertText($outputString)_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4128">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Out</S>
      <S N="Noun">CurrentFile</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4129">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Out-CurrentFile</S>
      <Obj N="CommandType" RefId="4130">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="4131">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="4132">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4133">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">AsNewFile</S>
            <Obj N="Value" RefId="4134">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsNewFile</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4135">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InputObject</S>
            <Obj N="Value" RefId="4136">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InputObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4137">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4138">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4139">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4140">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4141">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4142">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4143">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4144">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4145">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4146">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4147">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4148">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4149">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4150">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4151">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4152">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4153">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4154">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4155">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4156">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4157">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4158">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4159">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4160">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4161">
            <TNRef RefId="8" />
            <ToString>[-InputObject] &lt;Object&gt; [-AsNewFile] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4162">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Out-CurrentFile</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Out-CurrentFile.md</S>
    </MS>
  </Obj>
  <Obj RefId="4163">
    <TNRef RefId="0" />
    <ToString>P:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="4164">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4165">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">P:</S>
      <Obj N="CommandType" RefId="4166">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4167">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4168">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4169">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4170">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4171">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4172">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::P:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4173">
    <TNRef RefId="0" />
    <ToString>Pause</ToString>
    <Props>
      <SBK N="ScriptBlock">$null = Read-Host 'Press Enter to continue...'</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">$null = Read-Host 'Press Enter to continue...'</S>
      <Obj N="Options" RefId="4174">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4175">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Pause</S>
      <Obj N="CommandType" RefId="4176">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4177">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4178">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4179">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4180">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4181">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4182">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Pause</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4183">
    <TNRef RefId="0" />
    <ToString>PieChart</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="PieExploded3D",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_ </SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $targetData,_x000D__x000A_        $title,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="PieExploded3D",_x000D__x000A_        [Switch]$NoLegend,_x000D__x000A_        [Switch]$ShowCategory,_x000D__x000A_        [Switch]$ShowPercent_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Begin   { $data = @() }_x000D__x000A_    Process { $data += $targetData}_x000D__x000A__x000D__x000A_    End {_x000D__x000A_        DoChart $data $title -ChartType $ChartType `_x000D__x000A_            -NoLegend:$NoLegend -ShowCategory:$ShowCategory -ShowPercent:$ShowPercent_x000D__x000A_    }_x000D__x000A_ </S>
      <Obj N="Options" RefId="4184">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4185">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">PieChart</S>
      <Obj N="CommandType" RefId="4186">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4187">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4188">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4189">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="4190">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4191">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">title</S>
            <Obj N="Value" RefId="4192">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">title</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4193">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="4194">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="4195">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="4196">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4197">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="4198">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4199">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="4200">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4201">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4202">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4203">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4204">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4205">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4206">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4207">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4208">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4209">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4210">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4211">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4212">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4213">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4214">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4215">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4216">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4217">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4218">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4219">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4220">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4221">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4222">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4223">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4224">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4225">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-title] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [-NoLegend] [-ShowCategory] [-ShowPercent] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4226">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::PieChart</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4227">
    <TNRef RefId="0" />
    <ToString>Pivot</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $targetData,_x000D__x000A_        $pivotRows,_x000D__x000A_        $pivotData,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="Pie"_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if(!$pivotData) {$pivotData=$pivotRows}_x000D__x000A__x000D__x000A_    $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_    Write-Verbose $xlFile_x000D__x000A__x000D__x000A_    $targetData |_x000D__x000A_        Export-Excel -Path $xlFile `_x000D__x000A_            -IncludePivotTable -IncludePivotChart `_x000D__x000A_            -PivotRows $pivotRows -PivotData $pivotData `_x000D__x000A_            -ChartType $ChartType `_x000D__x000A_            -Show_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $targetData,_x000D__x000A_        $pivotRows,_x000D__x000A_        $pivotData,_x000D__x000A_        [OfficeOpenXml.Drawing.Chart.eChartType]$ChartType="Pie"_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if(!$pivotData) {$pivotData=$pivotRows}_x000D__x000A__x000D__x000A_    $xlFile = [System.IO.Path]::GetTempFileName() -replace "tmp","xlsx"_x000D__x000A_    Write-Verbose $xlFile_x000D__x000A__x000D__x000A_    $targetData |_x000D__x000A_        Export-Excel -Path $xlFile `_x000D__x000A_            -IncludePivotTable -IncludePivotChart `_x000D__x000A_            -PivotRows $pivotRows -PivotData $pivotData `_x000D__x000A_            -ChartType $ChartType `_x000D__x000A_            -Show_x000D__x000A_</S>
      <Obj N="Options" RefId="4228">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4229">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Pivot</S>
      <Obj N="CommandType" RefId="4230">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4231">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4232">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4233">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">targetData</S>
            <Obj N="Value" RefId="4234">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">targetData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4235">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">pivotRows</S>
            <Obj N="Value" RefId="4236">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">pivotRows</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4237">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">pivotData</S>
            <Obj N="Value" RefId="4238">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">pivotData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4239">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ChartType</S>
            <Obj N="Value" RefId="4240">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="4241">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4242">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4243">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4244">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4245">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4246">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4247">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4248">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4249">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4250">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4251">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4252">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4253">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4254">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4255">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4256">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4257">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4258">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4259">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4260">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4261">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4262">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4263">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4264">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4265">
            <TNRef RefId="8" />
            <ToString>[[-targetData] &lt;Object&gt;] [[-pivotRows] &lt;Object&gt;] [[-pivotData] &lt;Object&gt;] [[-ChartType] &lt;eChartType&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4266">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Pivot</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4267">
    <TNRef RefId="0" />
    <ToString>prompt</ToString>
    <Props>
      <SBK N="ScriptBlock"> _x000D__x000A_        $env:STARSHIP_ENVVAR = if (Test-Path Variable:/PSDebugContext) {_x000D__x000A_            "`u{1f41e}"_x000D__x000A_        } else {_x000D__x000A_            $null_x000D__x000A_        }_x000D__x000A_    _x000A_    $origDollarQuestion = $global:?_x000A_    $origLastExitCode = $global:LASTEXITCODE_x000A__x000A_    $out = $null_x000A_    # @ makes sure the result is an array even if single or no values are returned_x000A_    $jobs = @(Get-Job | Where-Object { $_.State -eq 'Running' }).Count_x000A__x000A_    $env:PWD = $PWD_x000A_    $current_directory = (Convert-Path -LiteralPath $PWD)_x000A_    _x000A_    # Whe start from the premise that the command executed correctly, which covers also the fresh console._x000A_    $lastExitCodeForPrompt = 0_x000A__x000A_    # Save old output encoding and set it to UTF-8_x000A_    $origOutputEncoding = [Console]::OutputEncoding_x000A_    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8_x000A_    if ($lastCmd = Get-History -Count 1) {_x000A_        # In case we have a False on the Dollar hook, we know there's an error._x000A_        if (-not $origDollarQuestion) {_x000A_            # We retrieve the InvocationInfo from the most recent error._x000A_            $lastCmdletError = try { Get-Error |  Where-Object { $_ -ne $null } | Select-Object -expand InvocationInfo } catch { $null }_x000A_            # We check if the las command executed matches the line that caused the last error , in which case we know_x000A_            # it was an internal Powershell command, otherwise, there MUST be an error code._x000A_            $lastExitCodeForPrompt = if ($null -ne $lastCmdletError -and $lastCmd.CommandLine -eq $lastCmdletError.Line) { 1 } else { $origLastExitCode }_x000A_        }_x000A__x000A_        $duration = [math]::Round(($lastCmd.EndExecutionTime - $lastCmd.StartExecutionTime).TotalMilliseconds)_x000A_        # &amp; ensures the path is interpreted as something to execute_x000A_        $out = @(&amp;"C:\Users\JGrote\scoop\apps\starship\current\starship.exe" prompt "--path=$current_directory" --status=$lastExitCodeForPrompt --jobs=$jobs --cmd-duration=$duration)_x000A_    } else {_x000A_        $out = @(&amp;"C:\Users\JGrote\scoop\apps\starship\current\starship.exe" prompt "--path=$current_directory" --status=$lastExitCodeForPrompt --jobs=$jobs)_x000A_    }_x000A_    # Restore old output encoding_x000A_    [Console]::OutputEncoding = $origOutputEncoding_x000A__x000A_    # Convert stdout (array of lines) to expected return type string_x000A_    # `n is an escaped newline_x000A_    $out -join "`n"_x000A__x000A_    # Propagate the original $LASTEXITCODE from before the prompt function was invoked._x000A_    $global:LASTEXITCODE = $origLastExitCode_x000A__x000A_    # Propagate the original $? automatic variable value from before the prompt function was invoked._x000A_    #_x000A_    # $? is a read-only or constant variable so we can't directly override it._x000A_    # In order to propagate up its original boolean value we will take an action_x000A_    # which will produce the desired value._x000A_    #_x000A_    # This has to be the very last thing that happens in the prompt function_x000A_    # since every PowerShell command sets the $? variable._x000A_    if ($global:? -ne $origDollarQuestion) {_x000A_        if ($origDollarQuestion) {_x000A_             # Simple command which will execute successfully and set $? = True without any other side affects._x000A_            1+1_x000A_        } else {_x000A_            # Write-Error will set $? to False._x000A_            # ErrorAction Ignore will prevent the error from being added to the $Error collection._x000A_            Write-Error '' -ErrorAction 'Ignore'_x000A_        }_x000A_    }_x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition"> _x000D__x000A_        $env:STARSHIP_ENVVAR = if (Test-Path Variable:/PSDebugContext) {_x000D__x000A_            "`u{1f41e}"_x000D__x000A_        } else {_x000D__x000A_            $null_x000D__x000A_        }_x000D__x000A_    _x000A_    $origDollarQuestion = $global:?_x000A_    $origLastExitCode = $global:LASTEXITCODE_x000A__x000A_    $out = $null_x000A_    # @ makes sure the result is an array even if single or no values are returned_x000A_    $jobs = @(Get-Job | Where-Object { $_.State -eq 'Running' }).Count_x000A__x000A_    $env:PWD = $PWD_x000A_    $current_directory = (Convert-Path -LiteralPath $PWD)_x000A_    _x000A_    # Whe start from the premise that the command executed correctly, which covers also the fresh console._x000A_    $lastExitCodeForPrompt = 0_x000A__x000A_    # Save old output encoding and set it to UTF-8_x000A_    $origOutputEncoding = [Console]::OutputEncoding_x000A_    [Console]::OutputEncoding = [System.Text.Encoding]::UTF8_x000A_    if ($lastCmd = Get-History -Count 1) {_x000A_        # In case we have a False on the Dollar hook, we know there's an error._x000A_        if (-not $origDollarQuestion) {_x000A_            # We retrieve the InvocationInfo from the most recent error._x000A_            $lastCmdletError = try { Get-Error |  Where-Object { $_ -ne $null } | Select-Object -expand InvocationInfo } catch { $null }_x000A_            # We check if the las command executed matches the line that caused the last error , in which case we know_x000A_            # it was an internal Powershell command, otherwise, there MUST be an error code._x000A_            $lastExitCodeForPrompt = if ($null -ne $lastCmdletError -and $lastCmd.CommandLine -eq $lastCmdletError.Line) { 1 } else { $origLastExitCode }_x000A_        }_x000A__x000A_        $duration = [math]::Round(($lastCmd.EndExecutionTime - $lastCmd.StartExecutionTime).TotalMilliseconds)_x000A_        # &amp; ensures the path is interpreted as something to execute_x000A_        $out = @(&amp;"C:\Users\JGrote\scoop\apps\starship\current\starship.exe" prompt "--path=$current_directory" --status=$lastExitCodeForPrompt --jobs=$jobs --cmd-duration=$duration)_x000A_    } else {_x000A_        $out = @(&amp;"C:\Users\JGrote\scoop\apps\starship\current\starship.exe" prompt "--path=$current_directory" --status=$lastExitCodeForPrompt --jobs=$jobs)_x000A_    }_x000A_    # Restore old output encoding_x000A_    [Console]::OutputEncoding = $origOutputEncoding_x000A__x000A_    # Convert stdout (array of lines) to expected return type string_x000A_    # `n is an escaped newline_x000A_    $out -join "`n"_x000A__x000A_    # Propagate the original $LASTEXITCODE from before the prompt function was invoked._x000A_    $global:LASTEXITCODE = $origLastExitCode_x000A__x000A_    # Propagate the original $? automatic variable value from before the prompt function was invoked._x000A_    #_x000A_    # $? is a read-only or constant variable so we can't directly override it._x000A_    # In order to propagate up its original boolean value we will take an action_x000A_    # which will produce the desired value._x000A_    #_x000A_    # This has to be the very last thing that happens in the prompt function_x000A_    # since every PowerShell command sets the $? variable._x000A_    if ($global:? -ne $origDollarQuestion) {_x000A_        if ($origDollarQuestion) {_x000A_             # Simple command which will execute successfully and set $? = True without any other side affects._x000A_            1+1_x000A_        } else {_x000A_            # Write-Error will set $? to False._x000A_            # ErrorAction Ignore will prevent the error from being added to the $Error collection._x000A_            Write-Error '' -ErrorAction 'Ignore'_x000A_        }_x000A_    }_x000A_</S>
      <Obj N="Options" RefId="4268">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4269">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">prompt</S>
      <Obj N="CommandType" RefId="4270">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4271">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4272">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4273">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4274">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4275">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4276">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::prompt</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4277">
    <TNRef RefId="0" />
    <ToString>PSConsoleHostReadLine</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    Microsoft.PowerShell.Core\Set-StrictMode -Off_x000D__x000A_    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    Microsoft.PowerShell.Core\Set-StrictMode -Off_x000D__x000A_    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)_x000D__x000A_</S>
      <Obj N="Options" RefId="4278">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4279">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">PSConsoleHostReadLine</S>
      <Obj N="CommandType" RefId="4280">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PSReadLine</S>
      <Version N="Version">2.1.0</Version>
      <Obj N="Visibility" RefId="4281">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PSReadLine</S>
      <Obj N="Module" RefId="4282">
        <TNRef RefId="15" />
        <ToString>PSReadLine</ToString>
        <Props>
          <B N="LogPipelineExecutionDetails">false</B>
          <S N="Name">PSReadLine</S>
          <S N="Path">C:\program files\powershell\7\Modules\PSReadLine\PSReadLine.psm1</S>
          <Nil N="ImplementingAssembly" />
          <S N="Definition">function PSConsoleHostReadLine_x000D__x000A_{_x000D__x000A_    Microsoft.PowerShell.Core\Set-StrictMode -Off_x000D__x000A_    [Microsoft.PowerShell.PSConsoleReadLine]::ReadLine($host.Runspace, $ExecutionContext)_x000D__x000A_}_x000D__x000A__x000D__x000A__x000D__x000A_# SIG # Begin signature block_x000D__x000A_# MIIjjgYJKoZIhvcNAQcCoIIjfzCCI3sCAQExDzANBglghkgBZQMEAgEFADB5Bgor_x000D__x000A_# BgEEAYI3AgEEoGswaTA0BgorBgEEAYI3AgEeMCYCAwEAAAQQH8w7YFlLCE63JNLG_x000D__x000A_# KX7zUQIBAAIBAAIBAAIBAAIBADAxMA0GCWCGSAFlAwQCAQUABCD/yRWgb1v9cAF2_x000D__x000A_# Fgsa5s1DKnPsG+9RpMttigLBfuGUKqCCDYEwggX/MIID56ADAgECAhMzAAABh3IX_x000D__x000A_# chVZQMcJAAAAAAGHMA0GCSqGSIb3DQEBCwUAMH4xCzAJBgNVBAYTAlVTMRMwEQYD_x000D__x000A_# VQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy_x000D__x000A_# b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jvc29mdCBDb2RlIFNpZ25p_x000D__x000A_# bmcgUENBIDIwMTEwHhcNMjAwMzA0MTgzOTQ3WhcNMjEwMzAzMTgzOTQ3WjB0MQsw_x000D__x000A_# CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9u_x000D__x000A_# ZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMR4wHAYDVQQDExVNaWNy_x000D__x000A_# b3NvZnQgQ29ycG9yYXRpb24wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIB_x000D__x000A_# AQDOt8kLc7P3T7MKIhouYHewMFmnq8Ayu7FOhZCQabVwBp2VS4WyB2Qe4TQBT8aB_x000D__x000A_# znANDEPjHKNdPT8Xz5cNali6XHefS8i/WXtF0vSsP8NEv6mBHuA2p1fw2wB/F0dH_x000D__x000A_# sJ3GfZ5c0sPJjklsiYqPw59xJ54kM91IOgiO2OUzjNAljPibjCWfH7UzQ1TPHc4d_x000D__x000A_# weils8GEIrbBRb7IWwiObL12jWT4Yh71NQgvJ9Fn6+UhD9x2uk3dLj84vwt1NuFQ_x000D__x000A_# itKJxIV0fVsRNR3abQVOLqpDugbr0SzNL6o8xzOHL5OXiGGwg6ekiXA1/2XXY7yV_x000D__x000A_# Fc39tledDtZjSjNbex1zzwSXAgMBAAGjggF+MIIBejAfBgNVHSUEGDAWBgorBgEE_x000D__x000A_# AYI3TAgBBggrBgEFBQcDAzAdBgNVHQ4EFgQUhov4ZyO96axkJdMjpzu2zVXOJcsw_x000D__x000A_# UAYDVR0RBEkwR6RFMEMxKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25zIFB1_x000D__x000A_# ZXJ0byBSaWNvMRYwFAYDVQQFEw0yMzAwMTIrNDU4Mzg1MB8GA1UdIwQYMBaAFEhu_x000D__x000A_# ZOVQBdOCqhc3NyK1bajKdQKVMFQGA1UdHwRNMEswSaBHoEWGQ2h0dHA6Ly93d3cu_x000D__x000A_# bWljcm9zb2Z0LmNvbS9wa2lvcHMvY3JsL01pY0NvZFNpZ1BDQTIwMTFfMjAxMS0w_x000D__x000A_# Ny0wOC5jcmwwYQYIKwYBBQUHAQEEVTBTMFEGCCsGAQUFBzAChkVodHRwOi8vd3d3_x000D__x000A_# Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NlcnRzL01pY0NvZFNpZ1BDQTIwMTFfMjAx_x000D__x000A_# MS0wNy0wOC5jcnQwDAYDVR0TAQH/BAIwADANBgkqhkiG9w0BAQsFAAOCAgEAixmy_x000D__x000A_# S6E6vprWD9KFNIB9G5zyMuIjZAOuUJ1EK/Vlg6Fb3ZHXjjUwATKIcXbFuFC6Wr4K_x000D__x000A_# NrU4DY/sBVqmab5AC/je3bpUpjtxpEyqUqtPc30wEg/rO9vmKmqKoLPT37svc2NV_x000D__x000A_# BmGNl+85qO4fV/w7Cx7J0Bbqk19KcRNdjt6eKoTnTPHBHlVHQIHZpMxacbFOAkJr_x000D__x000A_# qAVkYZdz7ikNXTxV+GRb36tC4ByMNxE2DF7vFdvaiZP0CVZ5ByJ2gAhXMdK9+usx_x000D__x000A_# zVk913qKde1OAuWdv+rndqkAIm8fUlRnr4saSCg7cIbUwCCf116wUJ7EuJDg0vHe_x000D__x000A_# yhnCeHnBbyH3RZkHEi2ofmfgnFISJZDdMAeVZGVOh20Jp50XBzqokpPzeZ6zc1/g_x000D__x000A_# yILNyiVgE+RPkjnUQshd1f1PMgn3tns2Cz7bJiVUaqEO3n9qRFgy5JuLae6UweGf_x000D__x000A_# AeOo3dgLZxikKzYs3hDMaEtJq8IP71cX7QXe6lnMmXU/Hdfz2p897Zd+kU+vZvKI_x000D__x000A_# 3cwLfuVQgK2RZ2z+Kc3K3dRPz2rXycK5XCuRZmvGab/WbrZiC7wJQapgBodltMI5_x000D__x000A_# GMdFrBg9IeF7/rP4EqVQXeKtevTlZXjpuNhhjuR+2DMt/dWufjXpiW91bo3aH6Ea_x000D__x000A_# jOALXmoxgltCp1K7hrS6gmsvj94cLRf50QQ4U8Qwggd6MIIFYqADAgECAgphDpDS_x000D__x000A_# AAAAAAADMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJVUzETMBEGA1UECBMK_x000D__x000A_# V2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0_x000D__x000A_# IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9vdCBDZXJ0aWZpY2F0_x000D__x000A_# ZSBBdXRob3JpdHkgMjAxMTAeFw0xMTA3MDgyMDU5MDlaFw0yNjA3MDgyMTA5MDla_x000D__x000A_# MH4xCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS_x000D__x000A_# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMT_x000D__x000A_# H01pY3Jvc29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTEwggIiMA0GCSqGSIb3DQEB_x000D__x000A_# AQUAA4ICDwAwggIKAoICAQCr8PpyEBwurdhuqoIQTTS68rZYIZ9CGypr6VpQqrgG_x000D__x000A_# OBoESbp/wwwe3TdrxhLYC/A4wpkGsMg51QEUMULTiQ15ZId+lGAkbK+eSZzpaF7S_x000D__x000A_# 35tTsgosw6/ZqSuuegmv15ZZymAaBelmdugyUiYSL+erCFDPs0S3XdjELgN1q2jz_x000D__x000A_# y23zOlyhFvRGuuA4ZKxuZDV4pqBjDy3TQJP4494HDdVceaVJKecNvqATd76UPe/7_x000D__x000A_# 4ytaEB9NViiienLgEjq3SV7Y7e1DkYPZe7J7hhvZPrGMXeiJT4Qa8qEvWeSQOy2u_x000D__x000A_# M1jFtz7+MtOzAz2xsq+SOH7SnYAs9U5WkSE1JcM5bmR/U7qcD60ZI4TL9LoDho33_x000D__x000A_# X/DQUr+MlIe8wCF0JV8YKLbMJyg4JZg5SjbPfLGSrhwjp6lm7GEfauEoSZ1fiOIl_x000D__x000A_# XdMhSz5SxLVXPyQD8NF6Wy/VI+NwXQ9RRnez+ADhvKwCgl/bwBWzvRvUVUvnOaEP_x000D__x000A_# 6SNJvBi4RHxF5MHDcnrgcuck379GmcXvwhxX24ON7E1JMKerjt/sW5+v/N2wZuLB_x000D__x000A_# l4F77dbtS+dJKacTKKanfWeA5opieF+yL4TXV5xcv3coKPHtbcMojyyPQDdPweGF_x000D__x000A_# RInECUzF1KVDL3SV9274eCBYLBNdYJWaPk8zhNqwiBfenk70lrC8RqBsmNLg1oiM_x000D__x000A_# CwIDAQABo4IB7TCCAekwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFEhuZOVQ_x000D__x000A_# BdOCqhc3NyK1bajKdQKVMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1Ud_x000D__x000A_# DwQEAwIBhjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFHItOgIxkEO5FAVO_x000D__x000A_# 4eqnxzHRI4k0MFoGA1UdHwRTMFEwT6BNoEuGSWh0dHA6Ly9jcmwubWljcm9zb2Z0_x000D__x000A_# LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y_x000D__x000A_# Mi5jcmwwXgYIKwYBBQUHAQEEUjBQME4GCCsGAQUFBzAChkJodHRwOi8vd3d3Lm1p_x000D__x000A_# Y3Jvc29mdC5jb20vcGtpL2NlcnRzL01pY1Jvb0NlckF1dDIwMTFfMjAxMV8wM18y_x000D__x000A_# Mi5jcnQwgZ8GA1UdIASBlzCBlDCBkQYJKwYBBAGCNy4DMIGDMD8GCCsGAQUFBwIB_x000D__x000A_# FjNodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2RvY3MvcHJpbWFyeWNw_x000D__x000A_# cy5odG0wQAYIKwYBBQUHAgIwNB4yIB0ATABlAGcAYQBsAF8AcABvAGwAaQBjAHkA_x000D__x000A_# XwBzAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcNAQELBQADggIBAGfyhqWY_x000D__x000A_# 4FR5Gi7T2HRnIpsLlhHhY5KZQpZ90nkMkMFlXy4sPvjDctFtg/6+P+gKyju/R6mj_x000D__x000A_# 82nbY78iNaWXXWWEkH2LRlBV2AySfNIaSxzzPEKLUtCw/WvjPgcuKZvmPRul1LUd_x000D__x000A_# d5Q54ulkyUQ9eHoj8xN9ppB0g430yyYCRirCihC7pKkFDJvtaPpoLpWgKj8qa1hJ_x000D__x000A_# Yx8JaW5amJbkg/TAj/NGK978O9C9Ne9uJa7lryft0N3zDq+ZKJeYTQ49C/IIidYf_x000D__x000A_# wzIY4vDFLc5bnrRJOQrGCsLGra7lstnbFYhRRVg4MnEnGn+x9Cf43iw6IGmYslmJ_x000D__x000A_# aG5vp7d0w0AFBqYBKig+gj8TTWYLwLNN9eGPfxxvFX1Fp3blQCplo8NdUmKGwx1j_x000D__x000A_# NpeG39rz+PIWoZon4c2ll9DuXWNB41sHnIc+BncG0QaxdR8UvmFhtfDcxhsEvt9B_x000D__x000A_# xw4o7t5lL+yX9qFcltgA1qFGvVnzl6UJS0gQmYAf0AApxbGbpT9Fdx41xtKiop96_x000D__x000A_# eiL6SJUfq/tHI4D1nvi/a7dLl+LrdXga7Oo3mXkYS//WsyNodeav+vyL6wuA6mk7_x000D__x000A_# r/ww7QRMjt/fdW1jkT3RnVZOT7+AVyKheBEyIXrvQQqxP/uozKRdwaGIm1dxVk5I_x000D__x000A_# RcBCyZt2WwqASGv9eZ/BvW1taslScxMNelDNMYIVYzCCFV8CAQEwgZUwfjELMAkG_x000D__x000A_# A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQx_x000D__x000A_# HjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEoMCYGA1UEAxMfTWljcm9z_x000D__x000A_# b2Z0IENvZGUgU2lnbmluZyBQQ0EgMjAxMQITMwAAAYdyF3IVWUDHCQAAAAABhzAN_x000D__x000A_# BglghkgBZQMEAgEFAKCBrjAZBgkqhkiG9w0BCQMxDAYKKwYBBAGCNwIBBDAcBgor_x000D__x000A_# BgEEAYI3AgELMQ4wDAYKKwYBBAGCNwIBFTAvBgkqhkiG9w0BCQQxIgQgC31ZEo6s_x000D__x000A_# mltWJ83T4I2ZMo7pTDWegz3x1OotdM6JAGowQgYKKwYBBAGCNwIBDDE0MDKgFIAS_x000D__x000A_# AE0AaQBjAHIAbwBzAG8AZgB0oRqAGGh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbTAN_x000D__x000A_# BgkqhkiG9w0BAQEFAASCAQBe6GZKI+X5Gh78yGBLL+DEgTkfQD/JGHBbtmofTWoe_x000D__x000A_# g8jVlj+3EpzooETkZCp1eYiipqDdS0RgUEKOf8dvM9BJjxvBEyd+wr5EGQFVfNjx_x000D__x000A_# U/xuqFnOeHqT41FqQfrzPtiXsl075yYW+xnU6dNEzYeoM2dXB9N+2PzqJUgIsaE0_x000D__x000A_# 4mY4QFqSS/TDfx8LLYz3Lr/gMRX8qj190NF4QCk+4FORUaZ47021fHrHqG+OaahL_x000D__x000A_# OvH0xCjbbBM4RnrsWuQGWprSmxVkuJqnv/h9qTFCM7ouzCHrLufHm9sFowAv+z2w_x000D__x000A_# 8X5TGFbrvZACQXGjFO5vlfqflnjfjymbJzCvPHmz6EVGoYIS7TCCEukGCisGAQQB_x000D__x000A_# gjcDAwExghLZMIIS1QYJKoZIhvcNAQcCoIISxjCCEsICAQMxDzANBglghkgBZQME_x000D__x000A_# AgEFADCCAVQGCyqGSIb3DQEJEAEEoIIBQwSCAT8wggE7AgEBBgorBgEEAYRZCgMB_x000D__x000A_# MDEwDQYJYIZIAWUDBAIBBQAEIEkXkl3DJy2OWEINPiwhs8B3a52MiamIh4gw8MwX_x000D__x000A_# 2unNAgZfiHkOpG8YEjIwMjAxMTAyMjE1MjQ1LjYxWjAEgAIB9KCB1KSB0TCBzjEL_x000D__x000A_# MAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1v_x000D__x000A_# bmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWlj_x000D__x000A_# cm9zb2Z0IE9wZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBU_x000D__x000A_# U1MgRVNOOkY3N0YtRTM1Ni01QkFFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1T_x000D__x000A_# dGFtcCBTZXJ2aWNloIIOQTCCBPUwggPdoAMCAQICEzMAAAEq6BeW+Ian76MAAAAA_x000D__x000A_# ASowDQYJKoZIhvcNAQELBQAwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hp_x000D__x000A_# bmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw_x000D__x000A_# b3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw_x000D__x000A_# HhcNMTkxMjE5MDExNTAyWhcNMjEwMzE3MDExNTAyWjCBzjELMAkGA1UEBhMCVVMx_x000D__x000A_# EzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoT_x000D__x000A_# FU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9wZXJh_x000D__x000A_# dGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY3N0Yt_x000D__x000A_# RTM1Ni01QkFFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2aWNl_x000D__x000A_# MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAn9+VgaSF0m3FKwcG72WZ_x000D__x000A_# cX9RfE8XsvjmcSGa13TUoOixZtjzLngE3v6T0My/OpOg/f2/z9n420TMqPwF/kRC_x000D__x000A_# gbX+kl+nMIl7zQdmrKoyjShD0S6BVjpg1U1rZPW7nV33qrWEWa7V2DG3y4PaDsik_x000D__x000A_# FB2FLa2lzePccTMq9X+/ASvv8FxO7CpQequsGAdz3vV6lVHijls0qyOKRrCYzD0P_x000D__x000A_# +3KtNyLLcX0ar2kSCTwSol850BpuRqe4BZOOWYGFm1GI71bWoWnCe70bmpW900pE_x000D__x000A_# rFB23EwLTilYZ+fHMNpzv6MiqXnfYgQLlBKe9jzizMSnHDfVBb8tp9KIOYC1hYem_x000D__x000A_# bwIDAQABo4IBGzCCARcwHQYDVR0OBBYEFHD0xS10Kz+uE3bL0SQTpkj07xNpMB8G_x000D__x000A_# A1UdIwQYMBaAFNVjOlyKMZDzQ3t8RhvFM2hahW1VMFYGA1UdHwRPME0wS6BJoEeG_x000D__x000A_# RWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9wa2kvY3JsL3Byb2R1Y3RzL01pY1Rp_x000D__x000A_# bVN0YVBDQV8yMDEwLTA3LTAxLmNybDBaBggrBgEFBQcBAQROMEwwSgYIKwYBBQUH_x000D__x000A_# MAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9wa2kvY2VydHMvTWljVGltU3Rh_x000D__x000A_# UENBXzIwMTAtMDctMDEuY3J0MAwGA1UdEwEB/wQCMAAwEwYDVR0lBAwwCgYIKwYB_x000D__x000A_# BQUHAwgwDQYJKoZIhvcNAQELBQADggEBAIrANPQKcdWjjo5bJRus8iPxAhx/49OM_x000D__x000A_# FVikqDUrYPXlnrES6+Z/6Kzo3yCP1/WeQUgAu+H6IaTHwaAZr+gD0iFc0QVg80Vo_x000D__x000A_# fAdqf9QTDU/pON1qrLdy8sLx/zMTUJHUuFc2h+rrF+hP0csYVKD2yQ8szVND5EBB_x000D__x000A_# f0yKASbwUWWGGxDWIYHXf33Hx33aH0qymoYOc73pn0CPs5sO11TpGhmuxmSJFA2d_x000D__x000A_# eadfUj5G7C0u7ww3xeEktKXnCqoczeuppoy9IAhJW0rJKnMkLlmH7mQmWoV1KIgd_x000D__x000A_# bxD7xHoRYbwgtv09/7D8/J3IrdlORVdSkUD4mFaNzLOmFUbD19+PRgowggZxMIIE_x000D__x000A_# WaADAgECAgphCYEqAAAAAAACMA0GCSqGSIb3DQEBCwUAMIGIMQswCQYDVQQGEwJV_x000D__x000A_# UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE_x000D__x000A_# ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3NvZnQgUm9v_x000D__x000A_# dCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAxMDAeFw0xMDA3MDEyMTM2NTVaFw0y_x000D__x000A_# NTA3MDEyMTQ2NTVaMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u_x000D__x000A_# MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp_x000D__x000A_# b24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIIBIjAN_x000D__x000A_# BgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAqR0NvHcRijog7PwTl/X6f2mUa3RU_x000D__x000A_# ENWlCgCChfvtfGhLLF/Fw+Vhwna3PmYrW/AVUycEMR9BGxqVHc4JE458YTBZsTBE_x000D__x000A_# D/FgiIRUQwzXTbg4CLNC3ZOs1nMwVyaCo0UN0Or1R4HNvyRgMlhgRvJYR4YyhB50_x000D__x000A_# YWeRX4FUsc+TTJLBxKZd0WETbijGGvmGgLvfYfxGwScdJGcSchohiq9LZIlQYrFd_x000D__x000A_# /XcfPfBXday9ikJNQFHRD5wGPmd/9WbAA5ZEfu/QS/1u5ZrKsajyeioKMfDaTgaR_x000D__x000A_# togINeh4HLDpmc085y9Euqf03GS9pAHBIAmTeM38vMDJRF1eFpwBBU8iTQIDAQAB_x000D__x000A_# o4IB5jCCAeIwEAYJKwYBBAGCNxUBBAMCAQAwHQYDVR0OBBYEFNVjOlyKMZDzQ3t8_x000D__x000A_# RhvFM2hahW1VMBkGCSsGAQQBgjcUAgQMHgoAUwB1AGIAQwBBMAsGA1UdDwQEAwIB_x000D__x000A_# hjAPBgNVHRMBAf8EBTADAQH/MB8GA1UdIwQYMBaAFNX2VsuP6KJcYmjRPZSQW9fO_x000D__x000A_# mhjEMFYGA1UdHwRPME0wS6BJoEeGRWh0dHA6Ly9jcmwubWljcm9zb2Z0LmNvbS9w_x000D__x000A_# a2kvY3JsL3Byb2R1Y3RzL01pY1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNybDBaBggr_x000D__x000A_# BgEFBQcBAQROMEwwSgYIKwYBBQUHMAKGPmh0dHA6Ly93d3cubWljcm9zb2Z0LmNv_x000D__x000A_# bS9wa2kvY2VydHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3J0MIGgBgNVHSAB_x000D__x000A_# Af8EgZUwgZIwgY8GCSsGAQQBgjcuAzCBgTA9BggrBgEFBQcCARYxaHR0cDovL3d3_x000D__x000A_# dy5taWNyb3NvZnQuY29tL1BLSS9kb2NzL0NQUy9kZWZhdWx0Lmh0bTBABggrBgEF_x000D__x000A_# BQcCAjA0HjIgHQBMAGUAZwBhAGwAXwBQAG8AbABpAGMAeQBfAFMAdABhAHQAZQBt_x000D__x000A_# AGUAbgB0AC4gHTANBgkqhkiG9w0BAQsFAAOCAgEAB+aIUQ3ixuCYP4FxAz2do6Eh_x000D__x000A_# b7Prpsz1Mb7PBeKp/vpXbRkws8LFZslq3/Xn8Hi9x6ieJeP5vO1rVFcIK1GCRBL7_x000D__x000A_# uVOMzPRgEop2zEBAQZvcXBf/XPleFzWYJFZLdO9CEMivv3/Gf/I3fVo/HPKZeUqR_x000D__x000A_# UgCvOA8X9S95gWXZqbVr5MfO9sp6AG9LMEQkIjzP7QOllo9ZKby2/QThcJ8ySif9_x000D__x000A_# Va8v/rbljjO7Yl+a21dA6fHOmWaQjP9qYn/dxUoLkSbiOewZSnFjnXshbcOco6I8_x000D__x000A_# +n99lmqQeKZt0uGc+R38ONiU9MalCpaGpL2eGq4EQoO4tYCbIjggtSXlZOz39L9+_x000D__x000A_# Y1klD3ouOVd2onGqBooPiRa6YacRy5rYDkeagMXQzafQ732D8OE7cQnfXXSYIghh_x000D__x000A_# 2rBQHm+98eEA3+cxB6STOvdlR3jo+KhIq/fecn5ha293qYHLpwmsObvsxsvYgrRy_x000D__x000A_# zR30uIUBHoD7G4kqVDmyW9rIDVWZeodzOwjmmC3qjeAzLhIp9cAvVCch98isTtoo_x000D__x000A_# uLGp25ayp0Kiyc8ZQU3ghvkqmqMRZjDTu3QyS99je/WZii8bxyGvWbWu3EQ8l1Bx_x000D__x000A_# 16HSxVXjad5XwdHeMMD9zOZN+w2/XU/pnR4ZOC+8z1gFLu8NoFA12u8JJxzVs341_x000D__x000A_# Hgi62jbb01+P3nSISRKhggLPMIICOAIBATCB/KGB1KSB0TCBzjELMAkGA1UEBhMC_x000D__x000A_# VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV_x000D__x000A_# BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEpMCcGA1UECxMgTWljcm9zb2Z0IE9w_x000D__x000A_# ZXJhdGlvbnMgUHVlcnRvIFJpY28xJjAkBgNVBAsTHVRoYWxlcyBUU1MgRVNOOkY3_x000D__x000A_# N0YtRTM1Ni01QkFFMSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBTZXJ2_x000D__x000A_# aWNloiMKAQEwBwYFKw4DAhoDFQDqsuasofIgw/vp4+XfbXEpQndhf6CBgzCBgKR+_x000D__x000A_# MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdS_x000D__x000A_# ZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMT_x000D__x000A_# HU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA_x000D__x000A_# 40qxVDAiGA8yMDIwMTEwMjIwMjQ1MloYDzIwMjAxMTAzMjAyNDUyWjB0MDoGCisG_x000D__x000A_# AQQBhFkKBAExLDAqMAoCBQDjSrFUAgEAMAcCAQACAgxVMAcCAQACAhF+MAoCBQDj_x000D__x000A_# TALUAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQBhFkKAwKgCjAIAgEAAgMH_x000D__x000A_# oSChCjAIAgEAAgMBhqAwDQYJKoZIhvcNAQEFBQADgYEAup2lEHmzWgilFnx8eiJB_x000D__x000A_# zSLK+CBMSfxed7MaFTisROwfCSZXfVeCx3/FG2RBHJKmLnZw5dXkyQqYqtU26P97_x000D__x000A_# kYQFATpkt6eL++jUU0fjcSc+IZTw47jW0FyUzImGchpp83obPuox+bT7EVSx9yAh_x000D__x000A_# 9wiw8QJq3jp4+YKCNZ/RlgYxggMNMIIDCQIBATCBkzB8MQswCQYDVQQGEwJVUzET_x000D__x000A_# MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMV_x000D__x000A_# TWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGltZS1T_x000D__x000A_# dGFtcCBQQ0EgMjAxMAITMwAAASroF5b4hqfvowAAAAABKjANBglghkgBZQMEAgEF_x000D__x000A_# AKCCAUowGgYJKoZIhvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJBDEi_x000D__x000A_# BCAz/AUNyIcmAVhIKFoJ78kc7wewkYjUF31SYtNLKBLjmTCB+gYLKoZIhvcNAQkQ_x000D__x000A_# Ai8xgeowgecwgeQwgb0EIEOYNYRa9zp+Gzm3haijlD4UwUJxoiBXjJQ/gKm4GYuZ_x000D__x000A_# MIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO_x000D__x000A_# BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEm_x000D__x000A_# MCQGA1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTACEzMAAAEq6BeW_x000D__x000A_# +Ian76MAAAAAASowIgQg+PE7onWse0OxOd2NQhXPTWMtt7AayaDQF/Cggg82wsow_x000D__x000A_# DQYJKoZIhvcNAQELBQAEggEAXAnk0ibwlG+zMAnM3hLCyw3TMXJtML9k1ZwfFLqZ_x000D__x000A_# ffrbzqUZI7fQIK3+XjcLgFrIAywWfaAALtPhUOBJQWxyH8NKaXpWjD6O+M3pc+o/_x000D__x000A_# QsfCXtqD+6K1ic4Sp0OVZl6mpMVgTjnuz/JJYdsVRTMMf5mESnY8JFL0Y5aa6igN_x000D__x000A_# y4sl6p3pwPcNAc2F9/xr3RL3WckeJXBQ7xaTC/Wb+fKG2v0oLCmWA2uj8awKsK1j_x000D__x000A_# 7O8ou1B73uxcLp6Q3HfK3ctxpKNI2pLXZVpsEB54XV7m4AOATELYOuBEpnpDxpsX_x000D__x000A_# B32DE+qyS13QiHufKl4XQ2sBo9TEXf/FO8VoNV4w66fAwA==_x000D__x000A_# SIG # End signature block_x000D__x000A_</S>
          <S N="Description">Great command line editing in the PowerShell console host</S>
          <G N="Guid">5714753b-2afd-4492-a5fd-01d9e2cff8b5</G>
          <S N="HelpInfoUri">https://aka.ms/powershell71-help</S>
          <S N="ModuleBase">C:\program files\powershell\7\Modules\PSReadLine</S>
          <Nil N="PrivateData" />
          <Ref N="ExperimentalFeatures" RefId="24" />
          <Obj N="Tags" RefId="4283">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Nil N="ProjectUri" />
          <Nil N="IconUri" />
          <Nil N="LicenseUri" />
          <Nil N="ReleaseNotes" />
          <Nil N="RepositorySourceLocation" />
          <Version N="Version">2.1.0</Version>
          <S N="ModuleType">Script</S>
          <S N="Author">Microsoft Corporation</S>
          <S N="AccessMode">ReadWrite</S>
          <Version N="ClrVersion">4.0.0</Version>
          <S N="CompanyName">Microsoft Corporation</S>
          <S N="Copyright">(c) Microsoft Corporation. All rights reserved.</S>
          <Version N="DotNetFrameworkVersion">4.6.1</Version>
          <Obj N="ExportedFunctions" RefId="4284">
            <TNRef RefId="20" />
            <DCT>
              <En>
                <S N="Key">PSConsoleHostReadLine</S>
                <S N="Value">PSConsoleHostReadLine</S>
              </En>
            </DCT>
          </Obj>
          <S N="Prefix"></S>
          <Obj N="ExportedCmdlets" RefId="4285">
            <TNRef RefId="21" />
            <DCT>
              <En>
                <S N="Key">Get-PSReadLineKeyHandler</S>
                <S N="Value">Get-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Get-PSReadLineOption</S>
                <S N="Value">Get-PSReadLineOption</S>
              </En>
              <En>
                <S N="Key">Remove-PSReadLineKeyHandler</S>
                <S N="Value">Remove-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Set-PSReadLineKeyHandler</S>
                <S N="Value">Set-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Set-PSReadLineOption</S>
                <S N="Value">Set-PSReadLineOption</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="ExportedCommands" RefId="4286">
            <TNRef RefId="22" />
            <DCT>
              <En>
                <S N="Key">Get-PSReadLineKeyHandler</S>
                <S N="Value">Get-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Get-PSReadLineOption</S>
                <S N="Value">Get-PSReadLineOption</S>
              </En>
              <En>
                <S N="Key">Remove-PSReadLineKeyHandler</S>
                <S N="Value">Remove-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Set-PSReadLineKeyHandler</S>
                <S N="Value">Set-PSReadLineKeyHandler</S>
              </En>
              <En>
                <S N="Key">Set-PSReadLineOption</S>
                <S N="Value">Set-PSReadLineOption</S>
              </En>
              <En>
                <S N="Key">PSConsoleHostReadLine</S>
                <S N="Value">PSConsoleHostReadLine</S>
              </En>
            </DCT>
          </Obj>
          <Obj N="FileList" RefId="4287">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="CompatiblePSEditions" RefId="4288">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="ModuleList" RefId="4289">
            <TNRef RefId="23" />
            <LST />
          </Obj>
          <Obj N="NestedModules" RefId="4290">
            <TNRef RefId="24" />
            <LST>
              <S>Microsoft.PowerShell.PSReadLine2</S>
            </LST>
          </Obj>
          <Nil N="PowerShellHostName" />
          <Nil N="PowerShellHostVersion" />
          <Version N="PowerShellVersion">5.0</Version>
          <S N="ProcessorArchitecture">None</S>
          <Obj N="Scripts" RefId="4291">
            <TNRef RefId="19" />
            <LST />
          </Obj>
          <Obj N="RequiredAssemblies" RefId="4292">
            <TNRef RefId="25" />
            <LST />
          </Obj>
          <Obj N="RequiredModules" RefId="4293">
            <TNRef RefId="24" />
            <LST />
          </Obj>
          <S N="RootModule">PSReadLine.psm1</S>
          <Obj N="ExportedVariables" RefId="4294">
            <TNRef RefId="26" />
            <DCT />
          </Obj>
          <Obj N="ExportedAliases" RefId="4295">
            <TNRef RefId="27" />
            <DCT />
          </Obj>
          <Obj N="ExportedDscResources" RefId="4296">
            <TNRef RefId="28" />
            <LST />
          </Obj>
          <S N="SessionState">System.Management.Automation.SessionState</S>
          <Nil N="OnRemove" />
          <Obj N="ExportedFormatFiles" RefId="4297">
            <TNRef RefId="28" />
            <LST>
              <S>C:\program files\powershell\7\Modules\PSReadLine\PSReadLine.format.ps1xml</S>
            </LST>
          </Obj>
          <Obj N="ExportedTypeFiles" RefId="4298">
            <TNRef RefId="28" />
            <LST />
          </Obj>
        </Props>
      </Obj>
      <Obj N="RemotingCapability" RefId="4299">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4300">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4301">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4302">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4303">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::PSConsoleHostReadLine</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PSReadLine</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4304">
    <TNRef RefId="0" />
    <ToString>Q:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="4305">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4306">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Q:</S>
      <Obj N="CommandType" RefId="4307">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4308">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4309">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4310">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4311">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4312">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4313">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Q:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4314">
    <TNRef RefId="0" />
    <ToString>R:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="4315">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4316">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">R:</S>
      <Obj N="CommandType" RefId="4317">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4318">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4319">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4320">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4321">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4322">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4323">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::R:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4324">
    <TNRef RefId="0" />
    <ToString>Register-EditorCommand</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Name,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$DisplayName,_x000D__x000A__x000D__x000A_        [Parameter(_x000D__x000A_            Mandatory=$true,_x000D__x000A_            ParameterSetName="Function")]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Function,_x000D__x000A__x000D__x000A_        [Parameter(_x000D__x000A_            Mandatory=$true,_x000D__x000A_            ParameterSetName="ScriptBlock")]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [ScriptBlock]$ScriptBlock,_x000D__x000A__x000D__x000A_        [switch]$SuppressOutput_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process_x000D__x000A_    {_x000D__x000A_        $commandArgs = @($Name, $DisplayName, $SuppressOutput.IsPresent)_x000D__x000A__x000D__x000A_        $editorCommand = if ($ScriptBlock -ne $null)_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registering command '$Name' which executes a ScriptBlock"_x000D__x000A_            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $ScriptBlock)_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registering command '$Name' which executes a function"_x000D__x000A_            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $Function)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($psEditor.RegisterCommand($editorCommand))_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registered new command '$Name'"_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Updated existing command '$Name'"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Name,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$DisplayName,_x000D__x000A__x000D__x000A_        [Parameter(_x000D__x000A_            Mandatory=$true,_x000D__x000A_            ParameterSetName="Function")]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Function,_x000D__x000A__x000D__x000A_        [Parameter(_x000D__x000A_            Mandatory=$true,_x000D__x000A_            ParameterSetName="ScriptBlock")]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [ScriptBlock]$ScriptBlock,_x000D__x000A__x000D__x000A_        [switch]$SuppressOutput_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process_x000D__x000A_    {_x000D__x000A_        $commandArgs = @($Name, $DisplayName, $SuppressOutput.IsPresent)_x000D__x000A__x000D__x000A_        $editorCommand = if ($ScriptBlock -ne $null)_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registering command '$Name' which executes a ScriptBlock"_x000D__x000A_            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $ScriptBlock)_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registering command '$Name' which executes a function"_x000D__x000A_            [Microsoft.PowerShell.EditorServices.Extensions.EditorCommand, Microsoft.PowerShell.EditorServices]::new($Name, $DisplayName, $SuppressOutput, $Function)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($psEditor.RegisterCommand($editorCommand))_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Registered new command '$Name'"_x000D__x000A_        }_x000D__x000A_        else_x000D__x000A_        {_x000D__x000A_            Write-Verbose "Updated existing command '$Name'"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4325">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Register</S>
      <S N="Noun">EditorCommand</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4326">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Register-EditorCommand</S>
      <Obj N="CommandType" RefId="4327">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="4328">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="4329">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4330">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="4331">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4332">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DisplayName</S>
            <Obj N="Value" RefId="4333">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DisplayName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4334">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Function</S>
            <Obj N="Value" RefId="4335">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Function</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4336">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ScriptBlock</S>
            <Obj N="Value" RefId="4337">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ScriptBlock</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="4338">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SuppressOutput</S>
            <Obj N="Value" RefId="4339">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SuppressOutput</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4340">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4341">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4342">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4343">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4344">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4345">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4346">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4347">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4348">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4349">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4350">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4351">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4352">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4353">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4354">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4355">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4356">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4357">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4358">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4359">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4360">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4361">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4362">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4363">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4364">
            <TNRef RefId="8" />
            <ToString>-Name &lt;string&gt; -DisplayName &lt;string&gt; -Function &lt;string&gt; [-SuppressOutput] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Function</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4365">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4366">
            <TNRef RefId="8" />
            <ToString>-Name &lt;string&gt; -DisplayName &lt;string&gt; -ScriptBlock &lt;scriptblock&gt; [-SuppressOutput] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ScriptBlock</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4367">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Register-EditorCommand</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Register-EditorCommand.md</S>
    </MS>
  </Obj>
  <Obj RefId="4368">
    <TNRef RefId="0" />
    <ToString>Remove-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(SupportsShouldProcess=$true)]_x000D__x000A_    param(_x000D__x000A_        #    [Parameter(ValueFromPipelineByPropertyName)]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName)]_x000D__x000A_        [Alias('Path')]_x000D__x000A_        $FullName,_x000D__x000A_        [String[]]$WorksheetName = "Sheet1",_x000D__x000A_        [Switch]$Show_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process {_x000D__x000A_        if (!$FullName) {_x000D__x000A_            throw "Remove-Worksheet requires the and Excel file"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $pkg = Open-ExcelPackage -Path $FullName_x000D__x000A__x000D__x000A_        if ($pkg) {_x000D__x000A_            foreach ($wsn in $WorksheetName) {_x000D__x000A_                if ($PSCmdlet.ShouldProcess($FullName,"Remove Sheet $wsn")) {_x000D__x000A_                    $pkg.Workbook.Worksheets.Delete($wsn)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            Close-ExcelPackage -ExcelPackage $pkg -Show:$Show_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding(SupportsShouldProcess=$true)]_x000D__x000A_    param(_x000D__x000A_        #    [Parameter(ValueFromPipelineByPropertyName)]_x000D__x000A_        [Parameter(ValueFromPipelineByPropertyName)]_x000D__x000A_        [Alias('Path')]_x000D__x000A_        $FullName,_x000D__x000A_        [String[]]$WorksheetName = "Sheet1",_x000D__x000A_        [Switch]$Show_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process {_x000D__x000A_        if (!$FullName) {_x000D__x000A_            throw "Remove-Worksheet requires the and Excel file"_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $pkg = Open-ExcelPackage -Path $FullName_x000D__x000A__x000D__x000A_        if ($pkg) {_x000D__x000A_            foreach ($wsn in $WorksheetName) {_x000D__x000A_                if ($PSCmdlet.ShouldProcess($FullName,"Remove Sheet $wsn")) {_x000D__x000A_                    $pkg.Workbook.Worksheets.Delete($wsn)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            Close-ExcelPackage -ExcelPackage $pkg -Show:$Show_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4369">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Remove</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4370">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Remove-Worksheet</S>
      <Obj N="CommandType" RefId="4371">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4372">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4373">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4374">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">FullName</S>
            <Obj N="Value" RefId="4375">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FullName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4376">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Path</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="4377">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4378">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="4379">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4380">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4381">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4382">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4383">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4384">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4385">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4386">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4387">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4388">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4389">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4390">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4391">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4392">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4393">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4394">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4395">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4396">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4397">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4398">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4399">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4400">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4401">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4402">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WhatIf</S>
            <Obj N="Value" RefId="4403">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WhatIf</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4404">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wi</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Confirm</S>
            <Obj N="Value" RefId="4405">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Confirm</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4406">
                  <TNRef RefId="25" />
                  <LST>
                    <S>cf</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4407">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4408">
            <TNRef RefId="8" />
            <ToString>[[-FullName] &lt;Object&gt;] [[-WorksheetName] &lt;string[]&gt;] [-Show] [-WhatIf] [-Confirm] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4409">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Remove-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4410">
    <TNRef RefId="0" />
    <ToString>S:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="4411">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4412">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">S:</S>
      <Obj N="CommandType" RefId="4413">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4414">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4415">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4416">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4417">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4418">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4419">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::S:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4420">
    <TNRef RefId="0" />
    <ToString>scoop</ToString>
    <Props>
      <SBK N="ScriptBlock"> if ($args[0] -eq "search") { scoop-search.exe @($args | Select-Object -Skip 1) } else { scoop.ps1 @args } </SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition"> if ($args[0] -eq "search") { scoop-search.exe @($args | Select-Object -Skip 1) } else { scoop.ps1 @args } </S>
      <Obj N="Options" RefId="4421">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4422">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">scoop</S>
      <Obj N="CommandType" RefId="4423">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="4424">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="4425">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4426">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="4427">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4428">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4429">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::scoop</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4430">
    <TNRef RefId="0" />
    <ToString>Select-Worksheet</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = 'Package', Position = 0)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'Workbook')]_x000D__x000A_        [OfficeOpenXml.ExcelWorkbook]$ExcelWorkbook,_x000D__x000A_        [Parameter(ParameterSetName='Package')]_x000D__x000A_        [Parameter(ParameterSetName='Workbook')]_x000D__x000A_        [string]$WorksheetName,_x000D__x000A_        [Parameter(ParameterSetName='Sheet',Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$ExcelWorksheet_x000D__x000A_    )_x000D__x000A_    #if we were given a package, use its workbook_x000D__x000A_    if      ($ExcelPackage   -and -not $ExcelWorkbook) {$ExcelWorkbook  = $ExcelPackage.Workbook}_x000D__x000A_    #if we now have workbook, get the worksheet; if we were given a sheet get the workbook_x000D__x000A_    if      ($ExcelWorkbook  -and $WorksheetName)      {$ExcelWorksheet = $ExcelWorkbook.Worksheets[$WorksheetName]}_x000D__x000A_    elseif  ($ExcelWorksheet -and -not $ExcelWorkbook) {$ExcelWorkbook  = $ExcelWorksheet.Workbook ; }_x000D__x000A_    #if we didn't get to a worksheet give up. If we did set all works sheets to not selected and then the one we want to selected._x000D__x000A_    if (-not $ExcelWorksheet) {Write-Warning -Message "The worksheet $WorksheetName was not found." ; return }_x000D__x000A_    else {_x000D__x000A_        foreach ($w in $ExcelWorkbook.Worksheets) {$w.View.TabSelected = $false}_x000D__x000A_        $ExcelWorksheet.View.TabSelected = $true_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory = $true, ValueFromPipeline = $true, ParameterSetName = 'Package', Position = 0)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(Mandatory = $true, ParameterSetName = 'Workbook')]_x000D__x000A_        [OfficeOpenXml.ExcelWorkbook]$ExcelWorkbook,_x000D__x000A_        [Parameter(ParameterSetName='Package')]_x000D__x000A_        [Parameter(ParameterSetName='Workbook')]_x000D__x000A_        [string]$WorksheetName,_x000D__x000A_        [Parameter(ParameterSetName='Sheet',Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$ExcelWorksheet_x000D__x000A_    )_x000D__x000A_    #if we were given a package, use its workbook_x000D__x000A_    if      ($ExcelPackage   -and -not $ExcelWorkbook) {$ExcelWorkbook  = $ExcelPackage.Workbook}_x000D__x000A_    #if we now have workbook, get the worksheet; if we were given a sheet get the workbook_x000D__x000A_    if      ($ExcelWorkbook  -and $WorksheetName)      {$ExcelWorksheet = $ExcelWorkbook.Worksheets[$WorksheetName]}_x000D__x000A_    elseif  ($ExcelWorksheet -and -not $ExcelWorkbook) {$ExcelWorkbook  = $ExcelWorksheet.Workbook ; }_x000D__x000A_    #if we didn't get to a worksheet give up. If we did set all works sheets to not selected and then the one we want to selected._x000D__x000A_    if (-not $ExcelWorksheet) {Write-Warning -Message "The worksheet $WorksheetName was not found." ; return }_x000D__x000A_    else {_x000D__x000A_        foreach ($w in $ExcelWorkbook.Worksheets) {$w.View.TabSelected = $false}_x000D__x000A_        $ExcelWorksheet.View.TabSelected = $true_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4431">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Select</S>
      <S N="Noun">Worksheet</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4432">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Select-Worksheet</S>
      <Obj N="CommandType" RefId="4433">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4434">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4435">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4436">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="4437">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="4438">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelWorkbook</S>
            <Obj N="Value" RefId="4439">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelWorkbook</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorkbook</S>
                <Obj N="Aliases" RefId="4440">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="4441">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4442">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelWorksheet</S>
            <Obj N="Value" RefId="4443">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelWorksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="4444">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4445">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4446">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4447">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4448">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4449">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4450">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4451">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4452">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4453">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4454">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4455">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4456">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4457">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4458">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4459">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4460">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4461">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4462">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4463">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4464">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4465">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4466">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4467">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4468">
            <TNRef RefId="8" />
            <ToString>[-ExcelPackage] &lt;ExcelPackage&gt; [-WorksheetName &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Package</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4469">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4470">
            <TNRef RefId="8" />
            <ToString>-ExcelWorkbook &lt;ExcelWorkbook&gt; [-WorksheetName &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Workbook</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4471">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4472">
            <TNRef RefId="8" />
            <ToString>-ExcelWorksheet &lt;ExcelWorksheet&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Sheet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4473">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Select-Worksheet</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4474">
    <TNRef RefId="0" />
    <ToString>Send-SQLDataToExcel</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="none")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidGlobalVars', '', Justification="Allowed to use DBSessions Global variable from GETSQL Module")]_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ODBCConnection",  Mandatory=$true)]_x000D__x000A_        $Connection,_x000D__x000A_        [Parameter(ParameterSetName="ExistingSession", Mandatory=$true)]_x000D__x000A_        $Session,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [switch]$MsSqlServer,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection")]_x000D__x000A_        [String]$DataBase,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ODBCConnection",  Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ExistingSession", Mandatory=$true)]_x000D__x000A_        [string]$SQL,_x000D__x000A_        [int]$QueryTimeout,_x000D__x000A_        [Parameter(ParameterSetName="Pre-FetchedData", Mandatory=$true)]_x000D__x000A_        [System.Data.DataTable]$DataTable,_x000D__x000A_        [switch]$Force_x000D__x000A_    )_x000D__x000A_#Import the parameters from Export-Excel, we will pass InputObject, and we have the common parameters so exclude those,_x000D__x000A_#and re-write the [Parmameter] attribute on each one to avoid parameterSetName here competing with the settings in Export excel._x000D__x000A_#The down side of this that impossible parameter combinations won't be filtered out and need to be caught later._x000D__x000A_    DynamicParam {_x000D__x000A_        $ParameterAttribute  =                        "System.Management.Automation.ParameterAttribute"_x000D__x000A_        $RuntimeDefinedParam =                        "System.Management.Automation.RuntimeDefinedParameter"_x000D__x000A_        $paramDictionary     =    New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A_        $attributeCollection =    New-Object -TypeName System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A_        $attributeCollection.Add((New-Object -TypeName $ParameterAttribute -Property @{ ParameterSetName = "__AllParameterSets" ;Mandatory = $false}))_x000D__x000A_        foreach ($P in (Get-Command -Name Export-Excel).Parameters.values.where({$_.name -notmatch 'Verbose|Debug|Action$|Variable$|Buffer$|TargetData$|InputObject$'}))  {_x000D__x000A_            $paramDictionary.Add($p.Name, (New-Object -TypeName $RuntimeDefinedParam -ArgumentList $p.name, $p.ParameterType, $attributeCollection ) )_x000D__x000A_        }_x000D__x000A_        return $paramDictionary_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_      #region Dynamic params mean we can get passed parameter combination Export-Excel will reject, so throw here, rather than get data and then have Export-Excel error._x000D__x000A_        if ($PSBoundParameters.Path -and $PSBoundParameters.ExcelPackage) {_x000D__x000A_            throw 'Parameter error: you cannot specify both a path and an Excel Package.'_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        if ($PSBoundParameters.AutoFilter -and ($PSBoundParameters.TableName -or $PSBoundParameters.TableStyle)) {_x000D__x000A_            Write-Warning "Tables are automatically auto-filtered, -AutoFilter will be ignored"_x000D__x000A_            $null = $PSBoundParameters.Remove('AutoFilter')_x000D__x000A_        }_x000D__x000A_      #endregion_x000D__x000A_      #region if we were either given a session object or a connection string (&amp; optionally -MsSqlServer) make sure we can connect_x000D__x000A_        try {_x000D__x000A_            #If we got -MsSqlServer, create a SQL connection, if we didn't but we got -Connection create an ODBC connection_x000D__x000A_            if     ($MsSqlServer -and $Connection) {_x000D__x000A_                if ($Connection -notmatch '=') {$Connection = "server=$Connection;trusted_connection=true;timeout=60"}_x000D__x000A_                $Session     = New-Object -TypeName System.Data.SqlClient.SqlConnection  -ArgumentList $Connection_x000D__x000A_                if ($Session.State -ne 'Open') {$Session.Open()}_x000D__x000A_                if ($DataBase) {$Session.ChangeDatabase($DataBase) }_x000D__x000A_            }_x000D__x000A_            elseif ($Connection)  {_x000D__x000A_                $Session     = New-Object -TypeName System.Data.Odbc.OdbcConnection      -ArgumentList $Connection ; $Session.ConnectionTimeout = 30_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            Write-Warning "An Error occured trying to connect to $Connection, the error was $([Environment]::NewLine + $_.Exception.InnerException))"_x000D__x000A_        }_x000D__x000A_        if ($Session -is [String] -and $Global:DbSessions[$Session]) {$Session = $Global:DbSessions[$Session]}_x000D__x000A_      #endregion_x000D__x000A_      #region we may have been given a table, but if there is a db session to connect to, send the query_x000D__x000A_        if     ($Session) {_x000D__x000A_            try {_x000D__x000A_                #If the session a SQL one make a SQL DataAdapter, otherwise make an ODBC one_x000D__x000A_                if ($Session.GetType().name -match "SqlConnection") {_x000D__x000A_                    $dataAdapter = New-Object -TypeName System.Data.SqlClient.SqlDataAdapter -ArgumentList (_x000D__x000A_                                New-Object -TypeName System.Data.SqlClient.SqlCommand     -ArgumentList $SQL, $Session)_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $dataAdapter = New-Object -TypeName System.Data.Odbc.OdbcDataAdapter     -ArgumentList (_x000D__x000A_                                New-Object -TypeName System.Data.Odbc.OdbcCommand         -ArgumentList $SQL, $Session )_x000D__x000A_                }_x000D__x000A_                if ($QueryTimeout) {$dataAdapter.SelectCommand.CommandTimeout = $QueryTimeout}_x000D__x000A__x000D__x000A_                #Both adapter types output the same kind of table, create one and fill it from the adapter_x000D__x000A_                $DataTable       = New-Object -TypeName System.Data.DataTable_x000D__x000A_                $rowCount        = $dataAdapter.fill($dataTable)_x000D__x000A_                Write-Verbose -Message "Query returned $rowCount row(s)"_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_                Write-Warning "An Error occured trying to run the query, the error was $([Environment]::NewLine + $_.Exception.InnerException))"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_      #endregion_x000D__x000A_      #region send the table to Excel_x000D__x000A_        #remove parameters which relate to querying SQL, leaving the ones used by Export-Excel_x000D__x000A_        'Connection' , 'Database'  , 'Session' , 'MsSqlServer' , 'SQL'  , 'DataTable'  , 'QueryTimeout' , 'Force' |_x000D__x000A_                ForEach-Object {$null = $PSBoundParameters.Remove($_) }_x000D__x000A_        #if force was specified export even if there are no rows. If there are no columns, the query failed and export "null" if forced_x000D__x000A_        if     ($DataTable.Rows.Count) {_x000D__x000A_             Export-Excel  @PSBoundParameters -InputObject $DataTable_x000D__x000A_        }_x000D__x000A_        elseif ($Force -and $DataTable.Columns.Count) {_x000D__x000A_            Write-Warning -Message "Zero rows returned, and -Force was specified, sending empty table to Excel."_x000D__x000A_            Export-Excel  @PSBoundParameters -InputObject $DataTable_x000D__x000A_        }_x000D__x000A_        elseif ($Force) {_x000D__x000A_            Write-Warning -Message "-Force was specified but there is no data to send."_x000D__x000A_            Export-Excel  @PSBoundParameters -InputObject $null_x000D__x000A_        }_x000D__x000A_        else   {Write-Warning -Message 'There is no Data to insert, and -Force was not specified.' }_x000D__x000A_      #endregion_x000D__x000A_      #If we were passed a connection and opened a session,  close that session._x000D__x000A_        if     ($Connection)  {$Session.close() }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">none</S>
      <S N="Definition">_x000D__x000A_    [CmdletBinding(DefaultParameterSetName="none")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSAvoidGlobalVars', '', Justification="Allowed to use DBSessions Global variable from GETSQL Module")]_x000D__x000A__x000D__x000A_    param (_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ODBCConnection",  Mandatory=$true)]_x000D__x000A_        $Connection,_x000D__x000A_        [Parameter(ParameterSetName="ExistingSession", Mandatory=$true)]_x000D__x000A_        $Session,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [switch]$MsSqlServer,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection")]_x000D__x000A_        [String]$DataBase,_x000D__x000A_        [Parameter(ParameterSetName="SQLConnection",   Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ODBCConnection",  Mandatory=$true)]_x000D__x000A_        [Parameter(ParameterSetName="ExistingSession", Mandatory=$true)]_x000D__x000A_        [string]$SQL,_x000D__x000A_        [int]$QueryTimeout,_x000D__x000A_        [Parameter(ParameterSetName="Pre-FetchedData", Mandatory=$true)]_x000D__x000A_        [System.Data.DataTable]$DataTable,_x000D__x000A_        [switch]$Force_x000D__x000A_    )_x000D__x000A_#Import the parameters from Export-Excel, we will pass InputObject, and we have the common parameters so exclude those,_x000D__x000A_#and re-write the [Parmameter] attribute on each one to avoid parameterSetName here competing with the settings in Export excel._x000D__x000A_#The down side of this that impossible parameter combinations won't be filtered out and need to be caught later._x000D__x000A_    DynamicParam {_x000D__x000A_        $ParameterAttribute  =                        "System.Management.Automation.ParameterAttribute"_x000D__x000A_        $RuntimeDefinedParam =                        "System.Management.Automation.RuntimeDefinedParameter"_x000D__x000A_        $paramDictionary     =    New-Object -TypeName System.Management.Automation.RuntimeDefinedParameterDictionary_x000D__x000A_        $attributeCollection =    New-Object -TypeName System.Collections.ObjectModel.Collection[System.Attribute]_x000D__x000A_        $attributeCollection.Add((New-Object -TypeName $ParameterAttribute -Property @{ ParameterSetName = "__AllParameterSets" ;Mandatory = $false}))_x000D__x000A_        foreach ($P in (Get-Command -Name Export-Excel).Parameters.values.where({$_.name -notmatch 'Verbose|Debug|Action$|Variable$|Buffer$|TargetData$|InputObject$'}))  {_x000D__x000A_            $paramDictionary.Add($p.Name, (New-Object -TypeName $RuntimeDefinedParam -ArgumentList $p.name, $p.ParameterType, $attributeCollection ) )_x000D__x000A_        }_x000D__x000A_        return $paramDictionary_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_      #region Dynamic params mean we can get passed parameter combination Export-Excel will reject, so throw here, rather than get data and then have Export-Excel error._x000D__x000A_        if ($PSBoundParameters.Path -and $PSBoundParameters.ExcelPackage) {_x000D__x000A_            throw 'Parameter error: you cannot specify both a path and an Excel Package.'_x000D__x000A_            return_x000D__x000A_        }_x000D__x000A_        if ($PSBoundParameters.AutoFilter -and ($PSBoundParameters.TableName -or $PSBoundParameters.TableStyle)) {_x000D__x000A_            Write-Warning "Tables are automatically auto-filtered, -AutoFilter will be ignored"_x000D__x000A_            $null = $PSBoundParameters.Remove('AutoFilter')_x000D__x000A_        }_x000D__x000A_      #endregion_x000D__x000A_      #region if we were either given a session object or a connection string (&amp; optionally -MsSqlServer) make sure we can connect_x000D__x000A_        try {_x000D__x000A_            #If we got -MsSqlServer, create a SQL connection, if we didn't but we got -Connection create an ODBC connection_x000D__x000A_            if     ($MsSqlServer -and $Connection) {_x000D__x000A_                if ($Connection -notmatch '=') {$Connection = "server=$Connection;trusted_connection=true;timeout=60"}_x000D__x000A_                $Session     = New-Object -TypeName System.Data.SqlClient.SqlConnection  -ArgumentList $Connection_x000D__x000A_                if ($Session.State -ne 'Open') {$Session.Open()}_x000D__x000A_                if ($DataBase) {$Session.ChangeDatabase($DataBase) }_x000D__x000A_            }_x000D__x000A_            elseif ($Connection)  {_x000D__x000A_                $Session     = New-Object -TypeName System.Data.Odbc.OdbcConnection      -ArgumentList $Connection ; $Session.ConnectionTimeout = 30_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {_x000D__x000A_            Write-Warning "An Error occured trying to connect to $Connection, the error was $([Environment]::NewLine + $_.Exception.InnerException))"_x000D__x000A_        }_x000D__x000A_        if ($Session -is [String] -and $Global:DbSessions[$Session]) {$Session = $Global:DbSessions[$Session]}_x000D__x000A_      #endregion_x000D__x000A_      #region we may have been given a table, but if there is a db session to connect to, send the query_x000D__x000A_        if     ($Session) {_x000D__x000A_            try {_x000D__x000A_                #If the session a SQL one make a SQL DataAdapter, otherwise make an ODBC one_x000D__x000A_                if ($Session.GetType().name -match "SqlConnection") {_x000D__x000A_                    $dataAdapter = New-Object -TypeName System.Data.SqlClient.SqlDataAdapter -ArgumentList (_x000D__x000A_                                New-Object -TypeName System.Data.SqlClient.SqlCommand     -ArgumentList $SQL, $Session)_x000D__x000A_                }_x000D__x000A_                else {_x000D__x000A_                    $dataAdapter = New-Object -TypeName System.Data.Odbc.OdbcDataAdapter     -ArgumentList (_x000D__x000A_                                New-Object -TypeName System.Data.Odbc.OdbcCommand         -ArgumentList $SQL, $Session )_x000D__x000A_                }_x000D__x000A_                if ($QueryTimeout) {$dataAdapter.SelectCommand.CommandTimeout = $QueryTimeout}_x000D__x000A__x000D__x000A_                #Both adapter types output the same kind of table, create one and fill it from the adapter_x000D__x000A_                $DataTable       = New-Object -TypeName System.Data.DataTable_x000D__x000A_                $rowCount        = $dataAdapter.fill($dataTable)_x000D__x000A_                Write-Verbose -Message "Query returned $rowCount row(s)"_x000D__x000A_            }_x000D__x000A_            catch {_x000D__x000A_                Write-Warning "An Error occured trying to run the query, the error was $([Environment]::NewLine + $_.Exception.InnerException))"_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_      #endregion_x000D__x000A_      #region send the table to Excel_x000D__x000A_        #remove parameters which relate to querying SQL, leaving the ones used by Export-Excel_x000D__x000A_        'Connection' , 'Database'  , 'Session' , 'MsSqlServer' , 'SQL'  , 'DataTable'  , 'QueryTimeout' , 'Force' |_x000D__x000A_                ForEach-Object {$null = $PSBoundParameters.Remove($_) }_x000D__x000A_        #if force was specified export even if there are no rows. If there are no columns, the query failed and export "null" if forced_x000D__x000A_        if     ($DataTable.Rows.Count) {_x000D__x000A_             Export-Excel  @PSBoundParameters -InputObject $DataTable_x000D__x000A_        }_x000D__x000A_        elseif ($Force -and $DataTable.Columns.Count) {_x000D__x000A_            Write-Warning -Message "Zero rows returned, and -Force was specified, sending empty table to Excel."_x000D__x000A_            Export-Excel  @PSBoundParameters -InputObject $DataTable_x000D__x000A_        }_x000D__x000A_        elseif ($Force) {_x000D__x000A_            Write-Warning -Message "-Force was specified but there is no data to send."_x000D__x000A_            Export-Excel  @PSBoundParameters -InputObject $null_x000D__x000A_        }_x000D__x000A_        else   {Write-Warning -Message 'There is no Data to insert, and -Force was not specified.' }_x000D__x000A_      #endregion_x000D__x000A_      #If we were passed a connection and opened a session,  close that session._x000D__x000A_        if     ($Connection)  {$Session.close() }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4475">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Send</S>
      <S N="Noun">SQLDataToExcel</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4476">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Send-SQLDataToExcel</S>
      <Obj N="CommandType" RefId="4477">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4478">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4479">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4480">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Connection</S>
            <Obj N="Value" RefId="4481">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Connection</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4482">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Session</S>
            <Obj N="Value" RefId="4483">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Session</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4484">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MsSqlServer</S>
            <Obj N="Value" RefId="4485">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MsSqlServer</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4486">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataBase</S>
            <Obj N="Value" RefId="4487">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataBase</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4488">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">SQL</S>
            <Obj N="Value" RefId="4489">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">SQL</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4490">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">QueryTimeout</S>
            <Obj N="Value" RefId="4491">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">QueryTimeout</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4492">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DataTable</S>
            <Obj N="Value" RefId="4493">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DataTable</S>
                <S N="ParameterType">System.Data.DataTable</S>
                <Obj N="Aliases" RefId="4494">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Force</S>
            <Obj N="Value" RefId="4495">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Force</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4496">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4497">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4498">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4499">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4500">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4501">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4502">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4503">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4504">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4505">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4506">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4507">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4508">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4509">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4510">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4511">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4512">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4513">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4514">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4515">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4516">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4517">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4518">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Path</S>
            <Obj N="Value" RefId="4519">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Path</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4520">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="4521">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="4522">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Calculate</S>
            <Obj N="Value" RefId="4523">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Calculate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4524">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Show</S>
            <Obj N="Value" RefId="4525">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Show</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4526">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="4527">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4528">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Password</S>
            <Obj N="Value" RefId="4529">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Password</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4530">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ClearSheet</S>
            <Obj N="Value" RefId="4531">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ClearSheet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4532">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Append</S>
            <Obj N="Value" RefId="4533">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Append</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4534">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Title</S>
            <Obj N="Value" RefId="4535">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Title</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4536">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleFillPattern</S>
            <Obj N="Value" RefId="4537">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleFillPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="4538">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBold</S>
            <Obj N="Value" RefId="4539">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4540">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleSize</S>
            <Obj N="Value" RefId="4541">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4542">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TitleBackgroundColor</S>
            <Obj N="Value" RefId="4543">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TitleBackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4544">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotTable</S>
            <Obj N="Value" RefId="4545">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotTable</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4546">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableName</S>
            <Obj N="Value" RefId="4547">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4548">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotRows</S>
            <Obj N="Value" RefId="4549">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotRows</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4550">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotColumns</S>
            <Obj N="Value" RefId="4551">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotColumns</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4552">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotData</S>
            <Obj N="Value" RefId="4553">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotData</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4554">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotFilter</S>
            <Obj N="Value" RefId="4555">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotFilter</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4556">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotDataToColumn</S>
            <Obj N="Value" RefId="4557">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotDataToColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4558">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTableDefinition</S>
            <Obj N="Value" RefId="4559">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTableDefinition</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="4560">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IncludePivotChart</S>
            <Obj N="Value" RefId="4561">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IncludePivotChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4562">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotChartType</S>
            <Obj N="Value" RefId="4563">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotChartType</S>
                <S N="ParameterType">OfficeOpenXml.Drawing.Chart.eChartType</S>
                <Obj N="Aliases" RefId="4564">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoLegend</S>
            <Obj N="Value" RefId="4565">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoLegend</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4566">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowCategory</S>
            <Obj N="Value" RefId="4567">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowCategory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4568">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ShowPercent</S>
            <Obj N="Value" RefId="4569">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ShowPercent</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4570">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="4571">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4572">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MaxAutoSizeRows</S>
            <Obj N="Value" RefId="4573">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MaxAutoSizeRows</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4574">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoClobber</S>
            <Obj N="Value" RefId="4575">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoClobber</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4576">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRow</S>
            <Obj N="Value" RefId="4577">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4578">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeFirstColumn</S>
            <Obj N="Value" RefId="4579">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4580">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezeTopRowFirstColumn</S>
            <Obj N="Value" RefId="4581">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezeTopRowFirstColumn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4582">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FreezePane</S>
            <Obj N="Value" RefId="4583">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FreezePane</S>
                <S N="ParameterType">System.Int32[]</S>
                <Obj N="Aliases" RefId="4584">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoFilter</S>
            <Obj N="Value" RefId="4585">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoFilter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4586">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BoldTopRow</S>
            <Obj N="Value" RefId="4587">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BoldTopRow</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4588">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoHeader</S>
            <Obj N="Value" RefId="4589">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoHeader</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4590">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RangeName</S>
            <Obj N="Value" RefId="4591">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RangeName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4592">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableName</S>
            <Obj N="Value" RefId="4593">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4594">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TableStyle</S>
            <Obj N="Value" RefId="4595">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TableStyle</S>
                <S N="ParameterType">OfficeOpenXml.Table.TableStyles</S>
                <Obj N="Aliases" RefId="4596">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Barchart</S>
            <Obj N="Value" RefId="4597">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Barchart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4598">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PieChart</S>
            <Obj N="Value" RefId="4599">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PieChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4600">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LineChart</S>
            <Obj N="Value" RefId="4601">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LineChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4602">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ColumnChart</S>
            <Obj N="Value" RefId="4603">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ColumnChart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4604">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcelChartDefinition</S>
            <Obj N="Value" RefId="4605">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelChartDefinition</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="4606">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HideSheet</S>
            <Obj N="Value" RefId="4607">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HideSheet</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4608">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnHideSheet</S>
            <Obj N="Value" RefId="4609">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnHideSheet</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4610">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToStart</S>
            <Obj N="Value" RefId="4611">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToStart</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4612">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveToEnd</S>
            <Obj N="Value" RefId="4613">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveToEnd</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4614">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveBefore</S>
            <Obj N="Value" RefId="4615">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveBefore</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4616">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MoveAfter</S>
            <Obj N="Value" RefId="4617">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MoveAfter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4618">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">KillExcel</S>
            <Obj N="Value" RefId="4619">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">KillExcel</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4620">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoNameRange</S>
            <Obj N="Value" RefId="4621">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoNameRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4622">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartRow</S>
            <Obj N="Value" RefId="4623">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4624">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartColumn</S>
            <Obj N="Value" RefId="4625">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4626">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="4627">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4628">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Numberformat</S>
            <Obj N="Value" RefId="4629">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Numberformat</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4630">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExcludeProperty</S>
            <Obj N="Value" RefId="4631">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcludeProperty</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4632">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoAliasOrScriptPropeties</S>
            <Obj N="Value" RefId="4633">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoAliasOrScriptPropeties</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4634">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DisplayPropertySet</S>
            <Obj N="Value" RefId="4635">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DisplayPropertySet</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4636">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoNumberConversion</S>
            <Obj N="Value" RefId="4637">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoNumberConversion</S>
                <S N="ParameterType">System.String[]</S>
                <Obj N="Aliases" RefId="4638">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalFormat</S>
            <Obj N="Value" RefId="4639">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalFormat</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="4640">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ConditionalText</S>
            <Obj N="Value" RefId="4641">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ConditionalText</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="4642">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Style</S>
            <Obj N="Value" RefId="4643">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Style</S>
                <S N="ParameterType">System.Object[]</S>
                <Obj N="Aliases" RefId="4644">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CellStyleSB</S>
            <Obj N="Value" RefId="4645">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CellStyleSB</S>
                <S N="ParameterType">System.Management.Automation.ScriptBlock</S>
                <Obj N="Aliases" RefId="4646">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Activate</S>
            <Obj N="Value" RefId="4647">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Activate</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4648">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Now</S>
            <Obj N="Value" RefId="4649">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Now</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4650">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReturnRange</S>
            <Obj N="Value" RefId="4651">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReturnRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4652">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PivotTotals</S>
            <Obj N="Value" RefId="4653">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PivotTotals</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4654">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NoTotalsInPivot</S>
            <Obj N="Value" RefId="4655">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NoTotalsInPivot</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4656">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReZip</S>
            <Obj N="Value" RefId="4657">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReZip</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4658">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4659">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4660">
            <TNRef RefId="8" />
            <ToString>[-QueryTimeout &lt;int&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">none</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="4661">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4662">
            <TNRef RefId="8" />
            <ToString>-Connection &lt;Object&gt; -SQL &lt;string&gt; [-QueryTimeout &lt;int&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ODBCConnection</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4663">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4664">
            <TNRef RefId="8" />
            <ToString>-Connection &lt;Object&gt; -MsSqlServer -SQL &lt;string&gt; [-DataBase &lt;string&gt;] [-QueryTimeout &lt;int&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">SQLConnection</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4665">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4666">
            <TNRef RefId="8" />
            <ToString>-Session &lt;Object&gt; -SQL &lt;string&gt; [-QueryTimeout &lt;int&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ExistingSession</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4667">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4668">
            <TNRef RefId="8" />
            <ToString>-DataTable &lt;DataTable&gt; [-QueryTimeout &lt;int&gt;] [-Force] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Pre-FetchedData</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4669">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Send-SQLDataToExcel</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4670">
    <TNRef RefId="0" />
    <ToString>Set-CellStyle</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Worksheet,_x000D__x000A_        $Row,_x000D__x000A_        $LastColumn,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$Pattern,_x000D__x000A_        $Color_x000D__x000A_    )_x000D__x000A_    if ($Color -is [string])         {$Color = [System.Drawing.Color]::$Color }_x000D__x000A_    $t=$Worksheet.Cells["A$($Row):$($LastColumn)$($Row)"]_x000D__x000A_    $t.Style.Fill.PatternType=$Pattern_x000D__x000A_    $t.Style.Fill.BackgroundColor.SetColor($Color)_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        $Worksheet,_x000D__x000A_        $Row,_x000D__x000A_        $LastColumn,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$Pattern,_x000D__x000A_        $Color_x000D__x000A_    )_x000D__x000A_    if ($Color -is [string])         {$Color = [System.Drawing.Color]::$Color }_x000D__x000A_    $t=$Worksheet.Cells["A$($Row):$($LastColumn)$($Row)"]_x000D__x000A_    $t.Style.Fill.PatternType=$Pattern_x000D__x000A_    $t.Style.Fill.BackgroundColor.SetColor($Color)_x000D__x000A_</S>
      <Obj N="Options" RefId="4671">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">CellStyle</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4672">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Set-CellStyle</S>
      <Obj N="CommandType" RefId="4673">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4674">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4675">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4676">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="4677">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4678">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Row</S>
            <Obj N="Value" RefId="4679">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Row</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4680">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LastColumn</S>
            <Obj N="Value" RefId="4681">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LastColumn</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4682">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Pattern</S>
            <Obj N="Value" RefId="4683">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Pattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="4684">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Color</S>
            <Obj N="Value" RefId="4685">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Color</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4686">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4687">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4688">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4689">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4690">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4691">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4692">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4693">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4694">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4695">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4696">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4697">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4698">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4699">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4700">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4701">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4702">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4703">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4704">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4705">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4706">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4707">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4708">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4709">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4710">
            <TNRef RefId="8" />
            <ToString>[[-Worksheet] &lt;Object&gt;] [[-Row] &lt;Object&gt;] [[-LastColumn] &lt;Object&gt;] [[-Pattern] &lt;ExcelFillStyle&gt;] [[-Color] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4711">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-CellStyle</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4712">
    <TNRef RefId="0" />
    <ToString>Set-ExcelColumn</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Column")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelColumn],[String])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="Variables created for script block which may be passed as a parameter, but not used in the script")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName="Package",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ParameterSetName="Package")]_x000D__x000A_        [String]$WorksheetName = "Sheet1",_x000D__x000A_        [Parameter(ParameterSetName="sheet",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet,_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        [ValidateRange(0,16384)]_x000D__x000A_        $Column = 0 ,_x000D__x000A_        [ValidateRange(1,1048576)]_x000D__x000A_        [Int]$StartRow ,_x000D__x000A_        $Value ,_x000D__x000A_        $Heading ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [Switch]$AutoNameRange,_x000D__x000A_        [Alias('Hidden')]_x000D__x000A_        [Switch]$Hide,_x000D__x000A_        [Switch]$Specified,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        #if we were passed a package object and a worksheet name , get the worksheet._x000D__x000A_        if ($ExcelPackage)  {_x000D__x000A_            if ($ExcelPackage.Workbook.Worksheets.Name -notcontains $WorksheetName) {_x000D__x000A_                throw "The Workbook does not contain a sheet named '$WorksheetName'"_x000D__x000A_            }_x000D__x000A_            else {$Worksheet   = $ExcelPackage.Workbook.Worksheets[$WorksheetName] }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #In a script block to build a formula, we may want any of corners or the column name,_x000D__x000A_        #if Column and Startrow aren't specified, assume first unused column, and first row_x000D__x000A_        if (-not $StartRow)   {$startRow   = $Worksheet.Dimension.Start.Row    }_x000D__x000A_        $startColumn                       = $Worksheet.Dimension.Start.Column_x000D__x000A_        $endColumn                         = $Worksheet.Dimension.End.Column_x000D__x000A_        $endRow                            = $Worksheet.Dimension.End.Row_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($null -eq $Worksheet.Dimension) {Write-Warning "Can't format an empty worksheet."; return}_x000D__x000A_        if ($Column  -eq 0 )  {$Column     = $endColumn    + 1 }_x000D__x000A_        $columnName = (New-Object 'OfficeOpenXml.ExcelCellAddress' @(1, $column)).Address -replace "1",""_x000D__x000A_        Write-Verbose -Message "Updating Column $columnName"_x000D__x000A_        #If there is a heading, insert it and use it as the name for a range (if we're creating one)_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Heading'))                 {_x000D__x000A_                 $Worksheet.Cells[$StartRow, $Column].Value = $Heading_x000D__x000A_                 $StartRow ++_x000D__x000A_                 if ($AutoNameRange) {_x000D__x000A_                    Add-ExcelName -Range $Worksheet.Cells[$StartRow, $Column, $endRow, $Column] -RangeName $Heading_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_        elseif ($AutoNameRange) {_x000D__x000A_            Add-ExcelName -Range $Worksheet.Cells[($StartRow+1), $Column, $endRow, $Column] -RangeName $Worksheet.Cells[$StartRow, $Column].Value_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #Fill in the data -it can be zero null or and empty string._x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Value')) { foreach ($row in ($StartRow..$endRow)) {_x000D__x000A_            if  ($Value -is [scriptblock]) { #re-create the script block otherwise variables from this function are out of scope._x000D__x000A_                 $cellData = &amp; ([scriptblock]::create( $Value ))_x000D__x000A_                 if ($null -eq $cellData) {Write-Verbose -Message "Script block evaluates to null."}_x000D__x000A_                 else                     {Write-Verbose -Message "Script block evaluates to '$cellData'"}_x000D__x000A_            }_x000D__x000A_            else                           { $cellData = $Value}_x000D__x000A_            if  ($cellData -match "^=")    { $Worksheet.Cells[$Row, $Column].Formula = ($cellData -replace '^=','') } #EPPlus likes formulas with no = sign; Excel doesn't care_x000D__x000A_            elseif ( [System.Uri]::IsWellFormedUriString($cellData , [System.UriKind]::Absolute)) {_x000D__x000A_                # Save a hyperlink : internal links can be in the form xl://sheet!E419 (use A1 as goto sheet), or xl://RangeName_x000D__x000A_                if ($cellData -match "^xl://internal/") {_x000D__x000A_                      $referenceAddress = $cellData -replace "^xl://internal/" , ""_x000D__x000A_                      $display          = $referenceAddress -replace "!A1$"    , ""_x000D__x000A_                      $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                      $Worksheet.Cells[$Row, $Column].HyperLink = $h_x000D__x000A_                }_x000D__x000A_                else {$Worksheet.Cells[$Row, $Column].HyperLink      = $cellData }_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.UnderLine = $true_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_            }_x000D__x000A_            else                           { $Worksheet.Cells[$Row, $Column].Value                     = $cellData     }_x000D__x000A_            if  ($cellData -is [datetime]) { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format = 'm/d/yy h:mm' } # This is not a custom format, but a preset recognized as date and localized._x000D__x000A_            if  ($cellData -is [timespan]) { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format = '[h]:mm:ss'   }_x000D__x000A_        }}_x000D__x000A__x000D__x000A_        #region Apply formatting_x000D__x000A_        $params = @{}_x000D__x000A_        foreach ($p in @('Underline','Bold','Italic','StrikeThru', 'FontName', 'FontSize','FontShift','NumberFormat','TextRotation',_x000D__x000A_                         'WrapText', 'HorizontalAlignment','VerticalAlignment', 'Autosize', 'Width', 'FontColor'_x000D__x000A_                         'BorderAround', 'BackgroundColor', 'BackgroundPattern', 'PatternColor')) {_x000D__x000A_            if ($PSBoundParameters.ContainsKey($p)) {$params[$p] = $PSBoundParameters[$p]}_x000D__x000A_        }_x000D__x000A_        if ($params.Count) {_x000D__x000A_            $theRange =   "$columnName$StartRow`:$columnName$endRow"_x000D__x000A_            Set-ExcelRange -Worksheet $Worksheet -Range $theRange @params_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Hide')) {$Worksheet.Column($Column).Hidden = [bool]$Hide}_x000D__x000A_        #return the new data if -passthru was specified._x000D__x000A_        if      ($PassThru)                 { $Worksheet.Column($Column)}_x000D__x000A_        elseif  ($ReturnRange)              { $theRange}_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Column")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelColumn],[String])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="Variables created for script block which may be passed as a parameter, but not used in the script")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName="Package",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ParameterSetName="Package")]_x000D__x000A_        [String]$WorksheetName = "Sheet1",_x000D__x000A_        [Parameter(ParameterSetName="sheet",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet,_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        [ValidateRange(0,16384)]_x000D__x000A_        $Column = 0 ,_x000D__x000A_        [ValidateRange(1,1048576)]_x000D__x000A_        [Int]$StartRow ,_x000D__x000A_        $Value ,_x000D__x000A_        $Heading ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [Switch]$AutoNameRange,_x000D__x000A_        [Alias('Hidden')]_x000D__x000A_        [Switch]$Hide,_x000D__x000A_        [Switch]$Specified,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        #if we were passed a package object and a worksheet name , get the worksheet._x000D__x000A_        if ($ExcelPackage)  {_x000D__x000A_            if ($ExcelPackage.Workbook.Worksheets.Name -notcontains $WorksheetName) {_x000D__x000A_                throw "The Workbook does not contain a sheet named '$WorksheetName'"_x000D__x000A_            }_x000D__x000A_            else {$Worksheet   = $ExcelPackage.Workbook.Worksheets[$WorksheetName] }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #In a script block to build a formula, we may want any of corners or the column name,_x000D__x000A_        #if Column and Startrow aren't specified, assume first unused column, and first row_x000D__x000A_        if (-not $StartRow)   {$startRow   = $Worksheet.Dimension.Start.Row    }_x000D__x000A_        $startColumn                       = $Worksheet.Dimension.Start.Column_x000D__x000A_        $endColumn                         = $Worksheet.Dimension.End.Column_x000D__x000A_        $endRow                            = $Worksheet.Dimension.End.Row_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($null -eq $Worksheet.Dimension) {Write-Warning "Can't format an empty worksheet."; return}_x000D__x000A_        if ($Column  -eq 0 )  {$Column     = $endColumn    + 1 }_x000D__x000A_        $columnName = (New-Object 'OfficeOpenXml.ExcelCellAddress' @(1, $column)).Address -replace "1",""_x000D__x000A_        Write-Verbose -Message "Updating Column $columnName"_x000D__x000A_        #If there is a heading, insert it and use it as the name for a range (if we're creating one)_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Heading'))                 {_x000D__x000A_                 $Worksheet.Cells[$StartRow, $Column].Value = $Heading_x000D__x000A_                 $StartRow ++_x000D__x000A_                 if ($AutoNameRange) {_x000D__x000A_                    Add-ExcelName -Range $Worksheet.Cells[$StartRow, $Column, $endRow, $Column] -RangeName $Heading_x000D__x000A_                }_x000D__x000A_        }_x000D__x000A_        elseif ($AutoNameRange) {_x000D__x000A_            Add-ExcelName -Range $Worksheet.Cells[($StartRow+1), $Column, $endRow, $Column] -RangeName $Worksheet.Cells[$StartRow, $Column].Value_x000D__x000A_        }_x000D__x000A__x000D__x000A_        #Fill in the data -it can be zero null or and empty string._x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Value')) { foreach ($row in ($StartRow..$endRow)) {_x000D__x000A_            if  ($Value -is [scriptblock]) { #re-create the script block otherwise variables from this function are out of scope._x000D__x000A_                 $cellData = &amp; ([scriptblock]::create( $Value ))_x000D__x000A_                 if ($null -eq $cellData) {Write-Verbose -Message "Script block evaluates to null."}_x000D__x000A_                 else                     {Write-Verbose -Message "Script block evaluates to '$cellData'"}_x000D__x000A_            }_x000D__x000A_            else                           { $cellData = $Value}_x000D__x000A_            if  ($cellData -match "^=")    { $Worksheet.Cells[$Row, $Column].Formula = ($cellData -replace '^=','') } #EPPlus likes formulas with no = sign; Excel doesn't care_x000D__x000A_            elseif ( [System.Uri]::IsWellFormedUriString($cellData , [System.UriKind]::Absolute)) {_x000D__x000A_                # Save a hyperlink : internal links can be in the form xl://sheet!E419 (use A1 as goto sheet), or xl://RangeName_x000D__x000A_                if ($cellData -match "^xl://internal/") {_x000D__x000A_                      $referenceAddress = $cellData -replace "^xl://internal/" , ""_x000D__x000A_                      $display          = $referenceAddress -replace "!A1$"    , ""_x000D__x000A_                      $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                      $Worksheet.Cells[$Row, $Column].HyperLink = $h_x000D__x000A_                }_x000D__x000A_                else {$Worksheet.Cells[$Row, $Column].HyperLink      = $cellData }_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.UnderLine = $true_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_            }_x000D__x000A_            else                           { $Worksheet.Cells[$Row, $Column].Value                     = $cellData     }_x000D__x000A_            if  ($cellData -is [datetime]) { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format = 'm/d/yy h:mm' } # This is not a custom format, but a preset recognized as date and localized._x000D__x000A_            if  ($cellData -is [timespan]) { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format = '[h]:mm:ss'   }_x000D__x000A_        }}_x000D__x000A__x000D__x000A_        #region Apply formatting_x000D__x000A_        $params = @{}_x000D__x000A_        foreach ($p in @('Underline','Bold','Italic','StrikeThru', 'FontName', 'FontSize','FontShift','NumberFormat','TextRotation',_x000D__x000A_                         'WrapText', 'HorizontalAlignment','VerticalAlignment', 'Autosize', 'Width', 'FontColor'_x000D__x000A_                         'BorderAround', 'BackgroundColor', 'BackgroundPattern', 'PatternColor')) {_x000D__x000A_            if ($PSBoundParameters.ContainsKey($p)) {$params[$p] = $PSBoundParameters[$p]}_x000D__x000A_        }_x000D__x000A_        if ($params.Count) {_x000D__x000A_            $theRange =   "$columnName$StartRow`:$columnName$endRow"_x000D__x000A_            Set-ExcelRange -Worksheet $Worksheet -Range $theRange @params_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Hide')) {$Worksheet.Column($Column).Hidden = [bool]$Hide}_x000D__x000A_        #return the new data if -passthru was specified._x000D__x000A_        if      ($PassThru)                 { $Worksheet.Column($Column)}_x000D__x000A_        elseif  ($ReturnRange)              { $theRange}_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4713">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">ExcelColumn</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4714">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.ExcelColumn</S>
          <S>System.String</S>
        </LST>
      </Obj>
      <S N="Name">Set-ExcelColumn</S>
      <Obj N="CommandType" RefId="4715">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4716">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4717">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4718">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="4719">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="4720">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="4721">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4722">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="4723">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="4724">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Column</S>
            <Obj N="Value" RefId="4725">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Column</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4726">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartRow</S>
            <Obj N="Value" RefId="4727">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartRow</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4728">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="4729">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4730">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Heading</S>
            <Obj N="Value" RefId="4731">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Heading</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4732">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="4733">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4734">
                  <TNRef RefId="25" />
                  <LST>
                    <S>NFormat</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderAround</S>
            <Obj N="Value" RefId="4735">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderAround</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4736">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontColor</S>
            <Obj N="Value" RefId="4737">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4738">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Bold</S>
            <Obj N="Value" RefId="4739">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Bold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4740">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Italic</S>
            <Obj N="Value" RefId="4741">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Italic</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4742">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Underline</S>
            <Obj N="Value" RefId="4743">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Underline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4744">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnderLineType</S>
            <Obj N="Value" RefId="4745">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnderLineType</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelUnderLineType</S>
                <Obj N="Aliases" RefId="4746">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StrikeThru</S>
            <Obj N="Value" RefId="4747">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StrikeThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4748">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontShift</S>
            <Obj N="Value" RefId="4749">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontShift</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignmentFont</S>
                <Obj N="Aliases" RefId="4750">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontName</S>
            <Obj N="Value" RefId="4751">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4752">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontSize</S>
            <Obj N="Value" RefId="4753">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontSize</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4754">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="4755">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4756">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundPattern</S>
            <Obj N="Value" RefId="4757">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="4758">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternColor</S>
            <Obj N="Value" RefId="4759">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4760">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PatternColour</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WrapText</S>
            <Obj N="Value" RefId="4761">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WrapText</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4762">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HorizontalAlignment</S>
            <Obj N="Value" RefId="4763">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HorizontalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelHorizontalAlignment</S>
                <Obj N="Aliases" RefId="4764">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">VerticalAlignment</S>
            <Obj N="Value" RefId="4765">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">VerticalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignment</S>
                <Obj N="Aliases" RefId="4766">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TextRotation</S>
            <Obj N="Value" RefId="4767">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TextRotation</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4768">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="4769">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4770">
                  <TNRef RefId="25" />
                  <LST>
                    <S>AutoFit</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="4771">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4772">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoNameRange</S>
            <Obj N="Value" RefId="4773">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoNameRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4774">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Hide</S>
            <Obj N="Value" RefId="4775">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Hide</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4776">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Hidden</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Specified</S>
            <Obj N="Value" RefId="4777">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Specified</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4778">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="4779">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4780">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4781">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4782">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4783">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4784">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4785">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4786">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4787">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4788">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4789">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4790">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4791">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4792">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4793">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4794">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4795">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4796">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4797">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4798">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4799">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4800">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4801">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4802">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4803">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4804">
            <TNRef RefId="8" />
            <ToString>-ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;string&gt;] [-Column &lt;Object&gt;] [-StartRow &lt;int&gt;] [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;string&gt;] [-FontSize &lt;float&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;int&gt;] [-AutoSize] [-Width &lt;float&gt;] [-AutoNameRange] [-Hide] [-Specified] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Package</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4805">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="4806">
            <TNRef RefId="8" />
            <ToString>-Worksheet &lt;ExcelWorksheet&gt; [-Column &lt;Object&gt;] [-StartRow &lt;int&gt;] [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;string&gt;] [-FontSize &lt;float&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;int&gt;] [-AutoSize] [-Width &lt;float&gt;] [-AutoNameRange] [-Hide] [-Specified] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">sheet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4807">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-ExcelColumn</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4808">
    <TNRef RefId="0" />
    <ToString>Set-ExcelRange</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Format")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system state')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline = $true,Position=0)]_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        [Alias('ForegroundColor')]_x000D__x000A_        $FontColor,_x000D__x000A_        $Value,_x000D__x000A_        $Formula,_x000D__x000A_        [Switch]$ArrayFormula,_x000D__x000A_        [Switch]$ResetFont,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hide')]_x000D__x000A_        [Switch]$Hidden,_x000D__x000A_        [Switch]$Locked,_x000D__x000A_        [Switch]$Merge_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if  ($Range -is [Array])  {_x000D__x000A_            $null = $PSBoundParameters.Remove("Range")_x000D__x000A_            $Range | Set-ExcelRange @PSBoundParameters_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            #We should accept, a worksheet and a name of a range or a cell address; a table; the address of a table; a named range; a row, a column or .Cells[ ]_x000D__x000A_            if ($Range -is [OfficeOpenXml.Table.ExcelTable]) {$Range = $Range.Address}_x000D__x000A_            elseif ($Worksheet -and ($Range -is [string] -or $Range -is [OfficeOpenXml.ExcelAddress])) {_x000D__x000A_                $Range = $Worksheet.Cells[$Range]_x000D__x000A_            }_x000D__x000A_            elseif ($Range -is [string]) {Write-Warning -Message "The range pararameter you have specified also needs a worksheet parameter." ;return}_x000D__x000A_            #else we assume $Range is a range._x000D__x000A_            if ($ClearAll)  {_x000D__x000A_                $Range.Clear()_x000D__x000A_            }_x000D__x000A_            if ($ResetFont) {_x000D__x000A_                $Range.Style.Font.Color.SetColor( ([System.Drawing.Color]::Black))_x000D__x000A_                $Range.Style.Font.Bold          = $false_x000D__x000A_                $Range.Style.Font.Italic        = $false_x000D__x000A_                $Range.Style.Font.UnderLine     = $false_x000D__x000A_                $Range.Style.Font.Strike        = $false_x000D__x000A_                $Range.Style.Font.VerticalAlign = [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]::None_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Underline')) {_x000D__x000A_                $Range.Style.Font.UnderLine      = [boolean]$Underline_x000D__x000A_                $Range.Style.Font.UnderLineType  = $UnderLineType_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Bold')) {_x000D__x000A_                $Range.Style.Font.Bold           = [boolean]$bold_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Italic')) {_x000D__x000A_                $Range.Style.Font.Italic         = [boolean]$italic_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('StrikeThru')) {_x000D__x000A_                $Range.Style.Font.Strike         = [boolean]$StrikeThru_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontSize')){_x000D__x000A_                $Range.Style.Font.Size           = $FontSize_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontName')){_x000D__x000A_                $Range.Style.Font.Name           = $FontName_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontShift')){_x000D__x000A_                $Range.Style.Font.VerticalAlign  = $FontShift_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontColor')){_x000D__x000A_                if ($FontColor -is [string]) {$FontColor = [System.Drawing.Color]::$FontColor }_x000D__x000A_                $Range.Style.Font.Color.SetColor(  $FontColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('TextRotation')) {_x000D__x000A_                $Range.Style.TextRotation        = $TextRotation_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('WrapText')) {_x000D__x000A_                $Range.Style.WrapText            = [boolean]$WrapText_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('HorizontalAlignment')) {_x000D__x000A_                $Range.Style.HorizontalAlignment = $HorizontalAlignment_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('VerticalAlignment')) {_x000D__x000A_                $Range.Style.VerticalAlignment   = $VerticalAlignment_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Merge')) {_x000D__x000A_                $Range.Merge   = [boolean]$Merge_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Value')) {_x000D__x000A_                if ($Value -match '^=')      {$PSBoundParameters["Formula"] = $Value -replace '^=','' }_x000D__x000A_                else {_x000D__x000A_                    $Range.Value = $Value_x000D__x000A_                    if ($Value -is [datetime])  { $Range.Style.Numberformat.Format = 'm/d/yy h:mm' }# This is not a custom format, but a preset recognized as date and localized. It might be overwritten in a moment_x000D__x000A_                    if ($Value -is [timespan])  { $Range.Style.Numberformat.Format = '[h]:mm:ss'   }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Formula')) {_x000D__x000A_                if ($ArrayFormula) {$Range.CreateArrayFormula(($Formula -replace '^=','')) }_x000D__x000A_                else               {$Range.Formula         =  ($Formula -replace '^=','')  }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('NumberFormat')) {_x000D__x000A_                $Range.Style.Numberformat.Format = (Expand-NumberFormat $NumberFormat)_x000D__x000A_            }_x000D__x000A_            if ($BorderColor -is [string]) {$BorderColor = [System.Drawing.Color]::$BorderColor }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderAround')) {_x000D__x000A_                $Range.Style.Border.BorderAround($BorderAround, $BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderBottom')) {_x000D__x000A_                $Range.Style.Border.Bottom.Style=$BorderBottom_x000D__x000A_                $Range.Style.Border.Bottom.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderTop')) {_x000D__x000A_                $Range.Style.Border.Top.Style=$BorderTop_x000D__x000A_                $Range.Style.Border.Top.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderLeft')) {_x000D__x000A_                $Range.Style.Border.Left.Style=$BorderLeft_x000D__x000A_                $Range.Style.Border.Left.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderRight')) {_x000D__x000A_                $Range.Style.Border.Right.Style=$BorderRight_x000D__x000A_                $Range.Style.Border.Right.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BackgroundColor')) {_x000D__x000A_                $Range.Style.Fill.PatternType = $BackgroundPattern_x000D__x000A_                if ($BackgroundColor -is [string]) {$BackgroundColor = [System.Drawing.Color]::$BackgroundColor }_x000D__x000A_                $Range.Style.Fill.BackgroundColor.SetColor($BackgroundColor)_x000D__x000A_                if ($PatternColor) {_x000D__x000A_                    if ($PatternColor -is [string]) {$PatternColor = [System.Drawing.Color]::$PatternColor }_x000D__x000A_                    $Range.Style.Fill.PatternColor.SetColor( $PatternColor)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Height')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelRow]   ) {$Range.Height = $Height }_x000D__x000A_                elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                    ($Range.Start.Row)..($Range.Start.Row + $Range.Rows) |_x000D__x000A_                        ForEach-Object {$Range.Worksheet.Row($_).Height = $Height }_x000D__x000A_                }_x000D__x000A_                else {Write-Warning -Message ("Can set the height of a row or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($Autosize -and -not $env:NoAutoSize) {_x000D__x000A_                try {_x000D__x000A_                    if ($Range -is [OfficeOpenXml.ExcelColumn]) {$Range.AutoFit() }_x000D__x000A_                    elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                        $Range.AutoFitColumns()_x000D__x000A__x000D__x000A_                    }_x000D__x000A_                    else {Write-Warning -Message ("Can autofit a column or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Failed autosizing columns of worksheet '$WorksheetName': $_"}_x000D__x000A_            }_x000D__x000A_            elseif ($AutoSize) {Write-Warning -Message "Auto-fitting columns is not available with this OS configuration." }_x000D__x000A_            elseif ($PSBoundParameters.ContainsKey('Width')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelColumn]) {$Range.Width = $Width}_x000D__x000A_                elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                    ($Range.Start.Column)..($Range.Start.Column + $Range.Columns - 1) |_x000D__x000A_                        ForEach-Object {_x000D__x000A_                            #$ws.Column($_).Width = $Width_x000D__x000A_                            $Range.Worksheet.Column($_).Width = $Width_x000D__x000A_                        }_x000D__x000A_                }_x000D__x000A_                else {Write-Warning -Message ("Can set the width of a column or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Hidden')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelRow] -or_x000D__x000A_                    $Range -is [OfficeOpenXml.ExcelColumn]  ) {$Range.Hidden = [boolean]$Hidden}_x000D__x000A_                else {Write-Warning -Message ("Can hide a row or a column but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Locked')) {_x000D__x000A_                $Range.Style.Locked=$Locked_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Format")]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingFunctions', '',Justification='Does not change system state')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ValueFromPipeline = $true,Position=0)]_x000D__x000A_        [Alias("Address")]_x000D__x000A_        $Range ,_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        [Alias('ForegroundColor')]_x000D__x000A_        $FontColor,_x000D__x000A_        $Value,_x000D__x000A_        $Formula,_x000D__x000A_        [Switch]$ArrayFormula,_x000D__x000A_        [Switch]$ResetFont,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [Alias("AutoFit")]_x000D__x000A_        [Switch]$AutoSize,_x000D__x000A_        [float]$Width,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hide')]_x000D__x000A_        [Switch]$Hidden,_x000D__x000A_        [Switch]$Locked,_x000D__x000A_        [Switch]$Merge_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if  ($Range -is [Array])  {_x000D__x000A_            $null = $PSBoundParameters.Remove("Range")_x000D__x000A_            $Range | Set-ExcelRange @PSBoundParameters_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            #We should accept, a worksheet and a name of a range or a cell address; a table; the address of a table; a named range; a row, a column or .Cells[ ]_x000D__x000A_            if ($Range -is [OfficeOpenXml.Table.ExcelTable]) {$Range = $Range.Address}_x000D__x000A_            elseif ($Worksheet -and ($Range -is [string] -or $Range -is [OfficeOpenXml.ExcelAddress])) {_x000D__x000A_                $Range = $Worksheet.Cells[$Range]_x000D__x000A_            }_x000D__x000A_            elseif ($Range -is [string]) {Write-Warning -Message "The range pararameter you have specified also needs a worksheet parameter." ;return}_x000D__x000A_            #else we assume $Range is a range._x000D__x000A_            if ($ClearAll)  {_x000D__x000A_                $Range.Clear()_x000D__x000A_            }_x000D__x000A_            if ($ResetFont) {_x000D__x000A_                $Range.Style.Font.Color.SetColor( ([System.Drawing.Color]::Black))_x000D__x000A_                $Range.Style.Font.Bold          = $false_x000D__x000A_                $Range.Style.Font.Italic        = $false_x000D__x000A_                $Range.Style.Font.UnderLine     = $false_x000D__x000A_                $Range.Style.Font.Strike        = $false_x000D__x000A_                $Range.Style.Font.VerticalAlign = [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]::None_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Underline')) {_x000D__x000A_                $Range.Style.Font.UnderLine      = [boolean]$Underline_x000D__x000A_                $Range.Style.Font.UnderLineType  = $UnderLineType_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Bold')) {_x000D__x000A_                $Range.Style.Font.Bold           = [boolean]$bold_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Italic')) {_x000D__x000A_                $Range.Style.Font.Italic         = [boolean]$italic_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('StrikeThru')) {_x000D__x000A_                $Range.Style.Font.Strike         = [boolean]$StrikeThru_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontSize')){_x000D__x000A_                $Range.Style.Font.Size           = $FontSize_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontName')){_x000D__x000A_                $Range.Style.Font.Name           = $FontName_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontShift')){_x000D__x000A_                $Range.Style.Font.VerticalAlign  = $FontShift_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('FontColor')){_x000D__x000A_                if ($FontColor -is [string]) {$FontColor = [System.Drawing.Color]::$FontColor }_x000D__x000A_                $Range.Style.Font.Color.SetColor(  $FontColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('TextRotation')) {_x000D__x000A_                $Range.Style.TextRotation        = $TextRotation_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('WrapText')) {_x000D__x000A_                $Range.Style.WrapText            = [boolean]$WrapText_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('HorizontalAlignment')) {_x000D__x000A_                $Range.Style.HorizontalAlignment = $HorizontalAlignment_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('VerticalAlignment')) {_x000D__x000A_                $Range.Style.VerticalAlignment   = $VerticalAlignment_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Merge')) {_x000D__x000A_                $Range.Merge   = [boolean]$Merge_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Value')) {_x000D__x000A_                if ($Value -match '^=')      {$PSBoundParameters["Formula"] = $Value -replace '^=','' }_x000D__x000A_                else {_x000D__x000A_                    $Range.Value = $Value_x000D__x000A_                    if ($Value -is [datetime])  { $Range.Style.Numberformat.Format = 'm/d/yy h:mm' }# This is not a custom format, but a preset recognized as date and localized. It might be overwritten in a moment_x000D__x000A_                    if ($Value -is [timespan])  { $Range.Style.Numberformat.Format = '[h]:mm:ss'   }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Formula')) {_x000D__x000A_                if ($ArrayFormula) {$Range.CreateArrayFormula(($Formula -replace '^=','')) }_x000D__x000A_                else               {$Range.Formula         =  ($Formula -replace '^=','')  }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('NumberFormat')) {_x000D__x000A_                $Range.Style.Numberformat.Format = (Expand-NumberFormat $NumberFormat)_x000D__x000A_            }_x000D__x000A_            if ($BorderColor -is [string]) {$BorderColor = [System.Drawing.Color]::$BorderColor }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderAround')) {_x000D__x000A_                $Range.Style.Border.BorderAround($BorderAround, $BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderBottom')) {_x000D__x000A_                $Range.Style.Border.Bottom.Style=$BorderBottom_x000D__x000A_                $Range.Style.Border.Bottom.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderTop')) {_x000D__x000A_                $Range.Style.Border.Top.Style=$BorderTop_x000D__x000A_                $Range.Style.Border.Top.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderLeft')) {_x000D__x000A_                $Range.Style.Border.Left.Style=$BorderLeft_x000D__x000A_                $Range.Style.Border.Left.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BorderRight')) {_x000D__x000A_                $Range.Style.Border.Right.Style=$BorderRight_x000D__x000A_                $Range.Style.Border.Right.Color.SetColor($BorderColor)_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('BackgroundColor')) {_x000D__x000A_                $Range.Style.Fill.PatternType = $BackgroundPattern_x000D__x000A_                if ($BackgroundColor -is [string]) {$BackgroundColor = [System.Drawing.Color]::$BackgroundColor }_x000D__x000A_                $Range.Style.Fill.BackgroundColor.SetColor($BackgroundColor)_x000D__x000A_                if ($PatternColor) {_x000D__x000A_                    if ($PatternColor -is [string]) {$PatternColor = [System.Drawing.Color]::$PatternColor }_x000D__x000A_                    $Range.Style.Fill.PatternColor.SetColor( $PatternColor)_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Height')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelRow]   ) {$Range.Height = $Height }_x000D__x000A_                elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                    ($Range.Start.Row)..($Range.Start.Row + $Range.Rows) |_x000D__x000A_                        ForEach-Object {$Range.Worksheet.Row($_).Height = $Height }_x000D__x000A_                }_x000D__x000A_                else {Write-Warning -Message ("Can set the height of a row or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($Autosize -and -not $env:NoAutoSize) {_x000D__x000A_                try {_x000D__x000A_                    if ($Range -is [OfficeOpenXml.ExcelColumn]) {$Range.AutoFit() }_x000D__x000A_                    elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                        $Range.AutoFitColumns()_x000D__x000A__x000D__x000A_                    }_x000D__x000A_                    else {Write-Warning -Message ("Can autofit a column or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_                }_x000D__x000A_                catch {Write-Warning -Message "Failed autosizing columns of worksheet '$WorksheetName': $_"}_x000D__x000A_            }_x000D__x000A_            elseif ($AutoSize) {Write-Warning -Message "Auto-fitting columns is not available with this OS configuration." }_x000D__x000A_            elseif ($PSBoundParameters.ContainsKey('Width')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelColumn]) {$Range.Width = $Width}_x000D__x000A_                elseif ($Range -is [OfficeOpenXml.ExcelRange] ) {_x000D__x000A_                    ($Range.Start.Column)..($Range.Start.Column + $Range.Columns - 1) |_x000D__x000A_                        ForEach-Object {_x000D__x000A_                            #$ws.Column($_).Width = $Width_x000D__x000A_                            $Range.Worksheet.Column($_).Width = $Width_x000D__x000A_                        }_x000D__x000A_                }_x000D__x000A_                else {Write-Warning -Message ("Can set the width of a column or a range but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Hidden')) {_x000D__x000A_                if ($Range -is [OfficeOpenXml.ExcelRow] -or_x000D__x000A_                    $Range -is [OfficeOpenXml.ExcelColumn]  ) {$Range.Hidden = [boolean]$Hidden}_x000D__x000A_                else {Write-Warning -Message ("Can hide a row or a column but not a {0} object" -f ($Range.GetType().name)) }_x000D__x000A_            }_x000D__x000A_            if ($PSBoundParameters.ContainsKey('Locked')) {_x000D__x000A_                $Range.Style.Locked=$Locked_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4809">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">ExcelRange</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4810">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Set-ExcelRange</S>
      <Obj N="CommandType" RefId="4811">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4812">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4813">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4814">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Range</S>
            <Obj N="Value" RefId="4815">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Range</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4816">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Address</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="4817">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="4818">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="4819">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4820">
                  <TNRef RefId="25" />
                  <LST>
                    <S>NFormat</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderAround</S>
            <Obj N="Value" RefId="4821">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderAround</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4822">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderColor</S>
            <Obj N="Value" RefId="4823">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4824">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderBottom</S>
            <Obj N="Value" RefId="4825">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderBottom</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4826">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderTop</S>
            <Obj N="Value" RefId="4827">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderTop</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4828">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderLeft</S>
            <Obj N="Value" RefId="4829">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderLeft</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4830">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderRight</S>
            <Obj N="Value" RefId="4831">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderRight</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4832">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontColor</S>
            <Obj N="Value" RefId="4833">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4834">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ForegroundColor</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="4835">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4836">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Formula</S>
            <Obj N="Value" RefId="4837">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Formula</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4838">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ArrayFormula</S>
            <Obj N="Value" RefId="4839">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ArrayFormula</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4840">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ResetFont</S>
            <Obj N="Value" RefId="4841">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ResetFont</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4842">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Bold</S>
            <Obj N="Value" RefId="4843">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Bold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4844">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Italic</S>
            <Obj N="Value" RefId="4845">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Italic</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4846">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Underline</S>
            <Obj N="Value" RefId="4847">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Underline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4848">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnderLineType</S>
            <Obj N="Value" RefId="4849">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnderLineType</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelUnderLineType</S>
                <Obj N="Aliases" RefId="4850">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StrikeThru</S>
            <Obj N="Value" RefId="4851">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StrikeThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4852">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontShift</S>
            <Obj N="Value" RefId="4853">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontShift</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignmentFont</S>
                <Obj N="Aliases" RefId="4854">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontName</S>
            <Obj N="Value" RefId="4855">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4856">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontSize</S>
            <Obj N="Value" RefId="4857">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontSize</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4858">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="4859">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4860">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundPattern</S>
            <Obj N="Value" RefId="4861">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="4862">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternColor</S>
            <Obj N="Value" RefId="4863">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4864">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PatternColour</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WrapText</S>
            <Obj N="Value" RefId="4865">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WrapText</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4866">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HorizontalAlignment</S>
            <Obj N="Value" RefId="4867">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HorizontalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelHorizontalAlignment</S>
                <Obj N="Aliases" RefId="4868">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">VerticalAlignment</S>
            <Obj N="Value" RefId="4869">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">VerticalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignment</S>
                <Obj N="Aliases" RefId="4870">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TextRotation</S>
            <Obj N="Value" RefId="4871">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TextRotation</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4872">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AutoSize</S>
            <Obj N="Value" RefId="4873">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AutoSize</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4874">
                  <TNRef RefId="25" />
                  <LST>
                    <S>AutoFit</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Width</S>
            <Obj N="Value" RefId="4875">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Width</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4876">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Height</S>
            <Obj N="Value" RefId="4877">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Height</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4878">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Hidden</S>
            <Obj N="Value" RefId="4879">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Hidden</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4880">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Hide</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Locked</S>
            <Obj N="Value" RefId="4881">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Locked</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4882">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Merge</S>
            <Obj N="Value" RefId="4883">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Merge</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4884">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4885">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4886">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4887">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4888">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4889">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4890">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4891">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4892">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4893">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4894">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4895">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4896">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="4897">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4898">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="4899">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4900">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="4901">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4902">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="4903">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4904">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="4905">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4906">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="4907">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="4908">
            <TNRef RefId="8" />
            <ToString>[[-Range] &lt;Object&gt;] [-Worksheet &lt;ExcelWorksheet&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;] [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Value &lt;Object&gt;] [-Formula &lt;Object&gt;] [-ArrayFormula] [-ResetFont] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;string&gt;] [-FontSize &lt;float&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;int&gt;] [-AutoSize] [-Width &lt;float&gt;] [-Height &lt;float&gt;] [-Hidden] [-Locked] [-Merge] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="4909">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-ExcelRange</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="4910">
    <TNRef RefId="0" />
    <ToString>Set-ExcelRow</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Row")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelRow],[String])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="Variables created for script block which may be passed as a parameter, but not used in the script")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName="Package",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ParameterSetName="Package")]_x000D__x000A_        $WorksheetName = "Sheet1",_x000D__x000A_        [Parameter(ParameterSetName="Sheet",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.Excelworksheet] $Worksheet,_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        $Row = 0 ,_x000D__x000A_        [int]$StartColumn,_x000D__x000A_        $Value,_x000D__x000A_        $Heading ,_x000D__x000A_        [Switch]$HeadingBold,_x000D__x000A_        [Int]$HeadingSize ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hidden')]_x000D__x000A_        [Switch]$Hide,_x000D__x000A_        [Switch]$ReturnRange,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        #if we were passed a package object and a worksheet name , get the worksheet._x000D__x000A_        if ($ExcelPackage)  {_x000D__x000A_            if ($ExcelPackage.Workbook.Worksheets.Name -notcontains $WorksheetName) {_x000D__x000A_                throw "The Workbook does not contain a sheet named '$WorksheetName'"_x000D__x000A_            }_x000D__x000A_            else {$Worksheet   = $ExcelPackage.Workbook.Worksheets[$WorksheetName] }_x000D__x000A_        }_x000D__x000A_        #In a script block to build a formula, we may want any of corners or the columnname,_x000D__x000A_        #if row and start column aren't specified assume first unused row, and first column_x000D__x000A_        if (-not $StartColumn) {$StartColumn = $Worksheet.Dimension.Start.Column    }_x000D__x000A_        $startRow                            = $Worksheet.Dimension.Start.Row   + 1_x000D__x000A_        $endColumn                           = $Worksheet.Dimension.End.Column_x000D__x000A_        $endRow                              = $Worksheet.Dimension.End.Row_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($null -eq $Worksheet.Dimension) {Write-Warning "Can't format an empty worksheet."; return}_x000D__x000A_        if      ($Row  -eq 0 ) {$Row         = $endRow + 1 }_x000D__x000A_        Write-Verbose -Message "Updating Row $Row"_x000D__x000A_        #Add a row label_x000D__x000A_        if      ($Heading)     {_x000D__x000A_            $Worksheet.Cells[$Row, $StartColumn].Value = $Heading_x000D__x000A_            if ($HeadingBold) {$Worksheet.Cells[$Row, $StartColumn].Style.Font.Bold = $true}_x000D__x000A_            if ($HeadingSize) {$Worksheet.Cells[$Row, $StartColumn].Style.Font.Size = $HeadingSize}_x000D__x000A_            $StartColumn ++_x000D__x000A_        }_x000D__x000A_        #Fill in the data_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Value')) {foreach ($column in ($StartColumn..$endColumn)) {_x000D__x000A_            #We might want the column name in a script block_x000D__x000A_            $columnName = (New-Object -TypeName OfficeOpenXml.ExcelCellAddress @(1,$column)).Address -replace "1",""_x000D__x000A_            if  ($Value -is [scriptblock] ) {_x000D__x000A_                #re-create the script block otherwise variables from this function are out of scope._x000D__x000A_                $cellData = &amp; ([scriptblock]::create( $Value ))_x000D__x000A_                if ($null -eq $cellData) {Write-Verbose -Message "Script block evaluates to null."}_x000D__x000A_                else                     {Write-Verbose -Message "Script block evaluates to '$cellData'"}_x000D__x000A_            }_x000D__x000A_            else{$cellData = $Value}_x000D__x000A_            if  ($cellData -match "^=")      { $Worksheet.Cells[$Row, $column].Formula                    = ($cellData -replace '^=','') } #EPPlus likes formulas with no = sign; Excel doesn't care_x000D__x000A_            elseif ( [System.Uri]::IsWellFormedUriString($cellData , [System.UriKind]::Absolute)) {_x000D__x000A_                # Save a hyperlink : internal links can be in the form xl://sheet!E419 (use A1 as goto sheet), or xl://RangeName_x000D__x000A_                if ($cellData -match "^xl://internal/") {_x000D__x000A_                    $referenceAddress = $cellData -replace "^xl://internal/" , ""_x000D__x000A_                    $display          = $referenceAddress -replace "!A1$"    , ""_x000D__x000A_                    $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                    $Worksheet.Cells[$Row, $Column].HyperLink = $h_x000D__x000A_                }_x000D__x000A_                else {$Worksheet.Cells[$Row, $Column].HyperLink = $cellData }_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.UnderLine = $true_x000D__x000A_            }_x000D__x000A_            else                             { $Worksheet.Cells[$Row, $column].Value                      = $cellData                    }_x000D__x000A_            if  ($cellData -is [datetime])   { $Worksheet.Cells[$Row, $column].Style.Numberformat.Format  = 'm/d/yy h:mm'                } #This is not a custom format, but a preset recognized as date and localized._x000D__x000A_            if  ($cellData -is [timespan])   { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format  = '[h]:mm:ss'                  }_x000D__x000A_        }}_x000D__x000A_        #region Apply formatting_x000D__x000A_        $params = @{}_x000D__x000A_        foreach ($p in @('Underline','Bold','Italic','StrikeThru', 'FontName', 'FontSize', 'FontShift','NumberFormat','TextRotation',_x000D__x000A_                        'WrapText', 'HorizontalAlignment','VerticalAlignment', 'Height', 'FontColor'_x000D__x000A_                        'BorderAround', 'BorderBottom', 'BorderTop', 'BorderLeft', 'BorderRight', 'BorderColor',_x000D__x000A_                        'BackgroundColor', 'BackgroundPattern', 'PatternColor')) {_x000D__x000A_            if ($PSBoundParameters.ContainsKey($p)) {$params[$p] = $PSBoundParameters[$p]}_x000D__x000A_        }_x000D__x000A_        if ($params.Count) {_x000D__x000A_            $theRange = New-Object -TypeName OfficeOpenXml.ExcelAddress @($Row, $StartColumn, $Row, $endColumn)_x000D__x000A_            Set-ExcelRange -Worksheet $Worksheet -Range $theRange @params_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        if ($PSBoundParameters.ContainsKey('Hide')) {$Worksheet.Row($Row).Hidden = [bool]$Hide}_x000D__x000A_        #return the new data if -passthru was specified._x000D__x000A_        if     ($passThru)     {$Worksheet.Row($Row)}_x000D__x000A_        elseif ($ReturnRange)  {$theRange}_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Alias("Set-Row")]_x000D__x000A_    [OutputType([OfficeOpenXml.ExcelRow],[String])]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseDeclaredVarsMoreThanAssignments', '', Justification="Variables created for script block which may be passed as a parameter, but not used in the script")]_x000D__x000A_    param(_x000D__x000A_        [Parameter(ParameterSetName="Package",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelPackage]$ExcelPackage,_x000D__x000A_        [Parameter(ParameterSetName="Package")]_x000D__x000A_        $WorksheetName = "Sheet1",_x000D__x000A_        [Parameter(ParameterSetName="Sheet",Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.Excelworksheet] $Worksheet,_x000D__x000A_        [Parameter(ValueFromPipeline = $true)]_x000D__x000A_        $Row = 0 ,_x000D__x000A_        [int]$StartColumn,_x000D__x000A_        $Value,_x000D__x000A_        $Heading ,_x000D__x000A_        [Switch]$HeadingBold,_x000D__x000A_        [Int]$HeadingSize ,_x000D__x000A_        [Alias("NFormat")]_x000D__x000A_        $NumberFormat,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderAround,_x000D__x000A_        $BorderColor=[System.Drawing.Color]::Black,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderBottom,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderTop,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderLeft,_x000D__x000A_        [OfficeOpenXml.Style.ExcelBorderStyle]$BorderRight,_x000D__x000A_        $FontColor,_x000D__x000A_        [Switch]$Bold,_x000D__x000A_        [Switch]$Italic,_x000D__x000A_        [Switch]$Underline,_x000D__x000A_        [OfficeOpenXml.Style.ExcelUnderLineType]$UnderLineType = [OfficeOpenXml.Style.ExcelUnderLineType]::Single,_x000D__x000A_        [Switch]$StrikeThru,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignmentFont]$FontShift,_x000D__x000A_        [String]$FontName,_x000D__x000A_        [float]$FontSize,_x000D__x000A_        $BackgroundColor,_x000D__x000A_        [OfficeOpenXml.Style.ExcelFillStyle]$BackgroundPattern = [OfficeOpenXml.Style.ExcelFillStyle]::Solid ,_x000D__x000A_        [Alias("PatternColour")]_x000D__x000A_        $PatternColor,_x000D__x000A_        [Switch]$WrapText,_x000D__x000A_        [OfficeOpenXml.Style.ExcelHorizontalAlignment]$HorizontalAlignment,_x000D__x000A_        [OfficeOpenXml.Style.ExcelVerticalAlignment]$VerticalAlignment,_x000D__x000A_        [ValidateRange(-90, 90)]_x000D__x000A_        [int]$TextRotation ,_x000D__x000A_        [float]$Height,_x000D__x000A_        [Alias('Hidden')]_x000D__x000A_        [Switch]$Hide,_x000D__x000A_        [Switch]$ReturnRange,_x000D__x000A_        [Switch]$PassThru_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        #if we were passed a package object and a worksheet name , get the worksheet._x000D__x000A_        if ($ExcelPackage)  {_x000D__x000A_            if ($ExcelPackage.Workbook.Worksheets.Name -notcontains $WorksheetName) {_x000D__x000A_                throw "The Workbook does not contain a sheet named '$WorksheetName'"_x000D__x000A_            }_x000D__x000A_            else {$Worksheet   = $ExcelPackage.Workbook.Worksheets[$WorksheetName] }_x000D__x000A_        }_x000D__x000A_        #In a script block to build a formula, we may want any of corners or the columnname,_x000D__x000A_        #if row and start column aren't specified assume first unused row, and first column_x000D__x000A_        if (-not $StartColumn) {$StartColumn = $Worksheet.Dimension.Start.Column    }_x000D__x000A_        $startRow                            = $Worksheet.Dimension.Start.Row   + 1_x000D__x000A_        $endColumn                           = $Worksheet.Dimension.End.Column_x000D__x000A_        $endRow                              = $Worksheet.Dimension.End.Row_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($null -eq $Worksheet.Dimension) {Write-Warning "Can't format an empty worksheet."; return}_x000D__x000A_        if      ($Row  -eq 0 ) {$Row         = $endRow + 1 }_x000D__x000A_        Write-Verbose -Message "Updating Row $Row"_x000D__x000A_        #Add a row label_x000D__x000A_        if      ($Heading)     {_x000D__x000A_            $Worksheet.Cells[$Row, $StartColumn].Value = $Heading_x000D__x000A_            if ($HeadingBold) {$Worksheet.Cells[$Row, $StartColumn].Style.Font.Bold = $true}_x000D__x000A_            if ($HeadingSize) {$Worksheet.Cells[$Row, $StartColumn].Style.Font.Size = $HeadingSize}_x000D__x000A_            $StartColumn ++_x000D__x000A_        }_x000D__x000A_        #Fill in the data_x000D__x000A_        if      ($PSBoundParameters.ContainsKey('Value')) {foreach ($column in ($StartColumn..$endColumn)) {_x000D__x000A_            #We might want the column name in a script block_x000D__x000A_            $columnName = (New-Object -TypeName OfficeOpenXml.ExcelCellAddress @(1,$column)).Address -replace "1",""_x000D__x000A_            if  ($Value -is [scriptblock] ) {_x000D__x000A_                #re-create the script block otherwise variables from this function are out of scope._x000D__x000A_                $cellData = &amp; ([scriptblock]::create( $Value ))_x000D__x000A_                if ($null -eq $cellData) {Write-Verbose -Message "Script block evaluates to null."}_x000D__x000A_                else                     {Write-Verbose -Message "Script block evaluates to '$cellData'"}_x000D__x000A_            }_x000D__x000A_            else{$cellData = $Value}_x000D__x000A_            if  ($cellData -match "^=")      { $Worksheet.Cells[$Row, $column].Formula                    = ($cellData -replace '^=','') } #EPPlus likes formulas with no = sign; Excel doesn't care_x000D__x000A_            elseif ( [System.Uri]::IsWellFormedUriString($cellData , [System.UriKind]::Absolute)) {_x000D__x000A_                # Save a hyperlink : internal links can be in the form xl://sheet!E419 (use A1 as goto sheet), or xl://RangeName_x000D__x000A_                if ($cellData -match "^xl://internal/") {_x000D__x000A_                    $referenceAddress = $cellData -replace "^xl://internal/" , ""_x000D__x000A_                    $display          = $referenceAddress -replace "!A1$"    , ""_x000D__x000A_                    $h = New-Object -TypeName OfficeOpenXml.ExcelHyperLink -ArgumentList $referenceAddress , $display_x000D__x000A_                    $Worksheet.Cells[$Row, $Column].HyperLink = $h_x000D__x000A_                }_x000D__x000A_                else {$Worksheet.Cells[$Row, $Column].HyperLink = $cellData }_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.Color.SetColor([System.Drawing.Color]::Blue)_x000D__x000A_                $Worksheet.Cells[$Row, $Column].Style.Font.UnderLine = $true_x000D__x000A_            }_x000D__x000A_            else                             { $Worksheet.Cells[$Row, $column].Value                      = $cellData                    }_x000D__x000A_            if  ($cellData -is [datetime])   { $Worksheet.Cells[$Row, $column].Style.Numberformat.Format  = 'm/d/yy h:mm'                } #This is not a custom format, but a preset recognized as date and localized._x000D__x000A_            if  ($cellData -is [timespan])   { $Worksheet.Cells[$Row, $Column].Style.Numberformat.Format  = '[h]:mm:ss'                  }_x000D__x000A_        }}_x000D__x000A_        #region Apply formatting_x000D__x000A_        $params = @{}_x000D__x000A_        foreach ($p in @('Underline','Bold','Italic','StrikeThru', 'FontName', 'FontSize', 'FontShift','NumberFormat','TextRotation',_x000D__x000A_                        'WrapText', 'HorizontalAlignment','VerticalAlignment', 'Height', 'FontColor'_x000D__x000A_                        'BorderAround', 'BorderBottom', 'BorderTop', 'BorderLeft', 'BorderRight', 'BorderColor',_x000D__x000A_                        'BackgroundColor', 'BackgroundPattern', 'PatternColor')) {_x000D__x000A_            if ($PSBoundParameters.ContainsKey($p)) {$params[$p] = $PSBoundParameters[$p]}_x000D__x000A_        }_x000D__x000A_        if ($params.Count) {_x000D__x000A_            $theRange = New-Object -TypeName OfficeOpenXml.ExcelAddress @($Row, $StartColumn, $Row, $endColumn)_x000D__x000A_            Set-ExcelRange -Worksheet $Worksheet -Range $theRange @params_x000D__x000A_        }_x000D__x000A_        #endregion_x000D__x000A_        if ($PSBoundParameters.ContainsKey('Hide')) {$Worksheet.Row($Row).Hidden = [bool]$Hide}_x000D__x000A_        #return the new data if -passthru was specified._x000D__x000A_        if     ($passThru)     {$Worksheet.Row($Row)}_x000D__x000A_        elseif ($ReturnRange)  {$theRange}_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="4911">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">ExcelRow</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="4912">
        <TNRef RefId="2" />
        <LST>
          <S>OfficeOpenXml.ExcelRow</S>
          <S>System.String</S>
        </LST>
      </Obj>
      <S N="Name">Set-ExcelRow</S>
      <Obj N="CommandType" RefId="4913">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="4914">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="4915">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="4916">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ExcelPackage</S>
            <Obj N="Value" RefId="4917">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExcelPackage</S>
                <S N="ParameterType">OfficeOpenXml.ExcelPackage</S>
                <Obj N="Aliases" RefId="4918">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WorksheetName</S>
            <Obj N="Value" RefId="4919">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WorksheetName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4920">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="4921">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="4922">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Row</S>
            <Obj N="Value" RefId="4923">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Row</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4924">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StartColumn</S>
            <Obj N="Value" RefId="4925">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StartColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4926">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Value</S>
            <Obj N="Value" RefId="4927">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Value</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4928">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Heading</S>
            <Obj N="Value" RefId="4929">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Heading</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4930">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HeadingBold</S>
            <Obj N="Value" RefId="4931">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HeadingBold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4932">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HeadingSize</S>
            <Obj N="Value" RefId="4933">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HeadingSize</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4934">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">NumberFormat</S>
            <Obj N="Value" RefId="4935">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">NumberFormat</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4936">
                  <TNRef RefId="25" />
                  <LST>
                    <S>NFormat</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderAround</S>
            <Obj N="Value" RefId="4937">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderAround</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4938">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderColor</S>
            <Obj N="Value" RefId="4939">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4940">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderBottom</S>
            <Obj N="Value" RefId="4941">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderBottom</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4942">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderTop</S>
            <Obj N="Value" RefId="4943">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderTop</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4944">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderLeft</S>
            <Obj N="Value" RefId="4945">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderLeft</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4946">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BorderRight</S>
            <Obj N="Value" RefId="4947">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BorderRight</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelBorderStyle</S>
                <Obj N="Aliases" RefId="4948">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontColor</S>
            <Obj N="Value" RefId="4949">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4950">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Bold</S>
            <Obj N="Value" RefId="4951">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Bold</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4952">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Italic</S>
            <Obj N="Value" RefId="4953">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Italic</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4954">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Underline</S>
            <Obj N="Value" RefId="4955">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Underline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4956">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnderLineType</S>
            <Obj N="Value" RefId="4957">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnderLineType</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelUnderLineType</S>
                <Obj N="Aliases" RefId="4958">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">StrikeThru</S>
            <Obj N="Value" RefId="4959">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">StrikeThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4960">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontShift</S>
            <Obj N="Value" RefId="4961">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontShift</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignmentFont</S>
                <Obj N="Aliases" RefId="4962">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontName</S>
            <Obj N="Value" RefId="4963">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontName</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="4964">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FontSize</S>
            <Obj N="Value" RefId="4965">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FontSize</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4966">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundColor</S>
            <Obj N="Value" RefId="4967">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4968">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BackgroundPattern</S>
            <Obj N="Value" RefId="4969">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BackgroundPattern</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelFillStyle</S>
                <Obj N="Aliases" RefId="4970">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PatternColor</S>
            <Obj N="Value" RefId="4971">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PatternColor</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="4972">
                  <TNRef RefId="25" />
                  <LST>
                    <S>PatternColour</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WrapText</S>
            <Obj N="Value" RefId="4973">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WrapText</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4974">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HorizontalAlignment</S>
            <Obj N="Value" RefId="4975">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HorizontalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelHorizontalAlignment</S>
                <Obj N="Aliases" RefId="4976">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">VerticalAlignment</S>
            <Obj N="Value" RefId="4977">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">VerticalAlignment</S>
                <S N="ParameterType">OfficeOpenXml.Style.ExcelVerticalAlignment</S>
                <Obj N="Aliases" RefId="4978">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">TextRotation</S>
            <Obj N="Value" RefId="4979">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">TextRotation</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="4980">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Height</S>
            <Obj N="Value" RefId="4981">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Height</S>
                <S N="ParameterType">System.Single</S>
                <Obj N="Aliases" RefId="4982">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Hide</S>
            <Obj N="Value" RefId="4983">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Hide</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4984">
                  <TNRef RefId="25" />
                  <LST>
                    <S>Hidden</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ReturnRange</S>
            <Obj N="Value" RefId="4985">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ReturnRange</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4986">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="4987">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4988">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="4989">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4990">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="4991">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="4992">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="4993">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4994">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="4995">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4996">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="4997">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="4998">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="4999">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5000">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5001">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5002">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5003">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5004">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5005">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5006">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5007">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5008">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5009">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5010">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5011">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5012">
            <TNRef RefId="8" />
            <ToString>-ExcelPackage &lt;ExcelPackage&gt; [-WorksheetName &lt;Object&gt;] [-Row &lt;Object&gt;] [-StartColumn &lt;int&gt;] [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-HeadingBold] [-HeadingSize &lt;int&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;] [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;string&gt;] [-FontSize &lt;float&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;int&gt;] [-Height &lt;float&gt;] [-Hide] [-ReturnRange] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Package</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5013">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5014">
            <TNRef RefId="8" />
            <ToString>-Worksheet &lt;ExcelWorksheet&gt; [-Row &lt;Object&gt;] [-StartColumn &lt;int&gt;] [-Value &lt;Object&gt;] [-Heading &lt;Object&gt;] [-HeadingBold] [-HeadingSize &lt;int&gt;] [-NumberFormat &lt;Object&gt;] [-BorderAround &lt;ExcelBorderStyle&gt;] [-BorderColor &lt;Object&gt;] [-BorderBottom &lt;ExcelBorderStyle&gt;] [-BorderTop &lt;ExcelBorderStyle&gt;] [-BorderLeft &lt;ExcelBorderStyle&gt;] [-BorderRight &lt;ExcelBorderStyle&gt;] [-FontColor &lt;Object&gt;] [-Bold] [-Italic] [-Underline] [-UnderLineType &lt;ExcelUnderLineType&gt;] [-StrikeThru] [-FontShift &lt;ExcelVerticalAlignmentFont&gt;] [-FontName &lt;string&gt;] [-FontSize &lt;float&gt;] [-BackgroundColor &lt;Object&gt;] [-BackgroundPattern &lt;ExcelFillStyle&gt;] [-PatternColor &lt;Object&gt;] [-WrapText] [-HorizontalAlignment &lt;ExcelHorizontalAlignment&gt;] [-VerticalAlignment &lt;ExcelVerticalAlignment&gt;] [-TextRotation &lt;int&gt;] [-Height &lt;float&gt;] [-Hide] [-ReturnRange] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Sheet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5015">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-ExcelRow</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5016">
    <TNRef RefId="0" />
    <ToString>Set-ItResult</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Set-ItResult is used inside the It block to explicitly set the test result_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Sometimes a test shouldn't be executed, sometimes the condition cannot be evaluated._x000D__x000A_    By default such tests would typically fail and produce a big red message._x000D__x000A_    Using Set-ItResult it is possible to set the result from the inside of the It script_x000D__x000A_    block to either inconclusive, pending or skipped._x000D__x000A__x000D__x000A_    As of Pester 5, there is no "Inconclusive" or "Pending" test state, so all tests will now go to state skipped,_x000D__x000A_    however the test result notes will include information about being inconclusive or testing to keep this command_x000D__x000A_    backwards compatible_x000D__x000A__x000D__x000A_    .PARAMETER Inconclusive_x000D__x000A_    **DEPRECATED** Sets the test result to inconclusive. Cannot be used at the same time as -Pending or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Pending_x000D__x000A_    **DEPRECATED** Sets the test result to pending. Cannot be used at the same time as -Inconclusive or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Skipped_x000D__x000A_    Sets the test result to skipped. Cannot be used at the same time as -Inconclusive or -Pending_x000D__x000A__x000D__x000A_    .PARAMETER Because_x000D__x000A_    Similarily to failing tests, skipped and inconclusive tests should have reason. It allows_x000D__x000A_    to provide information to the user why the test is neither successful nor failed._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "Example" {_x000D__x000A_        It "Skipped test" {_x000D__x000A_            Set-ItResult -Skipped -Because "we want it to be skipped"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    the output should be_x000D__x000A__x000D__x000A_    ```_x000D__x000A_    [!] Skipped test is skipped, because we want it to be skipped_x000D__x000A_    Tests completed in 0ms_x000D__x000A_    Tests Passed: 0, Failed: 0, Skipped: 0, Pending: 0, Inconclusive 1_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Inconclusive")][switch]$Inconclusive,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Pending")][switch]$Pending,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Skipped")][switch]$Skipped,_x000D__x000A_        [string]$Because_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-DescribeInProgress -CommandName Set-ItResult_x000D__x000A__x000D__x000A_    $result = $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_    [String]$Message = "is skipped"_x000D__x000A_    if ($Result -ne 'Skipped') {_x000D__x000A_        [String]$Because = if ($Because) {$Result.ToUpper(), $Because -join ': '} else {$Result.ToUpper()}_x000D__x000A_    }_x000D__x000A_    if ($Because) {_x000D__x000A_        [String]$Message += ", because $Because"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($null) {_x000D__x000A_        $File {_x000D__x000A_            [String]$File = $MyInvocation.ScriptName_x000D__x000A_        }_x000D__x000A_        $Line {_x000D__x000A_            [String]$Line = $MyInvocation.ScriptLineNumber_x000D__x000A_        }_x000D__x000A_        $LineText {_x000D__x000A_            [String]$LineText = $MyInvocation.Line.trim()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    throw [Pester.Factory]::CreateErrorRecord(_x000D__x000A_        'PesterTestSkipped', #string errorId_x000D__x000A_        $Message, #string message_x000D__x000A_        $File, #string file_x000D__x000A_        $Line, #string line_x000D__x000A_        $LineText, #string lineText_x000D__x000A_        $false #bool terminating_x000D__x000A_    )_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Set-ItResult is used inside the It block to explicitly set the test result_x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Sometimes a test shouldn't be executed, sometimes the condition cannot be evaluated._x000D__x000A_    By default such tests would typically fail and produce a big red message._x000D__x000A_    Using Set-ItResult it is possible to set the result from the inside of the It script_x000D__x000A_    block to either inconclusive, pending or skipped._x000D__x000A__x000D__x000A_    As of Pester 5, there is no "Inconclusive" or "Pending" test state, so all tests will now go to state skipped,_x000D__x000A_    however the test result notes will include information about being inconclusive or testing to keep this command_x000D__x000A_    backwards compatible_x000D__x000A__x000D__x000A_    .PARAMETER Inconclusive_x000D__x000A_    **DEPRECATED** Sets the test result to inconclusive. Cannot be used at the same time as -Pending or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Pending_x000D__x000A_    **DEPRECATED** Sets the test result to pending. Cannot be used at the same time as -Inconclusive or -Skipped_x000D__x000A__x000D__x000A_    .PARAMETER Skipped_x000D__x000A_    Sets the test result to skipped. Cannot be used at the same time as -Inconclusive or -Pending_x000D__x000A__x000D__x000A_    .PARAMETER Because_x000D__x000A_    Similarily to failing tests, skipped and inconclusive tests should have reason. It allows_x000D__x000A_    to provide information to the user why the test is neither successful nor failed._x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "Example" {_x000D__x000A_        It "Skipped test" {_x000D__x000A_            Set-ItResult -Skipped -Because "we want it to be skipped"_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    the output should be_x000D__x000A__x000D__x000A_    ```_x000D__x000A_    [!] Skipped test is skipped, because we want it to be skipped_x000D__x000A_    Tests completed in 0ms_x000D__x000A_    Tests Passed: 0, Failed: 0, Skipped: 0, Pending: 0, Inconclusive 1_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Set-ItResult_x000D__x000A_#&gt;_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Inconclusive")][switch]$Inconclusive,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Pending")][switch]$Pending,_x000D__x000A_        [Parameter(Mandatory = $false, ParameterSetName = "Skipped")][switch]$Skipped,_x000D__x000A_        [string]$Because_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Assert-DescribeInProgress -CommandName Set-ItResult_x000D__x000A__x000D__x000A_    $result = $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_    [String]$Message = "is skipped"_x000D__x000A_    if ($Result -ne 'Skipped') {_x000D__x000A_        [String]$Because = if ($Because) {$Result.ToUpper(), $Because -join ': '} else {$Result.ToUpper()}_x000D__x000A_    }_x000D__x000A_    if ($Because) {_x000D__x000A_        [String]$Message += ", because $Because"_x000D__x000A_    }_x000D__x000A__x000D__x000A_    switch ($null) {_x000D__x000A_        $File {_x000D__x000A_            [String]$File = $MyInvocation.ScriptName_x000D__x000A_        }_x000D__x000A_        $Line {_x000D__x000A_            [String]$Line = $MyInvocation.ScriptLineNumber_x000D__x000A_        }_x000D__x000A_        $LineText {_x000D__x000A_            [String]$LineText = $MyInvocation.Line.trim()_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    throw [Pester.Factory]::CreateErrorRecord(_x000D__x000A_        'PesterTestSkipped', #string errorId_x000D__x000A_        $Message, #string message_x000D__x000A_        $File, #string file_x000D__x000A_        $Line, #string line_x000D__x000A_        $LineText, #string lineText_x000D__x000A_        $false #bool terminating_x000D__x000A_    )_x000D__x000A_</S>
      <Obj N="Options" RefId="5017">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">ItResult</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5018">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Set-ItResult</S>
      <Obj N="CommandType" RefId="5019">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="5020">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="5021">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5022">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Inconclusive</S>
            <Obj N="Value" RefId="5023">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Inconclusive</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5024">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Pending</S>
            <Obj N="Value" RefId="5025">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Pending</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5026">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Skipped</S>
            <Obj N="Value" RefId="5027">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Skipped</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5028">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Because</S>
            <Obj N="Value" RefId="5029">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Because</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5030">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5031">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5032">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5033">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5034">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5035">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5036">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5037">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5038">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5039">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5040">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5041">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5042">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5043">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5044">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5045">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5046">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5047">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5048">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5049">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5050">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5051">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5052">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5053">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5054">
            <TNRef RefId="8" />
            <ToString>[-Inconclusive] [-Because &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Inconclusive</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5055">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5056">
            <TNRef RefId="8" />
            <ToString>[-Pending] [-Because &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Pending</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5057">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5058">
            <TNRef RefId="8" />
            <ToString>[-Skipped] [-Because &lt;string&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">Skipped</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5059">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-ItResult</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Set-ItResult</S>
    </MS>
  </Obj>
  <Obj RefId="5060">
    <TNRef RefId="0" />
    <ToString>Set-ScriptExtent</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='__AllParameterSets')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, Mandatory)]_x000D__x000A_        [psobject]_x000D__x000A_        $Text,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName='AsString')]_x000D__x000A_        [switch]_x000D__x000A_        $AsString,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName='AsArray')]_x000D__x000A_        [switch]_x000D__x000A_        $AsArray,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent = (Find-Ast -AtCursor).Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $fileContext = $psEditor.GetEditorContext().CurrentFile_x000D__x000A_        $extentList = [System.Collections.Generic.List[Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]]::new()_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Extent -isnot [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]) {_x000D__x000A_            $Extent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(_x000D__x000A_                $fileContext,_x000D__x000A_                $Extent.StartOffset,_x000D__x000A_                $Extent.EndOffset)_x000D__x000A_        }_x000D__x000A_        $extentList.Add($Extent)_x000D__x000A_    }_x000D__x000A_    # Currently this kills the pipeline because we need to keep track and edit all extents for position tracking._x000D__x000A_    # TODO: Consider queueing changes in a static property and adding a PassThru switch._x000D__x000A_    end {_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            # Insert text as a single string expression._x000D__x000A_            AsString {_x000D__x000A_                $Text = "'{0}'" -f $Text.Replace("'", "''")_x000D__x000A_            }_x000D__x000A_            # Create a string expression for each line, separated by a comma._x000D__x000A_            AsArray {_x000D__x000A_                $newLine = [Environment]::NewLine_x000D__x000A_                $Text = "'" + ($Text.Replace("'", "''") -split '\r?\n' -join "',$newLine'") + "'"_x000D__x000A__x000D__x000A_                if ($Text.Split("`n", [StringSplitOptions]::RemoveEmptyEntries).Count -gt 1) {_x000D__x000A_                    $needsIndentFix = $true_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($aExtent in $extentList) {_x000D__x000A_            $aText = $Text_x000D__x000A__x000D__x000A_            if ($needsIndentFix) {_x000D__x000A_                # I'd rather let PSSA handle this when there are more formatting options._x000D__x000A_                $indentOffset = ' ' * ($aExtent.StartColumnNumber - 1)_x000D__x000A_                $aText = $aText -split '\r?\n' `_x000D__x000A_                                -join ([Environment]::NewLine + $indentOffset)_x000D__x000A_            }_x000D__x000A_            $differenceOffset = $aText.Length - $aExtent.Text.Length_x000D__x000A_            $scriptText       = $fileContext.GetText()_x000D__x000A__x000D__x000A_            $fileContext.InsertText($aText, $aExtent)_x000D__x000A__x000D__x000A_            $newText = $scriptText.Remove($aExtent.StartOffset, $aExtent.Text.Length).Insert($aExtent.StartOffset, $aText)_x000D__x000A__x000D__x000A_            $timeoutLoop = 0_x000D__x000A_            while ($fileContext.GetText() -ne $newText) {_x000D__x000A_                Start-Sleep -Milliseconds 30_x000D__x000A_                $timeoutLoop++_x000D__x000A__x000D__x000A_                if ($timeoutLoop -gt 20) {_x000D__x000A_                    $PSCmdlet.WriteDebug(('Timed out waiting for change at range {0}, {1}' -f $aExtent.StartOffset,_x000D__x000A_                                                                                              $aExtent.EndOffset))_x000D__x000A_                    break_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($differenceOffset) {_x000D__x000A_                $extentList.ForEach({_x000D__x000A_                    if ($args[0].StartOffset -ge $aExtent.EndOffset) {_x000D__x000A_                        $args[0].AddOffset($differenceOffset)_x000D__x000A_                    }_x000D__x000A_                })_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">__AllParameterSets</S>
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [CmdletBinding(PositionalBinding=$false, DefaultParameterSetName='__AllParameterSets')]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, Mandatory)]_x000D__x000A_        [psobject]_x000D__x000A_        $Text,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName='AsString')]_x000D__x000A_        [switch]_x000D__x000A_        $AsString,_x000D__x000A__x000D__x000A_        [Parameter(Mandatory, ParameterSetName='AsArray')]_x000D__x000A_        [switch]_x000D__x000A_        $AsArray,_x000D__x000A__x000D__x000A_        [Parameter(ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent = (Find-Ast -AtCursor).Extent_x000D__x000A_    )_x000D__x000A_    begin {_x000D__x000A_        $fileContext = $psEditor.GetEditorContext().CurrentFile_x000D__x000A_        $extentList = [System.Collections.Generic.List[Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]]::new()_x000D__x000A_    }_x000D__x000A_    process {_x000D__x000A_        if ($Extent -isnot [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]) {_x000D__x000A_            $Extent = [Microsoft.PowerShell.EditorServices.Extensions.FileScriptExtent, Microsoft.PowerShell.EditorServices]::FromOffsets(_x000D__x000A_                $fileContext,_x000D__x000A_                $Extent.StartOffset,_x000D__x000A_                $Extent.EndOffset)_x000D__x000A_        }_x000D__x000A_        $extentList.Add($Extent)_x000D__x000A_    }_x000D__x000A_    # Currently this kills the pipeline because we need to keep track and edit all extents for position tracking._x000D__x000A_    # TODO: Consider queueing changes in a static property and adding a PassThru switch._x000D__x000A_    end {_x000D__x000A_        switch ($PSCmdlet.ParameterSetName) {_x000D__x000A_            # Insert text as a single string expression._x000D__x000A_            AsString {_x000D__x000A_                $Text = "'{0}'" -f $Text.Replace("'", "''")_x000D__x000A_            }_x000D__x000A_            # Create a string expression for each line, separated by a comma._x000D__x000A_            AsArray {_x000D__x000A_                $newLine = [Environment]::NewLine_x000D__x000A_                $Text = "'" + ($Text.Replace("'", "''") -split '\r?\n' -join "',$newLine'") + "'"_x000D__x000A__x000D__x000A_                if ($Text.Split("`n", [StringSplitOptions]::RemoveEmptyEntries).Count -gt 1) {_x000D__x000A_                    $needsIndentFix = $true_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        foreach ($aExtent in $extentList) {_x000D__x000A_            $aText = $Text_x000D__x000A__x000D__x000A_            if ($needsIndentFix) {_x000D__x000A_                # I'd rather let PSSA handle this when there are more formatting options._x000D__x000A_                $indentOffset = ' ' * ($aExtent.StartColumnNumber - 1)_x000D__x000A_                $aText = $aText -split '\r?\n' `_x000D__x000A_                                -join ([Environment]::NewLine + $indentOffset)_x000D__x000A_            }_x000D__x000A_            $differenceOffset = $aText.Length - $aExtent.Text.Length_x000D__x000A_            $scriptText       = $fileContext.GetText()_x000D__x000A__x000D__x000A_            $fileContext.InsertText($aText, $aExtent)_x000D__x000A__x000D__x000A_            $newText = $scriptText.Remove($aExtent.StartOffset, $aExtent.Text.Length).Insert($aExtent.StartOffset, $aText)_x000D__x000A__x000D__x000A_            $timeoutLoop = 0_x000D__x000A_            while ($fileContext.GetText() -ne $newText) {_x000D__x000A_                Start-Sleep -Milliseconds 30_x000D__x000A_                $timeoutLoop++_x000D__x000A__x000D__x000A_                if ($timeoutLoop -gt 20) {_x000D__x000A_                    $PSCmdlet.WriteDebug(('Timed out waiting for change at range {0}, {1}' -f $aExtent.StartOffset,_x000D__x000A_                                                                                              $aExtent.EndOffset))_x000D__x000A_                    break_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A__x000D__x000A_            if ($differenceOffset) {_x000D__x000A_                $extentList.ForEach({_x000D__x000A_                    if ($args[0].StartOffset -ge $aExtent.EndOffset) {_x000D__x000A_                        $args[0].AddOffset($differenceOffset)_x000D__x000A_                    }_x000D__x000A_                })_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5061">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">ScriptExtent</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5062">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Set-ScriptExtent</S>
      <Obj N="CommandType" RefId="5063">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="5064">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="5065">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5066">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Text</S>
            <Obj N="Value" RefId="5067">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Text</S>
                <S N="ParameterType">System.Management.Automation.PSObject</S>
                <Obj N="Aliases" RefId="5068">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsString</S>
            <Obj N="Value" RefId="5069">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsString</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5070">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AsArray</S>
            <Obj N="Value" RefId="5071">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AsArray</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5072">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="5073">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="5074">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5075">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5076">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5077">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5078">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5079">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5080">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5081">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5082">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5083">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5084">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5085">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5086">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5087">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5088">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5089">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5090">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5091">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5092">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5093">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5094">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5095">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5096">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5097">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5098">
            <TNRef RefId="8" />
            <ToString>[-Text] &lt;psobject&gt; [-Extent &lt;IScriptExtent&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="5099">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5100">
            <TNRef RefId="8" />
            <ToString>[-Text] &lt;psobject&gt; -AsString [-Extent &lt;IScriptExtent&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">AsString</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5101">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5102">
            <TNRef RefId="8" />
            <ToString>[-Text] &lt;psobject&gt; -AsArray [-Extent &lt;IScriptExtent&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">AsArray</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5103">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-ScriptExtent</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Set-ScriptExtent.md</S>
    </MS>
  </Obj>
  <Obj RefId="5104">
    <TNRef RefId="0" />
    <ToString>Set-WorksheetProtection</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [switch]$IsProtected,_x000D__x000A_        [switch]$AllowAll,_x000D__x000A_        [switch]$BlockSelectLockedCells,_x000D__x000A_        [switch]$BlockSelectUnlockedCells,_x000D__x000A_        [switch]$AllowFormatCells,_x000D__x000A_        [switch]$AllowFormatColumns,_x000D__x000A_        [switch]$AllowFormatRows,_x000D__x000A_        [switch]$AllowInsertColumns,_x000D__x000A_        [switch]$AllowInsertRows,_x000D__x000A_        [switch]$AllowInsertHyperlinks,_x000D__x000A_        [switch]$AllowDeleteColumns,_x000D__x000A_        [switch]$AllowDeleteRows,_x000D__x000A_        [switch]$AllowSort,_x000D__x000A_        [switch]$AllowAutoFilter,_x000D__x000A_        [switch]$AllowPivotTables,_x000D__x000A_        [switch]$BlockEditObject,_x000D__x000A_        [switch]$BlockEditScenarios,_x000D__x000A_        [string]$LockAddress,_x000D__x000A_        [string]$UnLockAddress_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if     ($PSBoundParameters.ContainsKey('isprotected') -and  $IsProtected -eq $false) {$worksheet.Protection.IsProtected  = $false}_x000D__x000A_    elseif ($IsProtected) {_x000D__x000A_        $worksheet.Protection.IsProtected  = $true_x000D__x000A_        foreach ($ParName in @('AllowFormatCells',_x000D__x000A_          'AllowFormatColumns', 'AllowFormatRows',_x000D__x000A_          'AllowInsertColumns', 'AllowInsertRows', 'AllowInsertHyperlinks',_x000D__x000A_          'AllowDeleteColumns', 'AllowDeleteRows',_x000D__x000A_          'AllowSort'         , 'AllowAutoFilter', 'AllowPivotTables')) {_x000D__x000A_               if ($AllowAll -and -not $PSBoundParameters.ContainsKey($Parname)) {$worksheet.Protection.$ParName = $true}_x000D__x000A_               elseif ($PSBoundParameters[$ParName] -eq $true )                      {$worksheet.Protection.$ParName = $true}_x000D__x000A_        }_x000D__x000A_        if ($BlockSelectLockedCells)   {$worksheet.Protection.AllowSelectLockedCells   = $false }_x000D__x000A_        if ($BlockSelectUnlockedCells) {$worksheet.Protection.AllowSelectUnLockedCells = $false }_x000D__x000A_        if ($BlockEditObject)          {$worksheet.Protection.AllowEditObject          = $false }_x000D__x000A_        if ($BlockEditScenarios)       {$worksheet.Protection.AllowEditScenarios       = $false }_x000D__x000A_    }_x000D__x000A_    Else {Write-Warning -Message "You haven't said if you want to turn protection off, or on." }_x000D__x000A__x000D__x000A_    if ($LockAddress) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.cells[$LockAddress] -Locked_x000D__x000A_    }_x000D__x000A_    elseif ($IsProtected) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.Cells -Locked_x000D__x000A_    }_x000D__x000A_    if ($UnlockAddress) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.cells[$UnlockAddress] -Locked:$false_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    [Diagnostics.CodeAnalysis.SuppressMessageAttribute('PSUseShouldProcessForStateChangingfunctions', '',Justification='Does not change system state')]_x000D__x000A_    param (_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [OfficeOpenXml.ExcelWorksheet]$Worksheet ,_x000D__x000A_        [switch]$IsProtected,_x000D__x000A_        [switch]$AllowAll,_x000D__x000A_        [switch]$BlockSelectLockedCells,_x000D__x000A_        [switch]$BlockSelectUnlockedCells,_x000D__x000A_        [switch]$AllowFormatCells,_x000D__x000A_        [switch]$AllowFormatColumns,_x000D__x000A_        [switch]$AllowFormatRows,_x000D__x000A_        [switch]$AllowInsertColumns,_x000D__x000A_        [switch]$AllowInsertRows,_x000D__x000A_        [switch]$AllowInsertHyperlinks,_x000D__x000A_        [switch]$AllowDeleteColumns,_x000D__x000A_        [switch]$AllowDeleteRows,_x000D__x000A_        [switch]$AllowSort,_x000D__x000A_        [switch]$AllowAutoFilter,_x000D__x000A_        [switch]$AllowPivotTables,_x000D__x000A_        [switch]$BlockEditObject,_x000D__x000A_        [switch]$BlockEditScenarios,_x000D__x000A_        [string]$LockAddress,_x000D__x000A_        [string]$UnLockAddress_x000D__x000A_    )_x000D__x000A__x000D__x000A_    if     ($PSBoundParameters.ContainsKey('isprotected') -and  $IsProtected -eq $false) {$worksheet.Protection.IsProtected  = $false}_x000D__x000A_    elseif ($IsProtected) {_x000D__x000A_        $worksheet.Protection.IsProtected  = $true_x000D__x000A_        foreach ($ParName in @('AllowFormatCells',_x000D__x000A_          'AllowFormatColumns', 'AllowFormatRows',_x000D__x000A_          'AllowInsertColumns', 'AllowInsertRows', 'AllowInsertHyperlinks',_x000D__x000A_          'AllowDeleteColumns', 'AllowDeleteRows',_x000D__x000A_          'AllowSort'         , 'AllowAutoFilter', 'AllowPivotTables')) {_x000D__x000A_               if ($AllowAll -and -not $PSBoundParameters.ContainsKey($Parname)) {$worksheet.Protection.$ParName = $true}_x000D__x000A_               elseif ($PSBoundParameters[$ParName] -eq $true )                      {$worksheet.Protection.$ParName = $true}_x000D__x000A_        }_x000D__x000A_        if ($BlockSelectLockedCells)   {$worksheet.Protection.AllowSelectLockedCells   = $false }_x000D__x000A_        if ($BlockSelectUnlockedCells) {$worksheet.Protection.AllowSelectUnLockedCells = $false }_x000D__x000A_        if ($BlockEditObject)          {$worksheet.Protection.AllowEditObject          = $false }_x000D__x000A_        if ($BlockEditScenarios)       {$worksheet.Protection.AllowEditScenarios       = $false }_x000D__x000A_    }_x000D__x000A_    Else {Write-Warning -Message "You haven't said if you want to turn protection off, or on." }_x000D__x000A__x000D__x000A_    if ($LockAddress) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.cells[$LockAddress] -Locked_x000D__x000A_    }_x000D__x000A_    elseif ($IsProtected) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.Cells -Locked_x000D__x000A_    }_x000D__x000A_    if ($UnlockAddress) {_x000D__x000A_        Set-ExcelRange     -Range $Worksheet.cells[$UnlockAddress] -Locked:$false_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5105">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Set</S>
      <S N="Noun">WorksheetProtection</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5106">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Set-WorksheetProtection</S>
      <Obj N="CommandType" RefId="5107">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5108">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5109">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5110">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Worksheet</S>
            <Obj N="Value" RefId="5111">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Worksheet</S>
                <S N="ParameterType">OfficeOpenXml.ExcelWorksheet</S>
                <Obj N="Aliases" RefId="5112">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">IsProtected</S>
            <Obj N="Value" RefId="5113">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">IsProtected</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5114">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowAll</S>
            <Obj N="Value" RefId="5115">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowAll</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5116">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BlockSelectLockedCells</S>
            <Obj N="Value" RefId="5117">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BlockSelectLockedCells</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5118">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BlockSelectUnlockedCells</S>
            <Obj N="Value" RefId="5119">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BlockSelectUnlockedCells</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5120">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowFormatCells</S>
            <Obj N="Value" RefId="5121">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowFormatCells</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5122">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowFormatColumns</S>
            <Obj N="Value" RefId="5123">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowFormatColumns</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5124">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowFormatRows</S>
            <Obj N="Value" RefId="5125">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowFormatRows</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5126">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowInsertColumns</S>
            <Obj N="Value" RefId="5127">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowInsertColumns</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5128">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowInsertRows</S>
            <Obj N="Value" RefId="5129">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowInsertRows</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5130">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowInsertHyperlinks</S>
            <Obj N="Value" RefId="5131">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowInsertHyperlinks</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5132">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowDeleteColumns</S>
            <Obj N="Value" RefId="5133">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowDeleteColumns</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5134">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowDeleteRows</S>
            <Obj N="Value" RefId="5135">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowDeleteRows</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5136">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowSort</S>
            <Obj N="Value" RefId="5137">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowSort</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5138">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowAutoFilter</S>
            <Obj N="Value" RefId="5139">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowAutoFilter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5140">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">AllowPivotTables</S>
            <Obj N="Value" RefId="5141">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">AllowPivotTables</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5142">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BlockEditObject</S>
            <Obj N="Value" RefId="5143">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BlockEditObject</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5144">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BlockEditScenarios</S>
            <Obj N="Value" RefId="5145">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BlockEditScenarios</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5146">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">LockAddress</S>
            <Obj N="Value" RefId="5147">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">LockAddress</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5148">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">UnLockAddress</S>
            <Obj N="Value" RefId="5149">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">UnLockAddress</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5150">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5151">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5152">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5153">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5154">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5155">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5156">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5157">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5158">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5159">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5160">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5161">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5162">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5163">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5164">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5165">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5166">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5167">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5168">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5169">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5170">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5171">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5172">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5173">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5174">
            <TNRef RefId="8" />
            <ToString>[-Worksheet] &lt;ExcelWorksheet&gt; [[-LockAddress] &lt;string&gt;] [[-UnLockAddress] &lt;string&gt;] [-IsProtected] [-AllowAll] [-BlockSelectLockedCells] [-BlockSelectUnlockedCells] [-AllowFormatCells] [-AllowFormatColumns] [-AllowFormatRows] [-AllowInsertColumns] [-AllowInsertRows] [-AllowInsertHyperlinks] [-AllowDeleteColumns] [-AllowDeleteRows] [-AllowSort] [-AllowAutoFilter] [-AllowPivotTables] [-BlockEditObject] [-BlockEditScenarios] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5175">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Set-WorksheetProtection</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5176">
    <TNRef RefId="0" />
    <ToString>Should</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A_    Should provides assertion methods to verify assertions e.g. comparing objects._x000D__x000A_    If assertion is not met the test fails and an exception is thrown._x000D__x000A__x000D__x000A_    Should can be used more than once in the It block if more than one assertion_x000D__x000A_    need to be verified. Each Should keyword needs to be on a separate line._x000D__x000A_    Test will be passed only when all assertion will be met (logical conjuction)._x000D__x000A__x000D__x000A_    .PARAMETER ActualValue_x000D__x000A_    The actual value that was obtained in the test which should be verified against_x000D__x000A_    a expected value._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/assertions_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        BeforeEach { $be = 1 }_x000D__x000A_        It "i1" {_x000D__x000A_            $be = 2_x000D__x000A_        }_x000D__x000A_        AfterEach { Write-Host "AfterEach: $be" }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            $user = Get-User_x000D__x000A_            $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A_            $user |_x000D__x000A_                Should -HaveProperty Name -Value "Jakub" |_x000D__x000A_                Should -HaveProperty Age  -Value 30_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $true | Should -BeFalse_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $a | Should -Be 10_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $planets.Name | Should -Be $Expected_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ValueFromPipeline = $true, ValueFromRemainingArguments = $true)]_x000D__x000A_        [object] $ActualValue_x000D__x000A_    )_x000D__x000A__x000D__x000A_    dynamicparam {_x000D__x000A_        # Figuring out if we are using the old syntax is 'easy'_x000D__x000A_        # we can use $myInvocation.Line to get the surrounding context_x000D__x000A_        $myLine = if ($null -ne $MyInvocation -and 0 -le ($MyInvocation.OffsetInLine - 1)) {_x000D__x000A_            $MyInvocation.Line.Substring($MyInvocation.OffsetInLine - 1)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # A bit of Regex lets us know if the line used the old form_x000D__x000A_        if ($myLine -match '^\s{0,}should\s{1,}(?&lt;Operator&gt;[^\-\@\s]+)')_x000D__x000A_        {_x000D__x000A_            $shouldErrorMsg = "Legacy Should syntax (without dashes) is not supported in Pester 5. Please refer to migration guide at: https://pester.dev/docs/migrations/v3-to-v4"_x000D__x000A_            throw $shouldErrorMsg_x000D__x000A_        } else {_x000D__x000A_            Get-AssertionDynamicParams_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $inputArray = [System.Collections.Generic.List[PSObject]]@()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $inputArray.Add($ActualValue)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        $lineNumber = $MyInvocation.ScriptLineNumber_x000D__x000A_        $lineText = $MyInvocation.Line.TrimEnd([System.Environment]::NewLine)_x000D__x000A_        $file = $MyInvocation.ScriptName_x000D__x000A__x000D__x000A_        $negate = $false_x000D__x000A_        if ($PSBoundParameters.ContainsKey('Not')) {_x000D__x000A_            $negate = [bool]$PSBoundParameters['Not']_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $null = $PSBoundParameters.Remove('ActualValue')_x000D__x000A_        $null = $PSBoundParameters.Remove($PSCmdlet.ParameterSetName)_x000D__x000A_        $null = $PSBoundParameters.Remove('Not')_x000D__x000A__x000D__x000A_        $entry = Get-AssertionOperatorEntry -Name $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_        $shouldThrow = $null_x000D__x000A_        $errorActionIsDefined = $PSBoundParameters.ContainsKey("ErrorAction")_x000D__x000A_        if ($errorActionIsDefined) {_x000D__x000A_            $shouldThrow = 'Stop' -eq $PSBoundParameters["ErrorAction"]_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $shouldThrow -or -not $shouldThrow) {_x000D__x000A_            # we are sure that we either:_x000D__x000A_            #    - should not throw because of explicit ErrorAction, and need to figure out a place where to collect the error_x000D__x000A_            #    - or we don't know what to do yet and need to figure out what to do based on the context and settings_x000D__x000A__x000D__x000A_            # first check if we are in the context of Pester, if not we will always throw:_x000D__x000A_            # this is slightly hacky, here we are reaching out the the caller session state and_x000D__x000A_            # look for $______parameters which we know we are using inside of the Pester runtime to_x000D__x000A_            # keep the current invocation context, when we find it, we are able to add non-terminating_x000D__x000A_            # errors without throwing and terminating the test_x000D__x000A_            $pesterRuntimeInvocationContext = $PSCmdlet.SessionState.PSVariable.GetValue('______parameters')_x000D__x000A_            $isInsidePesterRuntime = $null -ne $pesterRuntimeInvocationContext_x000D__x000A_            if (-not $isInsidePesterRuntime) {_x000D__x000A_                $shouldThrow = $true_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($null -eq $shouldThrow) {_x000D__x000A_                    if ($null -ne $PSCmdlet.SessionState.PSVariable.GetValue('______isInMockParameterFilter')) {_x000D__x000A_                        $shouldThrow = $true_x000D__x000A_                    } else {_x000D__x000A_                        # ErrorAction was not specified explictily, figure out what to do from the configuration_x000D__x000A_                        $shouldThrow = 'Stop' -eq $pesterRuntimeInvocationContext.Configuration.Should.ErrorAction.Value_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # here the $ShouldThrow is set from one of multiple places, either as override from -ErrorAction or_x000D__x000A_                # the settings, or based on the Pester runtime availability_x000D__x000A_                if (-not $shouldThrow) {_x000D__x000A_                    # call back into the context we grabbed from the runtime and add this error without throwing_x000D__x000A_                    $addErrorCallback = {_x000D__x000A_                        param($err)_x000D__x000A_                        $null = $pesterRuntimeInvocationContext.ErrorRecord.Add($err)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $assertionParams = @{_x000D__x000A_            AssertionEntry     = $entry_x000D__x000A_            BoundParameters    = $PSBoundParameters_x000D__x000A_            File               = $file_x000D__x000A_            LineNumber         = $lineNumber_x000D__x000A_            LineText           = $lineText_x000D__x000A_            Negate             = $negate_x000D__x000A_            CallerSessionState = $PSCmdlet.SessionState_x000D__x000A_            ShouldThrow        = $shouldThrow_x000D__x000A_            AddErrorCallback   = $addErrorCallback_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $entry) { return }_x000D__x000A__x000D__x000A_        if ($inputArray.Count -eq 0) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $null_x000D__x000A_        }_x000D__x000A_        elseif ($entry.SupportsArrayInput) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $inputArray.ToArray()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            foreach ($object in $inputArray) {_x000D__x000A_                Invoke-Assertion @assertionParams -ValueToTest $object_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A__x000D__x000A_    .DESCRIPTION_x000D__x000A_    Should is a keyword that is used to define an assertion inside an It block._x000D__x000A_    Should provides assertion methods to verify assertions e.g. comparing objects._x000D__x000A_    If assertion is not met the test fails and an exception is thrown._x000D__x000A__x000D__x000A_    Should can be used more than once in the It block if more than one assertion_x000D__x000A_    need to be verified. Each Should keyword needs to be on a separate line._x000D__x000A_    Test will be passed only when all assertion will be met (logical conjuction)._x000D__x000A__x000D__x000A_    .PARAMETER ActualValue_x000D__x000A_    The actual value that was obtained in the test which should be verified against_x000D__x000A_    a expected value._x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/commands/Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    https://pester.dev/docs/usage/assertions_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Should_x000D__x000A__x000D__x000A_    .LINK_x000D__x000A_    about_Pester_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        BeforeEach { $be = 1 }_x000D__x000A_        It "i1" {_x000D__x000A_            $be = 2_x000D__x000A_        }_x000D__x000A_        AfterEach { Write-Host "AfterEach: $be" }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            $user = Get-User_x000D__x000A_            $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A_            $user |_x000D__x000A_                Should -HaveProperty Name -Value "Jakub" |_x000D__x000A_                Should -HaveProperty Age  -Value 30_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    ```powershell_x000D__x000A_    Describe "d1" {_x000D__x000A_        It "i1" {_x000D__x000A_            Mock Get-Command { }_x000D__x000A_            Get-Command -CommandName abc_x000D__x000A_            Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_    ```_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $true | Should -BeFalse_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $a | Should -Be 10_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    Should -Invoke Get-Command -Times 1 -Exactly_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $user | Should -NotBeNullOrEmpty -ErrorAction Stop_x000D__x000A__x000D__x000A_    .EXAMPLE_x000D__x000A_    $planets.Name | Should -Be $Expected_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param (_x000D__x000A_        [Parameter(ValueFromPipeline = $true, ValueFromRemainingArguments = $true)]_x000D__x000A_        [object] $ActualValue_x000D__x000A_    )_x000D__x000A__x000D__x000A_    dynamicparam {_x000D__x000A_        # Figuring out if we are using the old syntax is 'easy'_x000D__x000A_        # we can use $myInvocation.Line to get the surrounding context_x000D__x000A_        $myLine = if ($null -ne $MyInvocation -and 0 -le ($MyInvocation.OffsetInLine - 1)) {_x000D__x000A_            $MyInvocation.Line.Substring($MyInvocation.OffsetInLine - 1)_x000D__x000A_        }_x000D__x000A__x000D__x000A_        # A bit of Regex lets us know if the line used the old form_x000D__x000A_        if ($myLine -match '^\s{0,}should\s{1,}(?&lt;Operator&gt;[^\-\@\s]+)')_x000D__x000A_        {_x000D__x000A_            $shouldErrorMsg = "Legacy Should syntax (without dashes) is not supported in Pester 5. Please refer to migration guide at: https://pester.dev/docs/migrations/v3-to-v4"_x000D__x000A_            throw $shouldErrorMsg_x000D__x000A_        } else {_x000D__x000A_            Get-AssertionDynamicParams_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A__x000D__x000A_    begin {_x000D__x000A_        $inputArray = [System.Collections.Generic.List[PSObject]]@()_x000D__x000A_    }_x000D__x000A__x000D__x000A_    process {_x000D__x000A_        $inputArray.Add($ActualValue)_x000D__x000A_    }_x000D__x000A__x000D__x000A_    end {_x000D__x000A_        $lineNumber = $MyInvocation.ScriptLineNumber_x000D__x000A_        $lineText = $MyInvocation.Line.TrimEnd([System.Environment]::NewLine)_x000D__x000A_        $file = $MyInvocation.ScriptName_x000D__x000A__x000D__x000A_        $negate = $false_x000D__x000A_        if ($PSBoundParameters.ContainsKey('Not')) {_x000D__x000A_            $negate = [bool]$PSBoundParameters['Not']_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $null = $PSBoundParameters.Remove('ActualValue')_x000D__x000A_        $null = $PSBoundParameters.Remove($PSCmdlet.ParameterSetName)_x000D__x000A_        $null = $PSBoundParameters.Remove('Not')_x000D__x000A__x000D__x000A_        $entry = Get-AssertionOperatorEntry -Name $PSCmdlet.ParameterSetName_x000D__x000A__x000D__x000A_        $shouldThrow = $null_x000D__x000A_        $errorActionIsDefined = $PSBoundParameters.ContainsKey("ErrorAction")_x000D__x000A_        if ($errorActionIsDefined) {_x000D__x000A_            $shouldThrow = 'Stop' -eq $PSBoundParameters["ErrorAction"]_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if ($null -eq $shouldThrow -or -not $shouldThrow) {_x000D__x000A_            # we are sure that we either:_x000D__x000A_            #    - should not throw because of explicit ErrorAction, and need to figure out a place where to collect the error_x000D__x000A_            #    - or we don't know what to do yet and need to figure out what to do based on the context and settings_x000D__x000A__x000D__x000A_            # first check if we are in the context of Pester, if not we will always throw:_x000D__x000A_            # this is slightly hacky, here we are reaching out the the caller session state and_x000D__x000A_            # look for $______parameters which we know we are using inside of the Pester runtime to_x000D__x000A_            # keep the current invocation context, when we find it, we are able to add non-terminating_x000D__x000A_            # errors without throwing and terminating the test_x000D__x000A_            $pesterRuntimeInvocationContext = $PSCmdlet.SessionState.PSVariable.GetValue('______parameters')_x000D__x000A_            $isInsidePesterRuntime = $null -ne $pesterRuntimeInvocationContext_x000D__x000A_            if (-not $isInsidePesterRuntime) {_x000D__x000A_                $shouldThrow = $true_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                if ($null -eq $shouldThrow) {_x000D__x000A_                    if ($null -ne $PSCmdlet.SessionState.PSVariable.GetValue('______isInMockParameterFilter')) {_x000D__x000A_                        $shouldThrow = $true_x000D__x000A_                    } else {_x000D__x000A_                        # ErrorAction was not specified explictily, figure out what to do from the configuration_x000D__x000A_                        $shouldThrow = 'Stop' -eq $pesterRuntimeInvocationContext.Configuration.Should.ErrorAction.Value_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A__x000D__x000A_                # here the $ShouldThrow is set from one of multiple places, either as override from -ErrorAction or_x000D__x000A_                # the settings, or based on the Pester runtime availability_x000D__x000A_                if (-not $shouldThrow) {_x000D__x000A_                    # call back into the context we grabbed from the runtime and add this error without throwing_x000D__x000A_                    $addErrorCallback = {_x000D__x000A_                        param($err)_x000D__x000A_                        $null = $pesterRuntimeInvocationContext.ErrorRecord.Add($err)_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A__x000D__x000A_        $assertionParams = @{_x000D__x000A_            AssertionEntry     = $entry_x000D__x000A_            BoundParameters    = $PSBoundParameters_x000D__x000A_            File               = $file_x000D__x000A_            LineNumber         = $lineNumber_x000D__x000A_            LineText           = $lineText_x000D__x000A_            Negate             = $negate_x000D__x000A_            CallerSessionState = $PSCmdlet.SessionState_x000D__x000A_            ShouldThrow        = $shouldThrow_x000D__x000A_            AddErrorCallback   = $addErrorCallback_x000D__x000A_        }_x000D__x000A__x000D__x000A_        if (-not $entry) { return }_x000D__x000A__x000D__x000A_        if ($inputArray.Count -eq 0) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $null_x000D__x000A_        }_x000D__x000A_        elseif ($entry.SupportsArrayInput) {_x000D__x000A_            Invoke-Assertion @assertionParams -ValueToTest $inputArray.ToArray()_x000D__x000A_        }_x000D__x000A_        else {_x000D__x000A_            foreach ($object in $inputArray) {_x000D__x000A_                Invoke-Assertion @assertionParams -ValueToTest $object_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5177">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5178">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Should</S>
      <Obj N="CommandType" RefId="5179">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">Pester</S>
      <Version N="Version">5.1.1</Version>
      <Obj N="Visibility" RefId="5180">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">Pester</S>
      <Ref N="Module" RefId="503" />
      <Obj N="RemotingCapability" RefId="5181">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5182">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">ActualValue</S>
            <Obj N="Value" RefId="5183">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ActualValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5184">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5185">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5186">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5187">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5188">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5189">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5190">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5191">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5192">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5193">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5194">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5195">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5196">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5197">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5198">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5199">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5200">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5201">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5202">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5203">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5204">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5205">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5206">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Be</S>
            <Obj N="Value" RefId="5207">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Be</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5208">
                  <TNRef RefId="25" />
                  <LST>
                    <S>EQ</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Not</S>
            <Obj N="Value" RefId="5209">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Not</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5210">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExpectedValue</S>
            <Obj N="Value" RefId="5211">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExpectedValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5212">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Because</S>
            <Obj N="Value" RefId="5213">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Because</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5214">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeExactly</S>
            <Obj N="Value" RefId="5215">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeExactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5216">
                  <TNRef RefId="25" />
                  <LST>
                    <S>CEQ</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeGreaterThan</S>
            <Obj N="Value" RefId="5217">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeGreaterThan</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5218">
                  <TNRef RefId="25" />
                  <LST>
                    <S>GT</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeLessOrEqual</S>
            <Obj N="Value" RefId="5219">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeLessOrEqual</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5220">
                  <TNRef RefId="25" />
                  <LST>
                    <S>LE</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeIn</S>
            <Obj N="Value" RefId="5221">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeIn</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5222">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeLessThan</S>
            <Obj N="Value" RefId="5223">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeLessThan</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5224">
                  <TNRef RefId="25" />
                  <LST>
                    <S>LT</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeGreaterOrEqual</S>
            <Obj N="Value" RefId="5225">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeGreaterOrEqual</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5226">
                  <TNRef RefId="25" />
                  <LST>
                    <S>GE</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeLike</S>
            <Obj N="Value" RefId="5227">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeLike</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5228">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeLikeExactly</S>
            <Obj N="Value" RefId="5229">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeLikeExactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5230">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeNullOrEmpty</S>
            <Obj N="Value" RefId="5231">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeNullOrEmpty</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5232">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeOfType</S>
            <Obj N="Value" RefId="5233">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeOfType</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5234">
                  <TNRef RefId="25" />
                  <LST>
                    <S>HaveType</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExpectedType</S>
            <Obj N="Value" RefId="5235">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExpectedType</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5236">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeTrue</S>
            <Obj N="Value" RefId="5237">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeTrue</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5238">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">BeFalse</S>
            <Obj N="Value" RefId="5239">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">BeFalse</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5240">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Contain</S>
            <Obj N="Value" RefId="5241">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Contain</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5242">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Exist</S>
            <Obj N="Value" RefId="5243">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Exist</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5244">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FileContentMatch</S>
            <Obj N="Value" RefId="5245">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FileContentMatch</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5246">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExpectedContent</S>
            <Obj N="Value" RefId="5247">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExpectedContent</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5248">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FileContentMatchExactly</S>
            <Obj N="Value" RefId="5249">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FileContentMatchExactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5250">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">FileContentMatchMultiline</S>
            <Obj N="Value" RefId="5251">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">FileContentMatchMultiline</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5252">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HaveCount</S>
            <Obj N="Value" RefId="5253">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HaveCount</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5254">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HaveParameter</S>
            <Obj N="Value" RefId="5255">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HaveParameter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5256">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ParameterName</S>
            <Obj N="Value" RefId="5257">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ParameterName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5258">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Type</S>
            <Obj N="Value" RefId="5259">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Type</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5260">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">DefaultValue</S>
            <Obj N="Value" RefId="5261">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">DefaultValue</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5262">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Mandatory</S>
            <Obj N="Value" RefId="5263">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Mandatory</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5264">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">HasArgumentCompleter</S>
            <Obj N="Value" RefId="5265">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">HasArgumentCompleter</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5266">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Alias</S>
            <Obj N="Value" RefId="5267">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Alias</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5268">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Match</S>
            <Obj N="Value" RefId="5269">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Match</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5270">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">RegularExpression</S>
            <Obj N="Value" RefId="5271">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">RegularExpression</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5272">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">MatchExactly</S>
            <Obj N="Value" RefId="5273">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">MatchExactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5274">
                  <TNRef RefId="25" />
                  <LST>
                    <S>CMATCH</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Throw</S>
            <Obj N="Value" RefId="5275">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Throw</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5276">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExpectedMessage</S>
            <Obj N="Value" RefId="5277">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExpectedMessage</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5278">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorId</S>
            <Obj N="Value" RefId="5279">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorId</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5280">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExceptionType</S>
            <Obj N="Value" RefId="5281">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExceptionType</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5282">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="5283">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5284">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InvokeVerifiable</S>
            <Obj N="Value" RefId="5285">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InvokeVerifiable</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5286">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Invoke</S>
            <Obj N="Value" RefId="5287">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Invoke</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5288">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CommandName</S>
            <Obj N="Value" RefId="5289">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CommandName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5290">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Times</S>
            <Obj N="Value" RefId="5291">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Times</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5292">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ParameterFilter</S>
            <Obj N="Value" RefId="5293">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ParameterFilter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5294">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ExclusiveFilter</S>
            <Obj N="Value" RefId="5295">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ExclusiveFilter</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5296">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ModuleName</S>
            <Obj N="Value" RefId="5297">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ModuleName</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5298">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Scope</S>
            <Obj N="Value" RefId="5299">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Scope</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5300">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Exactly</S>
            <Obj N="Value" RefId="5301">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Exactly</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5302">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">CallerSessionState</S>
            <Obj N="Value" RefId="5303">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">CallerSessionState</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5304">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">true</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5305">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5306">
            <TNRef RefId="8" />
            <ToString>[[-ActualValue] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5307">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Should</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">Pester</S>
      <S N="HelpUri">https://pester.dev/docs/commands/Should</S>
    </MS>
  </Obj>
  <Obj RefId="5308">
    <TNRef RefId="0" />
    <ToString>starshipc</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Enable starship command autocompletions_x000D__x000A_    #&gt;_x000D__x000A_    Invoke-Expression ((starship completions powershell) -join "`n")_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .SYNOPSIS_x000D__x000A_    Enable starship command autocompletions_x000D__x000A_    #&gt;_x000D__x000A_    Invoke-Expression ((starship completions powershell) -join "`n")_x000D__x000A_</S>
      <Obj N="Options" RefId="5309">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5310">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">starshipc</S>
      <Obj N="CommandType" RefId="5311">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5312">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5313">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5314">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5315">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5316">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5317">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::starshipc</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5318">
    <TNRef RefId="0" />
    <ToString>T:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5319">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5320">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">T:</S>
      <Obj N="CommandType" RefId="5321">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5322">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5323">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5324">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5325">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5326">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5327">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::T:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5328">
    <TNRef RefId="0" />
    <ToString>TabExpansion2</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_&lt;# Options include:_x000D__x000A_     RelativeFilePaths - [bool]_x000D__x000A_         Always resolve file paths using Resolve-Path -Relative._x000D__x000A_         The default is to use some heuristics to guess if relative or absolute is better._x000D__x000A__x000D__x000A_   To customize your own custom options, pass a hashtable to CompleteInput, e.g._x000D__x000A_         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,_x000D__x000A_             @{ RelativeFilePaths=$false }_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]_x000D__x000A_Param(_x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]_x000D__x000A_    [string] $inputScript,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 1)]_x000D__x000A_    [int] $cursorColumn = $inputScript.Length,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]_x000D__x000A_    [System.Management.Automation.Language.Ast] $ast,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]_x000D__x000A_    [System.Management.Automation.Language.Token[]] $tokens,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]_x000D__x000A_    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]_x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]_x000D__x000A_    [Hashtable] $options = $null_x000D__x000A_)_x000D__x000A__x000D__x000A_End_x000D__x000A_{_x000D__x000A_    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')_x000D__x000A_    {_x000D__x000A_        return [System.Management.Automation.CommandCompletion]::CompleteInput(_x000D__x000A_            &lt;#inputScript#&gt;  $inputScript,_x000D__x000A_            &lt;#cursorColumn#&gt; $cursorColumn,_x000D__x000A_            &lt;#options#&gt;      $options)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_        return [System.Management.Automation.CommandCompletion]::CompleteInput(_x000D__x000A_            &lt;#ast#&gt;              $ast,_x000D__x000A_            &lt;#tokens#&gt;           $tokens,_x000D__x000A_            &lt;#positionOfCursor#&gt; $positionOfCursor,_x000D__x000A_            &lt;#options#&gt;          $options)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_        </SBK>
      <B N="CmdletBinding">true</B>
      <S N="DefaultParameterSet">ScriptInputSet</S>
      <S N="Definition">_x000D__x000A_&lt;# Options include:_x000D__x000A_     RelativeFilePaths - [bool]_x000D__x000A_         Always resolve file paths using Resolve-Path -Relative._x000D__x000A_         The default is to use some heuristics to guess if relative or absolute is better._x000D__x000A__x000D__x000A_   To customize your own custom options, pass a hashtable to CompleteInput, e.g._x000D__x000A_         return [System.Management.Automation.CommandCompletion]::CompleteInput($inputScript, $cursorColumn,_x000D__x000A_             @{ RelativeFilePaths=$false }_x000D__x000A_#&gt;_x000D__x000A__x000D__x000A_[CmdletBinding(DefaultParameterSetName = 'ScriptInputSet')]_x000D__x000A_Param(_x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Mandatory = $true, Position = 0)]_x000D__x000A_    [string] $inputScript,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 1)]_x000D__x000A_    [int] $cursorColumn = $inputScript.Length,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 0)]_x000D__x000A_    [System.Management.Automation.Language.Ast] $ast,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 1)]_x000D__x000A_    [System.Management.Automation.Language.Token[]] $tokens,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Mandatory = $true, Position = 2)]_x000D__x000A_    [System.Management.Automation.Language.IScriptPosition] $positionOfCursor,_x000D__x000A__x000D__x000A_    [Parameter(ParameterSetName = 'ScriptInputSet', Position = 2)]_x000D__x000A_    [Parameter(ParameterSetName = 'AstInputSet', Position = 3)]_x000D__x000A_    [Hashtable] $options = $null_x000D__x000A_)_x000D__x000A__x000D__x000A_End_x000D__x000A_{_x000D__x000A_    if ($psCmdlet.ParameterSetName -eq 'ScriptInputSet')_x000D__x000A_    {_x000D__x000A_        return [System.Management.Automation.CommandCompletion]::CompleteInput(_x000D__x000A_            &lt;#inputScript#&gt;  $inputScript,_x000D__x000A_            &lt;#cursorColumn#&gt; $cursorColumn,_x000D__x000A_            &lt;#options#&gt;      $options)_x000D__x000A_    }_x000D__x000A_    else_x000D__x000A_    {_x000D__x000A_        return [System.Management.Automation.CommandCompletion]::CompleteInput(_x000D__x000A_            &lt;#ast#&gt;              $ast,_x000D__x000A_            &lt;#tokens#&gt;           $tokens,_x000D__x000A_            &lt;#positionOfCursor#&gt; $positionOfCursor,_x000D__x000A_            &lt;#options#&gt;          $options)_x000D__x000A_    }_x000D__x000A_}_x000D__x000A_        </S>
      <Obj N="Options" RefId="5329">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5330">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">TabExpansion2</S>
      <Obj N="CommandType" RefId="5331">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5332">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5333">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5334">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">inputScript</S>
            <Obj N="Value" RefId="5335">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">inputScript</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5336">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">cursorColumn</S>
            <Obj N="Value" RefId="5337">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">cursorColumn</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5338">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ast</S>
            <Obj N="Value" RefId="5339">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ast</S>
                <S N="ParameterType">System.Management.Automation.Language.Ast</S>
                <Obj N="Aliases" RefId="5340">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">tokens</S>
            <Obj N="Value" RefId="5341">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">tokens</S>
                <S N="ParameterType">System.Management.Automation.Language.Token[]</S>
                <Obj N="Aliases" RefId="5342">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">positionOfCursor</S>
            <Obj N="Value" RefId="5343">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">positionOfCursor</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptPosition</S>
                <Obj N="Aliases" RefId="5344">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">options</S>
            <Obj N="Value" RefId="5345">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">options</S>
                <S N="ParameterType">System.Collections.Hashtable</S>
                <Obj N="Aliases" RefId="5346">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5347">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5348">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5349">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5350">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5351">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5352">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5353">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5354">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5355">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5356">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5357">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5358">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5359">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5360">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5361">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5362">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5363">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5364">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5365">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5366">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5367">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5368">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5369">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5370">
            <TNRef RefId="8" />
            <ToString>[-inputScript] &lt;string&gt; [[-cursorColumn] &lt;int&gt;] [[-options] &lt;hashtable&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">ScriptInputSet</S>
              <B N="IsDefault">true</B>
              <Obj N="Parameters" RefId="5371">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
          <Obj RefId="5372">
            <TNRef RefId="8" />
            <ToString>[-ast] &lt;Ast&gt; [-tokens] &lt;Token[]&gt; [-positionOfCursor] &lt;IScriptPosition&gt; [[-options] &lt;hashtable&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">AstInputSet</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5373">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::TabExpansion2</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5374">
    <TNRef RefId="0" />
    <ToString>Test-Boolean</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    #[bool]$result  = [bool]::FalseString_x000D__x000A_    [bool]$result  = $false_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[bool]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "bool"_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    #[bool]$result  = [bool]::FalseString_x000D__x000A_    [bool]$result  = $false_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[bool]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "bool"_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5375">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">Boolean</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5376">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Test-Boolean</S>
      <Obj N="CommandType" RefId="5377">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5378">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5379">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5380">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">p</S>
            <Obj N="Value" RefId="5381">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">p</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5382">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5383">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5384">
            <TNRef RefId="8" />
            <ToString>[[-p] &lt;Object&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5385">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-Boolean</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5386">
    <TNRef RefId="0" />
    <ToString>Test-Date</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [datetime]$result  = [datetime]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[datetime]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "datetime"_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [datetime]$result  = [datetime]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[datetime]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "datetime"_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5387">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">Date</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5388">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Test-Date</S>
      <Obj N="CommandType" RefId="5389">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5390">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5391">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5392">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">p</S>
            <Obj N="Value" RefId="5393">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">p</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5394">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5395">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5396">
            <TNRef RefId="8" />
            <ToString>[[-p] &lt;Object&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5397">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-Date</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5398">
    <TNRef RefId="0" />
    <ToString>Test-Integer</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [int]$result  = [int]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[int]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "int"_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [int]$result  = [int]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[int]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "int"_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5399">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">Integer</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5400">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Test-Integer</S>
      <Obj N="CommandType" RefId="5401">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5402">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5403">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5404">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">p</S>
            <Obj N="Value" RefId="5405">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">p</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5406">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5407">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5408">
            <TNRef RefId="8" />
            <ToString>[[-p] &lt;Object&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5409">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-Integer</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5410">
    <TNRef RefId="0" />
    <ToString>Test-Number</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [double]$result  = [double]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[double]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "double"_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [double]$result  = [double]::MinValue_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=[double]::TryParse($p, [ref]$result)_x000D__x000A_        DataType = "double"_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5411">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">Number</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5412">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Test-Number</S>
      <Obj N="CommandType" RefId="5413">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5414">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5415">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5416">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">p</S>
            <Obj N="Value" RefId="5417">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">p</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5418">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5419">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5420">
            <TNRef RefId="8" />
            <ToString>[[-p] &lt;Object&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5421">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-Number</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5422">
    <TNRef RefId="0" />
    <ToString>Test-ScriptExtent</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [OutputType([bool], ParameterSetName='__AllParameterSets')]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent], ParameterSetName='PassThru')]_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Inside,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $After,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Before,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='PassThru')]_x000D__x000A_        [switch]_x000D__x000A_        $PassThru_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-not $Extent) { return $false }_x000D__x000A_        $passes = (-not $After  -or  $Extent.StartOffset -gt $After.EndOffset)    -and_x000D__x000A_                  (-not $Before -or  $Extent.EndOffset   -lt $Before.StartOffset) -and_x000D__x000A_                  (-not $Inside -or ($Extent.StartOffset -ge $Inside.StartOffset  -and_x000D__x000A_                                     $Extent.EndOffset   -le $Inside.EndOffset))_x000D__x000A__x000D__x000A_        if (-not $PassThru.IsPresent) { return $passes }_x000D__x000A__x000D__x000A_        if ($passes) {_x000D__x000A_            $Extent # yield_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    &lt;#_x000D__x000A_    .EXTERNALHELP ..\PowerShellEditorServices.Commands-help.xml_x000D__x000A_    #&gt;_x000D__x000A_    [OutputType([bool], ParameterSetName='__AllParameterSets')]_x000D__x000A_    [OutputType([System.Management.Automation.Language.IScriptExtent], ParameterSetName='PassThru')]_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Position=0, ValueFromPipeline, ValueFromPipelineByPropertyName)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Extent,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Inside,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $After,_x000D__x000A__x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [System.Management.Automation.Language.IScriptExtent]_x000D__x000A_        $Before,_x000D__x000A__x000D__x000A_        [Parameter(ParameterSetName='PassThru')]_x000D__x000A_        [switch]_x000D__x000A_        $PassThru_x000D__x000A_    )_x000D__x000A_    process {_x000D__x000A_        if (-not $Extent) { return $false }_x000D__x000A_        $passes = (-not $After  -or  $Extent.StartOffset -gt $After.EndOffset)    -and_x000D__x000A_                  (-not $Before -or  $Extent.EndOffset   -lt $Before.StartOffset) -and_x000D__x000A_                  (-not $Inside -or ($Extent.StartOffset -ge $Inside.StartOffset  -and_x000D__x000A_                                     $Extent.EndOffset   -le $Inside.EndOffset))_x000D__x000A__x000D__x000A_        if (-not $PassThru.IsPresent) { return $passes }_x000D__x000A__x000D__x000A_        if ($passes) {_x000D__x000A_            $Extent # yield_x000D__x000A_        }_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5423">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">ScriptExtent</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5424">
        <TNRef RefId="2" />
        <LST>
          <S>System.Boolean</S>
          <S>System.Management.Automation.Language.IScriptExtent</S>
        </LST>
      </Obj>
      <S N="Name">Test-ScriptExtent</S>
      <Obj N="CommandType" RefId="5425">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="5426">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="5427">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5428">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Extent</S>
            <Obj N="Value" RefId="5429">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Extent</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="5430">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Inside</S>
            <Obj N="Value" RefId="5431">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Inside</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="5432">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">After</S>
            <Obj N="Value" RefId="5433">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">After</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="5434">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Before</S>
            <Obj N="Value" RefId="5435">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Before</S>
                <S N="ParameterType">System.Management.Automation.Language.IScriptExtent</S>
                <Obj N="Aliases" RefId="5436">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PassThru</S>
            <Obj N="Value" RefId="5437">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PassThru</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5438">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5439">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5440">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5441">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5442">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5443">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5444">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5445">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5446">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5447">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5448">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5449">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5450">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5451">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5452">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5453">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5454">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5455">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5456">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5457">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5458">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5459">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5460">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5461">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5462">
            <TNRef RefId="8" />
            <ToString>[[-Extent] &lt;IScriptExtent&gt;] [-Inside &lt;IScriptExtent&gt;] [-After &lt;IScriptExtent&gt;] [-Before &lt;IScriptExtent&gt;] [-PassThru] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">PassThru</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5463">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-ScriptExtent</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Test-ScriptExtent.md</S>
    </MS>
  </Obj>
  <Obj RefId="5464">
    <TNRef RefId="0" />
    <ToString>Test-String</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=$p -is [string]_x000D__x000A_        DataType = "string"_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    param($p)_x000D__x000A__x000D__x000A_    [PSCustomObject]@{_x000D__x000A_        Test=$p -is [string]_x000D__x000A_        DataType = "string"_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5465">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Test</S>
      <S N="Noun">String</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5466">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Test-String</S>
      <Obj N="CommandType" RefId="5467">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5468">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5469">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5470">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">p</S>
            <Obj N="Value" RefId="5471">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">p</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5472">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5473">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5474">
            <TNRef RefId="8" />
            <ToString>[[-p] &lt;Object&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5475">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Test-String</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5476">
    <TNRef RefId="0" />
    <ToString>testprompt</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    Import-Module "$HOME\Projects\PowerPrompt\PowerPrompt\PowerPrompt.psd1" -Force_x000D__x000A_    Get-PowerPromptDefaultTheme_x000D__x000A_</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    Import-Module "$HOME\Projects\PowerPrompt\PowerPrompt\PowerPrompt.psd1" -Force_x000D__x000A_    Get-PowerPromptDefaultTheme_x000D__x000A_</S>
      <Obj N="Options" RefId="5477">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5478">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">testprompt</S>
      <Obj N="CommandType" RefId="5479">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5480">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5481">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5482">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5483">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5484">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5485">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::testprompt</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5486">
    <TNRef RefId="0" />
    <ToString>U:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5487">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5488">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">U:</S>
      <Obj N="CommandType" RefId="5489">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5490">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5491">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5492">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5493">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5494">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5495">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::U:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5496">
    <TNRef RefId="0" />
    <ToString>Unregister-EditorCommand</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Name_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process_x000D__x000A_    {_x000D__x000A_        Write-Verbose "Unregistering command '$Name'"_x000D__x000A_        $psEditor.UnregisterCommand($Name);_x000D__x000A_    }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param(_x000D__x000A_        [Parameter(Mandatory=$true)]_x000D__x000A_        [ValidateNotNullOrEmpty()]_x000D__x000A_        [string]$Name_x000D__x000A_    )_x000D__x000A__x000D__x000A_    Process_x000D__x000A_    {_x000D__x000A_        Write-Verbose "Unregistering command '$Name'"_x000D__x000A_        $psEditor.UnregisterCommand($Name);_x000D__x000A_    }_x000D__x000A_</S>
      <Obj N="Options" RefId="5497">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Unregister</S>
      <S N="Noun">EditorCommand</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5498">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Unregister-EditorCommand</S>
      <Obj N="CommandType" RefId="5499">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">PowerShellEditorServices.Commands</S>
      <Version N="Version">0.2.0</Version>
      <Obj N="Visibility" RefId="5500">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">PowerShellEditorServices.Commands</S>
      <Ref N="Module" RefId="975" />
      <Obj N="RemotingCapability" RefId="5501">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5502">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">Name</S>
            <Obj N="Value" RefId="5503">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Name</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5504">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5505">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5506">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5507">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5508">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5509">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5510">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5511">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5512">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5513">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5514">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5515">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5516">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5517">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5518">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5519">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5520">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5521">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5522">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5523">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5524">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5525">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5526">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5527">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5528">
            <TNRef RefId="8" />
            <ToString>[-Name] &lt;string&gt; [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5529">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Unregister-EditorCommand</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">PowerShellEditorServices.Commands</S>
      <S N="HelpUri">https://github.com/PowerShell/PowerShellEditorServices/tree/master/module/docs/Unregister-EditorCommand.md</S>
    </MS>
  </Obj>
  <Obj RefId="5530">
    <TNRef RefId="0" />
    <ToString>Update-FirstObjectProperties</ToString>
    <Props>
      <SBK N="ScriptBlock">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param   (_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A_    begin   {   $union = New-Object -TypeName System.Collections.ArrayList }_x000D__x000A_    process {_x000D__x000A_        try {_x000D__x000A_            If ($union.Count -eq 0)  {_x000D__x000A_                [void]$union.Add($InputObject)_x000D__x000A_                $memberNames = (Get-Member -InputObject $InputObject -MemberType Properties).Name_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                foreach ($propName in (Get-Member -InputObject $InputObject -MemberType Properties).Name) {_x000D__x000A_                    if  ($propName -notin $memberNames) {_x000D__x000A_                        Add-Member -InputObject $Union[0] -MemberType NoteProperty -Name $propName -Value $Null_x000D__x000A_                        $memberNames += $propName_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                [void]$Union.Add($InputObject)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed updating the properties of the first object: $_"}_x000D__x000A_    }_x000D__x000A_    end     {   $Union   }_x000D__x000A_</SBK>
      <B N="CmdletBinding">true</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">_x000D__x000A_    [CmdletBinding()]_x000D__x000A_    param   (_x000D__x000A_        [Parameter(ValueFromPipeline=$true)]_x000D__x000A_        $InputObject_x000D__x000A_    )_x000D__x000A_    begin   {   $union = New-Object -TypeName System.Collections.ArrayList }_x000D__x000A_    process {_x000D__x000A_        try {_x000D__x000A_            If ($union.Count -eq 0)  {_x000D__x000A_                [void]$union.Add($InputObject)_x000D__x000A_                $memberNames = (Get-Member -InputObject $InputObject -MemberType Properties).Name_x000D__x000A_            }_x000D__x000A_            else {_x000D__x000A_                foreach ($propName in (Get-Member -InputObject $InputObject -MemberType Properties).Name) {_x000D__x000A_                    if  ($propName -notin $memberNames) {_x000D__x000A_                        Add-Member -InputObject $Union[0] -MemberType NoteProperty -Name $propName -Value $Null_x000D__x000A_                        $memberNames += $propName_x000D__x000A_                    }_x000D__x000A_                }_x000D__x000A_                [void]$Union.Add($InputObject)_x000D__x000A_            }_x000D__x000A_        }_x000D__x000A_        catch {throw "Failed updating the properties of the first object: $_"}_x000D__x000A_    }_x000D__x000A_    end     {   $Union   }_x000D__x000A_</S>
      <Obj N="Options" RefId="5531">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb">Update</S>
      <S N="Noun">FirstObjectProperties</S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5532">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Update-FirstObjectProperties</S>
      <Obj N="CommandType" RefId="5533">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source">ImportExcel</S>
      <Version N="Version">7.1.1</Version>
      <Obj N="Visibility" RefId="5534">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName">ImportExcel</S>
      <Ref N="Module" RefId="20" />
      <Obj N="RemotingCapability" RefId="5535">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5536">
        <TNRef RefId="6" />
        <DCT>
          <En>
            <S N="Key">InputObject</S>
            <Obj N="Value" RefId="5537">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InputObject</S>
                <S N="ParameterType">System.Object</S>
                <Obj N="Aliases" RefId="5538">
                  <TNRef RefId="25" />
                  <LST />
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Verbose</S>
            <Obj N="Value" RefId="5539">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Verbose</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5540">
                  <TNRef RefId="25" />
                  <LST>
                    <S>vb</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">Debug</S>
            <Obj N="Value" RefId="5541">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">Debug</S>
                <S N="ParameterType">System.Management.Automation.SwitchParameter</S>
                <Obj N="Aliases" RefId="5542">
                  <TNRef RefId="25" />
                  <LST>
                    <S>db</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">true</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorAction</S>
            <Obj N="Value" RefId="5543">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5544">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ea</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningAction</S>
            <Obj N="Value" RefId="5545">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5546">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationAction</S>
            <Obj N="Value" RefId="5547">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationAction</S>
                <S N="ParameterType">System.Management.Automation.ActionPreference</S>
                <Obj N="Aliases" RefId="5548">
                  <TNRef RefId="25" />
                  <LST>
                    <S>infa</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">ErrorVariable</S>
            <Obj N="Value" RefId="5549">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">ErrorVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5550">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ev</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">WarningVariable</S>
            <Obj N="Value" RefId="5551">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">WarningVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5552">
                  <TNRef RefId="25" />
                  <LST>
                    <S>wv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">InformationVariable</S>
            <Obj N="Value" RefId="5553">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">InformationVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5554">
                  <TNRef RefId="25" />
                  <LST>
                    <S>iv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutVariable</S>
            <Obj N="Value" RefId="5555">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5556">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ov</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">OutBuffer</S>
            <Obj N="Value" RefId="5557">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">OutBuffer</S>
                <S N="ParameterType">System.Int32</S>
                <Obj N="Aliases" RefId="5558">
                  <TNRef RefId="25" />
                  <LST>
                    <S>ob</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
          <En>
            <S N="Key">PipelineVariable</S>
            <Obj N="Value" RefId="5559">
              <TNRef RefId="29" />
              <ToString>System.Management.Automation.ParameterMetadata</ToString>
              <Props>
                <S N="Name">PipelineVariable</S>
                <S N="ParameterType">System.String</S>
                <Obj N="Aliases" RefId="5560">
                  <TNRef RefId="25" />
                  <LST>
                    <S>pv</S>
                  </LST>
                </Obj>
                <B N="IsDynamic">false</B>
                <B N="SwitchParameter">false</B>
              </Props>
            </Obj>
          </En>
        </DCT>
      </Obj>
      <Obj N="ParameterSets" RefId="5561">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5562">
            <TNRef RefId="8" />
            <ToString>[[-InputObject] &lt;Object&gt;] [&lt;CommonParameters&gt;]</ToString>
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5563">
                <TNRef RefId="9" />
                <LST>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                  <S>System.Management.Automation.CommandParameterInfo</S>
                </LST>
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Update-FirstObjectProperties</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace">ImportExcel</S>
      <S N="HelpUri">https://github.com/dfinke/ImportExcel</S>
    </MS>
  </Obj>
  <Obj RefId="5564">
    <TNRef RefId="0" />
    <ToString>V:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5565">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5566">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">V:</S>
      <Obj N="CommandType" RefId="5567">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5568">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5569">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5570">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5571">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5572">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5573">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::V:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5574">
    <TNRef RefId="0" />
    <ToString>W:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5575">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5576">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">W:</S>
      <Obj N="CommandType" RefId="5577">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5578">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5579">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5580">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5581">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5582">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5583">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::W:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5584">
    <TNRef RefId="0" />
    <ToString>X:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5585">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5586">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">X:</S>
      <Obj N="CommandType" RefId="5587">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5588">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5589">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5590">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5591">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5592">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5593">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::X:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5594">
    <TNRef RefId="0" />
    <ToString>Y:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5595">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5596">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Y:</S>
      <Obj N="CommandType" RefId="5597">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5598">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5599">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5600">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5601">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5602">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5603">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Y:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
  <Obj RefId="5604">
    <TNRef RefId="0" />
    <ToString>Z:</ToString>
    <Props>
      <SBK N="ScriptBlock">Set-Location $MyInvocation.MyCommand.Name</SBK>
      <B N="CmdletBinding">false</B>
      <Nil N="DefaultParameterSet" />
      <S N="Definition">Set-Location $MyInvocation.MyCommand.Name</S>
      <Obj N="Options" RefId="5605">
        <TNRef RefId="1" />
        <ToString>None</ToString>
        <I32>0</I32>
      </Obj>
      <Nil N="Description" />
      <S N="Verb"></S>
      <S N="Noun"></S>
      <Nil N="HelpFile" />
      <Obj N="OutputType" RefId="5606">
        <TNRef RefId="2" />
        <LST />
      </Obj>
      <S N="Name">Z:</S>
      <Obj N="CommandType" RefId="5607">
        <TNRef RefId="3" />
        <ToString>Function</ToString>
        <I32>2</I32>
      </Obj>
      <S N="Source"></S>
      <Nil N="Version" />
      <Obj N="Visibility" RefId="5608">
        <TNRef RefId="4" />
        <ToString>Public</ToString>
        <I32>0</I32>
      </Obj>
      <S N="ModuleName"></S>
      <Nil N="Module" />
      <Obj N="RemotingCapability" RefId="5609">
        <TNRef RefId="5" />
        <ToString>PowerShell</ToString>
        <I32>1</I32>
      </Obj>
      <Obj N="Parameters" RefId="5610">
        <TNRef RefId="6" />
        <DCT />
      </Obj>
      <Obj N="ParameterSets" RefId="5611">
        <TNRef RefId="7" />
        <LST>
          <Obj RefId="5612">
            <TNRef RefId="8" />
            <ToString />
            <Props>
              <S N="Name">__AllParameterSets</S>
              <B N="IsDefault">false</B>
              <Obj N="Parameters" RefId="5613">
                <TNRef RefId="9" />
                <LST />
              </Obj>
            </Props>
          </Obj>
        </LST>
      </Obj>
    </Props>
    <MS>
      <S N="PSPath">Microsoft.PowerShell.Core\Function::Z:</S>
      <Ref N="PSDrive" RefId="10" />
      <Ref N="PSProvider" RefId="11" />
      <B N="PSIsContainer">false</B>
      <S N="Namespace"></S>
      <S N="HelpUri"></S>
    </MS>
  </Obj>
</Objs>